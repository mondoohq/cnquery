// Code generated by "featureflags -type=Feature"; DO NOT EDIT.

package cnquery

const (
	// Resolve similar queries the same way. If 100 assets have the same dependent queries and overrides, they create the same resolved plan. Cannot be used with old resolver at the same time for asset.
	// start:  v3.x, available at v4.x, default at v5.x
	// end: v6.0 => default now, no need to set it anymore
	// status: builtin
	MassQueries Feature = 1

	// Allows MQL to use variable references across blocks. Fully changes the compiled code.
	// start:  v5.x
	// end: v7.0
	// status: builtin
	PiperCode Feature = 2

	// Only boolean results are checked when evaluating a query for success
	// start:  v6.x
	// end: v8.0
	// status: builtin
	BoolAssertions Feature = 3

	// Enables discovery of Kubernetes cluster nodes as individual assets
	// start:  v6.12
	// end: unknown
	// status: sunset, should be done via discovery code instead
	K8sNodeDiscovery Feature = 4

	// Add context to assets for e.g. Terraform
	// start:  v7.0
	// end: v12.0
	// status: new
	MQLAssetContext Feature = 5

	// Errors are treated as failures, see https://www.notion.so/mondoo/Errors-and-Scoring-5dc554348aad4118a1dbf35123368329
	// start:  v8.x
	// end: v9.0
	// status: sunset, we never really used this
	ErrorsAsFailures Feature = 6

	// Stores recording-like data with upstream, can still be controlled by the server
	// start:  v10.x
	// end: v11.0
	// status: default
	StoreResourcesData Feature = 7

	// Enables fine-grained assets discovery
	// start:  v11.x
	// end: v12.0
	// status: sunset, this is now managed via --discover
	FineGrainedAssets Feature = 8

	// Use serial number as the asset ID
	// start:  v11.x
	// end: v12.0
	// status: default
	SerialNumberAsID Feature = 9

	// Forces shell completion to be enabled (for windows)
	// start:  v11.x
	// status: default
	ForceShellCompletion Feature = 10

	// Automatically add resource context to results and prints it
	// start:  v11.x
	// status: default
	ResourceContext Feature = 11

	// Fail if no entrypoints or datapoints are found in the query.
	// start:  v11.x
	// status: new, we still need to fix a few more tests
	FailIfNoEntryPoints Feature = 12

	// 
	// start:  v12.x
	// status: new
	UploadResultsV2 Feature = 13

	// Placeholder to indicate how many feature flags exist. This number
	// is changing with every new feature and cannot be used as a featureflag itself.
	MAX_FEATURES byte = 14
)

var FeaturesValue = map[string]Feature{
	"MassQueries": MassQueries,
	"PiperCode": PiperCode,
	"BoolAssertions": BoolAssertions,
	"K8sNodeDiscovery": K8sNodeDiscovery,
	"MQLAssetContext": MQLAssetContext,
	"ErrorsAsFailures": ErrorsAsFailures,
	"StoreResourcesData": StoreResourcesData,
	"FineGrainedAssets": FineGrainedAssets,
	"SerialNumberAsID": SerialNumberAsID,
	"ForceShellCompletion": ForceShellCompletion,
	"ResourceContext": ResourceContext,
	"FailIfNoEntryPoints": FailIfNoEntryPoints,
	"UploadResultsV2": UploadResultsV2,
}

// DefaultFeatures are a set of default flags that are active
var DefaultFeatures = Features{
	byte(StoreResourcesData),
	byte(SerialNumberAsID),
	byte(ForceShellCompletion),
	byte(ResourceContext),
}

// AvailableFeatures are a set of flags that can be activated
var AvailableFeatures = Features{
	byte(MQLAssetContext),
	byte(UploadResultsV2),
}
