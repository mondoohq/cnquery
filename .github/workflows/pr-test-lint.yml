name: Code Test

## Only trigger tests if source is changing
on:
  push:
    paths:
      - '**.go'
      - '**.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/pr-test-lint.yml'

jobs:
  # Check if there is any dirty change for go mod tidy
  go-mod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: Check go mod
        run: |
          go mod tidy
          git diff --exit-code go.mod

  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - run: make providers/build/core

      - run: make test/generate

      - name: Run protolint
        run: make test/lint/proto

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: latest

  go-test:
    runs-on: self-hosted
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: 'Set up gcloud CLI'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/.providers" >> $GITHUB_ENV
      - name: Display Provider PAth
        run: echo $PROVIDERS_PATH

      - name: Test cnquery
        run: make test/go/plain-ci

      - name: Test Providers
        run: make providers/test

      - uses: actions/upload-artifact@v4  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: '*.xml'

  go-test-integration:
    runs-on: self-hosted
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: 'Set up gcloud CLI'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/.providers" >> $GITHUB_ENV
      - name: Display Provider PAth
        run: echo $PROVIDERS_PATH

      - name: Test cnquery CLI and Providers
        run: make test/integration

      - uses: actions/upload-artifact@v4  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results-cli
          path: report.xml

  go-bench:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false
      - name: Run benchmark
        run: make benchmark/go | tee benchmark.txt

        # Remove log statements and leave just the benchmark results
      - name: Cleanup benchmark file
        run: sed -i -n '/goos:/,$p' benchmark.txt

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache/restore@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-benchmark
      # Run `github-action-benchmark` action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: benchmark.txt
          # Where the previous data file is stored
          external-data-json-path: ./cache/benchmark-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          summary-always: true
          fail-on-alert: true
          save-data-file: false
          alert-threshold: '150%'
          
  event_file:
    name: "Store event file"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: Event File
        path: ${{ github.event_path }}
