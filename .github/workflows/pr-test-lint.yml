name: Code Test

## Only trigger tests if source is changing
on:
  push:
    paths:
      - '**.go'
      - '**.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/pr-test-lint.yml'

jobs:
  # Check if there is any dirty change for go mod tidy
  go-mod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: Check go mod
        run: |
          go mod tidy
          git diff --exit-code go.mod

  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - run: make providers/build/core

      - run: make test/generate

      - name: Run protolint
        run: make test/lint/proto

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest

  go-test:
    runs-on: self-hosted
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: 'Set up gcloud CLI'
        uses: 'google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db' # v3.0.1

      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/.providers" >> $GITHUB_ENV
      - name: Display Provider PAth
        run: echo $PROVIDERS_PATH

      - name: Test cnquery
        run: make test/go/plain-ci

      - name: Test Providers
        run: make providers/test

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: '*.xml'

  go-test-integration:
    runs-on: self-hosted
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: 'Set up gcloud CLI'
        uses: 'google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db' # v3.0.1

      - name: Set provider env
        run: echo "PROVIDERS_PATH=${PWD}/.providers" >> $GITHUB_ENV
      - name: Display Provider PAth
        run: echo $PROVIDERS_PATH

      - name: Test cnquery CLI and Providers
        run: make test/integration

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results-cli
          path: report.xml

  go-race:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false

      - name: Run race detector on selected packages
        run: make race/go

  go-bench:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false
      - name: Run benchmark
        run: make benchmark/go | tee benchmark.txt

        # Remove log statements and leave just the benchmark results
      - name: Cleanup benchmark file
        run: sed -i -n '/goos:/,$p' benchmark.txt

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-benchmark-
      # Run `github-action-benchmark` action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@4bdcce38c94cec68da58d012ac24b7b1155efe8b # v1.20.7
        with:
          # What benchmark tool the output.txt came from
          tool: 'go'
          # Where the output from the benchmark tool is stored
          output-file-path: benchmark.txt
          # Where the previous data file is stored
          external-data-json-path: ./cache/benchmark-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          summary-always: true
          fail-on-alert: true
          save-data-file: false
          alert-threshold: '150%'

  go-auto-approve:
    runs-on: ubuntu-latest
    needs: [golangci-lint, go-test, go-test-integration, go-bench, go-mod]
    # For now, we only auto approve and merge provider release PRs created by mondoo-tools.
    # We have to check the commit author, because the PR is created by "github-actions[bot]"
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions#startswith
    if: ${{ (startsWith(github.ref, 'refs/heads/version/providers_update_') || startsWith(github.ref, 'refs/heads/version/deps_update_')) && github.event.commits[0].author.username == 'mondoo-tools' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # figure out the PR for this commit
      - uses: cloudposse-github-actions/get-pr@ba7d9e7db690abb3c5b84f4337cd51e75f7cfb71 # v2.0.0
        id: pr
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          filterOutClosed: true
          filterOutDraft: true
      # fetch a token for the mondoo-mergebot app
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.MONDOO_MERGEBOT_APP_ID }}
          private-key: ${{ secrets.MONDOO_MERGEBOT_APP_PRIVATE_KEY }}
      # automerge using bot token
      - name: Approve and merge a PR
        run: |
          gh pr review ${{ steps.pr.outputs.number }} --approve
          gh pr merge ${{ steps.pr.outputs.number }} --squash
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          
  event_file:
    name: "Store event file"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
      with:
        name: Event File
        path: ${{ github.event_path }}
