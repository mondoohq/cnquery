// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: mvd.proto

package mvd

import (
	cvss "go.mondoo.com/cnquery/providers-sdk/v1/upstream/mvd/cvss"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdvisoryState int32

const (
	AdvisoryState_RELEASED     AdvisoryState = 0
	AdvisoryState_PENDING      AdvisoryState = 1
	AdvisoryState_IGNORED      AdvisoryState = 2
	AdvisoryState_NOT_AFFECTED AdvisoryState = 3
)

// Enum value maps for AdvisoryState.
var (
	AdvisoryState_name = map[int32]string{
		0: "RELEASED",
		1: "PENDING",
		2: "IGNORED",
		3: "NOT_AFFECTED",
	}
	AdvisoryState_value = map[string]int32{
		"RELEASED":     0,
		"PENDING":      1,
		"IGNORED":      2,
		"NOT_AFFECTED": 3,
	}
)

func (x AdvisoryState) Enum() *AdvisoryState {
	p := new(AdvisoryState)
	*p = x
	return p
}

func (x AdvisoryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvisoryState) Descriptor() protoreflect.EnumDescriptor {
	return file_mvd_proto_enumTypes[0].Descriptor()
}

func (AdvisoryState) Type() protoreflect.EnumType {
	return &file_mvd_proto_enumTypes[0]
}

func (x AdvisoryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvisoryState.Descriptor instead.
func (AdvisoryState) EnumDescriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{0}
}

type CveState int32

const (
	CveState_PUBLIC      CveState = 0
	CveState_INVALID     CveState = 1
	CveState_RESERVED    CveState = 2
	CveState_REPLACED_BY CveState = 4
	CveState_SPLIT_FROM  CveState = 5
	CveState_MERGED_TO   CveState = 6
	CveState_REJECTED    CveState = 7
)

// Enum value maps for CveState.
var (
	CveState_name = map[int32]string{
		0: "PUBLIC",
		1: "INVALID",
		2: "RESERVED",
		4: "REPLACED_BY",
		5: "SPLIT_FROM",
		6: "MERGED_TO",
		7: "REJECTED",
	}
	CveState_value = map[string]int32{
		"PUBLIC":      0,
		"INVALID":     1,
		"RESERVED":    2,
		"REPLACED_BY": 4,
		"SPLIT_FROM":  5,
		"MERGED_TO":   6,
		"REJECTED":    7,
	}
)

func (x CveState) Enum() *CveState {
	p := new(CveState)
	*p = x
	return p
}

func (x CveState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CveState) Descriptor() protoreflect.EnumDescriptor {
	return file_mvd_proto_enumTypes[1].Descriptor()
}

func (CveState) Type() protoreflect.EnumType {
	return &file_mvd_proto_enumTypes[1]
}

func (x CveState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CveState.Descriptor instead.
func (CveState) EnumDescriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{1}
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Release string            `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Arch    string            `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Title   string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Build   string            `protobuf:"bytes,6,opt,name=build,proto3" json:"build,omitempty"`
	Labels  map[string]string `protobuf:"bytes,22,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{0}
}

func (x *Platform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Platform) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Platform) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Platform) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Platform) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Arch        string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Description string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	Format      string `protobuf:"bytes,23,opt,name=format,proto3" json:"format,omitempty"`
	Origin      string `protobuf:"bytes,24,opt,name=origin,proto3" json:"origin,omitempty"`
	Available   string `protobuf:"bytes,22,opt,name=available,proto3" json:"available,omitempty"`
	Status      string `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	Namespace   string `protobuf:"bytes,25,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Score       int32  `protobuf:"varint,26,opt,name=score,proto3" json:"score,omitempty"`
	Affected    bool   `protobuf:"varint,27,opt,name=affected,proto3" json:"affected,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{1}
}

func (x *Package) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Package) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Package) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Package) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Package) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *Package) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Package) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Package) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Package) GetAffected() bool {
	if x != nil {
		return x.Affected
	}
	return false
}

type AnalyseAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform      *Platform  `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Packages      []*Package `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
	KernelVersion string     `protobuf:"bytes,3,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
}

func (x *AnalyseAssetRequest) Reset() {
	*x = AnalyseAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyseAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyseAssetRequest) ProtoMessage() {}

func (x *AnalyseAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyseAssetRequest.ProtoReflect.Descriptor instead.
func (*AnalyseAssetRequest) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyseAssetRequest) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *AnalyseAssetRequest) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *AnalyseAssetRequest) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

type VulnReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   *Platform    `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Packages   []*Package   `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
	Advisories []*Advisory  `protobuf:"bytes,3,rep,name=advisories,proto3" json:"advisories,omitempty"`
	Stats      *ReportStats `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	Published  string       `protobuf:"bytes,5,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *VulnReport) Reset() {
	*x = VulnReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnReport) ProtoMessage() {}

func (x *VulnReport) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnReport.ProtoReflect.Descriptor instead.
func (*VulnReport) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{3}
}

func (x *VulnReport) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *VulnReport) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *VulnReport) GetAdvisories() []*Advisory {
	if x != nil {
		return x.Advisories
	}
	return nil
}

func (x *VulnReport) GetStats() *ReportStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *VulnReport) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

type Advisory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Mrn            string           `protobuf:"bytes,2,opt,name=Mrn,proto3" json:"Mrn,omitempty"`
	Title          string           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description    string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Fixed          []*Package       `protobuf:"bytes,5,rep,name=fixed,proto3" json:"fixed,omitempty"`
	Affected       []*Package       `protobuf:"bytes,6,rep,name=affected,proto3" json:"affected,omitempty"`
	Refs           []*Reference     `protobuf:"bytes,7,rep,name=refs,proto3" json:"refs,omitempty"`
	Cves           []*CVE           `protobuf:"bytes,20,rep,name=cves,proto3" json:"cves,omitempty"`
	FixedPlatforms []*FixedPlatform `protobuf:"bytes,30,rep,name=fixedPlatforms,proto3" json:"fixedPlatforms,omitempty"`
	Score          int32            `protobuf:"varint,25,opt,name=score,proto3" json:"score,omitempty"`
	WorstScore     *cvss.Cvss       `protobuf:"bytes,31,opt,name=worstScore,proto3" json:"worstScore,omitempty"`
	Vendorscore    float32          `protobuf:"fixed32,26,opt,name=vendorscore,proto3" json:"vendorscore,omitempty"`
	State          AdvisoryState    `protobuf:"varint,27,opt,name=state,proto3,enum=mondoo.mvd.v1.AdvisoryState" json:"state,omitempty"`
	Published      string           `protobuf:"bytes,23,opt,name=published,proto3" json:"published,omitempty"`
	Modified       string           `protobuf:"bytes,24,opt,name=modified,proto3" json:"modified,omitempty"`
	Supersedence   []string         `protobuf:"bytes,28,rep,name=supersedence,proto3" json:"supersedence,omitempty"`
	Unscored       bool             `protobuf:"varint,29,opt,name=unscored,proto3" json:"unscored,omitempty"`
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisory.ProtoReflect.Descriptor instead.
func (*Advisory) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{4}
}

func (x *Advisory) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Advisory) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *Advisory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Advisory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Advisory) GetFixed() []*Package {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *Advisory) GetAffected() []*Package {
	if x != nil {
		return x.Affected
	}
	return nil
}

func (x *Advisory) GetRefs() []*Reference {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Advisory) GetCves() []*CVE {
	if x != nil {
		return x.Cves
	}
	return nil
}

func (x *Advisory) GetFixedPlatforms() []*FixedPlatform {
	if x != nil {
		return x.FixedPlatforms
	}
	return nil
}

func (x *Advisory) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Advisory) GetWorstScore() *cvss.Cvss {
	if x != nil {
		return x.WorstScore
	}
	return nil
}

func (x *Advisory) GetVendorscore() float32 {
	if x != nil {
		return x.Vendorscore
	}
	return 0
}

func (x *Advisory) GetState() AdvisoryState {
	if x != nil {
		return x.State
	}
	return AdvisoryState_RELEASED
}

func (x *Advisory) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

func (x *Advisory) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Advisory) GetSupersedence() []string {
	if x != nil {
		return x.Supersedence
	}
	return nil
}

func (x *Advisory) GetUnscored() bool {
	if x != nil {
		return x.Unscored
	}
	return false
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Title  string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{5}
}

func (x *Reference) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Reference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Reference) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Reference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type FixedPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Release   string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Arch      string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Build     string `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
	PatchName string `protobuf:"bytes,7,opt,name=patchName,proto3" json:"patchName,omitempty"`
}

func (x *FixedPlatform) Reset() {
	*x = FixedPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPlatform) ProtoMessage() {}

func (x *FixedPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedPlatform.ProtoReflect.Descriptor instead.
func (*FixedPlatform) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{6}
}

func (x *FixedPlatform) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FixedPlatform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixedPlatform) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *FixedPlatform) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *FixedPlatform) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FixedPlatform) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *FixedPlatform) GetPatchName() string {
	if x != nil {
		return x.PatchName
	}
	return ""
}

type ReportStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score      int32                  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Affected   bool                   `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
	Unscored   bool                   `protobuf:"varint,3,opt,name=unscored,proto3" json:"unscored,omitempty"`
	Advisories *ReportStatsAdvisories `protobuf:"bytes,16,opt,name=advisories,proto3" json:"advisories,omitempty"`
	Cves       *ReportStatsCves       `protobuf:"bytes,17,opt,name=cves,proto3" json:"cves,omitempty"`
	Packages   *ReportStatsPackages   `protobuf:"bytes,18,opt,name=packages,proto3" json:"packages,omitempty"`
	Exploits   *ReportStatsExploits   `protobuf:"bytes,19,opt,name=exploits,proto3" json:"exploits,omitempty"`
}

func (x *ReportStats) Reset() {
	*x = ReportStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStats) ProtoMessage() {}

func (x *ReportStats) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStats.ProtoReflect.Descriptor instead.
func (*ReportStats) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{7}
}

func (x *ReportStats) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ReportStats) GetAffected() bool {
	if x != nil {
		return x.Affected
	}
	return false
}

func (x *ReportStats) GetUnscored() bool {
	if x != nil {
		return x.Unscored
	}
	return false
}

func (x *ReportStats) GetAdvisories() *ReportStatsAdvisories {
	if x != nil {
		return x.Advisories
	}
	return nil
}

func (x *ReportStats) GetCves() *ReportStatsCves {
	if x != nil {
		return x.Cves
	}
	return nil
}

func (x *ReportStats) GetPackages() *ReportStatsPackages {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ReportStats) GetExploits() *ReportStatsExploits {
	if x != nil {
		return x.Exploits
	}
	return nil
}

type ReportStatsAdvisories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Critical int32 `protobuf:"varint,2,opt,name=critical,proto3" json:"critical,omitempty"`
	High     int32 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	Medium   int32 `protobuf:"varint,4,opt,name=medium,proto3" json:"medium,omitempty"`
	Low      int32 `protobuf:"varint,5,opt,name=low,proto3" json:"low,omitempty"`
	None     int32 `protobuf:"varint,6,opt,name=none,proto3" json:"none,omitempty"`
	Unknown  int32 `protobuf:"varint,7,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *ReportStatsAdvisories) Reset() {
	*x = ReportStatsAdvisories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatsAdvisories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatsAdvisories) ProtoMessage() {}

func (x *ReportStatsAdvisories) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatsAdvisories.ProtoReflect.Descriptor instead.
func (*ReportStatsAdvisories) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{8}
}

func (x *ReportStatsAdvisories) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReportStatsAdvisories) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *ReportStatsAdvisories) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ReportStatsAdvisories) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ReportStatsAdvisories) GetLow() int32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ReportStatsAdvisories) GetNone() int32 {
	if x != nil {
		return x.None
	}
	return 0
}

func (x *ReportStatsAdvisories) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

type ReportStatsCves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Critical int32 `protobuf:"varint,2,opt,name=critical,proto3" json:"critical,omitempty"`
	High     int32 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	Medium   int32 `protobuf:"varint,4,opt,name=medium,proto3" json:"medium,omitempty"`
	Low      int32 `protobuf:"varint,5,opt,name=low,proto3" json:"low,omitempty"`
	None     int32 `protobuf:"varint,6,opt,name=none,proto3" json:"none,omitempty"`
	Unknown  int32 `protobuf:"varint,7,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *ReportStatsCves) Reset() {
	*x = ReportStatsCves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatsCves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatsCves) ProtoMessage() {}

func (x *ReportStatsCves) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatsCves.ProtoReflect.Descriptor instead.
func (*ReportStatsCves) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{9}
}

func (x *ReportStatsCves) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReportStatsCves) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *ReportStatsCves) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ReportStatsCves) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ReportStatsCves) GetLow() int32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ReportStatsCves) GetNone() int32 {
	if x != nil {
		return x.None
	}
	return 0
}

func (x *ReportStatsCves) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

type ReportStatsPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Affected int32 `protobuf:"varint,2,opt,name=affected,proto3" json:"affected,omitempty"`
	Critical int32 `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
	High     int32 `protobuf:"varint,4,opt,name=high,proto3" json:"high,omitempty"`
	Medium   int32 `protobuf:"varint,5,opt,name=medium,proto3" json:"medium,omitempty"`
	Low      int32 `protobuf:"varint,6,opt,name=low,proto3" json:"low,omitempty"`
	None     int32 `protobuf:"varint,7,opt,name=none,proto3" json:"none,omitempty"`
	Unknown  int32 `protobuf:"varint,8,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *ReportStatsPackages) Reset() {
	*x = ReportStatsPackages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatsPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatsPackages) ProtoMessage() {}

func (x *ReportStatsPackages) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatsPackages.ProtoReflect.Descriptor instead.
func (*ReportStatsPackages) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{10}
}

func (x *ReportStatsPackages) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReportStatsPackages) GetAffected() int32 {
	if x != nil {
		return x.Affected
	}
	return 0
}

func (x *ReportStatsPackages) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *ReportStatsPackages) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ReportStatsPackages) GetMedium() int32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *ReportStatsPackages) GetLow() int32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ReportStatsPackages) GetNone() int32 {
	if x != nil {
		return x.None
	}
	return 0
}

func (x *ReportStatsPackages) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

type ReportStatsExploits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ReportStatsExploits) Reset() {
	*x = ReportStatsExploits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatsExploits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatsExploits) ProtoMessage() {}

func (x *ReportStatsExploits) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatsExploits.ProtoReflect.Descriptor instead.
func (*ReportStatsExploits) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{11}
}

func (x *ReportStatsExploits) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CVE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string       `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Mrn        string       `protobuf:"bytes,2,opt,name=Mrn,proto3" json:"Mrn,omitempty"`
	Summary    string       `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Score      float32      `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	WorstScore *cvss.Cvss   `protobuf:"bytes,7,opt,name=worstScore,proto3" json:"worstScore,omitempty"`
	Unscored   bool         `protobuf:"varint,6,opt,name=unscored,proto3" json:"unscored,omitempty"`
	State      CveState     `protobuf:"varint,5,opt,name=state,proto3,enum=mondoo.mvd.v1.CveState" json:"state,omitempty"`
	Cvss       []*cvss.Cvss `protobuf:"bytes,20,rep,name=cvss,proto3" json:"cvss,omitempty"`
	Cwe        string       `protobuf:"bytes,21,opt,name=cwe,proto3" json:"cwe,omitempty"`
	Published  string       `protobuf:"bytes,22,opt,name=published,proto3" json:"published,omitempty"`
	Modified   string       `protobuf:"bytes,23,opt,name=modified,proto3" json:"modified,omitempty"`
	Url        string       `protobuf:"bytes,24,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CVE) Reset() {
	*x = CVE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVE) ProtoMessage() {}

func (x *CVE) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVE.ProtoReflect.Descriptor instead.
func (*CVE) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{12}
}

func (x *CVE) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CVE) GetMrn() string {
	if x != nil {
		return x.Mrn
	}
	return ""
}

func (x *CVE) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CVE) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CVE) GetWorstScore() *cvss.Cvss {
	if x != nil {
		return x.WorstScore
	}
	return nil
}

func (x *CVE) GetUnscored() bool {
	if x != nil {
		return x.Unscored
	}
	return false
}

func (x *CVE) GetState() CveState {
	if x != nil {
		return x.State
	}
	return CveState_PUBLIC
}

func (x *CVE) GetCvss() []*cvss.Cvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *CVE) GetCwe() string {
	if x != nil {
		return x.Cwe
	}
	return ""
}

func (x *CVE) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

func (x *CVE) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *CVE) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PlatformEolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform    *Platform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	DocsUrl     string    `protobuf:"bytes,2,opt,name=DocsUrl,proto3" json:"DocsUrl,omitempty"`
	ProductUrl  string    `protobuf:"bytes,3,opt,name=ProductUrl,proto3" json:"ProductUrl,omitempty"`
	ReleaseDate string    `protobuf:"bytes,4,opt,name=ReleaseDate,proto3" json:"ReleaseDate,omitempty"`
	EolDate     string    `protobuf:"bytes,5,opt,name=EolDate,proto3" json:"EolDate,omitempty"`
}

func (x *PlatformEolInfo) Reset() {
	*x = PlatformEolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mvd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformEolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformEolInfo) ProtoMessage() {}

func (x *PlatformEolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mvd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformEolInfo.ProtoReflect.Descriptor instead.
func (*PlatformEolInfo) Descriptor() ([]byte, []int) {
	return file_mvd_proto_rawDescGZIP(), []int{13}
}

func (x *PlatformEolInfo) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *PlatformEolInfo) GetDocsUrl() string {
	if x != nil {
		return x.DocsUrl
	}
	return ""
}

func (x *PlatformEolInfo) GetProductUrl() string {
	if x != nil {
		return x.ProductUrl
	}
	return ""
}

func (x *PlatformEolInfo) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *PlatformEolInfo) GetEolDate() string {
	if x != nil {
		return x.EolDate
	}
	return ""
}

var File_mvd_proto protoreflect.FileDescriptor

var file_mvd_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x76, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x63, 0x76, 0x73, 0x73,
	0x2f, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e,
	0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3,
	0x02, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x0a,
	0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f,
	0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x88, 0x05, 0x0a,
	0x08, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x72,
	0x65, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x56, 0x45, 0x52, 0x04, 0x63, 0x76, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0x5b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x0b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x76, 0x65, 0x73, 0x52, 0x04, 0x63, 0x76,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x73, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x76, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xcf, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x2b,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe8, 0x02, 0x0a, 0x03,
	0x43, 0x56, 0x45, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4d, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x76, 0x73, 0x73, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x76,
	0x73, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f,
	0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x76,
	0x73, 0x73, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x45, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x6f, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x44, 0x6f, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x49, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x46, 0x46, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x08, 0x43, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x32, 0xa2, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d,
	0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x64,
	0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x73, 0x45, 0x6f, 0x6c, 0x12, 0x17, 0x2e,
	0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e, 0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x6f, 0x2e,
	0x6d, 0x76, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x6f, 0x2e, 0x6d, 0x6f, 0x6e,
	0x64, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x76, 0x64, 0x65, 0x2f, 0x6d,
	0x76, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mvd_proto_rawDescOnce sync.Once
	file_mvd_proto_rawDescData = file_mvd_proto_rawDesc
)

func file_mvd_proto_rawDescGZIP() []byte {
	file_mvd_proto_rawDescOnce.Do(func() {
		file_mvd_proto_rawDescData = protoimpl.X.CompressGZIP(file_mvd_proto_rawDescData)
	})
	return file_mvd_proto_rawDescData
}

var file_mvd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mvd_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_mvd_proto_goTypes = []interface{}{
	(AdvisoryState)(0),            // 0: mondoo.mvd.v1.AdvisoryState
	(CveState)(0),                 // 1: mondoo.mvd.v1.CveState
	(*Platform)(nil),              // 2: mondoo.mvd.v1.Platform
	(*Package)(nil),               // 3: mondoo.mvd.v1.Package
	(*AnalyseAssetRequest)(nil),   // 4: mondoo.mvd.v1.AnalyseAssetRequest
	(*VulnReport)(nil),            // 5: mondoo.mvd.v1.VulnReport
	(*Advisory)(nil),              // 6: mondoo.mvd.v1.Advisory
	(*Reference)(nil),             // 7: mondoo.mvd.v1.Reference
	(*FixedPlatform)(nil),         // 8: mondoo.mvd.v1.FixedPlatform
	(*ReportStats)(nil),           // 9: mondoo.mvd.v1.ReportStats
	(*ReportStatsAdvisories)(nil), // 10: mondoo.mvd.v1.ReportStatsAdvisories
	(*ReportStatsCves)(nil),       // 11: mondoo.mvd.v1.ReportStatsCves
	(*ReportStatsPackages)(nil),   // 12: mondoo.mvd.v1.ReportStatsPackages
	(*ReportStatsExploits)(nil),   // 13: mondoo.mvd.v1.ReportStatsExploits
	(*CVE)(nil),                   // 14: mondoo.mvd.v1.CVE
	(*PlatformEolInfo)(nil),       // 15: mondoo.mvd.v1.PlatformEolInfo
	nil,                           // 16: mondoo.mvd.v1.Platform.LabelsEntry
	(*cvss.Cvss)(nil),             // 17: mondoo.mvd.cvss.v1.Cvss
}
var file_mvd_proto_depIdxs = []int32{
	16, // 0: mondoo.mvd.v1.Platform.labels:type_name -> mondoo.mvd.v1.Platform.LabelsEntry
	2,  // 1: mondoo.mvd.v1.AnalyseAssetRequest.platform:type_name -> mondoo.mvd.v1.Platform
	3,  // 2: mondoo.mvd.v1.AnalyseAssetRequest.packages:type_name -> mondoo.mvd.v1.Package
	2,  // 3: mondoo.mvd.v1.VulnReport.platform:type_name -> mondoo.mvd.v1.Platform
	3,  // 4: mondoo.mvd.v1.VulnReport.packages:type_name -> mondoo.mvd.v1.Package
	6,  // 5: mondoo.mvd.v1.VulnReport.advisories:type_name -> mondoo.mvd.v1.Advisory
	9,  // 6: mondoo.mvd.v1.VulnReport.stats:type_name -> mondoo.mvd.v1.ReportStats
	3,  // 7: mondoo.mvd.v1.Advisory.fixed:type_name -> mondoo.mvd.v1.Package
	3,  // 8: mondoo.mvd.v1.Advisory.affected:type_name -> mondoo.mvd.v1.Package
	7,  // 9: mondoo.mvd.v1.Advisory.refs:type_name -> mondoo.mvd.v1.Reference
	14, // 10: mondoo.mvd.v1.Advisory.cves:type_name -> mondoo.mvd.v1.CVE
	8,  // 11: mondoo.mvd.v1.Advisory.fixedPlatforms:type_name -> mondoo.mvd.v1.FixedPlatform
	17, // 12: mondoo.mvd.v1.Advisory.worstScore:type_name -> mondoo.mvd.cvss.v1.Cvss
	0,  // 13: mondoo.mvd.v1.Advisory.state:type_name -> mondoo.mvd.v1.AdvisoryState
	10, // 14: mondoo.mvd.v1.ReportStats.advisories:type_name -> mondoo.mvd.v1.ReportStatsAdvisories
	11, // 15: mondoo.mvd.v1.ReportStats.cves:type_name -> mondoo.mvd.v1.ReportStatsCves
	12, // 16: mondoo.mvd.v1.ReportStats.packages:type_name -> mondoo.mvd.v1.ReportStatsPackages
	13, // 17: mondoo.mvd.v1.ReportStats.exploits:type_name -> mondoo.mvd.v1.ReportStatsExploits
	17, // 18: mondoo.mvd.v1.CVE.worstScore:type_name -> mondoo.mvd.cvss.v1.Cvss
	1,  // 19: mondoo.mvd.v1.CVE.state:type_name -> mondoo.mvd.v1.CveState
	17, // 20: mondoo.mvd.v1.CVE.cvss:type_name -> mondoo.mvd.cvss.v1.Cvss
	2,  // 21: mondoo.mvd.v1.PlatformEolInfo.platform:type_name -> mondoo.mvd.v1.Platform
	4,  // 22: mondoo.mvd.v1.AdvisoryScanner.AnalyseAsset:input_type -> mondoo.mvd.v1.AnalyseAssetRequest
	2,  // 23: mondoo.mvd.v1.AdvisoryScanner.IsEol:input_type -> mondoo.mvd.v1.Platform
	5,  // 24: mondoo.mvd.v1.AdvisoryScanner.AnalyseAsset:output_type -> mondoo.mvd.v1.VulnReport
	15, // 25: mondoo.mvd.v1.AdvisoryScanner.IsEol:output_type -> mondoo.mvd.v1.PlatformEolInfo
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_mvd_proto_init() }
func file_mvd_proto_init() {
	if File_mvd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mvd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyseAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advisory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatsAdvisories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatsCves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatsPackages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatsExploits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mvd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformEolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mvd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mvd_proto_goTypes,
		DependencyIndexes: file_mvd_proto_depIdxs,
		EnumInfos:         file_mvd_proto_enumTypes,
		MessageInfos:      file_mvd_proto_msgTypes,
	}.Build()
	File_mvd_proto = out.File
	file_mvd_proto_rawDesc = nil
	file_mvd_proto_goTypes = nil
	file_mvd_proto_depIdxs = nil
}
