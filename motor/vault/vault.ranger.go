// Code generated by protoc-gen-rangerrpc version DO NOT EDIT.
// source: vault.proto

package vault

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	ranger "go.mondoo.com/ranger-rpc"
	"go.mondoo.com/ranger-rpc/metadata"
	jsonpb "google.golang.org/protobuf/encoding/protojson"
	pb "google.golang.org/protobuf/proto"
)

// service interface definition

type Vault interface {
	About(context.Context, *Empty) (*VaultInfo, error)
	Get(context.Context, *SecretID) (*Secret, error)
	Set(context.Context, *Secret) (*SecretID, error)
}

// client implementation

type VaultClient struct {
	ranger.Client
	httpclient ranger.HTTPClient
	prefix     string
}

func NewVaultClient(addr string, client ranger.HTTPClient, plugins ...ranger.ClientPlugin) (*VaultClient, error) {
	base, err := url.Parse(ranger.SanitizeUrl(addr))
	if err != nil {
		return nil, err
	}

	u, err := url.Parse("./Vault")
	if err != nil {
		return nil, err
	}

	serviceClient := &VaultClient{
		httpclient: client,
		prefix:     base.ResolveReference(u).String(),
	}
	serviceClient.AddPlugins(plugins...)
	return serviceClient, nil
}
func (c *VaultClient) About(ctx context.Context, in *Empty) (*VaultInfo, error) {
	out := new(VaultInfo)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/About"}, ""), in, out)
	return out, err
}
func (c *VaultClient) Get(ctx context.Context, in *SecretID) (*Secret, error) {
	out := new(Secret)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/Get"}, ""), in, out)
	return out, err
}
func (c *VaultClient) Set(ctx context.Context, in *Secret) (*SecretID, error) {
	out := new(SecretID)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/Set"}, ""), in, out)
	return out, err
}

// server implementation

type VaultServerOption func(s *VaultServer)

func WithUnknownFieldsForVaultServer() VaultServerOption {
	return func(s *VaultServer) {
		s.allowUnknownFields = true
	}
}

func NewVaultServer(handler Vault, opts ...VaultServerOption) http.Handler {
	srv := &VaultServer{
		handler: handler,
	}

	for i := range opts {
		opts[i](srv)
	}

	service := ranger.Service{
		Name: "Vault",
		Methods: map[string]ranger.Method{
			"About": srv.About,
			"Get":   srv.Get,
			"Set":   srv.Set,
		},
	}
	return ranger.NewRPCServer(&service)
}

type VaultServer struct {
	handler            Vault
	allowUnknownFields bool
}

func (p *VaultServer) About(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req Empty
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.About(ctx, &req)
}
func (p *VaultServer) Get(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req SecretID
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.Get(ctx, &req)
}
func (p *VaultServer) Set(ctx context.Context, reqBytes *[]byte) (pb.Message, error) {
	var req Secret
	var err error

	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, errors.New("could not access header")
	}

	switch md.First("Content-Type") {
	case "application/protobuf", "application/octet-stream", "application/grpc+proto":
		err = pb.Unmarshal(*reqBytes, &req)
	default:
		// handle case of empty object
		if len(*reqBytes) > 0 {
			err = jsonpb.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(*reqBytes, &req)
		}
	}

	if err != nil {
		return nil, err
	}
	return p.handler.Set(ctx, &req)
}
