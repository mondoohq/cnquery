// Code generated by resources. DO NOT EDIT.
package arista

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("arista.eos", newAristaEos)
	registry.AddFactory("arista.eos.runningConfig", newAristaEosRunningConfig)
	registry.AddFactory("arista.eos.runningConfig.section", newAristaEosRunningConfigSection)
	registry.AddFactory("arista.eos.user", newAristaEosUser)
	registry.AddFactory("arista.eos.role", newAristaEosRole)
	registry.AddFactory("arista.eos.snmpSetting", newAristaEosSnmpSetting)
	registry.AddFactory("arista.eos.ntpSetting", newAristaEosNtpSetting)
	registry.AddFactory("arista.eos.interface", newAristaEosInterface)
	registry.AddFactory("arista.eos.ipInterface", newAristaEosIpInterface)
	registry.AddFactory("arista.eos.stp", newAristaEosStp)
	registry.AddFactory("arista.eos.stp.mst", newAristaEosStpMst)
	registry.AddFactory("arista.eos.spt.mstInterface", newAristaEosSptMstInterface)
}

// AristaEos resource interface
type AristaEos interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SystemConfig() (map[string]interface{}, error)
	IpInterfaces() ([]interface{}, error)
	Interfaces() ([]interface{}, error)
	Version() (interface{}, error)
	Hostname() (string, error)
	Fqdn() (string, error)
	Users() ([]interface{}, error)
	Roles() ([]interface{}, error)
	Snmp() (AristaEosSnmpSetting, error)
	Ntp() (AristaEosNtpSetting, error)
}

// mqlAristaEos for the arista.eos resource
type mqlAristaEos struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEos) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos resource
func newAristaEos(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEos{runtime.NewResource("arista.eos")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "systemConfig":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"systemConfig\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "ipInterfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"ipInterfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "version":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"version\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "fqdn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"fqdn\" argument has the wrong type (expected type \"string\")")
			}
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snmp":
			if _, ok := val.(AristaEosSnmpSetting); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"snmp\" argument has the wrong type (expected type \"AristaEosSnmpSetting\")")
			}
		case "ntp":
			if _, ok := val.(AristaEosNtpSetting); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"ntp\" argument has the wrong type (expected type \"AristaEosNtpSetting\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEos) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEos) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos].Register")
	switch name {
	case "systemConfig":
		return nil
	case "ipInterfaces":
		return nil
	case "interfaces":
		return nil
	case "version":
		return nil
	case "hostname":
		return nil
	case "fqdn":
		return nil
	case "users":
		return nil
	case "roles":
		return nil
	case "snmp":
		return nil
	case "ntp":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEos) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos].Field")
	switch name {
	case "systemConfig":
		return s.SystemConfig()
	case "ipInterfaces":
		return s.IpInterfaces()
	case "interfaces":
		return s.Interfaces()
	case "version":
		return s.Version()
	case "hostname":
		return s.Hostname()
	case "fqdn":
		return s.Fqdn()
	case "users":
		return s.Users()
	case "roles":
		return s.Roles()
	case "snmp":
		return s.Snmp()
	case "ntp":
		return s.Ntp()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos\" resource")
	}
}

// SystemConfig accessor autogenerated
func (s *mqlAristaEos) SystemConfig() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("systemConfig")
	if !ok || !res.Valid {
		if err := s.ComputeSystemConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("systemConfig")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"systemConfig\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "systemConfig")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"systemConfig\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IpInterfaces accessor autogenerated
func (s *mqlAristaEos) IpInterfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipInterfaces")
	if !ok || !res.Valid {
		if err := s.ComputeIpInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ipInterfaces")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"ipInterfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ipInterfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"ipInterfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAristaEos) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		if err := s.ComputeInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("interfaces")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"interfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "interfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAristaEos) Version() (interface{}, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"version\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlAristaEos) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		if err := s.ComputeHostname(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("hostname")
		if !ok {
			return "", errors.New("\"arista.eos\" calculated \"hostname\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "hostname")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Fqdn accessor autogenerated
func (s *mqlAristaEos) Fqdn() (string, error) {
	res, ok := s.Cache.Load("fqdn")
	if !ok || !res.Valid {
		if err := s.ComputeFqdn(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("fqdn")
		if !ok {
			return "", errors.New("\"arista.eos\" calculated \"fqdn\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "fqdn")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos\" failed to cast field \"fqdn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Users accessor autogenerated
func (s *mqlAristaEos) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlAristaEos) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snmp accessor autogenerated
func (s *mqlAristaEos) Snmp() (AristaEosSnmpSetting, error) {
	res, ok := s.Cache.Load("snmp")
	if !ok || !res.Valid {
		if err := s.ComputeSnmp(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snmp")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"snmp\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snmp")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AristaEosSnmpSetting)
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"snmp\" to the right type (AristaEosSnmpSetting): %#v", res)
	}
	return tres, nil
}

// Ntp accessor autogenerated
func (s *mqlAristaEos) Ntp() (AristaEosNtpSetting, error) {
	res, ok := s.Cache.Load("ntp")
	if !ok || !res.Valid {
		if err := s.ComputeNtp(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ntp")
		if !ok {
			return nil, errors.New("\"arista.eos\" calculated \"ntp\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ntp")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AristaEosNtpSetting)
	if !ok {
		return nil, fmt.Errorf("\"arista.eos\" failed to cast field \"ntp\" to the right type (AristaEosNtpSetting): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEos) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos].MqlCompute")
	switch name {
	case "systemConfig":
		return s.ComputeSystemConfig()
	case "ipInterfaces":
		return s.ComputeIpInterfaces()
	case "interfaces":
		return s.ComputeInterfaces()
	case "version":
		return s.ComputeVersion()
	case "hostname":
		return s.ComputeHostname()
	case "fqdn":
		return s.ComputeFqdn()
	case "users":
		return s.ComputeUsers()
	case "roles":
		return s.ComputeRoles()
	case "snmp":
		return s.ComputeSnmp()
	case "ntp":
		return s.ComputeNtp()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos\" resource")
	}
}

// ComputeSystemConfig computer autogenerated
func (s *mqlAristaEos) ComputeSystemConfig() error {
	var err error
	if _, ok := s.Cache.Load("systemConfig"); ok {
		return nil
	}
	vres, err := s.GetSystemConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("systemConfig", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIpInterfaces computer autogenerated
func (s *mqlAristaEos) ComputeIpInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("ipInterfaces"); ok {
		return nil
	}
	vres, err := s.GetIpInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ipInterfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInterfaces computer autogenerated
func (s *mqlAristaEos) ComputeInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("interfaces"); ok {
		return nil
	}
	vres, err := s.GetInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("interfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAristaEos) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeHostname computer autogenerated
func (s *mqlAristaEos) ComputeHostname() error {
	var err error
	if _, ok := s.Cache.Load("hostname"); ok {
		return nil
	}
	vres, err := s.GetHostname()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("hostname", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFqdn computer autogenerated
func (s *mqlAristaEos) ComputeFqdn() error {
	var err error
	if _, ok := s.Cache.Load("fqdn"); ok {
		return nil
	}
	vres, err := s.GetFqdn()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("fqdn", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsers computer autogenerated
func (s *mqlAristaEos) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoles computer autogenerated
func (s *mqlAristaEos) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnmp computer autogenerated
func (s *mqlAristaEos) ComputeSnmp() error {
	var err error
	if _, ok := s.Cache.Load("snmp"); ok {
		return nil
	}
	vres, err := s.GetSnmp()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snmp", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNtp computer autogenerated
func (s *mqlAristaEos) ComputeNtp() error {
	var err error
	if _, ok := s.Cache.Load("ntp"); ok {
		return nil
	}
	vres, err := s.GetNtp()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ntp", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosRunningConfig resource interface
type AristaEosRunningConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Content() (string, error)
}

// mqlAristaEosRunningConfig for the arista.eos.runningConfig resource
type mqlAristaEosRunningConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosRunningConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.runningConfig resource
func newAristaEosRunningConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosRunningConfig{runtime.NewResource("arista.eos.runningConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "content":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.runningConfig\", its \"content\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.runningConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.runningConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosRunningConfig) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosRunningConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig].Register")
	switch name {
	case "content":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.runningConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosRunningConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig].Field")
	switch name {
	case "content":
		return s.Content()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.runningConfig\" resource")
	}
}

// Content accessor autogenerated
func (s *mqlAristaEosRunningConfig) Content() (string, error) {
	res, ok := s.Cache.Load("content")
	if !ok || !res.Valid {
		if err := s.ComputeContent(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("content")
		if !ok {
			return "", errors.New("\"arista.eos.runningConfig\" calculated \"content\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "content")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.runningConfig\" failed to cast field \"content\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosRunningConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig].MqlCompute")
	switch name {
	case "content":
		return s.ComputeContent()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.runningConfig\" resource")
	}
}

// ComputeContent computer autogenerated
func (s *mqlAristaEosRunningConfig) ComputeContent() error {
	var err error
	if _, ok := s.Cache.Load("content"); ok {
		return nil
	}
	vres, err := s.GetContent()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("content", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosRunningConfigSection resource interface
type AristaEosRunningConfigSection interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Content() (string, error)
}

// mqlAristaEosRunningConfigSection for the arista.eos.runningConfig.section resource
type mqlAristaEosRunningConfigSection struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosRunningConfigSection) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.runningConfig.section resource
func newAristaEosRunningConfigSection(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosRunningConfigSection{runtime.NewResource("arista.eos.runningConfig.section")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.runningConfig.section\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "content":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.runningConfig.section\", its \"content\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.runningConfig.section\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.runningConfig.section with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosRunningConfigSection) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.runningConfig.section\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosRunningConfigSection) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig.section].Register")
	switch name {
	case "name":
		return nil
	case "content":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.runningConfig.section\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosRunningConfigSection) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig.section].Field")
	switch name {
	case "name":
		return s.Name()
	case "content":
		return s.Content()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.runningConfig.section\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAristaEosRunningConfigSection) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.runningConfig.section\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.runningConfig.section\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Content accessor autogenerated
func (s *mqlAristaEosRunningConfigSection) Content() (string, error) {
	res, ok := s.Cache.Load("content")
	if !ok || !res.Valid {
		if err := s.ComputeContent(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("content")
		if !ok {
			return "", errors.New("\"arista.eos.runningConfig.section\" calculated \"content\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "content")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.runningConfig.section\" failed to cast field \"content\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosRunningConfigSection) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.runningConfig.section].MqlCompute")
	switch name {
	case "name":
		return nil
	case "content":
		return s.ComputeContent()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.runningConfig.section\" resource")
	}
}

// ComputeContent computer autogenerated
func (s *mqlAristaEosRunningConfigSection) ComputeContent() error {
	var err error
	if _, ok := s.Cache.Load("content"); ok {
		return nil
	}
	vres, err := s.GetContent()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("content", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosUser resource interface
type AristaEosUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Privilege() (string, error)
	Role() (string, error)
	Nopassword() (string, error)
	Format() (string, error)
	Secret() (string, error)
	Sshkey() (string, error)
}

// mqlAristaEosUser for the arista.eos.user resource
type mqlAristaEosUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.user resource
func newAristaEosUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosUser{runtime.NewResource("arista.eos.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "privilege":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"privilege\" argument has the wrong type (expected type \"string\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "nopassword":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"nopassword\" argument has the wrong type (expected type \"string\")")
			}
		case "format":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"format\" argument has the wrong type (expected type \"string\")")
			}
		case "secret":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"secret\" argument has the wrong type (expected type \"string\")")
			}
		case "sshkey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"sshkey\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("privilege"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"privilege\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"role\". This field is required.")
	}
	if _, ok := s.Cache.Load("nopassword"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"nopassword\". This field is required.")
	}
	if _, ok := s.Cache.Load("format"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"format\". This field is required.")
	}
	if _, ok := s.Cache.Load("secret"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"secret\". This field is required.")
	}
	if _, ok := s.Cache.Load("sshkey"); !ok {
		return errors.New("Initialized \"arista.eos.user\" resource without a \"sshkey\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.user].Register")
	switch name {
	case "name":
		return nil
	case "privilege":
		return nil
	case "role":
		return nil
	case "nopassword":
		return nil
	case "format":
		return nil
	case "secret":
		return nil
	case "sshkey":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.user].Field")
	switch name {
	case "name":
		return s.Name()
	case "privilege":
		return s.Privilege()
	case "role":
		return s.Role()
	case "nopassword":
		return s.Nopassword()
	case "format":
		return s.Format()
	case "secret":
		return s.Secret()
	case "sshkey":
		return s.Sshkey()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.user\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAristaEosUser) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Privilege accessor autogenerated
func (s *mqlAristaEosUser) Privilege() (string, error) {
	res, ok := s.Cache.Load("privilege")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"privilege\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"privilege\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlAristaEosUser) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Nopassword accessor autogenerated
func (s *mqlAristaEosUser) Nopassword() (string, error) {
	res, ok := s.Cache.Load("nopassword")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"nopassword\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"nopassword\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Format accessor autogenerated
func (s *mqlAristaEosUser) Format() (string, error) {
	res, ok := s.Cache.Load("format")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"format\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"format\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Secret accessor autogenerated
func (s *mqlAristaEosUser) Secret() (string, error) {
	res, ok := s.Cache.Load("secret")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"secret\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"secret\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sshkey accessor autogenerated
func (s *mqlAristaEosUser) Sshkey() (string, error) {
	res, ok := s.Cache.Load("sshkey")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.user\" failed: no value provided for static field \"sshkey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.user\" failed to cast field \"sshkey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.user].MqlCompute")
	switch name {
	case "name":
		return nil
	case "privilege":
		return nil
	case "role":
		return nil
	case "nopassword":
		return nil
	case "format":
		return nil
	case "secret":
		return nil
	case "sshkey":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.user\" resource")
	}
}

// AristaEosRole resource interface
type AristaEosRole interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Default() (bool, error)
	Rules() ([]interface{}, error)
}

// mqlAristaEosRole for the arista.eos.role resource
type mqlAristaEosRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.role resource
func newAristaEosRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosRole{runtime.NewResource("arista.eos.role")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.role\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "default":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.role\", its \"default\" argument has the wrong type (expected type \"bool\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.role\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.role\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("default"); !ok {
		return errors.New("Initialized \"arista.eos.role\" resource without a \"default\". This field is required.")
	}
	if _, ok := s.Cache.Load("rules"); !ok {
		return errors.New("Initialized \"arista.eos.role\" resource without a \"rules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.role].Register")
	switch name {
	case "name":
		return nil
	case "default":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.role].Field")
	switch name {
	case "name":
		return s.Name()
	case "default":
		return s.Default()
	case "rules":
		return s.Rules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.role\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAristaEosRole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.role\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.role\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Default accessor autogenerated
func (s *mqlAristaEosRole) Default() (bool, error) {
	res, ok := s.Cache.Load("default")
	if !ok || !res.Valid {
		return false, errors.New("\"arista.eos.role\" failed: no value provided for static field \"default\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"arista.eos.role\" failed to cast field \"default\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlAristaEosRole) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.role\" failed: no value provided for static field \"rules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.role\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosRole) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.role].MqlCompute")
	switch name {
	case "name":
		return nil
	case "default":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.role\" resource")
	}
}

// AristaEosSnmpSetting resource interface
type AristaEosSnmpSetting interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Enabled() (bool, error)
	Notifications() ([]interface{}, error)
}

// mqlAristaEosSnmpSetting for the arista.eos.snmpSetting resource
type mqlAristaEosSnmpSetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosSnmpSetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.snmpSetting resource
func newAristaEosSnmpSetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosSnmpSetting{runtime.NewResource("arista.eos.snmpSetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.snmpSetting\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notifications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.snmpSetting\", its \"notifications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.snmpSetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.snmpSetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosSnmpSetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"arista.eos.snmpSetting\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosSnmpSetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.snmpSetting].Register")
	switch name {
	case "enabled":
		return nil
	case "notifications":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.snmpSetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosSnmpSetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.snmpSetting].Field")
	switch name {
	case "enabled":
		return s.Enabled()
	case "notifications":
		return s.Notifications()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.snmpSetting\" resource")
	}
}

// Enabled accessor autogenerated
func (s *mqlAristaEosSnmpSetting) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"arista.eos.snmpSetting\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"arista.eos.snmpSetting\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Notifications accessor autogenerated
func (s *mqlAristaEosSnmpSetting) Notifications() ([]interface{}, error) {
	res, ok := s.Cache.Load("notifications")
	if !ok || !res.Valid {
		if err := s.ComputeNotifications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("notifications")
		if !ok {
			return nil, errors.New("\"arista.eos.snmpSetting\" calculated \"notifications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "notifications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.snmpSetting\" failed to cast field \"notifications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosSnmpSetting) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.snmpSetting].MqlCompute")
	switch name {
	case "enabled":
		return nil
	case "notifications":
		return s.ComputeNotifications()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.snmpSetting\" resource")
	}
}

// ComputeNotifications computer autogenerated
func (s *mqlAristaEosSnmpSetting) ComputeNotifications() error {
	var err error
	if _, ok := s.Cache.Load("notifications"); ok {
		return nil
	}
	vres, err := s.GetNotifications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("notifications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosNtpSetting resource interface
type AristaEosNtpSetting interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Status() (string, error)
}

// mqlAristaEosNtpSetting for the arista.eos.ntpSetting resource
type mqlAristaEosNtpSetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosNtpSetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.ntpSetting resource
func newAristaEosNtpSetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosNtpSetting{runtime.NewResource("arista.eos.ntpSetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ntpSetting\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ntpSetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.ntpSetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosNtpSetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"arista.eos.ntpSetting\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosNtpSetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.ntpSetting].Register")
	switch name {
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.ntpSetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosNtpSetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.ntpSetting].Field")
	switch name {
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.ntpSetting\" resource")
	}
}

// Status accessor autogenerated
func (s *mqlAristaEosNtpSetting) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.ntpSetting\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.ntpSetting\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosNtpSetting) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.ntpSetting].MqlCompute")
	switch name {
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.ntpSetting\" resource")
	}
}

// AristaEosInterface resource interface
type AristaEosInterface interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Bandwidth() (int64, error)
	BurnedInAddress() (string, error)
	Description() (string, error)
	ForwardingModel() (string, error)
	Hardware() (string, error)
	InterfaceAddress() ([]interface{}, error)
	InterfaceCounters() (interface{}, error)
	InterfaceMembership() (string, error)
	InterfaceStatistics() (interface{}, error)
	InterfaceStatus() (string, error)
	L2Mtu() (int64, error)
	LastStatusChangeTimestamp() (int64, error)
	LineProtocolStatus() (string, error)
	Mtu() (int64, error)
	PhysicalAddress() (string, error)
	Status() (interface{}, error)
}

// mqlAristaEosInterface for the arista.eos.interface resource
type mqlAristaEosInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.interface resource
func newAristaEosInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosInterface{runtime.NewResource("arista.eos.interface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "bandwidth":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"bandwidth\" argument has the wrong type (expected type \"int64\")")
			}
		case "burnedInAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"burnedInAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "forwardingModel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"forwardingModel\" argument has the wrong type (expected type \"string\")")
			}
		case "hardware":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"hardware\" argument has the wrong type (expected type \"string\")")
			}
		case "interfaceAddress":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"interfaceAddress\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "interfaceCounters":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"interfaceCounters\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaceMembership":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"interfaceMembership\" argument has the wrong type (expected type \"string\")")
			}
		case "interfaceStatistics":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"interfaceStatistics\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaceStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"interfaceStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "l2Mtu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"l2Mtu\" argument has the wrong type (expected type \"int64\")")
			}
		case "lastStatusChangeTimestamp":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"lastStatusChangeTimestamp\" argument has the wrong type (expected type \"int64\")")
			}
		case "lineProtocolStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"lineProtocolStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "mtu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"mtu\" argument has the wrong type (expected type \"int64\")")
			}
		case "physicalAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"physicalAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"status\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.interface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.interface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("bandwidth"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"bandwidth\". This field is required.")
	}
	if _, ok := s.Cache.Load("burnedInAddress"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"burnedInAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("forwardingModel"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"forwardingModel\". This field is required.")
	}
	if _, ok := s.Cache.Load("hardware"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"hardware\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaceAddress"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"interfaceAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaceCounters"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"interfaceCounters\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaceMembership"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"interfaceMembership\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaceStatistics"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"interfaceStatistics\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaceStatus"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"interfaceStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("l2Mtu"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"l2Mtu\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStatusChangeTimestamp"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"lastStatusChangeTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lineProtocolStatus"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"lineProtocolStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("mtu"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"mtu\". This field is required.")
	}
	if _, ok := s.Cache.Load("physicalAddress"); !ok {
		return errors.New("Initialized \"arista.eos.interface\" resource without a \"physicalAddress\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.interface].Register")
	switch name {
	case "name":
		return nil
	case "bandwidth":
		return nil
	case "burnedInAddress":
		return nil
	case "description":
		return nil
	case "forwardingModel":
		return nil
	case "hardware":
		return nil
	case "interfaceAddress":
		return nil
	case "interfaceCounters":
		return nil
	case "interfaceMembership":
		return nil
	case "interfaceStatistics":
		return nil
	case "interfaceStatus":
		return nil
	case "l2Mtu":
		return nil
	case "lastStatusChangeTimestamp":
		return nil
	case "lineProtocolStatus":
		return nil
	case "mtu":
		return nil
	case "physicalAddress":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.interface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.interface].Field")
	switch name {
	case "name":
		return s.Name()
	case "bandwidth":
		return s.Bandwidth()
	case "burnedInAddress":
		return s.BurnedInAddress()
	case "description":
		return s.Description()
	case "forwardingModel":
		return s.ForwardingModel()
	case "hardware":
		return s.Hardware()
	case "interfaceAddress":
		return s.InterfaceAddress()
	case "interfaceCounters":
		return s.InterfaceCounters()
	case "interfaceMembership":
		return s.InterfaceMembership()
	case "interfaceStatistics":
		return s.InterfaceStatistics()
	case "interfaceStatus":
		return s.InterfaceStatus()
	case "l2Mtu":
		return s.L2Mtu()
	case "lastStatusChangeTimestamp":
		return s.LastStatusChangeTimestamp()
	case "lineProtocolStatus":
		return s.LineProtocolStatus()
	case "mtu":
		return s.Mtu()
	case "physicalAddress":
		return s.PhysicalAddress()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.interface\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAristaEosInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Bandwidth accessor autogenerated
func (s *mqlAristaEosInterface) Bandwidth() (int64, error) {
	res, ok := s.Cache.Load("bandwidth")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"bandwidth\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"bandwidth\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// BurnedInAddress accessor autogenerated
func (s *mqlAristaEosInterface) BurnedInAddress() (string, error) {
	res, ok := s.Cache.Load("burnedInAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"burnedInAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"burnedInAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAristaEosInterface) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ForwardingModel accessor autogenerated
func (s *mqlAristaEosInterface) ForwardingModel() (string, error) {
	res, ok := s.Cache.Load("forwardingModel")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"forwardingModel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"forwardingModel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hardware accessor autogenerated
func (s *mqlAristaEosInterface) Hardware() (string, error) {
	res, ok := s.Cache.Load("hardware")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"hardware\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"hardware\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InterfaceAddress accessor autogenerated
func (s *mqlAristaEosInterface) InterfaceAddress() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaceAddress")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"interfaceAddress\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"interfaceAddress\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// InterfaceCounters accessor autogenerated
func (s *mqlAristaEosInterface) InterfaceCounters() (interface{}, error) {
	res, ok := s.Cache.Load("interfaceCounters")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"interfaceCounters\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"interfaceCounters\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InterfaceMembership accessor autogenerated
func (s *mqlAristaEosInterface) InterfaceMembership() (string, error) {
	res, ok := s.Cache.Load("interfaceMembership")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"interfaceMembership\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"interfaceMembership\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InterfaceStatistics accessor autogenerated
func (s *mqlAristaEosInterface) InterfaceStatistics() (interface{}, error) {
	res, ok := s.Cache.Load("interfaceStatistics")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"interfaceStatistics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"interfaceStatistics\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InterfaceStatus accessor autogenerated
func (s *mqlAristaEosInterface) InterfaceStatus() (string, error) {
	res, ok := s.Cache.Load("interfaceStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"interfaceStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"interfaceStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// L2Mtu accessor autogenerated
func (s *mqlAristaEosInterface) L2Mtu() (int64, error) {
	res, ok := s.Cache.Load("l2Mtu")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"l2Mtu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"l2Mtu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// LastStatusChangeTimestamp accessor autogenerated
func (s *mqlAristaEosInterface) LastStatusChangeTimestamp() (int64, error) {
	res, ok := s.Cache.Load("lastStatusChangeTimestamp")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"lastStatusChangeTimestamp\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"lastStatusChangeTimestamp\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// LineProtocolStatus accessor autogenerated
func (s *mqlAristaEosInterface) LineProtocolStatus() (string, error) {
	res, ok := s.Cache.Load("lineProtocolStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"lineProtocolStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"lineProtocolStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mtu accessor autogenerated
func (s *mqlAristaEosInterface) Mtu() (int64, error) {
	res, ok := s.Cache.Load("mtu")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.interface\" failed: no value provided for static field \"mtu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"mtu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// PhysicalAddress accessor autogenerated
func (s *mqlAristaEosInterface) PhysicalAddress() (string, error) {
	res, ok := s.Cache.Load("physicalAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.interface\" failed: no value provided for static field \"physicalAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.interface\" failed to cast field \"physicalAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAristaEosInterface) Status() (interface{}, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		if err := s.ComputeStatus(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("status")
		if !ok {
			return nil, errors.New("\"arista.eos.interface\" calculated \"status\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "status")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.interface\" failed to cast field \"status\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosInterface) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.interface].MqlCompute")
	switch name {
	case "name":
		return nil
	case "bandwidth":
		return nil
	case "burnedInAddress":
		return nil
	case "description":
		return nil
	case "forwardingModel":
		return nil
	case "hardware":
		return nil
	case "interfaceAddress":
		return nil
	case "interfaceCounters":
		return nil
	case "interfaceMembership":
		return nil
	case "interfaceStatistics":
		return nil
	case "interfaceStatus":
		return nil
	case "l2Mtu":
		return nil
	case "lastStatusChangeTimestamp":
		return nil
	case "lineProtocolStatus":
		return nil
	case "mtu":
		return nil
	case "physicalAddress":
		return nil
	case "status":
		return s.ComputeStatus()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.interface\" resource")
	}
}

// ComputeStatus computer autogenerated
func (s *mqlAristaEosInterface) ComputeStatus() error {
	var err error
	if _, ok := s.Cache.Load("status"); ok {
		return nil
	}
	vres, err := s.GetStatus()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("status", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosIpInterface resource interface
type AristaEosIpInterface interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Address() (string, error)
	Mtu() (string, error)
}

// mqlAristaEosIpInterface for the arista.eos.ipInterface resource
type mqlAristaEosIpInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosIpInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.ipInterface resource
func newAristaEosIpInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosIpInterface{runtime.NewResource("arista.eos.ipInterface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ipInterface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "address":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ipInterface\", its \"address\" argument has the wrong type (expected type \"string\")")
			}
		case "mtu":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ipInterface\", its \"mtu\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.ipInterface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.ipInterface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosIpInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.ipInterface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("address"); !ok {
		return errors.New("Initialized \"arista.eos.ipInterface\" resource without a \"address\". This field is required.")
	}
	if _, ok := s.Cache.Load("mtu"); !ok {
		return errors.New("Initialized \"arista.eos.ipInterface\" resource without a \"mtu\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosIpInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.ipInterface].Register")
	switch name {
	case "name":
		return nil
	case "address":
		return nil
	case "mtu":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.ipInterface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosIpInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.ipInterface].Field")
	switch name {
	case "name":
		return s.Name()
	case "address":
		return s.Address()
	case "mtu":
		return s.Mtu()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.ipInterface\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAristaEosIpInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.ipInterface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.ipInterface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Address accessor autogenerated
func (s *mqlAristaEosIpInterface) Address() (string, error) {
	res, ok := s.Cache.Load("address")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.ipInterface\" failed: no value provided for static field \"address\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.ipInterface\" failed to cast field \"address\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mtu accessor autogenerated
func (s *mqlAristaEosIpInterface) Mtu() (string, error) {
	res, ok := s.Cache.Load("mtu")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.ipInterface\" failed: no value provided for static field \"mtu\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.ipInterface\" failed to cast field \"mtu\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosIpInterface) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.ipInterface].MqlCompute")
	switch name {
	case "name":
		return nil
	case "address":
		return nil
	case "mtu":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.ipInterface\" resource")
	}
}

// AristaEosStp resource interface
type AristaEosStp interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	MstInstances() ([]interface{}, error)
}

// mqlAristaEosStp for the arista.eos.stp resource
type mqlAristaEosStp struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosStp) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.stp resource
func newAristaEosStp(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosStp{runtime.NewResource("arista.eos.stp")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "mstInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp\", its \"mstInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.stp with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosStp) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosStp) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.stp].Register")
	switch name {
	case "mstInstances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.stp\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosStp) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.stp].Field")
	switch name {
	case "mstInstances":
		return s.MstInstances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.stp\" resource")
	}
}

// MstInstances accessor autogenerated
func (s *mqlAristaEosStp) MstInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("mstInstances")
	if !ok || !res.Valid {
		if err := s.ComputeMstInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mstInstances")
		if !ok {
			return nil, errors.New("\"arista.eos.stp\" calculated \"mstInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mstInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.stp\" failed to cast field \"mstInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosStp) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.stp].MqlCompute")
	switch name {
	case "mstInstances":
		return s.ComputeMstInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.stp\" resource")
	}
}

// ComputeMstInstances computer autogenerated
func (s *mqlAristaEosStp) ComputeMstInstances() error {
	var err error
	if _, ok := s.Cache.Load("mstInstances"); ok {
		return nil
	}
	vres, err := s.GetMstInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mstInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AristaEosStpMst resource interface
type AristaEosStpMst interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	InstanceId() (string, error)
	Name() (string, error)
	Protocol() (string, error)
	Bridge() (interface{}, error)
	RootBridge() (interface{}, error)
	RegionalRootBridge() (interface{}, error)
	Interfaces() ([]interface{}, error)
}

// mqlAristaEosStpMst for the arista.eos.stp.mst resource
type mqlAristaEosStpMst struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosStpMst) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.stp.mst resource
func newAristaEosStpMst(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosStpMst{runtime.NewResource("arista.eos.stp.mst")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instanceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"instanceId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "protocol":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"protocol\" argument has the wrong type (expected type \"string\")")
			}
		case "bridge":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"bridge\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rootBridge":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"rootBridge\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "regionalRootBridge":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"regionalRootBridge\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.stp.mst\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.stp.mst with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosStpMst) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("instanceId"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"instanceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("protocol"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"protocol\". This field is required.")
	}
	if _, ok := s.Cache.Load("bridge"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"bridge\". This field is required.")
	}
	if _, ok := s.Cache.Load("rootBridge"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"rootBridge\". This field is required.")
	}
	if _, ok := s.Cache.Load("regionalRootBridge"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"regionalRootBridge\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaces"); !ok {
		return errors.New("Initialized \"arista.eos.stp.mst\" resource without a \"interfaces\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosStpMst) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.stp.mst].Register")
	switch name {
	case "instanceId":
		return nil
	case "name":
		return nil
	case "protocol":
		return nil
	case "bridge":
		return nil
	case "rootBridge":
		return nil
	case "regionalRootBridge":
		return nil
	case "interfaces":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.stp.mst\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosStpMst) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.stp.mst].Field")
	switch name {
	case "instanceId":
		return s.InstanceId()
	case "name":
		return s.Name()
	case "protocol":
		return s.Protocol()
	case "bridge":
		return s.Bridge()
	case "rootBridge":
		return s.RootBridge()
	case "regionalRootBridge":
		return s.RegionalRootBridge()
	case "interfaces":
		return s.Interfaces()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.stp.mst\" resource")
	}
}

// InstanceId accessor autogenerated
func (s *mqlAristaEosStpMst) InstanceId() (string, error) {
	res, ok := s.Cache.Load("instanceId")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"instanceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"instanceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAristaEosStpMst) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Protocol accessor autogenerated
func (s *mqlAristaEosStpMst) Protocol() (string, error) {
	res, ok := s.Cache.Load("protocol")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"protocol\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"protocol\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Bridge accessor autogenerated
func (s *mqlAristaEosStpMst) Bridge() (interface{}, error) {
	res, ok := s.Cache.Load("bridge")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"bridge\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"bridge\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RootBridge accessor autogenerated
func (s *mqlAristaEosStpMst) RootBridge() (interface{}, error) {
	res, ok := s.Cache.Load("rootBridge")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"rootBridge\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"rootBridge\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RegionalRootBridge accessor autogenerated
func (s *mqlAristaEosStpMst) RegionalRootBridge() (interface{}, error) {
	res, ok := s.Cache.Load("regionalRootBridge")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"regionalRootBridge\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"regionalRootBridge\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAristaEosStpMst) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.stp.mst\" failed: no value provided for static field \"interfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.stp.mst\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosStpMst) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.stp.mst].MqlCompute")
	switch name {
	case "instanceId":
		return nil
	case "name":
		return nil
	case "protocol":
		return nil
	case "bridge":
		return nil
	case "rootBridge":
		return nil
	case "regionalRootBridge":
		return nil
	case "interfaces":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.stp.mst\" resource")
	}
}

// AristaEosSptMstInterface resource interface
type AristaEosSptMstInterface interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	MstInstanceId() (string, error)
	Name() (string, error)
	Priority() (int64, error)
	LinkType() (string, error)
	State() (string, error)
	Cost() (int64, error)
	Role() (string, error)
	InconsistentFeatures() (interface{}, error)
	PortNumber() (int64, error)
	IsEdgePort() (bool, error)
	Detail() (interface{}, error)
	BoundaryType() (string, error)
	Counters() (interface{}, error)
	Features() (interface{}, error)
}

// mqlAristaEosSptMstInterface for the arista.eos.spt.mstInterface resource
type mqlAristaEosSptMstInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAristaEosSptMstInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the arista.eos.spt.mstInterface resource
func newAristaEosSptMstInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAristaEosSptMstInterface{runtime.NewResource("arista.eos.spt.mstInterface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "mstInstanceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"mstInstanceId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"priority\" argument has the wrong type (expected type \"int64\")")
			}
		case "linkType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"linkType\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "cost":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"cost\" argument has the wrong type (expected type \"int64\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "inconsistentFeatures":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"inconsistentFeatures\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "portNumber":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"portNumber\" argument has the wrong type (expected type \"int64\")")
			}
		case "isEdgePort":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"isEdgePort\" argument has the wrong type (expected type \"bool\")")
			}
		case "detail":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"detail\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "boundaryType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"boundaryType\" argument has the wrong type (expected type \"string\")")
			}
		case "counters":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"counters\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "features":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"features\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"arista.eos.spt.mstInterface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized arista.eos.spt.mstInterface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAristaEosSptMstInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("mstInstanceId"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"mstInstanceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("linkType"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"linkType\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("cost"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"cost\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"role\". This field is required.")
	}
	if _, ok := s.Cache.Load("inconsistentFeatures"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"inconsistentFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("portNumber"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"portNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEdgePort"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"isEdgePort\". This field is required.")
	}
	if _, ok := s.Cache.Load("detail"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"detail\". This field is required.")
	}
	if _, ok := s.Cache.Load("boundaryType"); !ok {
		return errors.New("Initialized \"arista.eos.spt.mstInterface\" resource without a \"boundaryType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.spt.mstInterface].Register")
	switch name {
	case "id":
		return nil
	case "mstInstanceId":
		return nil
	case "name":
		return nil
	case "priority":
		return nil
	case "linkType":
		return nil
	case "state":
		return nil
	case "cost":
		return nil
	case "role":
		return nil
	case "inconsistentFeatures":
		return nil
	case "portNumber":
		return nil
	case "isEdgePort":
		return nil
	case "detail":
		return nil
	case "boundaryType":
		return nil
	case "counters":
		return nil
	case "features":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.spt.mstInterface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[arista.eos.spt.mstInterface].Field")
	switch name {
	case "id":
		return s.Id()
	case "mstInstanceId":
		return s.MstInstanceId()
	case "name":
		return s.Name()
	case "priority":
		return s.Priority()
	case "linkType":
		return s.LinkType()
	case "state":
		return s.State()
	case "cost":
		return s.Cost()
	case "role":
		return s.Role()
	case "inconsistentFeatures":
		return s.InconsistentFeatures()
	case "portNumber":
		return s.PortNumber()
	case "isEdgePort":
		return s.IsEdgePort()
	case "detail":
		return s.Detail()
	case "boundaryType":
		return s.BoundaryType()
	case "counters":
		return s.Counters()
	case "features":
		return s.Features()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"arista.eos.spt.mstInterface\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MstInstanceId accessor autogenerated
func (s *mqlAristaEosSptMstInterface) MstInstanceId() (string, error) {
	res, ok := s.Cache.Load("mstInstanceId")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"mstInstanceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"mstInstanceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Priority() (int64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"priority\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// LinkType accessor autogenerated
func (s *mqlAristaEosSptMstInterface) LinkType() (string, error) {
	res, ok := s.Cache.Load("linkType")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"linkType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"linkType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAristaEosSptMstInterface) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Cost accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Cost() (int64, error) {
	res, ok := s.Cache.Load("cost")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"cost\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"cost\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InconsistentFeatures accessor autogenerated
func (s *mqlAristaEosSptMstInterface) InconsistentFeatures() (interface{}, error) {
	res, ok := s.Cache.Load("inconsistentFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"inconsistentFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"inconsistentFeatures\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PortNumber accessor autogenerated
func (s *mqlAristaEosSptMstInterface) PortNumber() (int64, error) {
	res, ok := s.Cache.Load("portNumber")
	if !ok || !res.Valid {
		return 0, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"portNumber\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"portNumber\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsEdgePort accessor autogenerated
func (s *mqlAristaEosSptMstInterface) IsEdgePort() (bool, error) {
	res, ok := s.Cache.Load("isEdgePort")
	if !ok || !res.Valid {
		return false, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"isEdgePort\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"isEdgePort\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Detail accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Detail() (interface{}, error) {
	res, ok := s.Cache.Load("detail")
	if !ok || !res.Valid {
		return nil, errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"detail\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"detail\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// BoundaryType accessor autogenerated
func (s *mqlAristaEosSptMstInterface) BoundaryType() (string, error) {
	res, ok := s.Cache.Load("boundaryType")
	if !ok || !res.Valid {
		return "", errors.New("\"arista.eos.spt.mstInterface\" failed: no value provided for static field \"boundaryType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"boundaryType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Counters accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Counters() (interface{}, error) {
	res, ok := s.Cache.Load("counters")
	if !ok || !res.Valid {
		if err := s.ComputeCounters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("counters")
		if !ok {
			return nil, errors.New("\"arista.eos.spt.mstInterface\" calculated \"counters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "counters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"counters\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Features accessor autogenerated
func (s *mqlAristaEosSptMstInterface) Features() (interface{}, error) {
	res, ok := s.Cache.Load("features")
	if !ok || !res.Valid {
		if err := s.ComputeFeatures(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("features")
		if !ok {
			return nil, errors.New("\"arista.eos.spt.mstInterface\" calculated \"features\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "features")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"arista.eos.spt.mstInterface\" failed to cast field \"features\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAristaEosSptMstInterface) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[arista.eos.spt.mstInterface].MqlCompute")
	switch name {
	case "id":
		return nil
	case "mstInstanceId":
		return nil
	case "name":
		return nil
	case "priority":
		return nil
	case "linkType":
		return nil
	case "state":
		return nil
	case "cost":
		return nil
	case "role":
		return nil
	case "inconsistentFeatures":
		return nil
	case "portNumber":
		return nil
	case "isEdgePort":
		return nil
	case "detail":
		return nil
	case "boundaryType":
		return nil
	case "counters":
		return s.ComputeCounters()
	case "features":
		return s.ComputeFeatures()
	default:
		return errors.New("Cannot find field '" + name + "' in \"arista.eos.spt.mstInterface\" resource")
	}
}

// ComputeCounters computer autogenerated
func (s *mqlAristaEosSptMstInterface) ComputeCounters() error {
	var err error
	if _, ok := s.Cache.Load("counters"); ok {
		return nil
	}
	vres, err := s.GetCounters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("counters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFeatures computer autogenerated
func (s *mqlAristaEosSptMstInterface) ComputeFeatures() error {
	var err error
	if _, ok := s.Cache.Load("features"); ok {
		return nil
	}
	vres, err := s.GetFeatures()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("features", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

