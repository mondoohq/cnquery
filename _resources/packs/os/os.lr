
import "../core/core.lr"

option go_package = "go.mondoo.com/cnquery/resources/packs/os"

alias os.base.command = command
alias os.base.find = files.find
alias os.base.user = core.user
alias os.base.group = core.group
alias os.base.file = core.file
alias os.base.time = core.time
alias os.base.packages = core.packages
alias os.base.platform = core.platform
alias os.base.platform.virtualization = core.platform.virtualization
alias os.base.platform.advisories = core.platform.advisories
alias os.base.service = service
alias os.base.services = services
alias os.unix.sshd = sshd
alias os.unix.ntp = ntp.conf
alias os.unix.rsyslog = rsyslog.conf
alias os.unix.lsblk = lsblk
alias os.unix.mount = mount
alias os.unix.shadow = shadow
alias os.linux.yum = yum

// Windows registry key
registrykey @defaults("path") {
  init(path string)
  // Registry key path
  path string
  exists() bool
  // Registry key properties
  properties() map[string]string
  // Registry key children
  children() []string
}

// Windows registry key property
registrykey.property @defaults("path name") {
  init(path string, name string)
  path string
  name string
  value() string
  exists() bool
}

// Windows-specific resource to get operating system details
windows {
  // A consolidated object of system and operating system properties
  // 
  // see https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.commands.computerinfo?view=powershellsdk-1.1.0 for more information
  computerInfo() dict

  // Hotfixes installed on the computer
  hotfixes() []windows.hotfix

  // Information about Windows Server roles, role services, and features that are available for installation and installed on a specified server.
  features() []windows.feature
}

// Windows hotfix resource
windows.hotfix {
  init(hotfixId string)
  // Hotfix ID
  hotfixId string
  // Type of hotfix eg. `Update` or `Security Update`
  description string
  // Reference to knowledge base
  caption string
  // Date the hotfix was installed on
  installedOn time
  // User that installed the hotfix
  installedBy string
}

// Windows feature resource
windows.feature {
  init(name string)
  // Feature full path 
  path string
  // Command IDs of role, role service, or feature
  name string
  // Feature name
  displayName string
  // Feature description
  description string
  // Flag indicates whether the feature is installed
  installed bool
  // Feature installation state
  installState int
}

// Windows Firewall resource
windows.firewall {
  // Global firewall settings
  settings() dict
  // Settings that apply to the per-profile configurations of the Windows Firewall with Advanced Security
  profiles() []windows.firewall.profile
  // Firewall rules
  rules() []windows.firewall.rule
}

// Windows Firewall profile entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallprofile
windows.firewall.profile {
  instanceID string
  // Name of the profile
  name string
  // Whether the firewall is enabled on this profile
  enabled int
  // Default action for inbound traffic
  defaultInboundAction int
  // Default action for outbound traffic
  defaultOutboundAction int
  // If this is true, administrators will be able to create firewall rules which allow unsolicited inbound traffic to be accepted if this is false, such rules will be ignored
  allowInboundRules int
  // Determines whether local firewall rules should be merged into the effective policy along with group policy settings
  allowLocalFirewallRules int
  // Determines whether local IPsec rules should be merged into the effective policy along with rules from group policy
  allowLocalIPsecRules int
  // Whether to respect user allowed applications created in the legacy firewall
  allowUserApps int
  // Whether to respect globally opened ports created in the legacy firewall
  allowUserPorts int
  // Whether to allow unicast responses to multicast traffic
  allowUnicastResponseToMulticast int
  // If true, users will be notified when an application listens on a port that is close
  notifyOnListen int
  // Whether to use stealth mode for IPsec-protected traffic
  enableStealthModeForIPsec int
  // Maximum size the log file can reach before being rotated
  logMaxSizeKilobytes int
  // Whether to log allowed packets
  logAllowed int
  // Whether to log blocked traffic
  logBlocked int
  // Whether to log an event when rules are ignored
  logIgnored int
  // Filename in which to store the firewall log
  logFileName string
}

// Windows Firewall rule entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallrule
windows.firewall.rule {
  // A string that uniquely identifies this instance within the PolicyStore
  instanceID string
  // Name of the rule
  name string
  // Localized name of this rule
  displayName string
  // Brief description of the rule
  description string
  // The group that this rule belongs to
  displayGroup string
  // Indicates whether this rule is administratively enabled or disabled
  // values: enabled (1), disabled (2)
  enabled int
  // Specifies which direction of traffic to match with this rule
  // values: inbound (1), outbound (2)
  direction int
  // Specifies the action to take on traffic that matches this rule
  action int
  // Specifies how this firewall rule will handle edge traversal cases
  // values: block (0), allow (1), defer to user (2), defer to app (3)
  edgeTraversalPolicy int
  // Whether to group UDP packets into conversations based upon the local address, local port, and remote port
  looseSourceMapping bool
  // Whether to group UDP packets into conversations based only upon the local address and port
  localOnlyMapping bool
  // PrimaryStatus provides a high level status value
  // values: unknown (0), ok (1), degraded (2), error (3)
  primaryStatus int
  // Detailed status of the rule
  status string
  // If this object is retrieved from the ActiveStore
  enforcementStatus string
  // Contains the path to the policy store where this rule originally came from
  policyStoreSource string
  // Describes the type of policy store where this rule originally came from
  policyStoreSourceType int
}

// Windows BitLocker
windows.bitlocker {
  volumes() []windows.bitlocker.volume
}

// Windows BitLocker volume
windows.bitlocker.volume {
  // Unique identifier for the volume
  deviceID string
  // Drive letter of the volume
  driveLetter string
  // Indicates the status of the encryption or decryption on the volume
  conversionStatus dict
  // Encryption algorithm and key size used on the volume
  encryptionMethod dict
  // Indicates whether the contents of the volume are accessible from Windows
  // 0 = full contents of the volume are accessible
  // 1 = all or a portion of the contents of the volume are not accessible
  lockStatus int
  // Persistent identifier for the volume on this system
  persistentVolumeID string
  // Status of the volume, whether or not BitLocker is protecting the volume
  // 0 = Protection Off
  // 1 = Protection On
  // 2 = Protection Unknown
  protectionStatus dict
  // BitLocker Full Volume Encryption metadata version of the volume
  version dict
}

windows.security {
  products() []windows.security.product
}

private windows.security.product {
  type string
  guid string
  name string
  state int
  productState string
  signatureState string
  timestamp time
}

// Returns the health for Windows security provider
windows.security.health {
  firewall dict
  autoUpdate dict
  antiVirus dict
  antiSpyware dict
  internetSettings dict
  uac dict
  securityCenterService dict
}

// Container Image
container.image {
  // Fully-qualified reference name
  name string
  // Identifier of type-specific portion of the image reference
  identifier string
  // Identifier Type `tag` or `digest`
  identifierType string
  // Repository used for Container Image
  repository() container.repository
}

// Container registry repository
container.repository {
  // Container Registry Repository Name
  name string
  // URL Scheme
  scheme string
  // Container Registry Repository URL
  fullName string
  // Container Registry URL
  registry string
}

// Equinix Metal project
equinix.metal.project {
  id string
  name string
  organization() equinix.metal.organization
  createdAt time
  updatedAt time
  url string
  paymentMethod dict
  users() []equinix.metal.user
  sshKeys() []equinix.metal.sshkey
  devices() []equinix.metal.device
}

// Equinix Metal organization
equinix.metal.organization {
  id string
  name string
  description string
  website string
  twitter string
  createdAt time
  updatedAt time
  address dict
  taxId string
  mainPhone string
  billingPhone string
  creditAmount float
  url string
}

// Equinix Metal user
equinix.metal.user {
  id string
  firstName string
  lastName string
  fullName string
  email string
  twoFactorAuth string
  avatarUrl string
  twitter string
  facebook string
  linkedin string
  createdAt time
  updatedAt time
  timezone string
  phoneNumber string
  url string
  vpn bool
}

// Equinix Metal SSH key
equinix.metal.sshkey {
  id string
  label string
  key string
  fingerPrint string
  createdAt time
  updatedAt time
  url string
}

// Equinix Metal device
equinix.metal.device {
  id string
  shortID string
  url string
  hostname string
  description string
  state string
  createdAt time
  updatedAt time
  locked bool
  billingCycle string
  spotInstance bool
  os dict
}

// macOS specific resources
macos {
  // macOS user defaults
  userPreferences() map[string]dict
  // macOS user defaults for current host
  userHostPreferences() map[string]dict
  // macOS global account policies
  globalAccountPolicies() dict
}

// macOS application layer firewall (ALF) service
macos.alf {
  // Allow downloaded software to receive incoming connections
  allowDownloadSignedEnabled int
  // Allow built-in software to receive incoming connections for signed software
  allowSignedEnabled int
  // Flag if firewall is unloaded
  firewallUnload int
  // Indicates if the firewall is enabled
  globalState int
  // Specifies if alf.log is used
  loggingEnabled int
  // Specifies logging flags
  loggingOption int
  // Stealth mode
  stealthEnabled int
  // ALF version
  version string
  // Service exceptions
  exceptions []dict
  // Services explicitly allowed to perform networking
  explicitAuths []string
  // Applications with exceptions for network blocking
  applications []dict
}

// macOS machine settings
// The resource requires at least "admin" privileges to run
macos.systemsetup {
  // Current date
  date() string
  // Current time in 24-hour format
  time() string
  // Current time zone
  timeZone() string
  // Whether network time is on or off
  usingNetworkTime() string
  // Configured network time server
  networkTimeServer() string
  // Amount of idle time until machine sleeps
  sleep() []string
  // Amount of idle time until display sleeps
  displaySleep() string
  // Amount of idle time until hard disk sleeps
  harddiskSleep() string
  // Whether wake on modem is on or off
  wakeOnModem() string
  // Whether wake on network access is on or off
  wakeOnNetworkAccess() string
  // Whether restart on power failure is on or off
  restartPowerFailure() string
  // Whether restart on freeze is on or off
  restartFreeze() string
  // Whether the power button can sleep the computer
  allowPowerButtonToSleepComputer() string
  // Whether remote login (SSH) is on or off
  remoteLogin() string
  // Whether remote apple events are on or off
  remoteAppleEvents() string
  // Computer name
  computerName() string
  // Local subnet name
  localSubnetName() string
  // Current startup disk
  startupDisk() string
  // Number of seconds after which the computer will start up after a power failure
  waitForStartupAfterPowerFailure() string
  // Whether or not the keyboard should be disabled when the X Serve enclosure lock is engaged
  disableKeyboardWhenEnclosureLockIsEngaged() string
}

// macOS Time Machine
macos.timemachine {
  // macOS Time Machine preferences
  preferences() dict
}

// macOS keychains and security framework
macos.security {
  // Deprecated: Authorization policy database
  authorizationDB() dict
}

