// Code generated by resources. DO NOT EDIT.
package ipmi

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("ipmi", newIpmi)
	registry.AddFactory("ipmi.chassis", newIpmiChassis)
}

// Ipmi resource interface
type Ipmi interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DeviceID() (interface{}, error)
	Guid() (string, error)
}

// mqlIpmi for the ipmi resource
type mqlIpmi struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlIpmi) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the ipmi resource
func newIpmi(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlIpmi{runtime.NewResource("ipmi")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "deviceID":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ipmi\", its \"deviceID\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "guid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"ipmi\", its \"guid\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"ipmi\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized ipmi with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlIpmi) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlIpmi) Register(name string) error {
	log.Trace().Str("field", name).Msg("[ipmi].Register")
	switch name {
	case "deviceID":
		return nil
	case "guid":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ipmi\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlIpmi) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[ipmi].Field")
	switch name {
	case "deviceID":
		return s.DeviceID()
	case "guid":
		return s.Guid()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"ipmi\" resource")
	}
}

// DeviceID accessor autogenerated
func (s *mqlIpmi) DeviceID() (interface{}, error) {
	res, ok := s.Cache.Load("deviceID")
	if !ok || !res.Valid {
		if err := s.ComputeDeviceID(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("deviceID")
		if !ok {
			return nil, errors.New("\"ipmi\" calculated \"deviceID\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "deviceID")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ipmi\" failed to cast field \"deviceID\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Guid accessor autogenerated
func (s *mqlIpmi) Guid() (string, error) {
	res, ok := s.Cache.Load("guid")
	if !ok || !res.Valid {
		if err := s.ComputeGuid(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("guid")
		if !ok {
			return "", errors.New("\"ipmi\" calculated \"guid\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "guid")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"ipmi\" failed to cast field \"guid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlIpmi) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[ipmi].MqlCompute")
	switch name {
	case "deviceID":
		return s.ComputeDeviceID()
	case "guid":
		return s.ComputeGuid()
	default:
		return errors.New("Cannot find field '" + name + "' in \"ipmi\" resource")
	}
}

// ComputeDeviceID computer autogenerated
func (s *mqlIpmi) ComputeDeviceID() error {
	var err error
	if _, ok := s.Cache.Load("deviceID"); ok {
		return nil
	}
	vres, err := s.GetDeviceID()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("deviceID", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGuid computer autogenerated
func (s *mqlIpmi) ComputeGuid() error {
	var err error
	if _, ok := s.Cache.Load("guid"); ok {
		return nil
	}
	vres, err := s.GetGuid()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("guid", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// IpmiChassis resource interface
type IpmiChassis interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Status() (interface{}, error)
	SystemBootOptions() (interface{}, error)
}

// mqlIpmiChassis for the ipmi.chassis resource
type mqlIpmiChassis struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlIpmiChassis) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the ipmi.chassis resource
func newIpmiChassis(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlIpmiChassis{runtime.NewResource("ipmi.chassis")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "status":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ipmi.chassis\", its \"status\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "systemBootOptions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ipmi.chassis\", its \"systemBootOptions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"ipmi.chassis\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized ipmi.chassis with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlIpmiChassis) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlIpmiChassis) Register(name string) error {
	log.Trace().Str("field", name).Msg("[ipmi.chassis].Register")
	switch name {
	case "status":
		return nil
	case "systemBootOptions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ipmi.chassis\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlIpmiChassis) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[ipmi.chassis].Field")
	switch name {
	case "status":
		return s.Status()
	case "systemBootOptions":
		return s.SystemBootOptions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"ipmi.chassis\" resource")
	}
}

// Status accessor autogenerated
func (s *mqlIpmiChassis) Status() (interface{}, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		if err := s.ComputeStatus(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("status")
		if !ok {
			return nil, errors.New("\"ipmi.chassis\" calculated \"status\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "status")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ipmi.chassis\" failed to cast field \"status\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SystemBootOptions accessor autogenerated
func (s *mqlIpmiChassis) SystemBootOptions() (interface{}, error) {
	res, ok := s.Cache.Load("systemBootOptions")
	if !ok || !res.Valid {
		if err := s.ComputeSystemBootOptions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("systemBootOptions")
		if !ok {
			return nil, errors.New("\"ipmi.chassis\" calculated \"systemBootOptions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "systemBootOptions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ipmi.chassis\" failed to cast field \"systemBootOptions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlIpmiChassis) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[ipmi.chassis].MqlCompute")
	switch name {
	case "status":
		return s.ComputeStatus()
	case "systemBootOptions":
		return s.ComputeSystemBootOptions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"ipmi.chassis\" resource")
	}
}

// ComputeStatus computer autogenerated
func (s *mqlIpmiChassis) ComputeStatus() error {
	var err error
	if _, ok := s.Cache.Load("status"); ok {
		return nil
	}
	vres, err := s.GetStatus()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("status", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSystemBootOptions computer autogenerated
func (s *mqlIpmiChassis) ComputeSystemBootOptions() error {
	var err error
	if _, ok := s.Cache.Load("systemBootOptions"); ok {
		return nil
	}
	vres, err := s.GetSystemBootOptions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("systemBootOptions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

