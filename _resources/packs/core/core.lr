option go_package = "go.mondoo.com/cnquery/resources/packs/core"

// Mondoo asset information
mondoo.asset {
  // Platform Identifier
  platformIDs() []string
}

// General asset information
asset @defaults("name platform version") {
  // Human readable name of the asset
  name string
  // All identifiers for this asset
  ids() []string
  // Platform for this asset (redhat, windows, k8s-pod)
  platform string
  // Kind of platform, for example:
  // api, baremetal, vm, vm-image, container, container-image, network, ...
  kind string
  // Runtime is the specific kind of the platform. Examples include:
  // docker-container, podman-container, aws-ec2-instance, ...
  runtime string
  // Version of the platform
  version string
  // Architecture this OS is running on
  arch string
  // Human-readable title of the platform (e.g. "Red Hat 8, Container")
  title string
  // List of platform families that this platform belongs to
  family []string
  // Fully qualified domain name (optional)
  fqdn string
  // Build version of the platform (optional)
  build string
  // Optional platform information
  labels map[string]string

  // Full advisory & vulnerability report
  vulnerabilityReport() dict
}

// File on the system
file @defaults("path size permissions.string") {
  init(path string)
  // Location of the file on the system
  path string
  // Filename without path prefix of this file
  basename(path) string
  // Path to the folder containing this file
  dirname(path) string
  // Contents of this file
  content(path, exists) string
  // Indicator if this file exists on the system
  exists() bool
  // Permissions for this file
  permissions() file.permissions
  // Size of this file on disk
  size() int
  // Ownership information about the user
  user() user
  // Ownership information about the group
  group() group
  // Denotes whether the path is empty
  empty() bool
}

// Access permissions for a given file
private file.permissions @defaults("string") {
  // Raw POSIX mode for the permissions
  mode int
  // Indicator if this file is readable by its owner
  user_readable bool
  // Indicator if this file is writeable by its owner
  user_writeable bool
  // Indicator if this file is executable by its owner
  user_executable bool
  // Indicator if this file is readable by members of the group
  group_readable bool
  // Indicator if this file is writeable by members of the group
  group_writeable bool
  // Indicator if this file is executable by members of the group
  group_executable bool
  // Indicator if this file is readable by others
  other_readable bool
  // Indicator if this file is writeable by others
  other_writeable bool
  // Indicator if this file is executable by others
  other_executable bool
  // SUID bit indicator
  suid bool
  // SGID bit indicator
  sgid bool
  // Sticky bit indicator
  sticky bool
  // Whether the file describes a directory
  isDirectory bool
  // Whether the file describes a regular file
  isFile bool
  // Whether the file is a symlink
  isSymlink bool
  // A simple printed string version of the permissions
  string() string
}

// User on this system
user @defaults("name uid gid") {
  // User ID
  uid int
  // User's Group ID
  gid int
  // User's Security Identifier (Windows)
  sid string
  // Name of the user
  name string
  // Home folder
  home string
  // Default shell configured
  shell string
  // Indicates if the user is enabled
  enabled bool
  // List of authorized keys
  authorizedkeys() authorizedkeys
  // List of SSH keys
  sshkeys() []privatekey
  // Group that user is a member of
  group() group
}

// Users configured on this system
users {
  []user
}

// List of SSH Authorized Keys
authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  path string
  file() file
  content(file) string
}

// SSH authorized keys entry
authorizedkeys.entry @defaults("key") {
  line int
  type string
  key string
  label() string
  options() []string
  file file
}

// Group on this system
group @defaults("name gid") {
  init(id string)
  // Group ID
  gid int
  // Group's Security Identifier (Windows)
  sid string
  // Name of this group
  name string
  // Users who are members of this group
  members() []user
}

// Groups configured on this system
groups {
  []group
}

// Parse provides common parsers (json, ini, certs, etc)
parse {
  // Builtin functions:
  // date(value, format) time
}

// Date and time functions
time {
  // The current time on the local system
  now() time
  // One second, used for durations
  second() time
  // One minute, used for durations
  minute() time
  // One hour, used for durations
  hour() time
  // One day, used for durations
  day() time
  // The current day starting at midnight
  today() time
  // The next day starting at midnight
  tomorrow() time
}

// Builtin regular expression functions
regex {
  // Matches IPv4 addresses
  ipv4() regex
  // Matches IPv6 addresses
  ipv6() regex
  // Matches URL addresses (HTTP/HTTPS)
  url() regex
  // Matches email addresses
  email() regex
  // Matches MAC addresses
  mac() regex
  // Matches hyphen-deliminated UUIDs
  uuid() regex
  // Matches emojis
  emoji() regex
  // Matches semantic version numbers
  semver() regex
  // Matches credit card numbers
  creditCard() regex
}

// Parse INI files
parse.ini {
  init(path string, delimiter string)
  // Symbol that is separating keys and values
  delimiter() string
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // A map of sections and key-value pairs
  sections(content, delimiter) map[string]map[string]string
  // A map of parameters that don't belong to sections
  params(sections) map[string]string
}

// Parse JSON files
parse.json {
  init(path string)
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse plist files
parse.plist {
  init(path string)
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse YAML files
parse.yaml {
  init(path string)
  // File that is being parsed
  file() file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Common platform information (OS, API, Service)
// Deprecated: please use asset instead. Remove in v9
platform @defaults("name version") {
  // Name of the platform
  name string
  // Human-readable name of the platform
  title string
  // List of platform families that this platform belongs to
  family []string
  // Release version of the platform
  // Deprecated. Use 'version' instead. 
  release string
  // Version of the platform
  version string
  // Build version of the platform (optional)
  build string
  // Fully qualified domain name (optional)
  fqdn string
  // Architecture this OS is running on
  arch string
  // Kind of platform, for example:
  // api, baremetal, vm, vm-image, container, container-image, network, ...
  kind string
  // Runtime is the specific kind of the platform. Examples include:
  // docker-container, podman-container, aws-ec2-instance, ...
  runtime string
  // Optional platform information
  labels map[string]string

  // Full advisory & vulnerability report
  vulnerabilityReport() dict

  // Contextual information about the runtime (bare-metal, cloud, container, etc)
  // Deprecated. Use 'runtime' instead.
  runtimeEnv string
}

// Hardware virtualization information
platform.virtualization {
  // Indicates if the target is a container or container image
  isContainer() bool
}

// Information about the platform end-of-life
platform.eol @defaults("date") {
  // Documentation URL
  docsUrl string
  // Product URL
  productUrl string
  // End-of-Life date
  date time
}

// Returns all platform/package advisories
platform.advisories {
  []audit.advisory
  // Worst CVSS score for all advisories
  cvss() audit.cvss
  // Statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Returns all platform/package cves
platform.cves {
  []audit.cve
  // Worst CVSS score for all cves
  cvss() audit.cvss
  // Statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Common Vulnerability Scoring System (CVSS) Score
private audit.cvss {
  // CVSS Score ranging from 0.0 to 10.0
  score   float
  // CVSS score is also represented as a vector string
  vector  string
}

// Platform/package advisory
private audit.advisory {
  // Advisory ID
  id          string
  // Mondoo Advisory Identifier
  mrn         string
  // Advisory Title
  title       string
  // Advisory Description
  description string
  // Advisory publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS Score of all assigned CVEs
  worstScore    audit.cvss
}

// Common Vulnerabilities and Exposures (CVE)
private audit.cve {
  // CVE ID
  id        string
  // Mondoo CVE Identifier
  mrn       string
  // CVE state
  state     string
  // Summary Description
  summary   string
  // Indicates if the CVE has a CVSS score
  unscored  bool
  // publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS Score of all assigned CVEs
  worstScore    audit.cvss
}

// Deprecated
yaml.path {
  filepath string
  jsonpath string
  result() string
}

// Private Key Resource
privatekey {
  // PEM data
  pem string
  // Key path on disk
  path() string
  encrypted() bool
}

