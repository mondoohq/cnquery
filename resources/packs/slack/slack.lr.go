// Code generated by resources. DO NOT EDIT.
package slack

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("slack", newSlack)
	registry.AddFactory("slack.team", newSlackTeam)
	registry.AddFactory("slack.users", newSlackUsers)
	registry.AddFactory("slack.user", newSlackUser)
	registry.AddFactory("slack.enterpriseUser", newSlackEnterpriseUser)
	registry.AddFactory("slack.userGroup", newSlackUserGroup)
	registry.AddFactory("slack.login", newSlackLogin)
	registry.AddFactory("slack.conversation", newSlackConversation)
}

// Slack resource interface
type Slack interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	AccessLogs() ([]interface{}, error)
	UserGroups() ([]interface{}, error)
	Conversations() ([]interface{}, error)
}

// mqlSlack for the slack resource
type mqlSlack struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlack) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack resource
func newSlack(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlack{runtime.NewResource("slack")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "accessLogs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack\", its \"accessLogs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "userGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack\", its \"userGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "conversations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack\", its \"conversations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlack) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlSlack) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack].Register")
	switch name {
	case "accessLogs":
		return nil
	case "userGroups":
		return nil
	case "conversations":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlack) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack].Field")
	switch name {
	case "accessLogs":
		return s.AccessLogs()
	case "userGroups":
		return s.UserGroups()
	case "conversations":
		return s.Conversations()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack\" resource")
	}
}

// AccessLogs accessor autogenerated
func (s *mqlSlack) AccessLogs() ([]interface{}, error) {
	res, ok := s.Cache.Load("accessLogs")
	if !ok || !res.Valid {
		if err := s.ComputeAccessLogs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessLogs")
		if !ok {
			return nil, errors.New("\"slack\" calculated \"accessLogs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessLogs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack\" failed to cast field \"accessLogs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// UserGroups accessor autogenerated
func (s *mqlSlack) UserGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("userGroups")
	if !ok || !res.Valid {
		if err := s.ComputeUserGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("userGroups")
		if !ok {
			return nil, errors.New("\"slack\" calculated \"userGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "userGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack\" failed to cast field \"userGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Conversations accessor autogenerated
func (s *mqlSlack) Conversations() ([]interface{}, error) {
	res, ok := s.Cache.Load("conversations")
	if !ok || !res.Valid {
		if err := s.ComputeConversations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("conversations")
		if !ok {
			return nil, errors.New("\"slack\" calculated \"conversations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "conversations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack\" failed to cast field \"conversations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlack) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack].Compute")
	switch name {
	case "accessLogs":
		return s.ComputeAccessLogs()
	case "userGroups":
		return s.ComputeUserGroups()
	case "conversations":
		return s.ComputeConversations()
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack\" resource")
	}
}

// ComputeAccessLogs computer autogenerated
func (s *mqlSlack) ComputeAccessLogs() error {
	var err error
	if _, ok := s.Cache.Load("accessLogs"); ok {
		return nil
	}
	vres, err := s.GetAccessLogs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessLogs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUserGroups computer autogenerated
func (s *mqlSlack) ComputeUserGroups() error {
	var err error
	if _, ok := s.Cache.Load("userGroups"); ok {
		return nil
	}
	vres, err := s.GetUserGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("userGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConversations computer autogenerated
func (s *mqlSlack) ComputeConversations() error {
	var err error
	if _, ok := s.Cache.Load("conversations"); ok {
		return nil
	}
	vres, err := s.GetConversations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("conversations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SlackTeam resource interface
type SlackTeam interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Domain() (string, error)
	EmailDomain() (string, error)
}

// mqlSlackTeam for the slack.team resource
type mqlSlackTeam struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackTeam) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.team resource
func newSlackTeam(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackTeam{runtime.NewResource("slack.team")}
	var existing SlackTeam
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.team\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.team\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "domain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.team\", its \"domain\" argument has the wrong type (expected type \"string\")")
			}
		case "emailDomain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.team\", its \"emailDomain\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.team\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.team with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackTeam) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"slack.team\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"slack.team\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("domain"); !ok {
		return errors.New("Initialized \"slack.team\" resource without a \"domain\". This field is required.")
	}
	if _, ok := s.Cache.Load("emailDomain"); !ok {
		return errors.New("Initialized \"slack.team\" resource without a \"emailDomain\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackTeam) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.team].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "domain":
		return nil
	case "emailDomain":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.team\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackTeam) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.team].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "domain":
		return s.Domain()
	case "emailDomain":
		return s.EmailDomain()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.team\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSlackTeam) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.team\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.team\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSlackTeam) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.team\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.team\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Domain accessor autogenerated
func (s *mqlSlackTeam) Domain() (string, error) {
	res, ok := s.Cache.Load("domain")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.team\" failed: no value provided for static field \"domain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.team\" failed to cast field \"domain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EmailDomain accessor autogenerated
func (s *mqlSlackTeam) EmailDomain() (string, error) {
	res, ok := s.Cache.Load("emailDomain")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.team\" failed: no value provided for static field \"emailDomain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.team\" failed to cast field \"emailDomain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackTeam) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.team].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "domain":
		return nil
	case "emailDomain":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.team\" resource")
	}
}

// SlackUsers resource interface
type SlackUsers interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Bots() ([]interface{}, error)
	Members() ([]interface{}, error)
	Admins() ([]interface{}, error)
	Owners() ([]interface{}, error)
	List() ([]interface{}, error)
}

// mqlSlackUsers for the slack.users resource
type mqlSlackUsers struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackUsers) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.users resource
func newSlackUsers(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackUsers{runtime.NewResource("slack.users")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "bots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"bots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "admins":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"admins\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "owners":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"owners\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "list":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"list\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.users\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.users with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackUsers) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackUsers) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.users].Register")
	switch name {
	case "bots":
		return nil
	case "members":
		return nil
	case "admins":
		return nil
	case "owners":
		return nil
	case "list":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.users\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackUsers) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.users].Field")
	switch name {
	case "bots":
		return s.Bots()
	case "members":
		return s.Members()
	case "admins":
		return s.Admins()
	case "owners":
		return s.Owners()
	case "list":
		return s.List()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.users\" resource")
	}
}

// Bots accessor autogenerated
func (s *mqlSlackUsers) Bots() ([]interface{}, error) {
	res, ok := s.Cache.Load("bots")
	if !ok || !res.Valid {
		if err := s.ComputeBots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("bots")
		if !ok {
			return nil, errors.New("\"slack.users\" calculated \"bots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "bots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.users\" failed to cast field \"bots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlSlackUsers) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"slack.users\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.users\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Admins accessor autogenerated
func (s *mqlSlackUsers) Admins() ([]interface{}, error) {
	res, ok := s.Cache.Load("admins")
	if !ok || !res.Valid {
		if err := s.ComputeAdmins(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("admins")
		if !ok {
			return nil, errors.New("\"slack.users\" calculated \"admins\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "admins")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.users\" failed to cast field \"admins\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Owners accessor autogenerated
func (s *mqlSlackUsers) Owners() ([]interface{}, error) {
	res, ok := s.Cache.Load("owners")
	if !ok || !res.Valid {
		if err := s.ComputeOwners(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("owners")
		if !ok {
			return nil, errors.New("\"slack.users\" calculated \"owners\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "owners")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.users\" failed to cast field \"owners\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// List accessor autogenerated
func (s *mqlSlackUsers) List() ([]interface{}, error) {
	res, ok := s.Cache.Load("list")
	if !ok || !res.Valid {
		if err := s.ComputeList(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("list")
		if !ok {
			return nil, errors.New("\"slack.users\" calculated \"list\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "list")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.users\" failed to cast field \"list\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackUsers) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.users].Compute")
	switch name {
	case "bots":
		return s.ComputeBots()
	case "members":
		return s.ComputeMembers()
	case "admins":
		return s.ComputeAdmins()
	case "owners":
		return s.ComputeOwners()
	case "list":
		return s.ComputeList()
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.users\" resource")
	}
}

// ComputeBots computer autogenerated
func (s *mqlSlackUsers) ComputeBots() error {
	var err error
	if _, ok := s.Cache.Load("bots"); ok {
		return nil
	}
	vres, err := s.GetBots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("bots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMembers computer autogenerated
func (s *mqlSlackUsers) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdmins computer autogenerated
func (s *mqlSlackUsers) ComputeAdmins() error {
	var err error
	if _, ok := s.Cache.Load("admins"); ok {
		return nil
	}
	vres, err := s.GetAdmins()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("admins", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOwners computer autogenerated
func (s *mqlSlackUsers) ComputeOwners() error {
	var err error
	if _, ok := s.Cache.Load("owners"); ok {
		return nil
	}
	vres, err := s.GetOwners()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("owners", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeList computer autogenerated
func (s *mqlSlackUsers) ComputeList() error {
	var err error
	if _, ok := s.Cache.Load("list"); ok {
		return nil
	}
	vres, err := s.GetList()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("list", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SlackUser resource interface
type SlackUser interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	TeamId() (string, error)
	Deleted() (bool, error)
	Color() (string, error)
	RealName() (string, error)
	TimeZone() (string, error)
	TimeZoneLabel() (string, error)
	TimeZoneOffset() (int64, error)
	IsBot() (bool, error)
	IsAdmin() (bool, error)
	IsOwner() (bool, error)
	IsPrimaryOwner() (bool, error)
	IsRestricted() (bool, error)
	IsUltraRestricted() (bool, error)
	IsStranger() (bool, error)
	IsAppUser() (bool, error)
	IsInvitedUser() (bool, error)
	Has2FA() (bool, error)
	HasFiles() (bool, error)
	Presence() (string, error)
	Locale() (string, error)
	Profile() (interface{}, error)
	EnterpriseUser() (SlackEnterpriseUser, error)
}

// mqlSlackUser for the slack.user resource
type mqlSlackUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.user resource
func newSlackUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackUser{runtime.NewResource("slack.user")}
	var existing SlackUser
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "teamId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"teamId\" argument has the wrong type (expected type \"string\")")
			}
		case "deleted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"deleted\" argument has the wrong type (expected type \"bool\")")
			}
		case "color":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"color\" argument has the wrong type (expected type \"string\")")
			}
		case "realName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"realName\" argument has the wrong type (expected type \"string\")")
			}
		case "timeZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"timeZone\" argument has the wrong type (expected type \"string\")")
			}
		case "timeZoneLabel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"timeZoneLabel\" argument has the wrong type (expected type \"string\")")
			}
		case "timeZoneOffset":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"timeZoneOffset\" argument has the wrong type (expected type \"int64\")")
			}
		case "isBot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isBot\" argument has the wrong type (expected type \"bool\")")
			}
		case "isAdmin":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isAdmin\" argument has the wrong type (expected type \"bool\")")
			}
		case "isOwner":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isOwner\" argument has the wrong type (expected type \"bool\")")
			}
		case "isPrimaryOwner":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isPrimaryOwner\" argument has the wrong type (expected type \"bool\")")
			}
		case "isRestricted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isRestricted\" argument has the wrong type (expected type \"bool\")")
			}
		case "isUltraRestricted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isUltraRestricted\" argument has the wrong type (expected type \"bool\")")
			}
		case "isStranger":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isStranger\" argument has the wrong type (expected type \"bool\")")
			}
		case "isAppUser":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isAppUser\" argument has the wrong type (expected type \"bool\")")
			}
		case "isInvitedUser":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"isInvitedUser\" argument has the wrong type (expected type \"bool\")")
			}
		case "has2FA":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"has2FA\" argument has the wrong type (expected type \"bool\")")
			}
		case "hasFiles":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"hasFiles\" argument has the wrong type (expected type \"bool\")")
			}
		case "presence":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"presence\" argument has the wrong type (expected type \"string\")")
			}
		case "locale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"locale\" argument has the wrong type (expected type \"string\")")
			}
		case "profile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"profile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "enterpriseUser":
			if _, ok := val.(SlackEnterpriseUser); !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"enterpriseUser\" argument has the wrong type (expected type \"SlackEnterpriseUser\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("teamId"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"teamId\". This field is required.")
	}
	if _, ok := s.Cache.Load("deleted"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"deleted\". This field is required.")
	}
	if _, ok := s.Cache.Load("color"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"color\". This field is required.")
	}
	if _, ok := s.Cache.Load("realName"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"realName\". This field is required.")
	}
	if _, ok := s.Cache.Load("timeZone"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"timeZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("timeZoneLabel"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"timeZoneLabel\". This field is required.")
	}
	if _, ok := s.Cache.Load("timeZoneOffset"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"timeZoneOffset\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBot"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isBot\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAdmin"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isAdmin\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOwner"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isOwner\". This field is required.")
	}
	if _, ok := s.Cache.Load("isPrimaryOwner"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isPrimaryOwner\". This field is required.")
	}
	if _, ok := s.Cache.Load("isRestricted"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isRestricted\". This field is required.")
	}
	if _, ok := s.Cache.Load("isUltraRestricted"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isUltraRestricted\". This field is required.")
	}
	if _, ok := s.Cache.Load("isStranger"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isStranger\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAppUser"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isAppUser\". This field is required.")
	}
	if _, ok := s.Cache.Load("isInvitedUser"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"isInvitedUser\". This field is required.")
	}
	if _, ok := s.Cache.Load("has2FA"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"has2FA\". This field is required.")
	}
	if _, ok := s.Cache.Load("hasFiles"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"hasFiles\". This field is required.")
	}
	if _, ok := s.Cache.Load("presence"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"presence\". This field is required.")
	}
	if _, ok := s.Cache.Load("locale"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"locale\". This field is required.")
	}
	if _, ok := s.Cache.Load("profile"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"profile\". This field is required.")
	}
	if _, ok := s.Cache.Load("enterpriseUser"); !ok {
		return errors.New("Initialized \"slack.user\" resource without a \"enterpriseUser\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.user].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "teamId":
		return nil
	case "deleted":
		return nil
	case "color":
		return nil
	case "realName":
		return nil
	case "timeZone":
		return nil
	case "timeZoneLabel":
		return nil
	case "timeZoneOffset":
		return nil
	case "isBot":
		return nil
	case "isAdmin":
		return nil
	case "isOwner":
		return nil
	case "isPrimaryOwner":
		return nil
	case "isRestricted":
		return nil
	case "isUltraRestricted":
		return nil
	case "isStranger":
		return nil
	case "isAppUser":
		return nil
	case "isInvitedUser":
		return nil
	case "has2FA":
		return nil
	case "hasFiles":
		return nil
	case "presence":
		return nil
	case "locale":
		return nil
	case "profile":
		return nil
	case "enterpriseUser":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "teamId":
		return s.TeamId()
	case "deleted":
		return s.Deleted()
	case "color":
		return s.Color()
	case "realName":
		return s.RealName()
	case "timeZone":
		return s.TimeZone()
	case "timeZoneLabel":
		return s.TimeZoneLabel()
	case "timeZoneOffset":
		return s.TimeZoneOffset()
	case "isBot":
		return s.IsBot()
	case "isAdmin":
		return s.IsAdmin()
	case "isOwner":
		return s.IsOwner()
	case "isPrimaryOwner":
		return s.IsPrimaryOwner()
	case "isRestricted":
		return s.IsRestricted()
	case "isUltraRestricted":
		return s.IsUltraRestricted()
	case "isStranger":
		return s.IsStranger()
	case "isAppUser":
		return s.IsAppUser()
	case "isInvitedUser":
		return s.IsInvitedUser()
	case "has2FA":
		return s.Has2FA()
	case "hasFiles":
		return s.HasFiles()
	case "presence":
		return s.Presence()
	case "locale":
		return s.Locale()
	case "profile":
		return s.Profile()
	case "enterpriseUser":
		return s.EnterpriseUser()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSlackUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSlackUser) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TeamId accessor autogenerated
func (s *mqlSlackUser) TeamId() (string, error) {
	res, ok := s.Cache.Load("teamId")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"teamId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"teamId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Deleted accessor autogenerated
func (s *mqlSlackUser) Deleted() (bool, error) {
	res, ok := s.Cache.Load("deleted")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"deleted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"deleted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Color accessor autogenerated
func (s *mqlSlackUser) Color() (string, error) {
	res, ok := s.Cache.Load("color")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"color\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"color\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RealName accessor autogenerated
func (s *mqlSlackUser) RealName() (string, error) {
	res, ok := s.Cache.Load("realName")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"realName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"realName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TimeZone accessor autogenerated
func (s *mqlSlackUser) TimeZone() (string, error) {
	res, ok := s.Cache.Load("timeZone")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"timeZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"timeZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TimeZoneLabel accessor autogenerated
func (s *mqlSlackUser) TimeZoneLabel() (string, error) {
	res, ok := s.Cache.Load("timeZoneLabel")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"timeZoneLabel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"timeZoneLabel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TimeZoneOffset accessor autogenerated
func (s *mqlSlackUser) TimeZoneOffset() (int64, error) {
	res, ok := s.Cache.Load("timeZoneOffset")
	if !ok || !res.Valid {
		return 0, errors.New("\"slack.user\" failed: no value provided for static field \"timeZoneOffset\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"slack.user\" failed to cast field \"timeZoneOffset\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsBot accessor autogenerated
func (s *mqlSlackUser) IsBot() (bool, error) {
	res, ok := s.Cache.Load("isBot")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isBot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isBot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsAdmin accessor autogenerated
func (s *mqlSlackUser) IsAdmin() (bool, error) {
	res, ok := s.Cache.Load("isAdmin")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isAdmin\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isAdmin\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsOwner accessor autogenerated
func (s *mqlSlackUser) IsOwner() (bool, error) {
	res, ok := s.Cache.Load("isOwner")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isOwner\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isOwner\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsPrimaryOwner accessor autogenerated
func (s *mqlSlackUser) IsPrimaryOwner() (bool, error) {
	res, ok := s.Cache.Load("isPrimaryOwner")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isPrimaryOwner\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isPrimaryOwner\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsRestricted accessor autogenerated
func (s *mqlSlackUser) IsRestricted() (bool, error) {
	res, ok := s.Cache.Load("isRestricted")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isRestricted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isRestricted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsUltraRestricted accessor autogenerated
func (s *mqlSlackUser) IsUltraRestricted() (bool, error) {
	res, ok := s.Cache.Load("isUltraRestricted")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isUltraRestricted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isUltraRestricted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsStranger accessor autogenerated
func (s *mqlSlackUser) IsStranger() (bool, error) {
	res, ok := s.Cache.Load("isStranger")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isStranger\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isStranger\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsAppUser accessor autogenerated
func (s *mqlSlackUser) IsAppUser() (bool, error) {
	res, ok := s.Cache.Load("isAppUser")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isAppUser\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isAppUser\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsInvitedUser accessor autogenerated
func (s *mqlSlackUser) IsInvitedUser() (bool, error) {
	res, ok := s.Cache.Load("isInvitedUser")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"isInvitedUser\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"isInvitedUser\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Has2FA accessor autogenerated
func (s *mqlSlackUser) Has2FA() (bool, error) {
	res, ok := s.Cache.Load("has2FA")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"has2FA\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"has2FA\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// HasFiles accessor autogenerated
func (s *mqlSlackUser) HasFiles() (bool, error) {
	res, ok := s.Cache.Load("hasFiles")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.user\" failed: no value provided for static field \"hasFiles\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.user\" failed to cast field \"hasFiles\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Presence accessor autogenerated
func (s *mqlSlackUser) Presence() (string, error) {
	res, ok := s.Cache.Load("presence")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"presence\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"presence\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Locale accessor autogenerated
func (s *mqlSlackUser) Locale() (string, error) {
	res, ok := s.Cache.Load("locale")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.user\" failed: no value provided for static field \"locale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.user\" failed to cast field \"locale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Profile accessor autogenerated
func (s *mqlSlackUser) Profile() (interface{}, error) {
	res, ok := s.Cache.Load("profile")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.user\" failed: no value provided for static field \"profile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.user\" failed to cast field \"profile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnterpriseUser accessor autogenerated
func (s *mqlSlackUser) EnterpriseUser() (SlackEnterpriseUser, error) {
	res, ok := s.Cache.Load("enterpriseUser")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.user\" failed: no value provided for static field \"enterpriseUser\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SlackEnterpriseUser)
	if !ok {
		return nil, fmt.Errorf("\"slack.user\" failed to cast field \"enterpriseUser\" to the right type (SlackEnterpriseUser): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackUser) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.user].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "teamId":
		return nil
	case "deleted":
		return nil
	case "color":
		return nil
	case "realName":
		return nil
	case "timeZone":
		return nil
	case "timeZoneLabel":
		return nil
	case "timeZoneOffset":
		return nil
	case "isBot":
		return nil
	case "isAdmin":
		return nil
	case "isOwner":
		return nil
	case "isPrimaryOwner":
		return nil
	case "isRestricted":
		return nil
	case "isUltraRestricted":
		return nil
	case "isStranger":
		return nil
	case "isAppUser":
		return nil
	case "isInvitedUser":
		return nil
	case "has2FA":
		return nil
	case "hasFiles":
		return nil
	case "presence":
		return nil
	case "locale":
		return nil
	case "profile":
		return nil
	case "enterpriseUser":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.user\" resource")
	}
}

// SlackEnterpriseUser resource interface
type SlackEnterpriseUser interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	EnterpriseId() (string, error)
	EnterpriseName() (string, error)
	IsAdmin() (bool, error)
	IsOwner() (bool, error)
}

// mqlSlackEnterpriseUser for the slack.enterpriseUser resource
type mqlSlackEnterpriseUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackEnterpriseUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.enterpriseUser resource
func newSlackEnterpriseUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackEnterpriseUser{runtime.NewResource("slack.enterpriseUser")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enterpriseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"enterpriseId\" argument has the wrong type (expected type \"string\")")
			}
		case "enterpriseName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"enterpriseName\" argument has the wrong type (expected type \"string\")")
			}
		case "isAdmin":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"isAdmin\" argument has the wrong type (expected type \"bool\")")
			}
		case "isOwner":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"isOwner\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.enterpriseUser\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.enterpriseUser with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackEnterpriseUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"slack.enterpriseUser\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enterpriseId"); !ok {
		return errors.New("Initialized \"slack.enterpriseUser\" resource without a \"enterpriseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("enterpriseName"); !ok {
		return errors.New("Initialized \"slack.enterpriseUser\" resource without a \"enterpriseName\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAdmin"); !ok {
		return errors.New("Initialized \"slack.enterpriseUser\" resource without a \"isAdmin\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOwner"); !ok {
		return errors.New("Initialized \"slack.enterpriseUser\" resource without a \"isOwner\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackEnterpriseUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.enterpriseUser].Register")
	switch name {
	case "id":
		return nil
	case "enterpriseId":
		return nil
	case "enterpriseName":
		return nil
	case "isAdmin":
		return nil
	case "isOwner":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.enterpriseUser\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackEnterpriseUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.enterpriseUser].Field")
	switch name {
	case "id":
		return s.Id()
	case "enterpriseId":
		return s.EnterpriseId()
	case "enterpriseName":
		return s.EnterpriseName()
	case "isAdmin":
		return s.IsAdmin()
	case "isOwner":
		return s.IsOwner()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.enterpriseUser\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSlackEnterpriseUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.enterpriseUser\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.enterpriseUser\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnterpriseId accessor autogenerated
func (s *mqlSlackEnterpriseUser) EnterpriseId() (string, error) {
	res, ok := s.Cache.Load("enterpriseId")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.enterpriseUser\" failed: no value provided for static field \"enterpriseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.enterpriseUser\" failed to cast field \"enterpriseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnterpriseName accessor autogenerated
func (s *mqlSlackEnterpriseUser) EnterpriseName() (string, error) {
	res, ok := s.Cache.Load("enterpriseName")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.enterpriseUser\" failed: no value provided for static field \"enterpriseName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.enterpriseUser\" failed to cast field \"enterpriseName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsAdmin accessor autogenerated
func (s *mqlSlackEnterpriseUser) IsAdmin() (bool, error) {
	res, ok := s.Cache.Load("isAdmin")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.enterpriseUser\" failed: no value provided for static field \"isAdmin\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.enterpriseUser\" failed to cast field \"isAdmin\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsOwner accessor autogenerated
func (s *mqlSlackEnterpriseUser) IsOwner() (bool, error) {
	res, ok := s.Cache.Load("isOwner")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.enterpriseUser\" failed: no value provided for static field \"isOwner\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.enterpriseUser\" failed to cast field \"isOwner\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackEnterpriseUser) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.enterpriseUser].Compute")
	switch name {
	case "id":
		return nil
	case "enterpriseId":
		return nil
	case "enterpriseName":
		return nil
	case "isAdmin":
		return nil
	case "isOwner":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.enterpriseUser\" resource")
	}
}

// SlackUserGroup resource interface
type SlackUserGroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	TeamId() (string, error)
	Name() (string, error)
	Description() (string, error)
	Handle() (string, error)
	IsExternal() (bool, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	Deleted() (*time.Time, error)
	CreatedBy() (SlackUser, error)
	UpdatedBy() (SlackUser, error)
	DeletedBy() (SlackUser, error)
	UserCount() (int64, error)
	Members() ([]interface{}, error)
}

// mqlSlackUserGroup for the slack.userGroup resource
type mqlSlackUserGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackUserGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.userGroup resource
func newSlackUserGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackUserGroup{runtime.NewResource("slack.userGroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "teamId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"teamId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "handle":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"handle\" argument has the wrong type (expected type \"string\")")
			}
		case "isExternal":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"isExternal\" argument has the wrong type (expected type \"bool\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "deleted":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"deleted\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createdBy":
			if _, ok := val.(SlackUser); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"createdBy\" argument has the wrong type (expected type \"SlackUser\")")
			}
		case "updatedBy":
			if _, ok := val.(SlackUser); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"updatedBy\" argument has the wrong type (expected type \"SlackUser\")")
			}
		case "deletedBy":
			if _, ok := val.(SlackUser); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"deletedBy\" argument has the wrong type (expected type \"SlackUser\")")
			}
		case "userCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"userCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.userGroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.userGroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackUserGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("teamId"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"teamId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("handle"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"handle\". This field is required.")
	}
	if _, ok := s.Cache.Load("isExternal"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"isExternal\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("deleted"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"deleted\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdBy"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"createdBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("updatedBy"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"updatedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletedBy"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"deletedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("userCount"); !ok {
		return errors.New("Initialized \"slack.userGroup\" resource without a \"userCount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackUserGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.userGroup].Register")
	switch name {
	case "id":
		return nil
	case "teamId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "handle":
		return nil
	case "isExternal":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "deleted":
		return nil
	case "createdBy":
		return nil
	case "updatedBy":
		return nil
	case "deletedBy":
		return nil
	case "userCount":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.userGroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackUserGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.userGroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "teamId":
		return s.TeamId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "handle":
		return s.Handle()
	case "isExternal":
		return s.IsExternal()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "deleted":
		return s.Deleted()
	case "createdBy":
		return s.CreatedBy()
	case "updatedBy":
		return s.UpdatedBy()
	case "deletedBy":
		return s.DeletedBy()
	case "userCount":
		return s.UserCount()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.userGroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSlackUserGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.userGroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.userGroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TeamId accessor autogenerated
func (s *mqlSlackUserGroup) TeamId() (string, error) {
	res, ok := s.Cache.Load("teamId")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.userGroup\" failed: no value provided for static field \"teamId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.userGroup\" failed to cast field \"teamId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSlackUserGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.userGroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.userGroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlSlackUserGroup) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.userGroup\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.userGroup\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Handle accessor autogenerated
func (s *mqlSlackUserGroup) Handle() (string, error) {
	res, ok := s.Cache.Load("handle")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.userGroup\" failed: no value provided for static field \"handle\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.userGroup\" failed to cast field \"handle\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsExternal accessor autogenerated
func (s *mqlSlackUserGroup) IsExternal() (bool, error) {
	res, ok := s.Cache.Load("isExternal")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.userGroup\" failed: no value provided for static field \"isExternal\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.userGroup\" failed to cast field \"isExternal\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlSlackUserGroup) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlSlackUserGroup) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Deleted accessor autogenerated
func (s *mqlSlackUserGroup) Deleted() (*time.Time, error) {
	res, ok := s.Cache.Load("deleted")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"deleted\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"deleted\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreatedBy accessor autogenerated
func (s *mqlSlackUserGroup) CreatedBy() (SlackUser, error) {
	res, ok := s.Cache.Load("createdBy")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"createdBy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SlackUser)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"createdBy\" to the right type (SlackUser): %#v", res)
	}
	return tres, nil
}

// UpdatedBy accessor autogenerated
func (s *mqlSlackUserGroup) UpdatedBy() (SlackUser, error) {
	res, ok := s.Cache.Load("updatedBy")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"updatedBy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SlackUser)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"updatedBy\" to the right type (SlackUser): %#v", res)
	}
	return tres, nil
}

// DeletedBy accessor autogenerated
func (s *mqlSlackUserGroup) DeletedBy() (SlackUser, error) {
	res, ok := s.Cache.Load("deletedBy")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.userGroup\" failed: no value provided for static field \"deletedBy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SlackUser)
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"deletedBy\" to the right type (SlackUser): %#v", res)
	}
	return tres, nil
}

// UserCount accessor autogenerated
func (s *mqlSlackUserGroup) UserCount() (int64, error) {
	res, ok := s.Cache.Load("userCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"slack.userGroup\" failed: no value provided for static field \"userCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"slack.userGroup\" failed to cast field \"userCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlSlackUserGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"slack.userGroup\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.userGroup\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackUserGroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.userGroup].Compute")
	switch name {
	case "id":
		return nil
	case "teamId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "handle":
		return nil
	case "isExternal":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "deleted":
		return nil
	case "createdBy":
		return nil
	case "updatedBy":
		return nil
	case "deletedBy":
		return nil
	case "userCount":
		return nil
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.userGroup\" resource")
	}
}

// ComputeMembers computer autogenerated
func (s *mqlSlackUserGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SlackLogin resource interface
type SlackLogin interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	UserID() (string, error)
	Username() (string, error)
	Count() (int64, error)
	Ip() (string, error)
	UserAgent() (string, error)
	Isp() (string, error)
	Country() (string, error)
	Region() (string, error)
	DateFirst() (*time.Time, error)
	DateLast() (*time.Time, error)
}

// mqlSlackLogin for the slack.login resource
type mqlSlackLogin struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackLogin) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.login resource
func newSlackLogin(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackLogin{runtime.NewResource("slack.login")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "userID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"userID\" argument has the wrong type (expected type \"string\")")
			}
		case "username":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"username\" argument has the wrong type (expected type \"string\")")
			}
		case "count":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"count\" argument has the wrong type (expected type \"int64\")")
			}
		case "ip":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"ip\" argument has the wrong type (expected type \"string\")")
			}
		case "userAgent":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"userAgent\" argument has the wrong type (expected type \"string\")")
			}
		case "isp":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"isp\" argument has the wrong type (expected type \"string\")")
			}
		case "country":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"country\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "dateFirst":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"dateFirst\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "dateLast":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"dateLast\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.login\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.login with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackLogin) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("userID"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"userID\". This field is required.")
	}
	if _, ok := s.Cache.Load("username"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"username\". This field is required.")
	}
	if _, ok := s.Cache.Load("count"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"count\". This field is required.")
	}
	if _, ok := s.Cache.Load("ip"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"ip\". This field is required.")
	}
	if _, ok := s.Cache.Load("userAgent"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"userAgent\". This field is required.")
	}
	if _, ok := s.Cache.Load("isp"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"isp\". This field is required.")
	}
	if _, ok := s.Cache.Load("country"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"country\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("dateFirst"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"dateFirst\". This field is required.")
	}
	if _, ok := s.Cache.Load("dateLast"); !ok {
		return errors.New("Initialized \"slack.login\" resource without a \"dateLast\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackLogin) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.login].Register")
	switch name {
	case "userID":
		return nil
	case "username":
		return nil
	case "count":
		return nil
	case "ip":
		return nil
	case "userAgent":
		return nil
	case "isp":
		return nil
	case "country":
		return nil
	case "region":
		return nil
	case "dateFirst":
		return nil
	case "dateLast":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.login\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackLogin) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.login].Field")
	switch name {
	case "userID":
		return s.UserID()
	case "username":
		return s.Username()
	case "count":
		return s.Count()
	case "ip":
		return s.Ip()
	case "userAgent":
		return s.UserAgent()
	case "isp":
		return s.Isp()
	case "country":
		return s.Country()
	case "region":
		return s.Region()
	case "dateFirst":
		return s.DateFirst()
	case "dateLast":
		return s.DateLast()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.login\" resource")
	}
}

// UserID accessor autogenerated
func (s *mqlSlackLogin) UserID() (string, error) {
	res, ok := s.Cache.Load("userID")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"userID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"userID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Username accessor autogenerated
func (s *mqlSlackLogin) Username() (string, error) {
	res, ok := s.Cache.Load("username")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"username\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"username\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Count accessor autogenerated
func (s *mqlSlackLogin) Count() (int64, error) {
	res, ok := s.Cache.Load("count")
	if !ok || !res.Valid {
		return 0, errors.New("\"slack.login\" failed: no value provided for static field \"count\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"slack.login\" failed to cast field \"count\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Ip accessor autogenerated
func (s *mqlSlackLogin) Ip() (string, error) {
	res, ok := s.Cache.Load("ip")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"ip\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"ip\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserAgent accessor autogenerated
func (s *mqlSlackLogin) UserAgent() (string, error) {
	res, ok := s.Cache.Load("userAgent")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"userAgent\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"userAgent\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Isp accessor autogenerated
func (s *mqlSlackLogin) Isp() (string, error) {
	res, ok := s.Cache.Load("isp")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"isp\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"isp\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Country accessor autogenerated
func (s *mqlSlackLogin) Country() (string, error) {
	res, ok := s.Cache.Load("country")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"country\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"country\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlSlackLogin) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.login\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.login\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DateFirst accessor autogenerated
func (s *mqlSlackLogin) DateFirst() (*time.Time, error) {
	res, ok := s.Cache.Load("dateFirst")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.login\" failed: no value provided for static field \"dateFirst\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.login\" failed to cast field \"dateFirst\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DateLast accessor autogenerated
func (s *mqlSlackLogin) DateLast() (*time.Time, error) {
	res, ok := s.Cache.Load("dateLast")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.login\" failed: no value provided for static field \"dateLast\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.login\" failed to cast field \"dateLast\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackLogin) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.login].Compute")
	switch name {
	case "userID":
		return nil
	case "username":
		return nil
	case "count":
		return nil
	case "ip":
		return nil
	case "userAgent":
		return nil
	case "isp":
		return nil
	case "country":
		return nil
	case "region":
		return nil
	case "dateFirst":
		return nil
	case "dateLast":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.login\" resource")
	}
}

// SlackConversation resource interface
type SlackConversation interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Creator() (SlackUser, error)
	Created() (*time.Time, error)
	Locale() (string, error)
	Topic() (interface{}, error)
	Purpose() (interface{}, error)
	IsArchived() (bool, error)
	IsOpen() (bool, error)
	IsPrivate() (bool, error)
	IsIM() (bool, error)
	IsMpim() (bool, error)
	IsGroup() (bool, error)
	IsChannel() (bool, error)
	IsShared() (bool, error)
	IsExtShared() (bool, error)
	IsPendingExtShared() (bool, error)
	IsOrgShared() (bool, error)
	Priority() (float64, error)
	Members() ([]interface{}, error)
}

// mqlSlackConversation for the slack.conversation resource
type mqlSlackConversation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSlackConversation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the slack.conversation resource
func newSlackConversation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSlackConversation{runtime.NewResource("slack.conversation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "creator":
			if _, ok := val.(SlackUser); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"creator\" argument has the wrong type (expected type \"SlackUser\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "locale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"locale\" argument has the wrong type (expected type \"string\")")
			}
		case "topic":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"topic\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "purpose":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"purpose\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "isArchived":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isArchived\" argument has the wrong type (expected type \"bool\")")
			}
		case "isOpen":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isOpen\" argument has the wrong type (expected type \"bool\")")
			}
		case "isPrivate":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isPrivate\" argument has the wrong type (expected type \"bool\")")
			}
		case "isIM":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isIM\" argument has the wrong type (expected type \"bool\")")
			}
		case "isMpim":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isMpim\" argument has the wrong type (expected type \"bool\")")
			}
		case "isGroup":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isGroup\" argument has the wrong type (expected type \"bool\")")
			}
		case "isChannel":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isChannel\" argument has the wrong type (expected type \"bool\")")
			}
		case "isShared":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isShared\" argument has the wrong type (expected type \"bool\")")
			}
		case "isExtShared":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isExtShared\" argument has the wrong type (expected type \"bool\")")
			}
		case "isPendingExtShared":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isPendingExtShared\" argument has the wrong type (expected type \"bool\")")
			}
		case "isOrgShared":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"isOrgShared\" argument has the wrong type (expected type \"bool\")")
			}
		case "priority":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"priority\" argument has the wrong type (expected type \"float64\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"slack.conversation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized slack.conversation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSlackConversation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("creator"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"creator\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("locale"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"locale\". This field is required.")
	}
	if _, ok := s.Cache.Load("topic"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"topic\". This field is required.")
	}
	if _, ok := s.Cache.Load("purpose"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"purpose\". This field is required.")
	}
	if _, ok := s.Cache.Load("isArchived"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isArchived\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOpen"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isOpen\". This field is required.")
	}
	if _, ok := s.Cache.Load("isPrivate"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isPrivate\". This field is required.")
	}
	if _, ok := s.Cache.Load("isIM"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isIM\". This field is required.")
	}
	if _, ok := s.Cache.Load("isMpim"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isMpim\". This field is required.")
	}
	if _, ok := s.Cache.Load("isGroup"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isGroup\". This field is required.")
	}
	if _, ok := s.Cache.Load("isChannel"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isChannel\". This field is required.")
	}
	if _, ok := s.Cache.Load("isShared"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isShared\". This field is required.")
	}
	if _, ok := s.Cache.Load("isExtShared"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isExtShared\". This field is required.")
	}
	if _, ok := s.Cache.Load("isPendingExtShared"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isPendingExtShared\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOrgShared"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"isOrgShared\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"slack.conversation\" resource without a \"priority\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSlackConversation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[slack.conversation].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "creator":
		return nil
	case "created":
		return nil
	case "locale":
		return nil
	case "topic":
		return nil
	case "purpose":
		return nil
	case "isArchived":
		return nil
	case "isOpen":
		return nil
	case "isPrivate":
		return nil
	case "isIM":
		return nil
	case "isMpim":
		return nil
	case "isGroup":
		return nil
	case "isChannel":
		return nil
	case "isShared":
		return nil
	case "isExtShared":
		return nil
	case "isPendingExtShared":
		return nil
	case "isOrgShared":
		return nil
	case "priority":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.conversation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSlackConversation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[slack.conversation].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "creator":
		return s.Creator()
	case "created":
		return s.Created()
	case "locale":
		return s.Locale()
	case "topic":
		return s.Topic()
	case "purpose":
		return s.Purpose()
	case "isArchived":
		return s.IsArchived()
	case "isOpen":
		return s.IsOpen()
	case "isPrivate":
		return s.IsPrivate()
	case "isIM":
		return s.IsIM()
	case "isMpim":
		return s.IsMpim()
	case "isGroup":
		return s.IsGroup()
	case "isChannel":
		return s.IsChannel()
	case "isShared":
		return s.IsShared()
	case "isExtShared":
		return s.IsExtShared()
	case "isPendingExtShared":
		return s.IsPendingExtShared()
	case "isOrgShared":
		return s.IsOrgShared()
	case "priority":
		return s.Priority()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"slack.conversation\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSlackConversation) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.conversation\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.conversation\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSlackConversation) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.conversation\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.conversation\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Creator accessor autogenerated
func (s *mqlSlackConversation) Creator() (SlackUser, error) {
	res, ok := s.Cache.Load("creator")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.conversation\" failed: no value provided for static field \"creator\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SlackUser)
	if !ok {
		return nil, fmt.Errorf("\"slack.conversation\" failed to cast field \"creator\" to the right type (SlackUser): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlSlackConversation) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.conversation\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"slack.conversation\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Locale accessor autogenerated
func (s *mqlSlackConversation) Locale() (string, error) {
	res, ok := s.Cache.Load("locale")
	if !ok || !res.Valid {
		return "", errors.New("\"slack.conversation\" failed: no value provided for static field \"locale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"slack.conversation\" failed to cast field \"locale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topic accessor autogenerated
func (s *mqlSlackConversation) Topic() (interface{}, error) {
	res, ok := s.Cache.Load("topic")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.conversation\" failed: no value provided for static field \"topic\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.conversation\" failed to cast field \"topic\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Purpose accessor autogenerated
func (s *mqlSlackConversation) Purpose() (interface{}, error) {
	res, ok := s.Cache.Load("purpose")
	if !ok || !res.Valid {
		return nil, errors.New("\"slack.conversation\" failed: no value provided for static field \"purpose\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.conversation\" failed to cast field \"purpose\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// IsArchived accessor autogenerated
func (s *mqlSlackConversation) IsArchived() (bool, error) {
	res, ok := s.Cache.Load("isArchived")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isArchived\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isArchived\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsOpen accessor autogenerated
func (s *mqlSlackConversation) IsOpen() (bool, error) {
	res, ok := s.Cache.Load("isOpen")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isOpen\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isOpen\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsPrivate accessor autogenerated
func (s *mqlSlackConversation) IsPrivate() (bool, error) {
	res, ok := s.Cache.Load("isPrivate")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isPrivate\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isPrivate\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsIM accessor autogenerated
func (s *mqlSlackConversation) IsIM() (bool, error) {
	res, ok := s.Cache.Load("isIM")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isIM\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isIM\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsMpim accessor autogenerated
func (s *mqlSlackConversation) IsMpim() (bool, error) {
	res, ok := s.Cache.Load("isMpim")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isMpim\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isMpim\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsGroup accessor autogenerated
func (s *mqlSlackConversation) IsGroup() (bool, error) {
	res, ok := s.Cache.Load("isGroup")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isGroup\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isGroup\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsChannel accessor autogenerated
func (s *mqlSlackConversation) IsChannel() (bool, error) {
	res, ok := s.Cache.Load("isChannel")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isChannel\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isChannel\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsShared accessor autogenerated
func (s *mqlSlackConversation) IsShared() (bool, error) {
	res, ok := s.Cache.Load("isShared")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isShared\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isShared\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsExtShared accessor autogenerated
func (s *mqlSlackConversation) IsExtShared() (bool, error) {
	res, ok := s.Cache.Load("isExtShared")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isExtShared\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isExtShared\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsPendingExtShared accessor autogenerated
func (s *mqlSlackConversation) IsPendingExtShared() (bool, error) {
	res, ok := s.Cache.Load("isPendingExtShared")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isPendingExtShared\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isPendingExtShared\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsOrgShared accessor autogenerated
func (s *mqlSlackConversation) IsOrgShared() (bool, error) {
	res, ok := s.Cache.Load("isOrgShared")
	if !ok || !res.Valid {
		return false, errors.New("\"slack.conversation\" failed: no value provided for static field \"isOrgShared\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"slack.conversation\" failed to cast field \"isOrgShared\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlSlackConversation) Priority() (float64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"slack.conversation\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"slack.conversation\" failed to cast field \"priority\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlSlackConversation) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"slack.conversation\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"slack.conversation\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSlackConversation) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[slack.conversation].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "creator":
		return nil
	case "created":
		return nil
	case "locale":
		return nil
	case "topic":
		return nil
	case "purpose":
		return nil
	case "isArchived":
		return nil
	case "isOpen":
		return nil
	case "isPrivate":
		return nil
	case "isIM":
		return nil
	case "isMpim":
		return nil
	case "isGroup":
		return nil
	case "isChannel":
		return nil
	case "isShared":
		return nil
	case "isExtShared":
		return nil
	case "isPendingExtShared":
		return nil
	case "isOrgShared":
		return nil
	case "priority":
		return nil
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"slack.conversation\" resource")
	}
}

// ComputeMembers computer autogenerated
func (s *mqlSlackConversation) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

