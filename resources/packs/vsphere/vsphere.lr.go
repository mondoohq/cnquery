// Code generated by resources. DO NOT EDIT.
package vsphere

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("vsphere", newVsphere)
	registry.AddFactory("vsphere.license", newVsphereLicense)
	registry.AddFactory("esxi", newEsxi)
	registry.AddFactory("vsphere.datacenter", newVsphereDatacenter)
	registry.AddFactory("vsphere.cluster", newVsphereCluster)
	registry.AddFactory("vsphere.host", newVsphereHost)
	registry.AddFactory("vsphere.vm", newVsphereVm)
	registry.AddFactory("vsphere.vswitch.standard", newVsphereVswitchStandard)
	registry.AddFactory("vsphere.vswitch.dvs", newVsphereVswitchDvs)
	registry.AddFactory("vsphere.vmnic", newVsphereVmnic)
	registry.AddFactory("vsphere.vmknic", newVsphereVmknic)
	registry.AddFactory("esxi.command", newEsxiCommand)
	registry.AddFactory("esxi.vib", newEsxiVib)
	registry.AddFactory("esxi.kernelmodule", newEsxiKernelmodule)
	registry.AddFactory("esxi.service", newEsxiService)
	registry.AddFactory("esxi.timezone", newEsxiTimezone)
	registry.AddFactory("esxi.ntpconfig", newEsxiNtpconfig)
}

// Vsphere resource interface
type Vsphere interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	About() (interface{}, error)
	Licenses() ([]interface{}, error)
	Datacenters() ([]interface{}, error)
}

// mqlVsphere for the vsphere resource
type mqlVsphere struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphere) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere resource
func newVsphere(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphere{runtime.NewResource("vsphere")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "about":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere\", its \"about\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "datacenters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere\", its \"datacenters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphere) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphere) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere].Register")
	switch name {
	case "about":
		return nil
	case "licenses":
		return nil
	case "datacenters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphere) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere].Field")
	switch name {
	case "about":
		return s.About()
	case "licenses":
		return s.Licenses()
	case "datacenters":
		return s.Datacenters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere\" resource")
	}
}

// About accessor autogenerated
func (s *mqlVsphere) About() (interface{}, error) {
	res, ok := s.Cache.Load("about")
	if !ok || !res.Valid {
		if err := s.ComputeAbout(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("about")
		if !ok {
			return nil, errors.New("\"vsphere\" calculated \"about\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "about")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere\" failed to cast field \"about\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlVsphere) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		if err := s.ComputeLicenses(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("licenses")
		if !ok {
			return nil, errors.New("\"vsphere\" calculated \"licenses\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "licenses")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Datacenters accessor autogenerated
func (s *mqlVsphere) Datacenters() ([]interface{}, error) {
	res, ok := s.Cache.Load("datacenters")
	if !ok || !res.Valid {
		if err := s.ComputeDatacenters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("datacenters")
		if !ok {
			return nil, errors.New("\"vsphere\" calculated \"datacenters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "datacenters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere\" failed to cast field \"datacenters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphere) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere].MqlCompute")
	switch name {
	case "about":
		return s.ComputeAbout()
	case "licenses":
		return s.ComputeLicenses()
	case "datacenters":
		return s.ComputeDatacenters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere\" resource")
	}
}

// ComputeAbout computer autogenerated
func (s *mqlVsphere) ComputeAbout() error {
	var err error
	if _, ok := s.Cache.Load("about"); ok {
		return nil
	}
	vres, err := s.GetAbout()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("about", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLicenses computer autogenerated
func (s *mqlVsphere) ComputeLicenses() error {
	var err error
	if _, ok := s.Cache.Load("licenses"); ok {
		return nil
	}
	vres, err := s.GetLicenses()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("licenses", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatacenters computer autogenerated
func (s *mqlVsphere) ComputeDatacenters() error {
	var err error
	if _, ok := s.Cache.Load("datacenters"); ok {
		return nil
	}
	vres, err := s.GetDatacenters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("datacenters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereLicense resource interface
type VsphereLicense interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Total() (int64, error)
	Used() (int64, error)
}

// mqlVsphereLicense for the vsphere.license resource
type mqlVsphereLicense struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereLicense) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.license resource
func newVsphereLicense(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereLicense{runtime.NewResource("vsphere.license")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.license\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "total":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.license\", its \"total\" argument has the wrong type (expected type \"int64\")")
			}
		case "used":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.license\", its \"used\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.license\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.license with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereLicense) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.license\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("total"); !ok {
		return errors.New("Initialized \"vsphere.license\" resource without a \"total\". This field is required.")
	}
	if _, ok := s.Cache.Load("used"); !ok {
		return errors.New("Initialized \"vsphere.license\" resource without a \"used\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereLicense) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.license].Register")
	switch name {
	case "name":
		return nil
	case "total":
		return nil
	case "used":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.license\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereLicense) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.license].Field")
	switch name {
	case "name":
		return s.Name()
	case "total":
		return s.Total()
	case "used":
		return s.Used()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.license\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVsphereLicense) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.license\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.license\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Total accessor autogenerated
func (s *mqlVsphereLicense) Total() (int64, error) {
	res, ok := s.Cache.Load("total")
	if !ok || !res.Valid {
		return 0, errors.New("\"vsphere.license\" failed: no value provided for static field \"total\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vsphere.license\" failed to cast field \"total\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Used accessor autogenerated
func (s *mqlVsphereLicense) Used() (int64, error) {
	res, ok := s.Cache.Load("used")
	if !ok || !res.Valid {
		return 0, errors.New("\"vsphere.license\" failed: no value provided for static field \"used\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vsphere.license\" failed to cast field \"used\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereLicense) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.license].MqlCompute")
	switch name {
	case "name":
		return nil
	case "total":
		return nil
	case "used":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.license\" resource")
	}
}

// Esxi resource interface
type Esxi interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Host() (VsphereHost, error)
	Vm() (VsphereVm, error)
}

// mqlEsxi for the esxi resource
type mqlEsxi struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxi) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi resource
func newEsxi(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxi{runtime.NewResource("esxi")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "host":
			if _, ok := val.(VsphereHost); !ok {
				return nil, errors.New("Failed to initialize \"esxi\", its \"host\" argument has the wrong type (expected type \"VsphereHost\")")
			}
		case "vm":
			if _, ok := val.(VsphereVm); !ok {
				return nil, errors.New("Failed to initialize \"esxi\", its \"vm\" argument has the wrong type (expected type \"VsphereVm\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxi) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxi) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi].Register")
	switch name {
	case "host":
		return nil
	case "vm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxi) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi].Field")
	switch name {
	case "host":
		return s.Host()
	case "vm":
		return s.Vm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi\" resource")
	}
}

// Host accessor autogenerated
func (s *mqlEsxi) Host() (VsphereHost, error) {
	res, ok := s.Cache.Load("host")
	if !ok || !res.Valid {
		if err := s.ComputeHost(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("host")
		if !ok {
			return nil, errors.New("\"esxi\" calculated \"host\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "host")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(VsphereHost)
	if !ok {
		return nil, fmt.Errorf("\"esxi\" failed to cast field \"host\" to the right type (VsphereHost): %#v", res)
	}
	return tres, nil
}

// Vm accessor autogenerated
func (s *mqlEsxi) Vm() (VsphereVm, error) {
	res, ok := s.Cache.Load("vm")
	if !ok || !res.Valid {
		if err := s.ComputeVm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vm")
		if !ok {
			return nil, errors.New("\"esxi\" calculated \"vm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(VsphereVm)
	if !ok {
		return nil, fmt.Errorf("\"esxi\" failed to cast field \"vm\" to the right type (VsphereVm): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxi) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi].MqlCompute")
	switch name {
	case "host":
		return s.ComputeHost()
	case "vm":
		return s.ComputeVm()
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi\" resource")
	}
}

// ComputeHost computer autogenerated
func (s *mqlEsxi) ComputeHost() error {
	var err error
	if _, ok := s.Cache.Load("host"); ok {
		return nil
	}
	vres, err := s.GetHost()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("host", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVm computer autogenerated
func (s *mqlEsxi) ComputeVm() error {
	var err error
	if _, ok := s.Cache.Load("vm"); ok {
		return nil
	}
	vres, err := s.GetVm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereDatacenter resource interface
type VsphereDatacenter interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Moid() (string, error)
	Name() (string, error)
	InventoryPath() (string, error)
	Hosts() ([]interface{}, error)
	Vms() ([]interface{}, error)
	Clusters() ([]interface{}, error)
}

// mqlVsphereDatacenter for the vsphere.datacenter resource
type mqlVsphereDatacenter struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereDatacenter) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.datacenter resource
func newVsphereDatacenter(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereDatacenter{runtime.NewResource("vsphere.datacenter")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "moid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"moid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "inventoryPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"inventoryPath\" argument has the wrong type (expected type \"string\")")
			}
		case "hosts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"hosts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.datacenter\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.datacenter with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereDatacenter) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("moid"); !ok {
		return errors.New("Initialized \"vsphere.datacenter\" resource without a \"moid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.datacenter\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("inventoryPath"); !ok {
		return errors.New("Initialized \"vsphere.datacenter\" resource without a \"inventoryPath\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereDatacenter) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.datacenter].Register")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "hosts":
		return nil
	case "vms":
		return nil
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.datacenter\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereDatacenter) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.datacenter].Field")
	switch name {
	case "moid":
		return s.Moid()
	case "name":
		return s.Name()
	case "inventoryPath":
		return s.InventoryPath()
	case "hosts":
		return s.Hosts()
	case "vms":
		return s.Vms()
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.datacenter\" resource")
	}
}

// Moid accessor autogenerated
func (s *mqlVsphereDatacenter) Moid() (string, error) {
	res, ok := s.Cache.Load("moid")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.datacenter\" failed: no value provided for static field \"moid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"moid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVsphereDatacenter) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.datacenter\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InventoryPath accessor autogenerated
func (s *mqlVsphereDatacenter) InventoryPath() (string, error) {
	res, ok := s.Cache.Load("inventoryPath")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.datacenter\" failed: no value provided for static field \"inventoryPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"inventoryPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hosts accessor autogenerated
func (s *mqlVsphereDatacenter) Hosts() ([]interface{}, error) {
	res, ok := s.Cache.Load("hosts")
	if !ok || !res.Valid {
		if err := s.ComputeHosts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("hosts")
		if !ok {
			return nil, errors.New("\"vsphere.datacenter\" calculated \"hosts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "hosts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"hosts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Vms accessor autogenerated
func (s *mqlVsphereDatacenter) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"vsphere.datacenter\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Clusters accessor autogenerated
func (s *mqlVsphereDatacenter) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"vsphere.datacenter\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.datacenter\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereDatacenter) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.datacenter].MqlCompute")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "hosts":
		return s.ComputeHosts()
	case "vms":
		return s.ComputeVms()
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.datacenter\" resource")
	}
}

// ComputeHosts computer autogenerated
func (s *mqlVsphereDatacenter) ComputeHosts() error {
	var err error
	if _, ok := s.Cache.Load("hosts"); ok {
		return nil
	}
	vres, err := s.GetHosts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("hosts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVms computer autogenerated
func (s *mqlVsphereDatacenter) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeClusters computer autogenerated
func (s *mqlVsphereDatacenter) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereCluster resource interface
type VsphereCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Moid() (string, error)
	Name() (string, error)
	InventoryPath() (string, error)
	Properties() (interface{}, error)
	Hosts() ([]interface{}, error)
}

// mqlVsphereCluster for the vsphere.cluster resource
type mqlVsphereCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.cluster resource
func newVsphereCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereCluster{runtime.NewResource("vsphere.cluster")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "moid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"moid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "inventoryPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"inventoryPath\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "hosts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"hosts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("moid"); !ok {
		return errors.New("Initialized \"vsphere.cluster\" resource without a \"moid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("inventoryPath"); !ok {
		return errors.New("Initialized \"vsphere.cluster\" resource without a \"inventoryPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.cluster\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.cluster].Register")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "hosts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.cluster].Field")
	switch name {
	case "moid":
		return s.Moid()
	case "name":
		return s.Name()
	case "inventoryPath":
		return s.InventoryPath()
	case "properties":
		return s.Properties()
	case "hosts":
		return s.Hosts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.cluster\" resource")
	}
}

// Moid accessor autogenerated
func (s *mqlVsphereCluster) Moid() (string, error) {
	res, ok := s.Cache.Load("moid")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.cluster\" failed: no value provided for static field \"moid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.cluster\" failed to cast field \"moid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVsphereCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InventoryPath accessor autogenerated
func (s *mqlVsphereCluster) InventoryPath() (string, error) {
	res, ok := s.Cache.Load("inventoryPath")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.cluster\" failed: no value provided for static field \"inventoryPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.cluster\" failed to cast field \"inventoryPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereCluster) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.cluster\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.cluster\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Hosts accessor autogenerated
func (s *mqlVsphereCluster) Hosts() ([]interface{}, error) {
	res, ok := s.Cache.Load("hosts")
	if !ok || !res.Valid {
		if err := s.ComputeHosts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("hosts")
		if !ok {
			return nil, errors.New("\"vsphere.cluster\" calculated \"hosts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "hosts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.cluster\" failed to cast field \"hosts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.cluster].MqlCompute")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "hosts":
		return s.ComputeHosts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.cluster\" resource")
	}
}

// ComputeHosts computer autogenerated
func (s *mqlVsphereCluster) ComputeHosts() error {
	var err error
	if _, ok := s.Cache.Load("hosts"); ok {
		return nil
	}
	vres, err := s.GetHosts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("hosts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereHost resource interface
type VsphereHost interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Moid() (string, error)
	Name() (string, error)
	InventoryPath() (string, error)
	Properties() (interface{}, error)
	StandardSwitch() ([]interface{}, error)
	DistributedSwitch() ([]interface{}, error)
	Adapters() ([]interface{}, error)
	Vmknics() ([]interface{}, error)
	Packages() ([]interface{}, error)
	AcceptanceLevel() (string, error)
	KernelModules() ([]interface{}, error)
	AdvancedSettings() (map[string]interface{}, error)
	Services() ([]interface{}, error)
	Timezone() (EsxiTimezone, error)
	Ntp() (EsxiNtpconfig, error)
	Snmp() (map[string]interface{}, error)
}

// mqlVsphereHost for the vsphere.host resource
type mqlVsphereHost struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereHost) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.host resource
func newVsphereHost(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereHost{runtime.NewResource("vsphere.host")}
	var existing VsphereHost
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "moid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"moid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "inventoryPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"inventoryPath\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "standardSwitch":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"standardSwitch\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "distributedSwitch":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"distributedSwitch\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "adapters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"adapters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "vmknics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"vmknics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "packages":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"packages\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "acceptanceLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"acceptanceLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "kernelModules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"kernelModules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "advancedSettings":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"advancedSettings\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "services":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"services\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "timezone":
			if _, ok := val.(EsxiTimezone); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"timezone\" argument has the wrong type (expected type \"EsxiTimezone\")")
			}
		case "ntp":
			if _, ok := val.(EsxiNtpconfig); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"ntp\" argument has the wrong type (expected type \"EsxiNtpconfig\")")
			}
		case "snmp":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"snmp\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.host\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.host with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereHost) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("moid"); !ok {
		return errors.New("Initialized \"vsphere.host\" resource without a \"moid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.host\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("inventoryPath"); !ok {
		return errors.New("Initialized \"vsphere.host\" resource without a \"inventoryPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.host\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereHost) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.host].Register")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "standardSwitch":
		return nil
	case "distributedSwitch":
		return nil
	case "adapters":
		return nil
	case "vmknics":
		return nil
	case "packages":
		return nil
	case "acceptanceLevel":
		return nil
	case "kernelModules":
		return nil
	case "advancedSettings":
		return nil
	case "services":
		return nil
	case "timezone":
		return nil
	case "ntp":
		return nil
	case "snmp":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.host\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereHost) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.host].Field")
	switch name {
	case "moid":
		return s.Moid()
	case "name":
		return s.Name()
	case "inventoryPath":
		return s.InventoryPath()
	case "properties":
		return s.Properties()
	case "standardSwitch":
		return s.StandardSwitch()
	case "distributedSwitch":
		return s.DistributedSwitch()
	case "adapters":
		return s.Adapters()
	case "vmknics":
		return s.Vmknics()
	case "packages":
		return s.Packages()
	case "acceptanceLevel":
		return s.AcceptanceLevel()
	case "kernelModules":
		return s.KernelModules()
	case "advancedSettings":
		return s.AdvancedSettings()
	case "services":
		return s.Services()
	case "timezone":
		return s.Timezone()
	case "ntp":
		return s.Ntp()
	case "snmp":
		return s.Snmp()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.host\" resource")
	}
}

// Moid accessor autogenerated
func (s *mqlVsphereHost) Moid() (string, error) {
	res, ok := s.Cache.Load("moid")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.host\" failed: no value provided for static field \"moid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.host\" failed to cast field \"moid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVsphereHost) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.host\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.host\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InventoryPath accessor autogenerated
func (s *mqlVsphereHost) InventoryPath() (string, error) {
	res, ok := s.Cache.Load("inventoryPath")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.host\" failed: no value provided for static field \"inventoryPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.host\" failed to cast field \"inventoryPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereHost) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.host\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StandardSwitch accessor autogenerated
func (s *mqlVsphereHost) StandardSwitch() ([]interface{}, error) {
	res, ok := s.Cache.Load("standardSwitch")
	if !ok || !res.Valid {
		if err := s.ComputeStandardSwitch(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("standardSwitch")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"standardSwitch\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "standardSwitch")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"standardSwitch\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DistributedSwitch accessor autogenerated
func (s *mqlVsphereHost) DistributedSwitch() ([]interface{}, error) {
	res, ok := s.Cache.Load("distributedSwitch")
	if !ok || !res.Valid {
		if err := s.ComputeDistributedSwitch(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("distributedSwitch")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"distributedSwitch\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "distributedSwitch")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"distributedSwitch\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Adapters accessor autogenerated
func (s *mqlVsphereHost) Adapters() ([]interface{}, error) {
	res, ok := s.Cache.Load("adapters")
	if !ok || !res.Valid {
		if err := s.ComputeAdapters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("adapters")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"adapters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "adapters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"adapters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Vmknics accessor autogenerated
func (s *mqlVsphereHost) Vmknics() ([]interface{}, error) {
	res, ok := s.Cache.Load("vmknics")
	if !ok || !res.Valid {
		if err := s.ComputeVmknics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vmknics")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"vmknics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vmknics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"vmknics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Packages accessor autogenerated
func (s *mqlVsphereHost) Packages() ([]interface{}, error) {
	res, ok := s.Cache.Load("packages")
	if !ok || !res.Valid {
		if err := s.ComputePackages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("packages")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"packages\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "packages")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"packages\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AcceptanceLevel accessor autogenerated
func (s *mqlVsphereHost) AcceptanceLevel() (string, error) {
	res, ok := s.Cache.Load("acceptanceLevel")
	if !ok || !res.Valid {
		if err := s.ComputeAcceptanceLevel(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("acceptanceLevel")
		if !ok {
			return "", errors.New("\"vsphere.host\" calculated \"acceptanceLevel\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "acceptanceLevel")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.host\" failed to cast field \"acceptanceLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KernelModules accessor autogenerated
func (s *mqlVsphereHost) KernelModules() ([]interface{}, error) {
	res, ok := s.Cache.Load("kernelModules")
	if !ok || !res.Valid {
		if err := s.ComputeKernelModules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kernelModules")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"kernelModules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kernelModules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"kernelModules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AdvancedSettings accessor autogenerated
func (s *mqlVsphereHost) AdvancedSettings() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("advancedSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAdvancedSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advancedSettings")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"advancedSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advancedSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"advancedSettings\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Services accessor autogenerated
func (s *mqlVsphereHost) Services() ([]interface{}, error) {
	res, ok := s.Cache.Load("services")
	if !ok || !res.Valid {
		if err := s.ComputeServices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("services")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"services\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "services")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"services\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Timezone accessor autogenerated
func (s *mqlVsphereHost) Timezone() (EsxiTimezone, error) {
	res, ok := s.Cache.Load("timezone")
	if !ok || !res.Valid {
		if err := s.ComputeTimezone(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("timezone")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"timezone\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "timezone")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(EsxiTimezone)
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"timezone\" to the right type (EsxiTimezone): %#v", res)
	}
	return tres, nil
}

// Ntp accessor autogenerated
func (s *mqlVsphereHost) Ntp() (EsxiNtpconfig, error) {
	res, ok := s.Cache.Load("ntp")
	if !ok || !res.Valid {
		if err := s.ComputeNtp(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ntp")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"ntp\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ntp")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(EsxiNtpconfig)
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"ntp\" to the right type (EsxiNtpconfig): %#v", res)
	}
	return tres, nil
}

// Snmp accessor autogenerated
func (s *mqlVsphereHost) Snmp() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("snmp")
	if !ok || !res.Valid {
		if err := s.ComputeSnmp(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snmp")
		if !ok {
			return nil, errors.New("\"vsphere.host\" calculated \"snmp\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snmp")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.host\" failed to cast field \"snmp\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereHost) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.host].MqlCompute")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "standardSwitch":
		return s.ComputeStandardSwitch()
	case "distributedSwitch":
		return s.ComputeDistributedSwitch()
	case "adapters":
		return s.ComputeAdapters()
	case "vmknics":
		return s.ComputeVmknics()
	case "packages":
		return s.ComputePackages()
	case "acceptanceLevel":
		return s.ComputeAcceptanceLevel()
	case "kernelModules":
		return s.ComputeKernelModules()
	case "advancedSettings":
		return s.ComputeAdvancedSettings()
	case "services":
		return s.ComputeServices()
	case "timezone":
		return s.ComputeTimezone()
	case "ntp":
		return s.ComputeNtp()
	case "snmp":
		return s.ComputeSnmp()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.host\" resource")
	}
}

// ComputeStandardSwitch computer autogenerated
func (s *mqlVsphereHost) ComputeStandardSwitch() error {
	var err error
	if _, ok := s.Cache.Load("standardSwitch"); ok {
		return nil
	}
	vres, err := s.GetStandardSwitch()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("standardSwitch", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDistributedSwitch computer autogenerated
func (s *mqlVsphereHost) ComputeDistributedSwitch() error {
	var err error
	if _, ok := s.Cache.Load("distributedSwitch"); ok {
		return nil
	}
	vres, err := s.GetDistributedSwitch()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("distributedSwitch", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdapters computer autogenerated
func (s *mqlVsphereHost) ComputeAdapters() error {
	var err error
	if _, ok := s.Cache.Load("adapters"); ok {
		return nil
	}
	vres, err := s.GetAdapters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("adapters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVmknics computer autogenerated
func (s *mqlVsphereHost) ComputeVmknics() error {
	var err error
	if _, ok := s.Cache.Load("vmknics"); ok {
		return nil
	}
	vres, err := s.GetVmknics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vmknics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePackages computer autogenerated
func (s *mqlVsphereHost) ComputePackages() error {
	var err error
	if _, ok := s.Cache.Load("packages"); ok {
		return nil
	}
	vres, err := s.GetPackages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("packages", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAcceptanceLevel computer autogenerated
func (s *mqlVsphereHost) ComputeAcceptanceLevel() error {
	var err error
	if _, ok := s.Cache.Load("acceptanceLevel"); ok {
		return nil
	}
	vres, err := s.GetAcceptanceLevel()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("acceptanceLevel", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKernelModules computer autogenerated
func (s *mqlVsphereHost) ComputeKernelModules() error {
	var err error
	if _, ok := s.Cache.Load("kernelModules"); ok {
		return nil
	}
	vres, err := s.GetKernelModules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kernelModules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdvancedSettings computer autogenerated
func (s *mqlVsphereHost) ComputeAdvancedSettings() error {
	var err error
	if _, ok := s.Cache.Load("advancedSettings"); ok {
		return nil
	}
	vres, err := s.GetAdvancedSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advancedSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServices computer autogenerated
func (s *mqlVsphereHost) ComputeServices() error {
	var err error
	if _, ok := s.Cache.Load("services"); ok {
		return nil
	}
	vres, err := s.GetServices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("services", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTimezone computer autogenerated
func (s *mqlVsphereHost) ComputeTimezone() error {
	var err error
	if _, ok := s.Cache.Load("timezone"); ok {
		return nil
	}
	vres, err := s.GetTimezone()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("timezone", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNtp computer autogenerated
func (s *mqlVsphereHost) ComputeNtp() error {
	var err error
	if _, ok := s.Cache.Load("ntp"); ok {
		return nil
	}
	vres, err := s.GetNtp()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ntp", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnmp computer autogenerated
func (s *mqlVsphereHost) ComputeSnmp() error {
	var err error
	if _, ok := s.Cache.Load("snmp"); ok {
		return nil
	}
	vres, err := s.GetSnmp()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snmp", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereVm resource interface
type VsphereVm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Moid() (string, error)
	Name() (string, error)
	InventoryPath() (string, error)
	Properties() (interface{}, error)
	AdvancedSettings() (map[string]interface{}, error)
}

// mqlVsphereVm for the vsphere.vm resource
type mqlVsphereVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.vm resource
func newVsphereVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereVm{runtime.NewResource("vsphere.vm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "moid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"moid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "inventoryPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"inventoryPath\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "advancedSettings":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"advancedSettings\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("moid"); !ok {
		return errors.New("Initialized \"vsphere.vm\" resource without a \"moid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("inventoryPath"); !ok {
		return errors.New("Initialized \"vsphere.vm\" resource without a \"inventoryPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.vm\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vm].Register")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "advancedSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.vm].Field")
	switch name {
	case "moid":
		return s.Moid()
	case "name":
		return s.Name()
	case "inventoryPath":
		return s.InventoryPath()
	case "properties":
		return s.Properties()
	case "advancedSettings":
		return s.AdvancedSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.vm\" resource")
	}
}

// Moid accessor autogenerated
func (s *mqlVsphereVm) Moid() (string, error) {
	res, ok := s.Cache.Load("moid")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vm\" failed: no value provided for static field \"moid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vm\" failed to cast field \"moid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVsphereVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InventoryPath accessor autogenerated
func (s *mqlVsphereVm) InventoryPath() (string, error) {
	res, ok := s.Cache.Load("inventoryPath")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vm\" failed: no value provided for static field \"inventoryPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vm\" failed to cast field \"inventoryPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereVm) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vm\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vm\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AdvancedSettings accessor autogenerated
func (s *mqlVsphereVm) AdvancedSettings() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("advancedSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAdvancedSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advancedSettings")
		if !ok {
			return nil, errors.New("\"vsphere.vm\" calculated \"advancedSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advancedSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vm\" failed to cast field \"advancedSettings\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereVm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vm].MqlCompute")
	switch name {
	case "moid":
		return nil
	case "name":
		return nil
	case "inventoryPath":
		return nil
	case "properties":
		return nil
	case "advancedSettings":
		return s.ComputeAdvancedSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vm\" resource")
	}
}

// ComputeAdvancedSettings computer autogenerated
func (s *mqlVsphereVm) ComputeAdvancedSettings() error {
	var err error
	if _, ok := s.Cache.Load("advancedSettings"); ok {
		return nil
	}
	vres, err := s.GetAdvancedSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advancedSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereVswitchStandard resource interface
type VsphereVswitchStandard interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Properties() (interface{}, error)
	FailoverPolicy() (interface{}, error)
	SecurityPolicy() (interface{}, error)
	ShapingPolicy() (interface{}, error)
	Uplinks() ([]interface{}, error)
}

// mqlVsphereVswitchStandard for the vsphere.vswitch.standard resource
type mqlVsphereVswitchStandard struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereVswitchStandard) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.vswitch.standard resource
func newVsphereVswitchStandard(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereVswitchStandard{runtime.NewResource("vsphere.vswitch.standard")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "failoverPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"failoverPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"securityPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "shapingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"shapingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "uplinks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"uplinks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.standard\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.vswitch.standard with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereVswitchStandard) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.vswitch.standard\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.vswitch.standard\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereVswitchStandard) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.standard].Register")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "failoverPolicy":
		return nil
	case "securityPolicy":
		return nil
	case "shapingPolicy":
		return nil
	case "uplinks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vswitch.standard\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereVswitchStandard) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.standard].Field")
	switch name {
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "failoverPolicy":
		return s.FailoverPolicy()
	case "securityPolicy":
		return s.SecurityPolicy()
	case "shapingPolicy":
		return s.ShapingPolicy()
	case "uplinks":
		return s.Uplinks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.vswitch.standard\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVsphereVswitchStandard) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vswitch.standard\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereVswitchStandard) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vswitch.standard\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FailoverPolicy accessor autogenerated
func (s *mqlVsphereVswitchStandard) FailoverPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("failoverPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeFailoverPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("failoverPolicy")
		if !ok {
			return nil, errors.New("\"vsphere.vswitch.standard\" calculated \"failoverPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "failoverPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"failoverPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityPolicy accessor autogenerated
func (s *mqlVsphereVswitchStandard) SecurityPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("securityPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityPolicy")
		if !ok {
			return nil, errors.New("\"vsphere.vswitch.standard\" calculated \"securityPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"securityPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ShapingPolicy accessor autogenerated
func (s *mqlVsphereVswitchStandard) ShapingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("shapingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeShapingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("shapingPolicy")
		if !ok {
			return nil, errors.New("\"vsphere.vswitch.standard\" calculated \"shapingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "shapingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"shapingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Uplinks accessor autogenerated
func (s *mqlVsphereVswitchStandard) Uplinks() ([]interface{}, error) {
	res, ok := s.Cache.Load("uplinks")
	if !ok || !res.Valid {
		if err := s.ComputeUplinks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("uplinks")
		if !ok {
			return nil, errors.New("\"vsphere.vswitch.standard\" calculated \"uplinks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "uplinks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.standard\" failed to cast field \"uplinks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereVswitchStandard) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.standard].MqlCompute")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "failoverPolicy":
		return s.ComputeFailoverPolicy()
	case "securityPolicy":
		return s.ComputeSecurityPolicy()
	case "shapingPolicy":
		return s.ComputeShapingPolicy()
	case "uplinks":
		return s.ComputeUplinks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vswitch.standard\" resource")
	}
}

// ComputeFailoverPolicy computer autogenerated
func (s *mqlVsphereVswitchStandard) ComputeFailoverPolicy() error {
	var err error
	if _, ok := s.Cache.Load("failoverPolicy"); ok {
		return nil
	}
	vres, err := s.GetFailoverPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("failoverPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityPolicy computer autogenerated
func (s *mqlVsphereVswitchStandard) ComputeSecurityPolicy() error {
	var err error
	if _, ok := s.Cache.Load("securityPolicy"); ok {
		return nil
	}
	vres, err := s.GetSecurityPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeShapingPolicy computer autogenerated
func (s *mqlVsphereVswitchStandard) ComputeShapingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("shapingPolicy"); ok {
		return nil
	}
	vres, err := s.GetShapingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("shapingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUplinks computer autogenerated
func (s *mqlVsphereVswitchStandard) ComputeUplinks() error {
	var err error
	if _, ok := s.Cache.Load("uplinks"); ok {
		return nil
	}
	vres, err := s.GetUplinks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("uplinks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereVswitchDvs resource interface
type VsphereVswitchDvs interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Properties() (interface{}, error)
	Uplinks() ([]interface{}, error)
}

// mqlVsphereVswitchDvs for the vsphere.vswitch.dvs resource
type mqlVsphereVswitchDvs struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereVswitchDvs) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.vswitch.dvs resource
func newVsphereVswitchDvs(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereVswitchDvs{runtime.NewResource("vsphere.vswitch.dvs")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.dvs\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.dvs\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "uplinks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.dvs\", its \"uplinks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vswitch.dvs\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.vswitch.dvs with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereVswitchDvs) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.vswitch.dvs\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.vswitch.dvs\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereVswitchDvs) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.dvs].Register")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "uplinks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vswitch.dvs\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereVswitchDvs) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.dvs].Field")
	switch name {
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "uplinks":
		return s.Uplinks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.vswitch.dvs\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVsphereVswitchDvs) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vswitch.dvs\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vswitch.dvs\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereVswitchDvs) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vswitch.dvs\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.dvs\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Uplinks accessor autogenerated
func (s *mqlVsphereVswitchDvs) Uplinks() ([]interface{}, error) {
	res, ok := s.Cache.Load("uplinks")
	if !ok || !res.Valid {
		if err := s.ComputeUplinks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("uplinks")
		if !ok {
			return nil, errors.New("\"vsphere.vswitch.dvs\" calculated \"uplinks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "uplinks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vswitch.dvs\" failed to cast field \"uplinks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereVswitchDvs) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vswitch.dvs].MqlCompute")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "uplinks":
		return s.ComputeUplinks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vswitch.dvs\" resource")
	}
}

// ComputeUplinks computer autogenerated
func (s *mqlVsphereVswitchDvs) ComputeUplinks() error {
	var err error
	if _, ok := s.Cache.Load("uplinks"); ok {
		return nil
	}
	vres, err := s.GetUplinks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("uplinks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereVmnic resource interface
type VsphereVmnic interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Properties() (interface{}, error)
	Details() (interface{}, error)
	PauseParams() (interface{}, error)
}

// mqlVsphereVmnic for the vsphere.vmnic resource
type mqlVsphereVmnic struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereVmnic) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.vmnic resource
func newVsphereVmnic(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereVmnic{runtime.NewResource("vsphere.vmnic")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmnic\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmnic\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "details":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmnic\", its \"details\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "pauseParams":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmnic\", its \"pauseParams\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmnic\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.vmnic with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereVmnic) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.vmnic\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.vmnic\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("pauseParams"); !ok {
		return errors.New("Initialized \"vsphere.vmnic\" resource without a \"pauseParams\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereVmnic) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vmnic].Register")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "details":
		return nil
	case "pauseParams":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vmnic\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereVmnic) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.vmnic].Field")
	switch name {
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "details":
		return s.Details()
	case "pauseParams":
		return s.PauseParams()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.vmnic\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVsphereVmnic) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vmnic\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vmnic\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereVmnic) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmnic\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmnic\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Details accessor autogenerated
func (s *mqlVsphereVmnic) Details() (interface{}, error) {
	res, ok := s.Cache.Load("details")
	if !ok || !res.Valid {
		if err := s.ComputeDetails(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("details")
		if !ok {
			return nil, errors.New("\"vsphere.vmnic\" calculated \"details\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "details")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmnic\" failed to cast field \"details\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PauseParams accessor autogenerated
func (s *mqlVsphereVmnic) PauseParams() (interface{}, error) {
	res, ok := s.Cache.Load("pauseParams")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmnic\" failed: no value provided for static field \"pauseParams\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmnic\" failed to cast field \"pauseParams\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereVmnic) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vmnic].MqlCompute")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "details":
		return s.ComputeDetails()
	case "pauseParams":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vmnic\" resource")
	}
}

// ComputeDetails computer autogenerated
func (s *mqlVsphereVmnic) ComputeDetails() error {
	var err error
	if _, ok := s.Cache.Load("details"); ok {
		return nil
	}
	vres, err := s.GetDetails()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("details", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VsphereVmknic resource interface
type VsphereVmknic interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Properties() (interface{}, error)
	Ipv4() ([]interface{}, error)
	Ipv6() ([]interface{}, error)
	Tags() ([]interface{}, error)
}

// mqlVsphereVmknic for the vsphere.vmknic resource
type mqlVsphereVmknic struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVsphereVmknic) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vsphere.vmknic resource
func newVsphereVmknic(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVsphereVmknic{runtime.NewResource("vsphere.vmknic")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "ipv4":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"ipv4\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ipv6":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"ipv6\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vsphere.vmknic\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vsphere.vmknic with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVsphereVmknic) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vsphere.vmknic\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"vsphere.vmknic\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv4"); !ok {
		return errors.New("Initialized \"vsphere.vmknic\" resource without a \"ipv4\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6"); !ok {
		return errors.New("Initialized \"vsphere.vmknic\" resource without a \"ipv6\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"vsphere.vmknic\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVsphereVmknic) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vmknic].Register")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "ipv4":
		return nil
	case "ipv6":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vmknic\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVsphereVmknic) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vsphere.vmknic].Field")
	switch name {
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "ipv4":
		return s.Ipv4()
	case "ipv6":
		return s.Ipv6()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vsphere.vmknic\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVsphereVmknic) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vsphere.vmknic\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vsphere.vmknic\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlVsphereVmknic) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmknic\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmknic\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Ipv4 accessor autogenerated
func (s *mqlVsphereVmknic) Ipv4() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipv4")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmknic\" failed: no value provided for static field \"ipv4\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmknic\" failed to cast field \"ipv4\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ipv6 accessor autogenerated
func (s *mqlVsphereVmknic) Ipv6() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipv6")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmknic\" failed: no value provided for static field \"ipv6\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmknic\" failed to cast field \"ipv6\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlVsphereVmknic) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"vsphere.vmknic\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vsphere.vmknic\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVsphereVmknic) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[vsphere.vmknic].MqlCompute")
	switch name {
	case "name":
		return nil
	case "properties":
		return nil
	case "ipv4":
		return nil
	case "ipv6":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vsphere.vmknic\" resource")
	}
}

// EsxiCommand resource interface
type EsxiCommand interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	InventoryPath() (string, error)
	Command() (string, error)
	Result() ([]interface{}, error)
}

// mqlEsxiCommand for the esxi.command resource
type mqlEsxiCommand struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiCommand) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.command resource
func newEsxiCommand(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiCommand{runtime.NewResource("esxi.command")}
	var existing EsxiCommand
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "inventoryPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.command\", its \"inventoryPath\" argument has the wrong type (expected type \"string\")")
			}
		case "command":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.command\", its \"command\" argument has the wrong type (expected type \"string\")")
			}
		case "result":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"esxi.command\", its \"result\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.command\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.command with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiCommand) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("inventoryPath"); !ok {
		return errors.New("Initialized \"esxi.command\" resource without a \"inventoryPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("command"); !ok {
		return errors.New("Initialized \"esxi.command\" resource without a \"command\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiCommand) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.command].Register")
	switch name {
	case "inventoryPath":
		return nil
	case "command":
		return nil
	case "result":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.command\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiCommand) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.command].Field")
	switch name {
	case "inventoryPath":
		return s.InventoryPath()
	case "command":
		return s.Command()
	case "result":
		return s.Result()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.command\" resource")
	}
}

// InventoryPath accessor autogenerated
func (s *mqlEsxiCommand) InventoryPath() (string, error) {
	res, ok := s.Cache.Load("inventoryPath")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.command\" failed: no value provided for static field \"inventoryPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.command\" failed to cast field \"inventoryPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Command accessor autogenerated
func (s *mqlEsxiCommand) Command() (string, error) {
	res, ok := s.Cache.Load("command")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.command\" failed: no value provided for static field \"command\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.command\" failed to cast field \"command\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Result accessor autogenerated
func (s *mqlEsxiCommand) Result() ([]interface{}, error) {
	res, ok := s.Cache.Load("result")
	if !ok || !res.Valid {
		if err := s.ComputeResult(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("result")
		if !ok {
			return nil, errors.New("\"esxi.command\" calculated \"result\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "result")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"esxi.command\" failed to cast field \"result\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiCommand) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.command].MqlCompute")
	switch name {
	case "inventoryPath":
		return nil
	case "command":
		return nil
	case "result":
		return s.ComputeResult()
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.command\" resource")
	}
}

// ComputeResult computer autogenerated
func (s *mqlEsxiCommand) ComputeResult() error {
	var err error
	if _, ok := s.Cache.Load("result"); ok {
		return nil
	}
	vres, err := s.GetResult()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("result", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// EsxiVib resource interface
type EsxiVib interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	AcceptanceLevel() (string, error)
	CreationDate() (*time.Time, error)
	InstallDate() (*time.Time, error)
	Status() (string, error)
	Vendor() (string, error)
	Version() (string, error)
}

// mqlEsxiVib for the esxi.vib resource
type mqlEsxiVib struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiVib) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.vib resource
func newEsxiVib(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiVib{runtime.NewResource("esxi.vib")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "acceptanceLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"acceptanceLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "installDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"installDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "vendor":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"vendor\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.vib\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.vib with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiVib) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("acceptanceLevel"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"acceptanceLevel\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("installDate"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"installDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("vendor"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"vendor\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"esxi.vib\" resource without a \"version\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiVib) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.vib].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "acceptanceLevel":
		return nil
	case "creationDate":
		return nil
	case "installDate":
		return nil
	case "status":
		return nil
	case "vendor":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.vib\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiVib) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.vib].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "acceptanceLevel":
		return s.AcceptanceLevel()
	case "creationDate":
		return s.CreationDate()
	case "installDate":
		return s.InstallDate()
	case "status":
		return s.Status()
	case "vendor":
		return s.Vendor()
	case "version":
		return s.Version()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.vib\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlEsxiVib) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlEsxiVib) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AcceptanceLevel accessor autogenerated
func (s *mqlEsxiVib) AcceptanceLevel() (string, error) {
	res, ok := s.Cache.Load("acceptanceLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"acceptanceLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"acceptanceLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlEsxiVib) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"esxi.vib\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"esxi.vib\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// InstallDate accessor autogenerated
func (s *mqlEsxiVib) InstallDate() (*time.Time, error) {
	res, ok := s.Cache.Load("installDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"esxi.vib\" failed: no value provided for static field \"installDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"esxi.vib\" failed to cast field \"installDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlEsxiVib) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Vendor accessor autogenerated
func (s *mqlEsxiVib) Vendor() (string, error) {
	res, ok := s.Cache.Load("vendor")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"vendor\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"vendor\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlEsxiVib) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.vib\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.vib\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiVib) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.vib].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "acceptanceLevel":
		return nil
	case "creationDate":
		return nil
	case "installDate":
		return nil
	case "status":
		return nil
	case "vendor":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.vib\" resource")
	}
}

// EsxiKernelmodule resource interface
type EsxiKernelmodule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Modulefile() (string, error)
	Version() (string, error)
	Loaded() (bool, error)
	License() (string, error)
	Enabled() (bool, error)
	SignedStatus() (string, error)
	SignatureDigest() (string, error)
	SignatureFingerprint() (string, error)
	VibAcceptanceLevel() (string, error)
}

// mqlEsxiKernelmodule for the esxi.kernelmodule resource
type mqlEsxiKernelmodule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiKernelmodule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.kernelmodule resource
func newEsxiKernelmodule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiKernelmodule{runtime.NewResource("esxi.kernelmodule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "modulefile":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"modulefile\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "loaded":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"loaded\" argument has the wrong type (expected type \"bool\")")
			}
		case "license":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"license\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "signedStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"signedStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "signatureDigest":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"signatureDigest\" argument has the wrong type (expected type \"string\")")
			}
		case "signatureFingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"signatureFingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "vibAcceptanceLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"vibAcceptanceLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.kernelmodule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.kernelmodule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiKernelmodule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("modulefile"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"modulefile\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("loaded"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"loaded\". This field is required.")
	}
	if _, ok := s.Cache.Load("license"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"license\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("signedStatus"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"signedStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("signatureDigest"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"signatureDigest\". This field is required.")
	}
	if _, ok := s.Cache.Load("signatureFingerprint"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"signatureFingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("vibAcceptanceLevel"); !ok {
		return errors.New("Initialized \"esxi.kernelmodule\" resource without a \"vibAcceptanceLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiKernelmodule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.kernelmodule].Register")
	switch name {
	case "name":
		return nil
	case "modulefile":
		return nil
	case "version":
		return nil
	case "loaded":
		return nil
	case "license":
		return nil
	case "enabled":
		return nil
	case "signedStatus":
		return nil
	case "signatureDigest":
		return nil
	case "signatureFingerprint":
		return nil
	case "vibAcceptanceLevel":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.kernelmodule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiKernelmodule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.kernelmodule].Field")
	switch name {
	case "name":
		return s.Name()
	case "modulefile":
		return s.Modulefile()
	case "version":
		return s.Version()
	case "loaded":
		return s.Loaded()
	case "license":
		return s.License()
	case "enabled":
		return s.Enabled()
	case "signedStatus":
		return s.SignedStatus()
	case "signatureDigest":
		return s.SignatureDigest()
	case "signatureFingerprint":
		return s.SignatureFingerprint()
	case "vibAcceptanceLevel":
		return s.VibAcceptanceLevel()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.kernelmodule\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlEsxiKernelmodule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Modulefile accessor autogenerated
func (s *mqlEsxiKernelmodule) Modulefile() (string, error) {
	res, ok := s.Cache.Load("modulefile")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"modulefile\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"modulefile\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlEsxiKernelmodule) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Loaded accessor autogenerated
func (s *mqlEsxiKernelmodule) Loaded() (bool, error) {
	res, ok := s.Cache.Load("loaded")
	if !ok || !res.Valid {
		return false, errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"loaded\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"loaded\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// License accessor autogenerated
func (s *mqlEsxiKernelmodule) License() (string, error) {
	res, ok := s.Cache.Load("license")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"license\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"license\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlEsxiKernelmodule) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// SignedStatus accessor autogenerated
func (s *mqlEsxiKernelmodule) SignedStatus() (string, error) {
	res, ok := s.Cache.Load("signedStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"signedStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"signedStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SignatureDigest accessor autogenerated
func (s *mqlEsxiKernelmodule) SignatureDigest() (string, error) {
	res, ok := s.Cache.Load("signatureDigest")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"signatureDigest\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"signatureDigest\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SignatureFingerprint accessor autogenerated
func (s *mqlEsxiKernelmodule) SignatureFingerprint() (string, error) {
	res, ok := s.Cache.Load("signatureFingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"signatureFingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"signatureFingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VibAcceptanceLevel accessor autogenerated
func (s *mqlEsxiKernelmodule) VibAcceptanceLevel() (string, error) {
	res, ok := s.Cache.Load("vibAcceptanceLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.kernelmodule\" failed: no value provided for static field \"vibAcceptanceLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.kernelmodule\" failed to cast field \"vibAcceptanceLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiKernelmodule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.kernelmodule].MqlCompute")
	switch name {
	case "name":
		return nil
	case "modulefile":
		return nil
	case "version":
		return nil
	case "loaded":
		return nil
	case "license":
		return nil
	case "enabled":
		return nil
	case "signedStatus":
		return nil
	case "signatureDigest":
		return nil
	case "signatureFingerprint":
		return nil
	case "vibAcceptanceLevel":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.kernelmodule\" resource")
	}
}

// EsxiService resource interface
type EsxiService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Key() (string, error)
	Label() (string, error)
	Required() (bool, error)
	Uninstallable() (bool, error)
	Running() (bool, error)
	Ruleset() ([]interface{}, error)
	Policy() (string, error)
}

// mqlEsxiService for the esxi.service resource
type mqlEsxiService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.service resource
func newEsxiService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiService{runtime.NewResource("esxi.service")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "key":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"key\" argument has the wrong type (expected type \"string\")")
			}
		case "label":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"label\" argument has the wrong type (expected type \"string\")")
			}
		case "required":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"required\" argument has the wrong type (expected type \"bool\")")
			}
		case "uninstallable":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"uninstallable\" argument has the wrong type (expected type \"bool\")")
			}
		case "running":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"running\" argument has the wrong type (expected type \"bool\")")
			}
		case "ruleset":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"ruleset\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "policy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"policy\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.service\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.service with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("key"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"key\". This field is required.")
	}
	if _, ok := s.Cache.Load("label"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"label\". This field is required.")
	}
	if _, ok := s.Cache.Load("required"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"required\". This field is required.")
	}
	if _, ok := s.Cache.Load("uninstallable"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"uninstallable\". This field is required.")
	}
	if _, ok := s.Cache.Load("running"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"running\". This field is required.")
	}
	if _, ok := s.Cache.Load("ruleset"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"ruleset\". This field is required.")
	}
	if _, ok := s.Cache.Load("policy"); !ok {
		return errors.New("Initialized \"esxi.service\" resource without a \"policy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.service].Register")
	switch name {
	case "key":
		return nil
	case "label":
		return nil
	case "required":
		return nil
	case "uninstallable":
		return nil
	case "running":
		return nil
	case "ruleset":
		return nil
	case "policy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.service\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.service].Field")
	switch name {
	case "key":
		return s.Key()
	case "label":
		return s.Label()
	case "required":
		return s.Required()
	case "uninstallable":
		return s.Uninstallable()
	case "running":
		return s.Running()
	case "ruleset":
		return s.Ruleset()
	case "policy":
		return s.Policy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.service\" resource")
	}
}

// Key accessor autogenerated
func (s *mqlEsxiService) Key() (string, error) {
	res, ok := s.Cache.Load("key")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.service\" failed: no value provided for static field \"key\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.service\" failed to cast field \"key\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Label accessor autogenerated
func (s *mqlEsxiService) Label() (string, error) {
	res, ok := s.Cache.Load("label")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.service\" failed: no value provided for static field \"label\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.service\" failed to cast field \"label\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Required accessor autogenerated
func (s *mqlEsxiService) Required() (bool, error) {
	res, ok := s.Cache.Load("required")
	if !ok || !res.Valid {
		return false, errors.New("\"esxi.service\" failed: no value provided for static field \"required\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"esxi.service\" failed to cast field \"required\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Uninstallable accessor autogenerated
func (s *mqlEsxiService) Uninstallable() (bool, error) {
	res, ok := s.Cache.Load("uninstallable")
	if !ok || !res.Valid {
		return false, errors.New("\"esxi.service\" failed: no value provided for static field \"uninstallable\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"esxi.service\" failed to cast field \"uninstallable\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Running accessor autogenerated
func (s *mqlEsxiService) Running() (bool, error) {
	res, ok := s.Cache.Load("running")
	if !ok || !res.Valid {
		return false, errors.New("\"esxi.service\" failed: no value provided for static field \"running\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"esxi.service\" failed to cast field \"running\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Ruleset accessor autogenerated
func (s *mqlEsxiService) Ruleset() ([]interface{}, error) {
	res, ok := s.Cache.Load("ruleset")
	if !ok || !res.Valid {
		return nil, errors.New("\"esxi.service\" failed: no value provided for static field \"ruleset\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"esxi.service\" failed to cast field \"ruleset\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Policy accessor autogenerated
func (s *mqlEsxiService) Policy() (string, error) {
	res, ok := s.Cache.Load("policy")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.service\" failed: no value provided for static field \"policy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.service\" failed to cast field \"policy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.service].MqlCompute")
	switch name {
	case "key":
		return nil
	case "label":
		return nil
	case "required":
		return nil
	case "uninstallable":
		return nil
	case "running":
		return nil
	case "ruleset":
		return nil
	case "policy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.service\" resource")
	}
}

// EsxiTimezone resource interface
type EsxiTimezone interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Key() (string, error)
	Name() (string, error)
	Description() (string, error)
	Offset() (int64, error)
}

// mqlEsxiTimezone for the esxi.timezone resource
type mqlEsxiTimezone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiTimezone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.timezone resource
func newEsxiTimezone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiTimezone{runtime.NewResource("esxi.timezone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "key":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.timezone\", its \"key\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.timezone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.timezone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "offset":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"esxi.timezone\", its \"offset\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.timezone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.timezone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiTimezone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("key"); !ok {
		return errors.New("Initialized \"esxi.timezone\" resource without a \"key\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"esxi.timezone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"esxi.timezone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("offset"); !ok {
		return errors.New("Initialized \"esxi.timezone\" resource without a \"offset\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiTimezone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.timezone].Register")
	switch name {
	case "key":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "offset":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.timezone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiTimezone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.timezone].Field")
	switch name {
	case "key":
		return s.Key()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "offset":
		return s.Offset()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.timezone\" resource")
	}
}

// Key accessor autogenerated
func (s *mqlEsxiTimezone) Key() (string, error) {
	res, ok := s.Cache.Load("key")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.timezone\" failed: no value provided for static field \"key\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.timezone\" failed to cast field \"key\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlEsxiTimezone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.timezone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.timezone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlEsxiTimezone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.timezone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.timezone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Offset accessor autogenerated
func (s *mqlEsxiTimezone) Offset() (int64, error) {
	res, ok := s.Cache.Load("offset")
	if !ok || !res.Valid {
		return 0, errors.New("\"esxi.timezone\" failed: no value provided for static field \"offset\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"esxi.timezone\" failed to cast field \"offset\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiTimezone) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.timezone].MqlCompute")
	switch name {
	case "key":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "offset":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.timezone\" resource")
	}
}

// EsxiNtpconfig resource interface
type EsxiNtpconfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Server() ([]interface{}, error)
	Config() ([]interface{}, error)
}

// mqlEsxiNtpconfig for the esxi.ntpconfig resource
type mqlEsxiNtpconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlEsxiNtpconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the esxi.ntpconfig resource
func newEsxiNtpconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlEsxiNtpconfig{runtime.NewResource("esxi.ntpconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"esxi.ntpconfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "server":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"esxi.ntpconfig\", its \"server\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "config":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"esxi.ntpconfig\", its \"config\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"esxi.ntpconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized esxi.ntpconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlEsxiNtpconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"esxi.ntpconfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("server"); !ok {
		return errors.New("Initialized \"esxi.ntpconfig\" resource without a \"server\". This field is required.")
	}
	if _, ok := s.Cache.Load("config"); !ok {
		return errors.New("Initialized \"esxi.ntpconfig\" resource without a \"config\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlEsxiNtpconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.ntpconfig].Register")
	switch name {
	case "id":
		return nil
	case "server":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.ntpconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlEsxiNtpconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[esxi.ntpconfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "server":
		return s.Server()
	case "config":
		return s.Config()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"esxi.ntpconfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlEsxiNtpconfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"esxi.ntpconfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"esxi.ntpconfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Server accessor autogenerated
func (s *mqlEsxiNtpconfig) Server() ([]interface{}, error) {
	res, ok := s.Cache.Load("server")
	if !ok || !res.Valid {
		return nil, errors.New("\"esxi.ntpconfig\" failed: no value provided for static field \"server\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"esxi.ntpconfig\" failed to cast field \"server\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlEsxiNtpconfig) Config() ([]interface{}, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		return nil, errors.New("\"esxi.ntpconfig\" failed: no value provided for static field \"config\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"esxi.ntpconfig\" failed to cast field \"config\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlEsxiNtpconfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[esxi.ntpconfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "server":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"esxi.ntpconfig\" resource")
	}
}

