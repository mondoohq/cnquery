// Code generated by resources. DO NOT EDIT.
package azure

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("azuread", newAzuread)
	registry.AddFactory("azuread.user", newAzureadUser)
	registry.AddFactory("azuread.group", newAzureadGroup)
	registry.AddFactory("azuread.domain", newAzureadDomain)
	registry.AddFactory("azuread.application", newAzureadApplication)
	registry.AddFactory("azuread.serviceprincipal", newAzureadServiceprincipal)
	registry.AddFactory("azure", newAzure)
	registry.AddFactory("azure.resource", newAzureResource)
	registry.AddFactory("azure.compute", newAzureCompute)
	registry.AddFactory("azure.compute.vm", newAzureComputeVm)
	registry.AddFactory("azure.compute.disk", newAzureComputeDisk)
	registry.AddFactory("azure.network", newAzureNetwork)
	registry.AddFactory("azure.network.interface", newAzureNetworkInterface)
	registry.AddFactory("azure.network.securitygroup", newAzureNetworkSecuritygroup)
	registry.AddFactory("azure.network.securityrule", newAzureNetworkSecurityrule)
	registry.AddFactory("azure.network.watcher", newAzureNetworkWatcher)
	registry.AddFactory("azure.storage", newAzureStorage)
	registry.AddFactory("azure.storage.account", newAzureStorageAccount)
	registry.AddFactory("azure.storage.account.dataProtection", newAzureStorageAccountDataProtection)
	registry.AddFactory("azure.storage.account.blobService.properties", newAzureStorageAccountBlobServiceProperties)
	registry.AddFactory("azure.storage.account.queueService.properties", newAzureStorageAccountQueueServiceProperties)
	registry.AddFactory("azure.storage.account.tableService.properties", newAzureStorageAccountTableServiceProperties)
	registry.AddFactory("azure.storage.account.service.properties.metrics", newAzureStorageAccountServicePropertiesMetrics)
	registry.AddFactory("azure.storage.account.service.properties.retentionPolicy", newAzureStorageAccountServicePropertiesRetentionPolicy)
	registry.AddFactory("azure.storage.account.service.properties.logging", newAzureStorageAccountServicePropertiesLogging)
	registry.AddFactory("azure.storage.container", newAzureStorageContainer)
	registry.AddFactory("azure.web", newAzureWeb)
	registry.AddFactory("azure.web.appsite", newAzureWebAppsite)
	registry.AddFactory("azure.web.appsiteauthsettings", newAzureWebAppsiteauthsettings)
	registry.AddFactory("azure.web.appsiteconfig", newAzureWebAppsiteconfig)
	registry.AddFactory("azure.sql", newAzureSql)
	registry.AddFactory("azure.sql.server", newAzureSqlServer)
	registry.AddFactory("azure.sql.server.vulnerabilityassessmentsettings", newAzureSqlServerVulnerabilityassessmentsettings)
	registry.AddFactory("azure.sql.server.administrator", newAzureSqlServerAdministrator)
	registry.AddFactory("azure.sql.database", newAzureSqlDatabase)
	registry.AddFactory("azure.sql.databaseusage", newAzureSqlDatabaseusage)
	registry.AddFactory("azure.postgresql", newAzurePostgresql)
	registry.AddFactory("azure.postgresql.server", newAzurePostgresqlServer)
	registry.AddFactory("azure.postgresql.database", newAzurePostgresqlDatabase)
	registry.AddFactory("azure.mysql", newAzureMysql)
	registry.AddFactory("azure.mysql.server", newAzureMysqlServer)
	registry.AddFactory("azure.mysql.database", newAzureMysqlDatabase)
	registry.AddFactory("azure.mysql.flexibleServer", newAzureMysqlFlexibleServer)
	registry.AddFactory("azure.mariadb", newAzureMariadb)
	registry.AddFactory("azure.mariadb.server", newAzureMariadbServer)
	registry.AddFactory("azure.mariadb.database", newAzureMariadbDatabase)
	registry.AddFactory("azure.sql.configuration", newAzureSqlConfiguration)
	registry.AddFactory("azure.sql.firewallrule", newAzureSqlFirewallrule)
	registry.AddFactory("azure.keyvault", newAzureKeyvault)
	registry.AddFactory("azure.keyvault.vault", newAzureKeyvaultVault)
	registry.AddFactory("azure.keyvault.key", newAzureKeyvaultKey)
	registry.AddFactory("azure.keyvault.certificate", newAzureKeyvaultCertificate)
	registry.AddFactory("azure.keyvault.secret", newAzureKeyvaultSecret)
	registry.AddFactory("azure.monitor", newAzureMonitor)
	registry.AddFactory("azure.monitor.logprofile", newAzureMonitorLogprofile)
	registry.AddFactory("azure.monitor.diagnosticsetting", newAzureMonitorDiagnosticsetting)
	registry.AddFactory("azure.cloudDefender", newAzureCloudDefender)
	registry.AddFactory("azure.cloudDefender.securityContact", newAzureCloudDefenderSecurityContact)
	registry.AddFactory("azure.authorization", newAzureAuthorization)
	registry.AddFactory("azure.authorization.roleDefinition", newAzureAuthorizationRoleDefinition)
	registry.AddFactory("azure.authorization.roleDefinition.permission", newAzureAuthorizationRoleDefinitionPermission)
}

// Azuread resource interface
type Azuread interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	ServicePrincipals() ([]interface{}, error)
}

// mqlAzuread for the azuread resource
type mqlAzuread struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzuread) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread resource
func newAzuread(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzuread{runtime.NewResource("azuread")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "servicePrincipals":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"servicePrincipals\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzuread) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzuread) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "servicePrincipals":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzuread) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "servicePrincipals":
		return s.ServicePrincipals()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlAzuread) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAzuread) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlAzuread) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlAzuread) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServicePrincipals accessor autogenerated
func (s *mqlAzuread) ServicePrincipals() ([]interface{}, error) {
	res, ok := s.Cache.Load("servicePrincipals")
	if !ok || !res.Valid {
		if err := s.ComputeServicePrincipals(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servicePrincipals")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"servicePrincipals\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servicePrincipals")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"servicePrincipals\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzuread) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Compute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "servicePrincipals":
		return s.ComputeServicePrincipals()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlAzuread) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAzuread) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlAzuread) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlAzuread) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServicePrincipals computer autogenerated
func (s *mqlAzuread) ComputeServicePrincipals() error {
	var err error
	if _, ok := s.Cache.Load("servicePrincipals"); ok {
		return nil
	}
	vres, err := s.GetServicePrincipals()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servicePrincipals", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadUser resource interface
type AzureadUser interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	GivenName() (string, error)
	Surname() (string, error)
	UserPrincipalName() (string, error)
	AccountEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	UserType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadUser for the azuread.user resource
type mqlAzureadUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.user resource
func newAzureadUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadUser{runtime.NewResource("azuread.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "surname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"surname\" argument has the wrong type (expected type \"string\")")
			}
		case "userPrincipalName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userPrincipalName\" argument has the wrong type (expected type \"string\")")
			}
		case "accountEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"accountEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "userType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("surname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"surname\". This field is required.")
	}
	if _, ok := s.Cache.Load("userPrincipalName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userPrincipalName\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountEnabled"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"accountEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mail\". This field is required.")
	}
	if _, ok := s.Cache.Load("userType"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "userType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "givenName":
		return s.GivenName()
	case "surname":
		return s.Surname()
	case "userPrincipalName":
		return s.UserPrincipalName()
	case "accountEnabled":
		return s.AccountEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "userType":
		return s.UserType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadUser) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlAzureadUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Surname accessor autogenerated
func (s *mqlAzureadUser) Surname() (string, error) {
	res, ok := s.Cache.Load("surname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"surname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"surname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserPrincipalName accessor autogenerated
func (s *mqlAzureadUser) UserPrincipalName() (string, error) {
	res, ok := s.Cache.Load("userPrincipalName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userPrincipalName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userPrincipalName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountEnabled accessor autogenerated
func (s *mqlAzureadUser) AccountEnabled() (bool, error) {
	res, ok := s.Cache.Load("accountEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.user\" failed: no value provided for static field \"accountEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.user\" failed to cast field \"accountEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadUser) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadUser) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadUser) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.user\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserType accessor autogenerated
func (s *mqlAzureadUser) UserType() (string, error) {
	res, ok := s.Cache.Load("userType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadUser) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.user\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.user\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadUser) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Compute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "userType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadUser) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadUser) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadGroup resource interface
type AzureadGroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	SecurityEnabled() (bool, error)
	MailEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	Properties() (interface{}, error)
	Members() ([]interface{}, error)
}

// mqlAzureadGroup for the azuread.group resource
type mqlAzureadGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.group resource
func newAzureadGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadGroup{runtime.NewResource("azuread.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "securityEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"securityEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"securityEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "properties":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "securityEnabled":
		return s.SecurityEnabled()
	case "mailEnabled":
		return s.MailEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "properties":
		return s.Properties()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadGroup) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityEnabled accessor autogenerated
func (s *mqlAzureadGroup) SecurityEnabled() (bool, error) {
	res, ok := s.Cache.Load("securityEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"securityEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"securityEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailEnabled accessor autogenerated
func (s *mqlAzureadGroup) MailEnabled() (bool, error) {
	res, ok := s.Cache.Load("mailEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"mailEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"mailEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadGroup) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadGroup) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadGroup) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.group\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadGroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlAzureadGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadGroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Compute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "properties":
		return s.ComputeProperties()
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadGroup) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadGroup) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMembers computer autogenerated
func (s *mqlAzureadGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadDomain resource interface
type AzureadDomain interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsVerified() (bool, error)
	IsDefault() (bool, error)
	AuthenticationType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadDomain for the azuread.domain resource
type mqlAzureadDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.domain resource
func newAzureadDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadDomain{runtime.NewResource("azuread.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "authenticationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"authenticationType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isVerified"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationType"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"authenticationType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Register")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.domain].Field")
	switch name {
	case "name":
		return s.Name()
	case "isVerified":
		return s.IsVerified()
	case "isDefault":
		return s.IsDefault()
	case "authenticationType":
		return s.AuthenticationType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAzureadDomain) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsVerified accessor autogenerated
func (s *mqlAzureadDomain) IsVerified() (bool, error) {
	res, ok := s.Cache.Load("isVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlAzureadDomain) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AuthenticationType accessor autogenerated
func (s *mqlAzureadDomain) AuthenticationType() (string, error) {
	res, ok := s.Cache.Load("authenticationType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"authenticationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"authenticationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadDomain) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.domain\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.domain\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadDomain) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Compute")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadDomain) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadApplication resource interface
type AzureadApplication interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadApplication for the azuread.application resource
type mqlAzureadApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.application resource
func newAzureadApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadApplication{runtime.NewResource("azuread.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.application\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.application].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadApplication) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Compute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// AzureadServiceprincipal resource interface
type AzureadServiceprincipal interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadServiceprincipal for the azuread.serviceprincipal resource
type mqlAzureadServiceprincipal struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadServiceprincipal) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.serviceprincipal resource
func newAzureadServiceprincipal(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadServiceprincipal{runtime.NewResource("azuread.serviceprincipal")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.serviceprincipal with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadServiceprincipal) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.serviceprincipal\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadServiceprincipal) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadServiceprincipal) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadServiceprincipal) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.serviceprincipal\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.serviceprincipal\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadServiceprincipal) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Compute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Azure resource interface
type Azure interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Resources() ([]interface{}, error)
}

// mqlAzure for the azure resource
type mqlAzure struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzure) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure resource
func newAzure(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzure{runtime.NewResource("azure")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"resources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzure) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzure) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure].Register")
	switch name {
	case "resources":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzure) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure].Field")
	switch name {
	case "resources":
		return s.Resources()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// Resources accessor autogenerated
func (s *mqlAzure) Resources() ([]interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		if err := s.ComputeResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resources")
		if !ok {
			return nil, errors.New("\"azure\" calculated \"resources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure\" failed to cast field \"resources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzure) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure].Compute")
	switch name {
	case "resources":
		return s.ComputeResources()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// ComputeResources computer autogenerated
func (s *mqlAzure) ComputeResources() error {
	var err error
	if _, ok := s.Cache.Load("resources"); ok {
		return nil
	}
	vres, err := s.GetResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureResource resource interface
type AzureResource interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	Sku() (interface{}, error)
	Plan() (interface{}, error)
	Identity() (interface{}, error)
	ProvisioningState() (string, error)
	CreatedTime() (*time.Time, error)
	ChangedTime() (*time.Time, error)
}

// mqlAzureResource for the azure.resource resource
type mqlAzureResource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureResource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.resource resource
func newAzureResource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureResource{runtime.NewResource("azure.resource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "plan":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"plan\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "createdTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"createdTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "changedTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"changedTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.resource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.resource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureResource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("plan"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"plan\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdTime"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"createdTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("changedTime"); !ok {
		return errors.New("Initialized \"azure.resource\" resource without a \"changedTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureResource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.resource].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.resource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureResource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.resource].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "sku":
		return s.Sku()
	case "plan":
		return s.Plan()
	case "identity":
		return s.Identity()
	case "provisioningState":
		return s.ProvisioningState()
	case "createdTime":
		return s.CreatedTime()
	case "changedTime":
		return s.ChangedTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.resource\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureResource) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureResource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureResource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureResource) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureResource) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureResource) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureResource) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureResource) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Plan accessor autogenerated
func (s *mqlAzureResource) Plan() (interface{}, error) {
	res, ok := s.Cache.Load("plan")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"plan\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"plan\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureResource) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureResource) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.resource\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.resource\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedTime accessor autogenerated
func (s *mqlAzureResource) CreatedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"createdTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"createdTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ChangedTime accessor autogenerated
func (s *mqlAzureResource) ChangedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("changedTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.resource\" failed: no value provided for static field \"changedTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.resource\" failed to cast field \"changedTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureResource) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.resource].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.resource\" resource")
	}
}

// AzureCompute resource interface
type AzureCompute interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vms() ([]interface{}, error)
	Disks() ([]interface{}, error)
}

// mqlAzureCompute for the azure.compute resource
type mqlAzureCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.compute resource
func newAzureCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureCompute{runtime.NewResource("azure.compute")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureCompute) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute].Register")
	switch name {
	case "vms":
		return nil
	case "disks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.compute].Field")
	switch name {
	case "vms":
		return s.Vms()
	case "disks":
		return s.Disks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.compute\" resource")
	}
}

// Vms accessor autogenerated
func (s *mqlAzureCompute) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"azure.compute\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlAzureCompute) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"azure.compute\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureCompute) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute].Compute")
	switch name {
	case "vms":
		return s.ComputeVms()
	case "disks":
		return s.ComputeDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute\" resource")
	}
}

// ComputeVms computer autogenerated
func (s *mqlAzureCompute) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlAzureCompute) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureComputeVm resource interface
type AzureComputeVm interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Extensions() ([]interface{}, error)
	OsDisk() (AzureComputeDisk, error)
	DataDisks() ([]interface{}, error)
}

// mqlAzureComputeVm for the azure.compute.vm resource
type mqlAzureComputeVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureComputeVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.compute.vm resource
func newAzureComputeVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureComputeVm{runtime.NewResource("azure.compute.vm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "extensions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"extensions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "osDisk":
			if _, ok := val.(AzureComputeDisk); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"osDisk\" argument has the wrong type (expected type \"AzureComputeDisk\")")
			}
		case "dataDisks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"dataDisks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.compute.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureComputeVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.compute.vm\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureComputeVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute.vm].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return nil
	case "osDisk":
		return nil
	case "dataDisks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureComputeVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.compute.vm].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "extensions":
		return s.Extensions()
	case "osDisk":
		return s.OsDisk()
	case "dataDisks":
		return s.DataDisks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.compute.vm\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureComputeVm) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.vm\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.vm\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureComputeVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureComputeVm) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.vm\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.vm\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureComputeVm) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.vm\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.vm\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureComputeVm) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.vm\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.vm\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureComputeVm) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.vm\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.vm\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Extensions accessor autogenerated
func (s *mqlAzureComputeVm) Extensions() ([]interface{}, error) {
	res, ok := s.Cache.Load("extensions")
	if !ok || !res.Valid {
		if err := s.ComputeExtensions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("extensions")
		if !ok {
			return nil, errors.New("\"azure.compute.vm\" calculated \"extensions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "extensions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.vm\" failed to cast field \"extensions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OsDisk accessor autogenerated
func (s *mqlAzureComputeVm) OsDisk() (AzureComputeDisk, error) {
	res, ok := s.Cache.Load("osDisk")
	if !ok || !res.Valid {
		if err := s.ComputeOsDisk(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("osDisk")
		if !ok {
			return nil, errors.New("\"azure.compute.vm\" calculated \"osDisk\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "osDisk")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureComputeDisk)
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.vm\" failed to cast field \"osDisk\" to the right type (AzureComputeDisk): %#v", res)
	}
	return tres, nil
}

// DataDisks accessor autogenerated
func (s *mqlAzureComputeVm) DataDisks() ([]interface{}, error) {
	res, ok := s.Cache.Load("dataDisks")
	if !ok || !res.Valid {
		if err := s.ComputeDataDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataDisks")
		if !ok {
			return nil, errors.New("\"azure.compute.vm\" calculated \"dataDisks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataDisks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.vm\" failed to cast field \"dataDisks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureComputeVm) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute.vm].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return s.ComputeExtensions()
	case "osDisk":
		return s.ComputeOsDisk()
	case "dataDisks":
		return s.ComputeDataDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute.vm\" resource")
	}
}

// ComputeExtensions computer autogenerated
func (s *mqlAzureComputeVm) ComputeExtensions() error {
	var err error
	if _, ok := s.Cache.Load("extensions"); ok {
		return nil
	}
	vres, err := s.GetExtensions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("extensions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOsDisk computer autogenerated
func (s *mqlAzureComputeVm) ComputeOsDisk() error {
	var err error
	if _, ok := s.Cache.Load("osDisk"); ok {
		return nil
	}
	vres, err := s.GetOsDisk()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("osDisk", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataDisks computer autogenerated
func (s *mqlAzureComputeVm) ComputeDataDisks() error {
	var err error
	if _, ok := s.Cache.Load("dataDisks"); ok {
		return nil
	}
	vres, err := s.GetDataDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataDisks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureComputeDisk resource interface
type AzureComputeDisk interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ManagedByExtended() ([]interface{}, error)
	Zones() ([]interface{}, error)
	Sku() (interface{}, error)
	Properties() (interface{}, error)
}

// mqlAzureComputeDisk for the azure.compute.disk resource
type mqlAzureComputeDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureComputeDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.compute.disk resource
func newAzureComputeDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureComputeDisk{runtime.NewResource("azure.compute.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByExtended":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"managedByExtended\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.compute.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.compute.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureComputeDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedByExtended"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"managedByExtended\". This field is required.")
	}
	if _, ok := s.Cache.Load("zones"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"zones\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.compute.disk\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureComputeDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureComputeDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.compute.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "managedByExtended":
		return s.ManagedByExtended()
	case "zones":
		return s.Zones()
	case "sku":
		return s.Sku()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.compute.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureComputeDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureComputeDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureComputeDisk) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.disk\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.disk\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureComputeDisk) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.disk\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.disk\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureComputeDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.disk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.disk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureComputeDisk) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.compute.disk\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.compute.disk\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByExtended accessor autogenerated
func (s *mqlAzureComputeDisk) ManagedByExtended() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByExtended")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.disk\" failed: no value provided for static field \"managedByExtended\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.disk\" failed to cast field \"managedByExtended\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlAzureComputeDisk) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.disk\" failed: no value provided for static field \"zones\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.disk\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureComputeDisk) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.disk\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.disk\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureComputeDisk) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.compute.disk\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.compute.disk\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureComputeDisk) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.compute.disk].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.compute.disk\" resource")
	}
}

// AzureNetwork resource interface
type AzureNetwork interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Interfaces() ([]interface{}, error)
	SecurityGroups() ([]interface{}, error)
	Watchers() ([]interface{}, error)
}

// mqlAzureNetwork for the azure.network resource
type mqlAzureNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.network resource
func newAzureNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureNetwork{runtime.NewResource("azure.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "watchers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network\", its \"watchers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureNetwork) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network].Register")
	switch name {
	case "interfaces":
		return nil
	case "securityGroups":
		return nil
	case "watchers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.network].Field")
	switch name {
	case "interfaces":
		return s.Interfaces()
	case "securityGroups":
		return s.SecurityGroups()
	case "watchers":
		return s.Watchers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.network\" resource")
	}
}

// Interfaces accessor autogenerated
func (s *mqlAzureNetwork) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		if err := s.ComputeInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("interfaces")
		if !ok {
			return nil, errors.New("\"azure.network\" calculated \"interfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "interfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAzureNetwork) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityGroups")
		if !ok {
			return nil, errors.New("\"azure.network\" calculated \"securityGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Watchers accessor autogenerated
func (s *mqlAzureNetwork) Watchers() ([]interface{}, error) {
	res, ok := s.Cache.Load("watchers")
	if !ok || !res.Valid {
		if err := s.ComputeWatchers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("watchers")
		if !ok {
			return nil, errors.New("\"azure.network\" calculated \"watchers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "watchers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network\" failed to cast field \"watchers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureNetwork) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network].Compute")
	switch name {
	case "interfaces":
		return s.ComputeInterfaces()
	case "securityGroups":
		return s.ComputeSecurityGroups()
	case "watchers":
		return s.ComputeWatchers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network\" resource")
	}
}

// ComputeInterfaces computer autogenerated
func (s *mqlAzureNetwork) ComputeInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("interfaces"); ok {
		return nil
	}
	vres, err := s.GetInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("interfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityGroups computer autogenerated
func (s *mqlAzureNetwork) ComputeSecurityGroups() error {
	var err error
	if _, ok := s.Cache.Load("securityGroups"); ok {
		return nil
	}
	vres, err := s.GetSecurityGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWatchers computer autogenerated
func (s *mqlAzureNetwork) ComputeWatchers() error {
	var err error
	if _, ok := s.Cache.Load("watchers"); ok {
		return nil
	}
	vres, err := s.GetWatchers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("watchers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureNetworkInterface resource interface
type AzureNetworkInterface interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Vm() (AzureComputeVm, error)
}

// mqlAzureNetworkInterface for the azure.network.interface resource
type mqlAzureNetworkInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureNetworkInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.network.interface resource
func newAzureNetworkInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureNetworkInterface{runtime.NewResource("azure.network.interface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vm":
			if _, ok := val.(AzureComputeVm); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"vm\" argument has the wrong type (expected type \"AzureComputeVm\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.network.interface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.network.interface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureNetworkInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.network.interface\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureNetworkInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.interface].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.interface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureNetworkInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.network.interface].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "vm":
		return s.Vm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.network.interface\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureNetworkInterface) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.interface\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.interface\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureNetworkInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.interface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.interface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureNetworkInterface) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.interface\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.interface\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureNetworkInterface) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.interface\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.interface\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureNetworkInterface) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.interface\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.interface\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureNetworkInterface) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.interface\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.interface\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureNetworkInterface) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.interface\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.interface\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Vm accessor autogenerated
func (s *mqlAzureNetworkInterface) Vm() (AzureComputeVm, error) {
	res, ok := s.Cache.Load("vm")
	if !ok || !res.Valid {
		if err := s.ComputeVm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vm")
		if !ok {
			return nil, errors.New("\"azure.network.interface\" calculated \"vm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureComputeVm)
	if !ok {
		return nil, fmt.Errorf("\"azure.network.interface\" failed to cast field \"vm\" to the right type (AzureComputeVm): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureNetworkInterface) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.interface].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return s.ComputeVm()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.interface\" resource")
	}
}

// ComputeVm computer autogenerated
func (s *mqlAzureNetworkInterface) ComputeVm() error {
	var err error
	if _, ok := s.Cache.Load("vm"); ok {
		return nil
	}
	vres, err := s.GetVm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureNetworkSecuritygroup resource interface
type AzureNetworkSecuritygroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Interfaces() ([]interface{}, error)
	SecurityRules() ([]interface{}, error)
	DefaultSecurityRules() ([]interface{}, error)
}

// mqlAzureNetworkSecuritygroup for the azure.network.securitygroup resource
type mqlAzureNetworkSecuritygroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureNetworkSecuritygroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.network.securitygroup resource
func newAzureNetworkSecuritygroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureNetworkSecuritygroup{runtime.NewResource("azure.network.securitygroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"securityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"defaultSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securitygroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.network.securitygroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureNetworkSecuritygroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaces"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"interfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityRules"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"securityRules\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecurityRules"); !ok {
		return errors.New("Initialized \"azure.network.securitygroup\" resource without a \"defaultSecurityRules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.securitygroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.securitygroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.network.securitygroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "interfaces":
		return s.Interfaces()
	case "securityRules":
		return s.SecurityRules()
	case "defaultSecurityRules":
		return s.DefaultSecurityRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.network.securitygroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"interfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityRules accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) SecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"securityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"securityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultSecurityRules accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) DefaultSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("defaultSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securitygroup\" failed: no value provided for static field \"defaultSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securitygroup\" failed to cast field \"defaultSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureNetworkSecuritygroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.securitygroup].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.securitygroup\" resource")
	}
}

// AzureNetworkSecurityrule resource interface
type AzureNetworkSecurityrule interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	DestinationPortRange() ([]interface{}, error)
}

// mqlAzureNetworkSecurityrule for the azure.network.securityrule resource
type mqlAzureNetworkSecurityrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureNetworkSecurityrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.network.securityrule resource
func newAzureNetworkSecurityrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureNetworkSecurityrule{runtime.NewResource("azure.network.securityrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "destinationPortRange":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"destinationPortRange\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.network.securityrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.network.securityrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureNetworkSecurityrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.network.securityrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.network.securityrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.network.securityrule\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.network.securityrule\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationPortRange"); !ok {
		return errors.New("Initialized \"azure.network.securityrule\" resource without a \"destinationPortRange\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.securityrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.securityrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.network.securityrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "destinationPortRange":
		return s.DestinationPortRange()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.network.securityrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securityrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securityrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securityrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securityrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.securityrule\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.securityrule\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securityrule\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securityrule\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationPortRange accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) DestinationPortRange() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationPortRange")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.securityrule\" failed: no value provided for static field \"destinationPortRange\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.securityrule\" failed to cast field \"destinationPortRange\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureNetworkSecurityrule) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.securityrule].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.securityrule\" resource")
	}
}

// AzureNetworkWatcher resource interface
type AzureNetworkWatcher interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureNetworkWatcher for the azure.network.watcher resource
type mqlAzureNetworkWatcher struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureNetworkWatcher) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.network.watcher resource
func newAzureNetworkWatcher(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureNetworkWatcher{runtime.NewResource("azure.network.watcher")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.network.watcher\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.network.watcher with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureNetworkWatcher) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.network.watcher\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureNetworkWatcher) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.watcher].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.watcher\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureNetworkWatcher) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.network.watcher].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.network.watcher\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureNetworkWatcher) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.watcher\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.watcher\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureNetworkWatcher) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.watcher\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.watcher\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureNetworkWatcher) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.watcher\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.watcher\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureNetworkWatcher) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.watcher\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.watcher\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureNetworkWatcher) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.watcher\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.watcher\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureNetworkWatcher) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.network.watcher\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.network.watcher\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureNetworkWatcher) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.network.watcher\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.network.watcher\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureNetworkWatcher) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.network.watcher].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.network.watcher\" resource")
	}
}

// AzureStorage resource interface
type AzureStorage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Accounts() ([]interface{}, error)
}

// mqlAzureStorage for the azure.storage resource
type mqlAzureStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage resource
func newAzureStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorage{runtime.NewResource("azure.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "accounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage\", its \"accounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage].Register")
	switch name {
	case "accounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage].Field")
	switch name {
	case "accounts":
		return s.Accounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage\" resource")
	}
}

// Accounts accessor autogenerated
func (s *mqlAzureStorage) Accounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("accounts")
	if !ok || !res.Valid {
		if err := s.ComputeAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accounts")
		if !ok {
			return nil, errors.New("\"azure.storage\" calculated \"accounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage\" failed to cast field \"accounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage].Compute")
	switch name {
	case "accounts":
		return s.ComputeAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage\" resource")
	}
}

// ComputeAccounts computer autogenerated
func (s *mqlAzureStorage) ComputeAccounts() error {
	var err error
	if _, ok := s.Cache.Load("accounts"); ok {
		return nil
	}
	vres, err := s.GetAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureStorageAccount resource interface
type AzureStorageAccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Sku() (interface{}, error)
	Kind() (string, error)
	Containers() ([]interface{}, error)
	QueueProperties() (AzureStorageAccountQueueServiceProperties, error)
	TableProperties() (AzureStorageAccountTableServiceProperties, error)
	BlobProperties() (AzureStorageAccountBlobServiceProperties, error)
	DataProtection() (AzureStorageAccountDataProtection, error)
}

// mqlAzureStorageAccount for the azure.storage.account resource
type mqlAzureStorageAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account resource
func newAzureStorageAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccount{runtime.NewResource("azure.storage.account")}
	var existing AzureStorageAccount
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "queueProperties":
			if _, ok := val.(AzureStorageAccountQueueServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"queueProperties\" argument has the wrong type (expected type \"AzureStorageAccountQueueServiceProperties\")")
			}
		case "tableProperties":
			if _, ok := val.(AzureStorageAccountTableServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"tableProperties\" argument has the wrong type (expected type \"AzureStorageAccountTableServiceProperties\")")
			}
		case "blobProperties":
			if _, ok := val.(AzureStorageAccountBlobServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"blobProperties\" argument has the wrong type (expected type \"AzureStorageAccountBlobServiceProperties\")")
			}
		case "dataProtection":
			if _, ok := val.(AzureStorageAccountDataProtection); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"dataProtection\" argument has the wrong type (expected type \"AzureStorageAccountDataProtection\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.storage.account\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return nil
	case "queueProperties":
		return nil
	case "tableProperties":
		return nil
	case "blobProperties":
		return nil
	case "dataProtection":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "sku":
		return s.Sku()
	case "kind":
		return s.Kind()
	case "containers":
		return s.Containers()
	case "queueProperties":
		return s.QueueProperties()
	case "tableProperties":
		return s.TableProperties()
	case "blobProperties":
		return s.BlobProperties()
	case "dataProtection":
		return s.DataProtection()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureStorageAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureStorageAccount) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureStorageAccount) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureStorageAccount) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureStorageAccount) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureStorageAccount) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureStorageAccount) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureStorageAccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAzureStorageAccount) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"azure.storage.account\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// QueueProperties accessor autogenerated
func (s *mqlAzureStorageAccount) QueueProperties() (AzureStorageAccountQueueServiceProperties, error) {
	res, ok := s.Cache.Load("queueProperties")
	if !ok || !res.Valid {
		if err := s.ComputeQueueProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("queueProperties")
		if !ok {
			return nil, errors.New("\"azure.storage.account\" calculated \"queueProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "queueProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountQueueServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"queueProperties\" to the right type (AzureStorageAccountQueueServiceProperties): %#v", res)
	}
	return tres, nil
}

// TableProperties accessor autogenerated
func (s *mqlAzureStorageAccount) TableProperties() (AzureStorageAccountTableServiceProperties, error) {
	res, ok := s.Cache.Load("tableProperties")
	if !ok || !res.Valid {
		if err := s.ComputeTableProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tableProperties")
		if !ok {
			return nil, errors.New("\"azure.storage.account\" calculated \"tableProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tableProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountTableServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"tableProperties\" to the right type (AzureStorageAccountTableServiceProperties): %#v", res)
	}
	return tres, nil
}

// BlobProperties accessor autogenerated
func (s *mqlAzureStorageAccount) BlobProperties() (AzureStorageAccountBlobServiceProperties, error) {
	res, ok := s.Cache.Load("blobProperties")
	if !ok || !res.Valid {
		if err := s.ComputeBlobProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("blobProperties")
		if !ok {
			return nil, errors.New("\"azure.storage.account\" calculated \"blobProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "blobProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountBlobServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"blobProperties\" to the right type (AzureStorageAccountBlobServiceProperties): %#v", res)
	}
	return tres, nil
}

// DataProtection accessor autogenerated
func (s *mqlAzureStorageAccount) DataProtection() (AzureStorageAccountDataProtection, error) {
	res, ok := s.Cache.Load("dataProtection")
	if !ok || !res.Valid {
		if err := s.ComputeDataProtection(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataProtection")
		if !ok {
			return nil, errors.New("\"azure.storage.account\" calculated \"dataProtection\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataProtection")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountDataProtection)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account\" failed to cast field \"dataProtection\" to the right type (AzureStorageAccountDataProtection): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return s.ComputeContainers()
	case "queueProperties":
		return s.ComputeQueueProperties()
	case "tableProperties":
		return s.ComputeTableProperties()
	case "blobProperties":
		return s.ComputeBlobProperties()
	case "dataProtection":
		return s.ComputeDataProtection()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account\" resource")
	}
}

// ComputeContainers computer autogenerated
func (s *mqlAzureStorageAccount) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeQueueProperties computer autogenerated
func (s *mqlAzureStorageAccount) ComputeQueueProperties() error {
	var err error
	if _, ok := s.Cache.Load("queueProperties"); ok {
		return nil
	}
	vres, err := s.GetQueueProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("queueProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTableProperties computer autogenerated
func (s *mqlAzureStorageAccount) ComputeTableProperties() error {
	var err error
	if _, ok := s.Cache.Load("tableProperties"); ok {
		return nil
	}
	vres, err := s.GetTableProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tableProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBlobProperties computer autogenerated
func (s *mqlAzureStorageAccount) ComputeBlobProperties() error {
	var err error
	if _, ok := s.Cache.Load("blobProperties"); ok {
		return nil
	}
	vres, err := s.GetBlobProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("blobProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataProtection computer autogenerated
func (s *mqlAzureStorageAccount) ComputeDataProtection() error {
	var err error
	if _, ok := s.Cache.Load("dataProtection"); ok {
		return nil
	}
	vres, err := s.GetDataProtection()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataProtection", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureStorageAccountDataProtection resource interface
type AzureStorageAccountDataProtection interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	StorageAccountId() (string, error)
	BlobSoftDeletionEnabled() (bool, error)
	BlobRetentionDays() (int64, error)
	ContainerSoftDeletionEnabled() (bool, error)
	ContainerRetentionDays() (int64, error)
}

// mqlAzureStorageAccountDataProtection for the azure.storage.account.dataProtection resource
type mqlAzureStorageAccountDataProtection struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountDataProtection) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.dataProtection resource
func newAzureStorageAccountDataProtection(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountDataProtection{runtime.NewResource("azure.storage.account.dataProtection")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "storageAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"storageAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "blobSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"blobSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "blobRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"blobRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "containerSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"containerSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "containerRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"containerRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.dataProtection\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.dataProtection with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountDataProtection) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("storageAccountId"); !ok {
		return errors.New("Initialized \"azure.storage.account.dataProtection\" resource without a \"storageAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.storage.account.dataProtection\" resource without a \"blobSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobRetentionDays"); !ok {
		return errors.New("Initialized \"azure.storage.account.dataProtection\" resource without a \"blobRetentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.storage.account.dataProtection\" resource without a \"containerSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerRetentionDays"); !ok {
		return errors.New("Initialized \"azure.storage.account.dataProtection\" resource without a \"containerRetentionDays\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.dataProtection].Register")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.dataProtection\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.dataProtection].Field")
	switch name {
	case "storageAccountId":
		return s.StorageAccountId()
	case "blobSoftDeletionEnabled":
		return s.BlobSoftDeletionEnabled()
	case "blobRetentionDays":
		return s.BlobRetentionDays()
	case "containerSoftDeletionEnabled":
		return s.ContainerSoftDeletionEnabled()
	case "containerRetentionDays":
		return s.ContainerRetentionDays()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.dataProtection\" resource")
	}
}

// StorageAccountId accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) StorageAccountId() (string, error) {
	res, ok := s.Cache.Load("storageAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.dataProtection\" failed: no value provided for static field \"storageAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.dataProtection\" failed to cast field \"storageAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BlobSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) BlobSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("blobSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.dataProtection\" failed: no value provided for static field \"blobSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.dataProtection\" failed to cast field \"blobSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// BlobRetentionDays accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) BlobRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("blobRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.storage.account.dataProtection\" failed: no value provided for static field \"blobRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.storage.account.dataProtection\" failed to cast field \"blobRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ContainerSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) ContainerSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("containerSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.dataProtection\" failed: no value provided for static field \"containerSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.dataProtection\" failed to cast field \"containerSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ContainerRetentionDays accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) ContainerRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("containerRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.storage.account.dataProtection\" failed: no value provided for static field \"containerRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.storage.account.dataProtection\" failed to cast field \"containerRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountDataProtection) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.dataProtection].Compute")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.dataProtection\" resource")
	}
}

// AzureStorageAccountBlobServiceProperties resource interface
type AzureStorageAccountBlobServiceProperties interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureStorageAccountServicePropertiesLogging, error)
}

// mqlAzureStorageAccountBlobServiceProperties for the azure.storage.account.blobService.properties resource
type mqlAzureStorageAccountBlobServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountBlobServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.blobService.properties resource
func newAzureStorageAccountBlobServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountBlobServiceProperties{runtime.NewResource("azure.storage.account.blobService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.blobService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.blobService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.blobService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.blobService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.blobService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.blobService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountBlobServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.blobService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.blobService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.blobService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.storage.account.blobService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.blobService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.blobService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.blobService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.blobService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.blobService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.blobService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.blobService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.blobService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.blobService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.blobService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) Logging() (AzureStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.blobService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.blobService.properties\" failed to cast field \"logging\" to the right type (AzureStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountBlobServiceProperties) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.blobService.properties].Compute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.blobService.properties\" resource")
	}
}

// AzureStorageAccountQueueServiceProperties resource interface
type AzureStorageAccountQueueServiceProperties interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureStorageAccountServicePropertiesLogging, error)
}

// mqlAzureStorageAccountQueueServiceProperties for the azure.storage.account.queueService.properties resource
type mqlAzureStorageAccountQueueServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountQueueServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.queueService.properties resource
func newAzureStorageAccountQueueServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountQueueServiceProperties{runtime.NewResource("azure.storage.account.queueService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.queueService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.queueService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.queueService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.queueService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.queueService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.queueService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountQueueServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.queueService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.queueService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.queueService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.storage.account.queueService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.queueService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.queueService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.queueService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.queueService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.queueService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.queueService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.queueService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.queueService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.queueService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.queueService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) Logging() (AzureStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.queueService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.queueService.properties\" failed to cast field \"logging\" to the right type (AzureStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountQueueServiceProperties) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.queueService.properties].Compute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.queueService.properties\" resource")
	}
}

// AzureStorageAccountTableServiceProperties resource interface
type AzureStorageAccountTableServiceProperties interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureStorageAccountServicePropertiesLogging, error)
}

// mqlAzureStorageAccountTableServiceProperties for the azure.storage.account.tableService.properties resource
type mqlAzureStorageAccountTableServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountTableServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.tableService.properties resource
func newAzureStorageAccountTableServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountTableServiceProperties{runtime.NewResource("azure.storage.account.tableService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.tableService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.tableService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.tableService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.tableService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.tableService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.tableService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountTableServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.tableService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.tableService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.storage.account.tableService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.storage.account.tableService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.tableService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.tableService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.tableService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.tableService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.tableService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.tableService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) HourMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.tableService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.tableService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) MinuteMetrics() (AzureStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.tableService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.tableService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) Logging() (AzureStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.tableService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.tableService.properties\" failed to cast field \"logging\" to the right type (AzureStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountTableServiceProperties) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.tableService.properties].Compute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.tableService.properties\" resource")
	}
}

// AzureStorageAccountServicePropertiesMetrics resource interface
type AzureStorageAccountServicePropertiesMetrics interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	IncludeAPIs() (bool, error)
	RetentionPolicy() (AzureStorageAccountServicePropertiesRetentionPolicy, error)
	Enabled() (bool, error)
	Version() (string, error)
}

// mqlAzureStorageAccountServicePropertiesMetrics for the azure.storage.account.service.properties.metrics resource
type mqlAzureStorageAccountServicePropertiesMetrics struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountServicePropertiesMetrics) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.service.properties.metrics resource
func newAzureStorageAccountServicePropertiesMetrics(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountServicePropertiesMetrics{runtime.NewResource("azure.storage.account.service.properties.metrics")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "includeAPIs":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"includeAPIs\" argument has the wrong type (expected type \"bool\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureStorageAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesRetentionPolicy\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.metrics\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.service.properties.metrics with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountServicePropertiesMetrics) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.metrics\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("includeAPIs"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.metrics\" resource without a \"includeAPIs\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.metrics\" resource without a \"retentionPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.metrics\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.metrics\" resource without a \"version\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.metrics].Register")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.metrics\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.metrics].Field")
	switch name {
	case "id":
		return s.Id()
	case "includeAPIs":
		return s.IncludeAPIs()
	case "retentionPolicy":
		return s.RetentionPolicy()
	case "enabled":
		return s.Enabled()
	case "version":
		return s.Version()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.metrics\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.service.properties.metrics\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.service.properties.metrics\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IncludeAPIs accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) IncludeAPIs() (bool, error) {
	res, ok := s.Cache.Load("includeAPIs")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.metrics\" failed: no value provided for static field \"includeAPIs\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.metrics\" failed to cast field \"includeAPIs\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) RetentionPolicy() (AzureStorageAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.service.properties.metrics\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.service.properties.metrics\" failed to cast field \"retentionPolicy\" to the right type (AzureStorageAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.metrics\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.metrics\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.service.properties.metrics\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.service.properties.metrics\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesMetrics) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.metrics].Compute")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.metrics\" resource")
	}
}

// AzureStorageAccountServicePropertiesRetentionPolicy resource interface
type AzureStorageAccountServicePropertiesRetentionPolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	RetentionDays() (int64, error)
	Enabled() (bool, error)
}

// mqlAzureStorageAccountServicePropertiesRetentionPolicy for the azure.storage.account.service.properties.retentionPolicy resource
type mqlAzureStorageAccountServicePropertiesRetentionPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.service.properties.retentionPolicy resource
func newAzureStorageAccountServicePropertiesRetentionPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountServicePropertiesRetentionPolicy{runtime.NewResource("azure.storage.account.service.properties.retentionPolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.retentionPolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.retentionPolicy\", its \"retentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.retentionPolicy\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.retentionPolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.service.properties.retentionPolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.retentionPolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDays"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.retentionPolicy\" resource without a \"retentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.retentionPolicy\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.retentionPolicy].Register")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.retentionPolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "retentionDays":
		return s.RetentionDays()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.service.properties.retentionPolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionDays accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) RetentionDays() (int64, error) {
	res, ok := s.Cache.Load("retentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"retentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.storage.account.service.properties.retentionPolicy\" failed to cast field \"retentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.retentionPolicy\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesRetentionPolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.retentionPolicy].Compute")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// AzureStorageAccountServicePropertiesLogging resource interface
type AzureStorageAccountServicePropertiesLogging interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Delete() (bool, error)
	Read() (bool, error)
	Write() (bool, error)
	Version() (string, error)
	RetentionPolicy() (AzureStorageAccountServicePropertiesRetentionPolicy, error)
}

// mqlAzureStorageAccountServicePropertiesLogging for the azure.storage.account.service.properties.logging resource
type mqlAzureStorageAccountServicePropertiesLogging struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageAccountServicePropertiesLogging) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.account.service.properties.logging resource
func newAzureStorageAccountServicePropertiesLogging(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageAccountServicePropertiesLogging{runtime.NewResource("azure.storage.account.service.properties.logging")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "delete":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"delete\" argument has the wrong type (expected type \"bool\")")
			}
		case "read":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"read\" argument has the wrong type (expected type \"bool\")")
			}
		case "write":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"write\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureStorageAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureStorageAccountServicePropertiesRetentionPolicy\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.account.service.properties.logging\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.account.service.properties.logging with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageAccountServicePropertiesLogging) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("delete"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"delete\". This field is required.")
	}
	if _, ok := s.Cache.Load("read"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"read\". This field is required.")
	}
	if _, ok := s.Cache.Load("write"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"write\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.storage.account.service.properties.logging\" resource without a \"retentionPolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.logging].Register")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.logging\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.logging].Field")
	switch name {
	case "id":
		return s.Id()
	case "delete":
		return s.Delete()
	case "read":
		return s.Read()
	case "write":
		return s.Write()
	case "version":
		return s.Version()
	case "retentionPolicy":
		return s.RetentionPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.logging\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Delete accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Delete() (bool, error) {
	res, ok := s.Cache.Load("delete")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"delete\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"delete\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Read accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Read() (bool, error) {
	res, ok := s.Cache.Load("read")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"read\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"read\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Write accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Write() (bool, error) {
	res, ok := s.Cache.Load("write")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"write\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"write\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) RetentionPolicy() (AzureStorageAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.account.service.properties.logging\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.account.service.properties.logging\" failed to cast field \"retentionPolicy\" to the right type (AzureStorageAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageAccountServicePropertiesLogging) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.account.service.properties.logging].Compute")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.account.service.properties.logging\" resource")
	}
}

// AzureStorageContainer resource interface
type AzureStorageContainer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureStorageContainer for the azure.storage.container resource
type mqlAzureStorageContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureStorageContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.storage.container resource
func newAzureStorageContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureStorageContainer{runtime.NewResource("azure.storage.container")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.storage.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.storage.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureStorageContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.storage.container\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.storage.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.storage.container\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.storage.container\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.storage.container\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureStorageContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.container].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureStorageContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.storage.container].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.storage.container\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureStorageContainer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.container\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.container\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureStorageContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureStorageContainer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.container\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.container\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureStorageContainer) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.storage.container\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.storage.container\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureStorageContainer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.storage.container\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.storage.container\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureStorageContainer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.storage.container].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.storage.container\" resource")
	}
}

// AzureWeb resource interface
type AzureWeb interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Apps() ([]interface{}, error)
	AvailableRuntimes() ([]interface{}, error)
}

// mqlAzureWeb for the azure.web resource
type mqlAzureWeb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureWeb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.web resource
func newAzureWeb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureWeb{runtime.NewResource("azure.web")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "apps":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web\", its \"apps\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "availableRuntimes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web\", its \"availableRuntimes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.web\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.web with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureWeb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureWeb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web].Register")
	switch name {
	case "apps":
		return nil
	case "availableRuntimes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureWeb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.web].Field")
	switch name {
	case "apps":
		return s.Apps()
	case "availableRuntimes":
		return s.AvailableRuntimes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.web\" resource")
	}
}

// Apps accessor autogenerated
func (s *mqlAzureWeb) Apps() ([]interface{}, error) {
	res, ok := s.Cache.Load("apps")
	if !ok || !res.Valid {
		if err := s.ComputeApps(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apps")
		if !ok {
			return nil, errors.New("\"azure.web\" calculated \"apps\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apps")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web\" failed to cast field \"apps\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AvailableRuntimes accessor autogenerated
func (s *mqlAzureWeb) AvailableRuntimes() ([]interface{}, error) {
	res, ok := s.Cache.Load("availableRuntimes")
	if !ok || !res.Valid {
		if err := s.ComputeAvailableRuntimes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("availableRuntimes")
		if !ok {
			return nil, errors.New("\"azure.web\" calculated \"availableRuntimes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "availableRuntimes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web\" failed to cast field \"availableRuntimes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureWeb) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web].Compute")
	switch name {
	case "apps":
		return s.ComputeApps()
	case "availableRuntimes":
		return s.ComputeAvailableRuntimes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web\" resource")
	}
}

// ComputeApps computer autogenerated
func (s *mqlAzureWeb) ComputeApps() error {
	var err error
	if _, ok := s.Cache.Load("apps"); ok {
		return nil
	}
	vres, err := s.GetApps()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apps", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAvailableRuntimes computer autogenerated
func (s *mqlAzureWeb) ComputeAvailableRuntimes() error {
	var err error
	if _, ok := s.Cache.Load("availableRuntimes"); ok {
		return nil
	}
	vres, err := s.GetAvailableRuntimes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("availableRuntimes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureWebAppsite resource interface
type AzureWebAppsite interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Configuration() (AzureWebAppsiteconfig, error)
	AuthenticationSettings() (AzureWebAppsiteauthsettings, error)
	Metadata() (interface{}, error)
	ApplicationSettings() (interface{}, error)
	ConnectionSettings() (interface{}, error)
	Stack() (interface{}, error)
}

// mqlAzureWebAppsite for the azure.web.appsite resource
type mqlAzureWebAppsite struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureWebAppsite) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.web.appsite resource
func newAzureWebAppsite(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureWebAppsite{runtime.NewResource("azure.web.appsite")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.(AzureWebAppsiteconfig); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"configuration\" argument has the wrong type (expected type \"AzureWebAppsiteconfig\")")
			}
		case "authenticationSettings":
			if _, ok := val.(AzureWebAppsiteauthsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"authenticationSettings\" argument has the wrong type (expected type \"AzureWebAppsiteauthsettings\")")
			}
		case "metadata":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"metadata\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "applicationSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"applicationSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"connectionSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stack":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"stack\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsite\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.web.appsite with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureWebAppsite) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.web.appsite\" resource without a \"identity\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureWebAppsite) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsite].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return nil
	case "authenticationSettings":
		return nil
	case "metadata":
		return nil
	case "applicationSettings":
		return nil
	case "connectionSettings":
		return nil
	case "stack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsite\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureWebAppsite) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.web.appsite].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "configuration":
		return s.Configuration()
	case "authenticationSettings":
		return s.AuthenticationSettings()
	case "metadata":
		return s.Metadata()
	case "applicationSettings":
		return s.ApplicationSettings()
	case "connectionSettings":
		return s.ConnectionSettings()
	case "stack":
		return s.Stack()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.web.appsite\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureWebAppsite) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsite\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsite\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureWebAppsite) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsite\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsite\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureWebAppsite) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsite\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsite\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureWebAppsite) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsite\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsite\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureWebAppsite) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsite\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsite\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureWebAppsite) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.web.appsite\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureWebAppsite) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.web.appsite\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureWebAppsite) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.web.appsite\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureWebAppsite) Configuration() (AzureWebAppsiteconfig, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureWebAppsiteconfig)
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"configuration\" to the right type (AzureWebAppsiteconfig): %#v", res)
	}
	return tres, nil
}

// AuthenticationSettings accessor autogenerated
func (s *mqlAzureWebAppsite) AuthenticationSettings() (AzureWebAppsiteauthsettings, error) {
	res, ok := s.Cache.Load("authenticationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAuthenticationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authenticationSettings")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"authenticationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authenticationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureWebAppsiteauthsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"authenticationSettings\" to the right type (AzureWebAppsiteauthsettings): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlAzureWebAppsite) Metadata() (interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"metadata\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ApplicationSettings accessor autogenerated
func (s *mqlAzureWebAppsite) ApplicationSettings() (interface{}, error) {
	res, ok := s.Cache.Load("applicationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeApplicationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applicationSettings")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"applicationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applicationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"applicationSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionSettings accessor autogenerated
func (s *mqlAzureWebAppsite) ConnectionSettings() (interface{}, error) {
	res, ok := s.Cache.Load("connectionSettings")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionSettings")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"connectionSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"connectionSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Stack accessor autogenerated
func (s *mqlAzureWebAppsite) Stack() (interface{}, error) {
	res, ok := s.Cache.Load("stack")
	if !ok || !res.Valid {
		if err := s.ComputeStack(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("stack")
		if !ok {
			return nil, errors.New("\"azure.web.appsite\" calculated \"stack\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "stack")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsite\" failed to cast field \"stack\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureWebAppsite) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsite].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "authenticationSettings":
		return s.ComputeAuthenticationSettings()
	case "metadata":
		return s.ComputeMetadata()
	case "applicationSettings":
		return s.ComputeApplicationSettings()
	case "connectionSettings":
		return s.ComputeConnectionSettings()
	case "stack":
		return s.ComputeStack()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsite\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureWebAppsite) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthenticationSettings computer autogenerated
func (s *mqlAzureWebAppsite) ComputeAuthenticationSettings() error {
	var err error
	if _, ok := s.Cache.Load("authenticationSettings"); ok {
		return nil
	}
	vres, err := s.GetAuthenticationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authenticationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetadata computer autogenerated
func (s *mqlAzureWebAppsite) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplicationSettings computer autogenerated
func (s *mqlAzureWebAppsite) ComputeApplicationSettings() error {
	var err error
	if _, ok := s.Cache.Load("applicationSettings"); ok {
		return nil
	}
	vres, err := s.GetApplicationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applicationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionSettings computer autogenerated
func (s *mqlAzureWebAppsite) ComputeConnectionSettings() error {
	var err error
	if _, ok := s.Cache.Load("connectionSettings"); ok {
		return nil
	}
	vres, err := s.GetConnectionSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStack computer autogenerated
func (s *mqlAzureWebAppsite) ComputeStack() error {
	var err error
	if _, ok := s.Cache.Load("stack"); ok {
		return nil
	}
	vres, err := s.GetStack()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("stack", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureWebAppsiteauthsettings resource interface
type AzureWebAppsiteauthsettings interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureWebAppsiteauthsettings for the azure.web.appsiteauthsettings resource
type mqlAzureWebAppsiteauthsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureWebAppsiteauthsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.web.appsiteauthsettings resource
func newAzureWebAppsiteauthsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureWebAppsiteauthsettings{runtime.NewResource("azure.web.appsiteauthsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteauthsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.web.appsiteauthsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureWebAppsiteauthsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.web.appsiteauthsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.web.appsiteauthsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.web.appsiteauthsettings\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.web.appsiteauthsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.web.appsiteauthsettings\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteauthsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsiteauthsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteauthsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.web.appsiteauthsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteauthsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteauthsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteauthsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteauthsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteauthsettings\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteauthsettings\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteauthsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteauthsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.web.appsiteauthsettings\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsiteauthsettings\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureWebAppsiteauthsettings) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteauthsettings].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsiteauthsettings\" resource")
	}
}

// AzureWebAppsiteconfig resource interface
type AzureWebAppsiteconfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureWebAppsiteconfig for the azure.web.appsiteconfig resource
type mqlAzureWebAppsiteconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureWebAppsiteconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.web.appsiteconfig resource
func newAzureWebAppsiteconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureWebAppsiteconfig{runtime.NewResource("azure.web.appsiteconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.web.appsiteconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.web.appsiteconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureWebAppsiteconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.web.appsiteconfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.web.appsiteconfig\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.web.appsiteconfig\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.web.appsiteconfig\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.web.appsiteconfig\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteconfig].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsiteconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteconfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.web.appsiteconfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteconfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteconfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteconfig\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteconfig\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteconfig\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteconfig\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.web.appsiteconfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.web.appsiteconfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.web.appsiteconfig\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.web.appsiteconfig\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureWebAppsiteconfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.web.appsiteconfig].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.web.appsiteconfig\" resource")
	}
}

// AzureSql resource interface
type AzureSql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzureSql for the azure.sql resource
type mqlAzureSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql resource
func newAzureSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSql{runtime.NewResource("azure.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureSql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.sql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSqlServer resource interface
type AzureSqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
	AzureAdAdministrators() ([]interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	SecurityAlertPolicy() (interface{}, error)
	EncryptionProtector() (interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	VulnerabilityAssessmentSettings() (AzureSqlServerVulnerabilityassessmentsettings, error)
}

// mqlAzureSqlServer for the azure.sql.server resource
type mqlAzureSqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.server resource
func newAzureSqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlServer{runtime.NewResource("azure.sql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "azureAdAdministrators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"azureAdAdministrators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityAlertPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"securityAlertPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "encryptionProtector":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"encryptionProtector\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vulnerabilityAssessmentSettings":
			if _, ok := val.(AzureSqlServerVulnerabilityassessmentsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"vulnerabilityAssessmentSettings\" argument has the wrong type (expected type \"AzureSqlServerVulnerabilityassessmentsettings\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.sql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	case "azureAdAdministrators":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "securityAlertPolicy":
		return nil
	case "encryptionProtector":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "vulnerabilityAssessmentSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	case "azureAdAdministrators":
		return s.AzureAdAdministrators()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "securityAlertPolicy":
		return s.SecurityAlertPolicy()
	case "encryptionProtector":
		return s.EncryptionProtector()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.VulnerabilityAssessmentSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AzureAdAdministrators accessor autogenerated
func (s *mqlAzureSqlServer) AzureAdAdministrators() ([]interface{}, error) {
	res, ok := s.Cache.Load("azureAdAdministrators")
	if !ok || !res.Valid {
		if err := s.ComputeAzureAdAdministrators(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("azureAdAdministrators")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"azureAdAdministrators\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "azureAdAdministrators")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"azureAdAdministrators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSqlServer) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSqlServer) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityAlertPolicy accessor autogenerated
func (s *mqlAzureSqlServer) SecurityAlertPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("securityAlertPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityAlertPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityAlertPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"securityAlertPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityAlertPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"securityAlertPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptionProtector accessor autogenerated
func (s *mqlAzureSqlServer) EncryptionProtector() (interface{}, error) {
	res, ok := s.Cache.Load("encryptionProtector")
	if !ok || !res.Valid {
		if err := s.ComputeEncryptionProtector(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("encryptionProtector")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"encryptionProtector\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "encryptionProtector")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"encryptionProtector\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSqlServer) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VulnerabilityAssessmentSettings accessor autogenerated
func (s *mqlAzureSqlServer) VulnerabilityAssessmentSettings() (AzureSqlServerVulnerabilityassessmentsettings, error) {
	res, ok := s.Cache.Load("vulnerabilityAssessmentSettings")
	if !ok || !res.Valid {
		if err := s.ComputeVulnerabilityAssessmentSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vulnerabilityAssessmentSettings")
		if !ok {
			return nil, errors.New("\"azure.sql.server\" calculated \"vulnerabilityAssessmentSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vulnerabilityAssessmentSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSqlServerVulnerabilityassessmentsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server\" failed to cast field \"vulnerabilityAssessmentSettings\" to the right type (AzureSqlServerVulnerabilityassessmentsettings): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	case "azureAdAdministrators":
		return s.ComputeAzureAdAdministrators()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "securityAlertPolicy":
		return s.ComputeSecurityAlertPolicy()
	case "encryptionProtector":
		return s.ComputeEncryptionProtector()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.ComputeVulnerabilityAssessmentSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server\" resource")
	}
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAzureAdAdministrators computer autogenerated
func (s *mqlAzureSqlServer) ComputeAzureAdAdministrators() error {
	var err error
	if _, ok := s.Cache.Load("azureAdAdministrators"); ok {
		return nil
	}
	vres, err := s.GetAzureAdAdministrators()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("azureAdAdministrators", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSqlServer) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSqlServer) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityAlertPolicy computer autogenerated
func (s *mqlAzureSqlServer) ComputeSecurityAlertPolicy() error {
	var err error
	if _, ok := s.Cache.Load("securityAlertPolicy"); ok {
		return nil
	}
	vres, err := s.GetSecurityAlertPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityAlertPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEncryptionProtector computer autogenerated
func (s *mqlAzureSqlServer) ComputeEncryptionProtector() error {
	var err error
	if _, ok := s.Cache.Load("encryptionProtector"); ok {
		return nil
	}
	vres, err := s.GetEncryptionProtector()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("encryptionProtector", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSqlServer) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVulnerabilityAssessmentSettings computer autogenerated
func (s *mqlAzureSqlServer) ComputeVulnerabilityAssessmentSettings() error {
	var err error
	if _, ok := s.Cache.Load("vulnerabilityAssessmentSettings"); ok {
		return nil
	}
	vres, err := s.GetVulnerabilityAssessmentSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vulnerabilityAssessmentSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSqlServerVulnerabilityassessmentsettings resource interface
type AzureSqlServerVulnerabilityassessmentsettings interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StorageContainerPath() (string, error)
	StorageAccountAccessKey() (string, error)
	StorageContainerSasKey() (string, error)
	RecurringScanEnabled() (bool, error)
	RecurringScanEmails() ([]interface{}, error)
	MailSubscriptionAdmins() (bool, error)
}

// mqlAzureSqlServerVulnerabilityassessmentsettings for the azure.sql.server.vulnerabilityassessmentsettings resource
type mqlAzureSqlServerVulnerabilityassessmentsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.server.vulnerabilityassessmentsettings resource
func newAzureSqlServerVulnerabilityassessmentsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlServerVulnerabilityassessmentsettings{runtime.NewResource("azure.sql.server.vulnerabilityassessmentsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"storageContainerPath\" argument has the wrong type (expected type \"string\")")
			}
		case "storageAccountAccessKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"storageAccountAccessKey\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerSasKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"storageContainerSasKey\" argument has the wrong type (expected type \"string\")")
			}
		case "recurringScanEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"recurringScanEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "recurringScanEmails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"recurringScanEmails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mailSubscriptionAdmins":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"mailSubscriptionAdmins\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.vulnerabilityassessmentsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.server.vulnerabilityassessmentsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerPath"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccountAccessKey"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageAccountAccessKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerSasKey"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerSasKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEnabled"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEmails"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEmails\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailSubscriptionAdmins"); !ok {
		return errors.New("Initialized \"azure.sql.server.vulnerabilityassessmentsettings\" resource without a \"mailSubscriptionAdmins\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server.vulnerabilityassessmentsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.server.vulnerabilityassessmentsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "storageContainerPath":
		return s.StorageContainerPath()
	case "storageAccountAccessKey":
		return s.StorageAccountAccessKey()
	case "storageContainerSasKey":
		return s.StorageContainerSasKey()
	case "recurringScanEnabled":
		return s.RecurringScanEnabled()
	case "recurringScanEmails":
		return s.RecurringScanEmails()
	case "mailSubscriptionAdmins":
		return s.MailSubscriptionAdmins()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerPath accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) StorageContainerPath() (string, error) {
	res, ok := s.Cache.Load("storageContainerPath")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageAccountAccessKey accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) StorageAccountAccessKey() (string, error) {
	res, ok := s.Cache.Load("storageAccountAccessKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageAccountAccessKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageAccountAccessKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerSasKey accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) StorageContainerSasKey() (string, error) {
	res, ok := s.Cache.Load("storageContainerSasKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerSasKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerSasKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecurringScanEnabled accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) RecurringScanEnabled() (bool, error) {
	res, ok := s.Cache.Load("recurringScanEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RecurringScanEmails accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) RecurringScanEmails() ([]interface{}, error) {
	res, ok := s.Cache.Load("recurringScanEmails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEmails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEmails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MailSubscriptionAdmins accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) MailSubscriptionAdmins() (bool, error) {
	res, ok := s.Cache.Load("mailSubscriptionAdmins")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"mailSubscriptionAdmins\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"mailSubscriptionAdmins\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlServerVulnerabilityassessmentsettings) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server.vulnerabilityassessmentsettings].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// AzureSqlServerAdministrator resource interface
type AzureSqlServerAdministrator interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	AdministratorType() (string, error)
	Login() (string, error)
	Sid() (string, error)
	TenantId() (string, error)
}

// mqlAzureSqlServerAdministrator for the azure.sql.server.administrator resource
type mqlAzureSqlServerAdministrator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlServerAdministrator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.server.administrator resource
func newAzureSqlServerAdministrator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlServerAdministrator{runtime.NewResource("azure.sql.server.administrator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "administratorType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"administratorType\" argument has the wrong type (expected type \"string\")")
			}
		case "login":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"login\" argument has the wrong type (expected type \"string\")")
			}
		case "sid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"sid\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.server.administrator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.server.administrator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlServerAdministrator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("administratorType"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"administratorType\". This field is required.")
	}
	if _, ok := s.Cache.Load("login"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"login\". This field is required.")
	}
	if _, ok := s.Cache.Load("sid"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"sid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tenantId"); !ok {
		return errors.New("Initialized \"azure.sql.server.administrator\" resource without a \"tenantId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server.administrator].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server.administrator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.server.administrator].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "administratorType":
		return s.AdministratorType()
	case "login":
		return s.Login()
	case "sid":
		return s.Sid()
	case "tenantId":
		return s.TenantId()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.server.administrator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AdministratorType accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) AdministratorType() (string, error) {
	res, ok := s.Cache.Load("administratorType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"administratorType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"administratorType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Login accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Login() (string, error) {
	res, ok := s.Cache.Load("login")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"login\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"login\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sid accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Sid() (string, error) {
	res, ok := s.Cache.Load("sid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"sid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"sid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.server.administrator\" failed: no value provided for static field \"tenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.server.administrator\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlServerAdministrator) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.server.administrator].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.server.administrator\" resource")
	}
}

// AzureSqlDatabase resource interface
type AzureSqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Collation() (string, error)
	CreationDate() (*time.Time, error)
	ContainmentState() (int64, error)
	CurrentServiceObjectiveId() (string, error)
	DatabaseId() (string, error)
	EarliestRestoreDate() (*time.Time, error)
	CreateMode() (string, error)
	SourceDatabaseId() (string, error)
	SourceDatabaseDeletionDate() (*time.Time, error)
	RestorePointInTime() (*time.Time, error)
	RecoveryServicesRecoveryPointResourceId() (string, error)
	Edition() (string, error)
	MaxSizeBytes() (int64, error)
	RequestedServiceObjectiveId() (string, error)
	RequestedServiceObjectiveName() (string, error)
	ServiceLevelObjective() (string, error)
	Status() (string, error)
	ElasticPoolName() (string, error)
	DefaultSecondaryLocation() (string, error)
	ServiceTierAdvisors() (interface{}, error)
	RecommendedIndex() (interface{}, error)
	FailoverGroupId() (string, error)
	ReadScale() (string, error)
	SampleName() (string, error)
	ZoneRedundant() (bool, error)
	TransparentDataEncryption() (interface{}, error)
	Advisor() ([]interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	Usage() ([]interface{}, error)
}

// mqlAzureSqlDatabase for the azure.sql.database resource
type mqlAzureSqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.database resource
func newAzureSqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlDatabase{runtime.NewResource("azure.sql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "containmentState":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"containmentState\" argument has the wrong type (expected type \"int64\")")
			}
		case "currentServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"currentServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"databaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "earliestRestoreDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"earliestRestoreDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"createMode\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"sourceDatabaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseDeletionDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"sourceDatabaseDeletionDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "restorePointInTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"restorePointInTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryServicesRecoveryPointResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"recoveryServicesRecoveryPointResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "edition":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"edition\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"maxSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "requestedServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"requestedServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "requestedServiceObjectiveName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"requestedServiceObjectiveName\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceLevelObjective":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"serviceLevelObjective\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "elasticPoolName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"elasticPoolName\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultSecondaryLocation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"defaultSecondaryLocation\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceTierAdvisors":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"serviceTierAdvisors\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "recommendedIndex":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"recommendedIndex\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "failoverGroupId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"failoverGroupId\" argument has the wrong type (expected type \"string\")")
			}
		case "readScale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"readScale\" argument has the wrong type (expected type \"string\")")
			}
		case "sampleName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"sampleName\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneRedundant":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"zoneRedundant\" argument has the wrong type (expected type \"bool\")")
			}
		case "transparentDataEncryption":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"transparentDataEncryption\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "advisor":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"advisor\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "usage":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"usage\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseId"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"databaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("earliestRestoreDate"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"earliestRestoreDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("createMode"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"createMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseId"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"sourceDatabaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseDeletionDate"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"sourceDatabaseDeletionDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("restorePointInTime"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"restorePointInTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"recoveryServicesRecoveryPointResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("edition"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"edition\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSizeBytes"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"maxSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("requestedServiceObjectiveName"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"requestedServiceObjectiveName\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceLevelObjective"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"serviceLevelObjective\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("elasticPoolName"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"elasticPoolName\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecondaryLocation"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"defaultSecondaryLocation\". This field is required.")
	}
	if _, ok := s.Cache.Load("failoverGroupId"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"failoverGroupId\". This field is required.")
	}
	if _, ok := s.Cache.Load("readScale"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"readScale\". This field is required.")
	}
	if _, ok := s.Cache.Load("sampleName"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"sampleName\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneRedundant"); !ok {
		return errors.New("Initialized \"azure.sql.database\" resource without a \"zoneRedundant\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return nil
	case "currentServiceObjectiveId":
		return nil
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return nil
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return nil
	case "recommendedIndex":
		return nil
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return nil
	case "advisor":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "usage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "collation":
		return s.Collation()
	case "creationDate":
		return s.CreationDate()
	case "containmentState":
		return s.ContainmentState()
	case "currentServiceObjectiveId":
		return s.CurrentServiceObjectiveId()
	case "databaseId":
		return s.DatabaseId()
	case "earliestRestoreDate":
		return s.EarliestRestoreDate()
	case "createMode":
		return s.CreateMode()
	case "sourceDatabaseId":
		return s.SourceDatabaseId()
	case "sourceDatabaseDeletionDate":
		return s.SourceDatabaseDeletionDate()
	case "restorePointInTime":
		return s.RestorePointInTime()
	case "recoveryServicesRecoveryPointResourceId":
		return s.RecoveryServicesRecoveryPointResourceId()
	case "edition":
		return s.Edition()
	case "maxSizeBytes":
		return s.MaxSizeBytes()
	case "requestedServiceObjectiveId":
		return s.RequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return s.RequestedServiceObjectiveName()
	case "serviceLevelObjective":
		return s.ServiceLevelObjective()
	case "status":
		return s.Status()
	case "elasticPoolName":
		return s.ElasticPoolName()
	case "defaultSecondaryLocation":
		return s.DefaultSecondaryLocation()
	case "serviceTierAdvisors":
		return s.ServiceTierAdvisors()
	case "recommendedIndex":
		return s.RecommendedIndex()
	case "failoverGroupId":
		return s.FailoverGroupId()
	case "readScale":
		return s.ReadScale()
	case "sampleName":
		return s.SampleName()
	case "zoneRedundant":
		return s.ZoneRedundant()
	case "transparentDataEncryption":
		return s.TransparentDataEncryption()
	case "advisor":
		return s.Advisor()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "usage":
		return s.Usage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlAzureSqlDatabase) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.database\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ContainmentState accessor autogenerated
func (s *mqlAzureSqlDatabase) ContainmentState() (int64, error) {
	res, ok := s.Cache.Load("containmentState")
	if !ok || !res.Valid {
		if err := s.ComputeContainmentState(); err != nil {
			return 0, err
		}
		res, ok = s.Cache.Load("containmentState")
		if !ok {
			return 0, errors.New("\"azure.sql.database\" calculated \"containmentState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containmentState")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.sql.database\" failed to cast field \"containmentState\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CurrentServiceObjectiveId accessor autogenerated
func (s *mqlAzureSqlDatabase) CurrentServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("currentServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeCurrentServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("currentServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azure.sql.database\" calculated \"currentServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "currentServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"currentServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseId accessor autogenerated
func (s *mqlAzureSqlDatabase) DatabaseId() (string, error) {
	res, ok := s.Cache.Load("databaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"databaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"databaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EarliestRestoreDate accessor autogenerated
func (s *mqlAzureSqlDatabase) EarliestRestoreDate() (*time.Time, error) {
	res, ok := s.Cache.Load("earliestRestoreDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.database\" failed: no value provided for static field \"earliestRestoreDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"earliestRestoreDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreateMode accessor autogenerated
func (s *mqlAzureSqlDatabase) CreateMode() (string, error) {
	res, ok := s.Cache.Load("createMode")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"createMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"createMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseId accessor autogenerated
func (s *mqlAzureSqlDatabase) SourceDatabaseId() (string, error) {
	res, ok := s.Cache.Load("sourceDatabaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"sourceDatabaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"sourceDatabaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseDeletionDate accessor autogenerated
func (s *mqlAzureSqlDatabase) SourceDatabaseDeletionDate() (*time.Time, error) {
	res, ok := s.Cache.Load("sourceDatabaseDeletionDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.database\" failed: no value provided for static field \"sourceDatabaseDeletionDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"sourceDatabaseDeletionDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RestorePointInTime accessor autogenerated
func (s *mqlAzureSqlDatabase) RestorePointInTime() (*time.Time, error) {
	res, ok := s.Cache.Load("restorePointInTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.sql.database\" failed: no value provided for static field \"restorePointInTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"restorePointInTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryServicesRecoveryPointResourceId accessor autogenerated
func (s *mqlAzureSqlDatabase) RecoveryServicesRecoveryPointResourceId() (string, error) {
	res, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"recoveryServicesRecoveryPointResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"recoveryServicesRecoveryPointResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Edition accessor autogenerated
func (s *mqlAzureSqlDatabase) Edition() (string, error) {
	res, ok := s.Cache.Load("edition")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"edition\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"edition\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSizeBytes accessor autogenerated
func (s *mqlAzureSqlDatabase) MaxSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("maxSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.sql.database\" failed: no value provided for static field \"maxSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.sql.database\" failed to cast field \"maxSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveId accessor autogenerated
func (s *mqlAzureSqlDatabase) RequestedServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeRequestedServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("requestedServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azure.sql.database\" calculated \"requestedServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "requestedServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"requestedServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveName accessor autogenerated
func (s *mqlAzureSqlDatabase) RequestedServiceObjectiveName() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"requestedServiceObjectiveName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"requestedServiceObjectiveName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceLevelObjective accessor autogenerated
func (s *mqlAzureSqlDatabase) ServiceLevelObjective() (string, error) {
	res, ok := s.Cache.Load("serviceLevelObjective")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"serviceLevelObjective\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"serviceLevelObjective\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAzureSqlDatabase) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ElasticPoolName accessor autogenerated
func (s *mqlAzureSqlDatabase) ElasticPoolName() (string, error) {
	res, ok := s.Cache.Load("elasticPoolName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"elasticPoolName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"elasticPoolName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultSecondaryLocation accessor autogenerated
func (s *mqlAzureSqlDatabase) DefaultSecondaryLocation() (string, error) {
	res, ok := s.Cache.Load("defaultSecondaryLocation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"defaultSecondaryLocation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"defaultSecondaryLocation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceTierAdvisors accessor autogenerated
func (s *mqlAzureSqlDatabase) ServiceTierAdvisors() (interface{}, error) {
	res, ok := s.Cache.Load("serviceTierAdvisors")
	if !ok || !res.Valid {
		if err := s.ComputeServiceTierAdvisors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceTierAdvisors")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"serviceTierAdvisors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceTierAdvisors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"serviceTierAdvisors\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RecommendedIndex accessor autogenerated
func (s *mqlAzureSqlDatabase) RecommendedIndex() (interface{}, error) {
	res, ok := s.Cache.Load("recommendedIndex")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendedIndex(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendedIndex")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"recommendedIndex\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendedIndex")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"recommendedIndex\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FailoverGroupId accessor autogenerated
func (s *mqlAzureSqlDatabase) FailoverGroupId() (string, error) {
	res, ok := s.Cache.Load("failoverGroupId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"failoverGroupId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"failoverGroupId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReadScale accessor autogenerated
func (s *mqlAzureSqlDatabase) ReadScale() (string, error) {
	res, ok := s.Cache.Load("readScale")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"readScale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"readScale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SampleName accessor autogenerated
func (s *mqlAzureSqlDatabase) SampleName() (string, error) {
	res, ok := s.Cache.Load("sampleName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.database\" failed: no value provided for static field \"sampleName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.database\" failed to cast field \"sampleName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneRedundant accessor autogenerated
func (s *mqlAzureSqlDatabase) ZoneRedundant() (bool, error) {
	res, ok := s.Cache.Load("zoneRedundant")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.sql.database\" failed: no value provided for static field \"zoneRedundant\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.sql.database\" failed to cast field \"zoneRedundant\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// TransparentDataEncryption accessor autogenerated
func (s *mqlAzureSqlDatabase) TransparentDataEncryption() (interface{}, error) {
	res, ok := s.Cache.Load("transparentDataEncryption")
	if !ok || !res.Valid {
		if err := s.ComputeTransparentDataEncryption(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("transparentDataEncryption")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"transparentDataEncryption\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "transparentDataEncryption")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"transparentDataEncryption\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Advisor accessor autogenerated
func (s *mqlAzureSqlDatabase) Advisor() ([]interface{}, error) {
	res, ok := s.Cache.Load("advisor")
	if !ok || !res.Valid {
		if err := s.ComputeAdvisor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advisor")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"advisor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advisor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"advisor\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSqlDatabase) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSqlDatabase) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSqlDatabase) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Usage accessor autogenerated
func (s *mqlAzureSqlDatabase) Usage() ([]interface{}, error) {
	res, ok := s.Cache.Load("usage")
	if !ok || !res.Valid {
		if err := s.ComputeUsage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("usage")
		if !ok {
			return nil, errors.New("\"azure.sql.database\" calculated \"usage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "usage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.database\" failed to cast field \"usage\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return s.ComputeContainmentState()
	case "currentServiceObjectiveId":
		return s.ComputeCurrentServiceObjectiveId()
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return s.ComputeRequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return s.ComputeServiceTierAdvisors()
	case "recommendedIndex":
		return s.ComputeRecommendedIndex()
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return s.ComputeTransparentDataEncryption()
	case "advisor":
		return s.ComputeAdvisor()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "usage":
		return s.ComputeUsage()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.database\" resource")
	}
}

// ComputeContainmentState computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeContainmentState() error {
	var err error
	if _, ok := s.Cache.Load("containmentState"); ok {
		return nil
	}
	vres, err := s.GetContainmentState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containmentState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCurrentServiceObjectiveId computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeCurrentServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("currentServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetCurrentServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("currentServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRequestedServiceObjectiveId computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeRequestedServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("requestedServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetRequestedServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("requestedServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServiceTierAdvisors computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeServiceTierAdvisors() error {
	var err error
	if _, ok := s.Cache.Load("serviceTierAdvisors"); ok {
		return nil
	}
	vres, err := s.GetServiceTierAdvisors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceTierAdvisors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendedIndex computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeRecommendedIndex() error {
	var err error
	if _, ok := s.Cache.Load("recommendedIndex"); ok {
		return nil
	}
	vres, err := s.GetRecommendedIndex()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendedIndex", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTransparentDataEncryption computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeTransparentDataEncryption() error {
	var err error
	if _, ok := s.Cache.Load("transparentDataEncryption"); ok {
		return nil
	}
	vres, err := s.GetTransparentDataEncryption()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("transparentDataEncryption", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdvisor computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeAdvisor() error {
	var err error
	if _, ok := s.Cache.Load("advisor"); ok {
		return nil
	}
	vres, err := s.GetAdvisor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advisor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsage computer autogenerated
func (s *mqlAzureSqlDatabase) ComputeUsage() error {
	var err error
	if _, ok := s.Cache.Load("usage"); ok {
		return nil
	}
	vres, err := s.GetUsage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("usage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSqlDatabaseusage resource interface
type AzureSqlDatabaseusage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	ResourceName() (string, error)
	DisplayName() (string, error)
	CurrentValue() (float64, error)
	Limit() (float64, error)
	Unit() (string, error)
	NextResetTime() (*time.Time, error)
}

// mqlAzureSqlDatabaseusage for the azure.sql.databaseusage resource
type mqlAzureSqlDatabaseusage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlDatabaseusage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.databaseusage resource
func newAzureSqlDatabaseusage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlDatabaseusage{runtime.NewResource("azure.sql.databaseusage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"resourceName\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "currentValue":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"currentValue\" argument has the wrong type (expected type \"float64\")")
			}
		case "limit":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"limit\" argument has the wrong type (expected type \"float64\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "nextResetTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"nextResetTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.databaseusage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.databaseusage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlDatabaseusage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceName"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"resourceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentValue"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"currentValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("limit"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"limit\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"azure.sql.databaseusage\" resource without a \"unit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.databaseusage].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.databaseusage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.databaseusage].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "resourceName":
		return s.ResourceName()
	case "displayName":
		return s.DisplayName()
	case "currentValue":
		return s.CurrentValue()
	case "limit":
		return s.Limit()
	case "unit":
		return s.Unit()
	case "nextResetTime":
		return s.NextResetTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.databaseusage\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceName accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) ResourceName() (string, error) {
	res, ok := s.Cache.Load("resourceName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"resourceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"resourceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentValue accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) CurrentValue() (float64, error) {
	res, ok := s.Cache.Load("currentValue")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"currentValue\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"currentValue\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Limit accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Limit() (float64, error) {
	res, ok := s.Cache.Load("limit")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"limit\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"limit\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.databaseusage\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NextResetTime accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) NextResetTime() (*time.Time, error) {
	res, ok := s.Cache.Load("nextResetTime")
	if !ok || !res.Valid {
		if err := s.ComputeNextResetTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("nextResetTime")
		if !ok {
			return nil, errors.New("\"azure.sql.databaseusage\" calculated \"nextResetTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "nextResetTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.sql.databaseusage\" failed to cast field \"nextResetTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlDatabaseusage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.databaseusage].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return s.ComputeNextResetTime()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.databaseusage\" resource")
	}
}

// ComputeNextResetTime computer autogenerated
func (s *mqlAzureSqlDatabaseusage) ComputeNextResetTime() error {
	var err error
	if _, ok := s.Cache.Load("nextResetTime"); ok {
		return nil
	}
	vres, err := s.GetNextResetTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("nextResetTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurePostgresql resource interface
type AzurePostgresql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzurePostgresql for the azure.postgresql resource
type mqlAzurePostgresql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurePostgresql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.postgresql resource
func newAzurePostgresql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurePostgresql{runtime.NewResource("azure.postgresql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.postgresql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurePostgresql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurePostgresql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurePostgresql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.postgresql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.postgresql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzurePostgresql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.postgresql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurePostgresql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzurePostgresql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurePostgresqlServer resource interface
type AzurePostgresqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzurePostgresqlServer for the azure.postgresql.server resource
type mqlAzurePostgresqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurePostgresqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.postgresql.server resource
func newAzurePostgresqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurePostgresqlServer{runtime.NewResource("azure.postgresql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.postgresql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurePostgresqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.postgresql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurePostgresqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurePostgresqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.postgresql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.postgresql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurePostgresqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurePostgresqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurePostgresqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurePostgresqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurePostgresqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurePostgresqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.postgresql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzurePostgresqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.postgresql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzurePostgresqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.postgresql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzurePostgresqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.postgresql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.postgresql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurePostgresqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzurePostgresqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzurePostgresqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzurePostgresqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurePostgresqlDatabase resource interface
type AzurePostgresqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzurePostgresqlDatabase for the azure.postgresql.database resource
type mqlAzurePostgresqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurePostgresqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.postgresql.database resource
func newAzurePostgresqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurePostgresqlDatabase{runtime.NewResource("azure.postgresql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.postgresql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.postgresql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurePostgresqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.postgresql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.postgresql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.postgresql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.postgresql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.postgresql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.postgresql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.postgresql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.postgresql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.postgresql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurePostgresqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.postgresql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.postgresql.database\" resource")
	}
}

// AzureMysql resource interface
type AzureMysql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
	FlexibleServers() ([]interface{}, error)
}

// mqlAzureMysql for the azure.mysql resource
type mqlAzureMysql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMysql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mysql resource
func newAzureMysql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMysql{runtime.NewResource("azure.mysql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "flexibleServers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql\", its \"flexibleServers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mysql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMysql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMysql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql].Register")
	switch name {
	case "servers":
		return nil
	case "flexibleServers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMysql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mysql].Field")
	switch name {
	case "servers":
		return s.Servers()
	case "flexibleServers":
		return s.FlexibleServers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mysql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureMysql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.mysql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FlexibleServers accessor autogenerated
func (s *mqlAzureMysql) FlexibleServers() ([]interface{}, error) {
	res, ok := s.Cache.Load("flexibleServers")
	if !ok || !res.Valid {
		if err := s.ComputeFlexibleServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flexibleServers")
		if !ok {
			return nil, errors.New("\"azure.mysql\" calculated \"flexibleServers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flexibleServers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql\" failed to cast field \"flexibleServers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMysql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	case "flexibleServers":
		return s.ComputeFlexibleServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureMysql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFlexibleServers computer autogenerated
func (s *mqlAzureMysql) ComputeFlexibleServers() error {
	var err error
	if _, ok := s.Cache.Load("flexibleServers"); ok {
		return nil
	}
	vres, err := s.GetFlexibleServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flexibleServers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMysqlServer resource interface
type AzureMysqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureMysqlServer for the azure.mysql.server resource
type mqlAzureMysqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMysqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mysql.server resource
func newAzureMysqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMysqlServer{runtime.NewResource("azure.mysql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mysql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMysqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.mysql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMysqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMysqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mysql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mysql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMysqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMysqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureMysqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureMysqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mysql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMysqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureMysqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mysql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureMysqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.mysql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureMysqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.mysql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureMysqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.mysql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMysqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureMysqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureMysqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureMysqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMysqlDatabase resource interface
type AzureMysqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureMysqlDatabase for the azure.mysql.database resource
type mqlAzureMysqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMysqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mysql.database resource
func newAzureMysqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMysqlDatabase{runtime.NewResource("azure.mysql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mysql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMysqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.mysql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.mysql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.mysql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.mysql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.mysql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMysqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMysqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mysql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mysql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMysqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMysqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMysqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureMysqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureMysqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMysqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.database\" resource")
	}
}

// AzureMysqlFlexibleServer resource interface
type AzureMysqlFlexibleServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureMysqlFlexibleServer for the azure.mysql.flexibleServer resource
type mqlAzureMysqlFlexibleServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMysqlFlexibleServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mysql.flexibleServer resource
func newAzureMysqlFlexibleServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMysqlFlexibleServer{runtime.NewResource("azure.mysql.flexibleServer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mysql.flexibleServer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mysql.flexibleServer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMysqlFlexibleServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.mysql.flexibleServer\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.flexibleServer].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.flexibleServer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mysql.flexibleServer].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mysql.flexibleServer\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mysql.flexibleServer\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.mysql.flexibleServer\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.mysql.flexibleServer\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.mysql.flexibleServer\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mysql.flexibleServer\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMysqlFlexibleServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mysql.flexibleServer].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mysql.flexibleServer\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureMysqlFlexibleServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureMysqlFlexibleServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureMysqlFlexibleServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMariadb resource interface
type AzureMariadb interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzureMariadb for the azure.mariadb resource
type mqlAzureMariadb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMariadb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mariadb resource
func newAzureMariadb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMariadb{runtime.NewResource("azure.mariadb")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mariadb with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMariadb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMariadb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMariadb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mariadb].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mariadb\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureMariadb) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.mariadb\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMariadb) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureMariadb) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMariadbServer resource interface
type AzureMariadbServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureMariadbServer for the azure.mariadb.server resource
type mqlAzureMariadbServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMariadbServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mariadb.server resource
func newAzureMariadbServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMariadbServer{runtime.NewResource("azure.mariadb.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mariadb.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMariadbServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.mariadb.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMariadbServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMariadbServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mariadb.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mariadb.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMariadbServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMariadbServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureMariadbServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureMariadbServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMariadbServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureMariadbServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.mariadb.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureMariadbServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.mariadb.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureMariadbServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.mariadb.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureMariadbServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.mariadb.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.mariadb.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMariadbServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureMariadbServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureMariadbServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureMariadbServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMariadbDatabase resource interface
type AzureMariadbDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureMariadbDatabase for the azure.mariadb.database resource
type mqlAzureMariadbDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMariadbDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.mariadb.database resource
func newAzureMariadbDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMariadbDatabase{runtime.NewResource("azure.mariadb.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.mariadb.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.mariadb.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMariadbDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.mariadb.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.mariadb.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.mariadb.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.mariadb.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.mariadb.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMariadbDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMariadbDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.mariadb.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.mariadb.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMariadbDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMariadbDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMariadbDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureMariadbDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureMariadbDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.mariadb.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.mariadb.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMariadbDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.mariadb.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.mariadb.database\" resource")
	}
}

// AzureSqlConfiguration resource interface
type AzureSqlConfiguration interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Value() (string, error)
	Description() (string, error)
	DefaultValue() (string, error)
	DataType() (string, error)
	AllowedValues() (string, error)
	Source() (string, error)
}

// mqlAzureSqlConfiguration for the azure.sql.configuration resource
type mqlAzureSqlConfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlConfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.configuration resource
func newAzureSqlConfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlConfiguration{runtime.NewResource("azure.sql.configuration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultValue":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"defaultValue\" argument has the wrong type (expected type \"string\")")
			}
		case "dataType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"dataType\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedValues":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"allowedValues\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"source\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.configuration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.configuration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlConfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultValue"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"defaultValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataType"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"dataType\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedValues"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"allowedValues\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"azure.sql.configuration\" resource without a \"source\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlConfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.configuration].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.configuration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlConfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.configuration].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "value":
		return s.Value()
	case "description":
		return s.Description()
	case "defaultValue":
		return s.DefaultValue()
	case "dataType":
		return s.DataType()
	case "allowedValues":
		return s.AllowedValues()
	case "source":
		return s.Source()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.configuration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlConfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlConfiguration) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlConfiguration) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlAzureSqlConfiguration) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSqlConfiguration) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultValue accessor autogenerated
func (s *mqlAzureSqlConfiguration) DefaultValue() (string, error) {
	res, ok := s.Cache.Load("defaultValue")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"defaultValue\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"defaultValue\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DataType accessor autogenerated
func (s *mqlAzureSqlConfiguration) DataType() (string, error) {
	res, ok := s.Cache.Load("dataType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"dataType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"dataType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedValues accessor autogenerated
func (s *mqlAzureSqlConfiguration) AllowedValues() (string, error) {
	res, ok := s.Cache.Load("allowedValues")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"allowedValues\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"allowedValues\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAzureSqlConfiguration) Source() (string, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.configuration\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.configuration\" failed to cast field \"source\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlConfiguration) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.configuration].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.configuration\" resource")
	}
}

// AzureSqlFirewallrule resource interface
type AzureSqlFirewallrule interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StartIpAddress() (string, error)
	EndIpAddress() (string, error)
}

// mqlAzureSqlFirewallrule for the azure.sql.firewallrule resource
type mqlAzureSqlFirewallrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSqlFirewallrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.sql.firewallrule resource
func newAzureSqlFirewallrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSqlFirewallrule{runtime.NewResource("azure.sql.firewallrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "startIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"startIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "endIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"endIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.sql.firewallrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.sql.firewallrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSqlFirewallrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.sql.firewallrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.sql.firewallrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.sql.firewallrule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("startIpAddress"); !ok {
		return errors.New("Initialized \"azure.sql.firewallrule\" resource without a \"startIpAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("endIpAddress"); !ok {
		return errors.New("Initialized \"azure.sql.firewallrule\" resource without a \"endIpAddress\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.firewallrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.firewallrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.sql.firewallrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "startIpAddress":
		return s.StartIpAddress()
	case "endIpAddress":
		return s.EndIpAddress()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.sql.firewallrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.firewallrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.firewallrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.firewallrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.firewallrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.firewallrule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.firewallrule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartIpAddress accessor autogenerated
func (s *mqlAzureSqlFirewallrule) StartIpAddress() (string, error) {
	res, ok := s.Cache.Load("startIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.firewallrule\" failed: no value provided for static field \"startIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.firewallrule\" failed to cast field \"startIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndIpAddress accessor autogenerated
func (s *mqlAzureSqlFirewallrule) EndIpAddress() (string, error) {
	res, ok := s.Cache.Load("endIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.sql.firewallrule\" failed: no value provided for static field \"endIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.sql.firewallrule\" failed to cast field \"endIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSqlFirewallrule) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.sql.firewallrule].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.sql.firewallrule\" resource")
	}
}

// AzureKeyvault resource interface
type AzureKeyvault interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vaults() ([]interface{}, error)
}

// mqlAzureKeyvault for the azure.keyvault resource
type mqlAzureKeyvault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureKeyvault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.keyvault resource
func newAzureKeyvault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureKeyvault{runtime.NewResource("azure.keyvault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vaults":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault\", its \"vaults\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.keyvault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureKeyvault) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureKeyvault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault].Register")
	switch name {
	case "vaults":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureKeyvault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.keyvault].Field")
	switch name {
	case "vaults":
		return s.Vaults()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.keyvault\" resource")
	}
}

// Vaults accessor autogenerated
func (s *mqlAzureKeyvault) Vaults() ([]interface{}, error) {
	res, ok := s.Cache.Load("vaults")
	if !ok || !res.Valid {
		if err := s.ComputeVaults(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vaults")
		if !ok {
			return nil, errors.New("\"azure.keyvault\" calculated \"vaults\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaults")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault\" failed to cast field \"vaults\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureKeyvault) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault].Compute")
	switch name {
	case "vaults":
		return s.ComputeVaults()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault\" resource")
	}
}

// ComputeVaults computer autogenerated
func (s *mqlAzureKeyvault) ComputeVaults() error {
	var err error
	if _, ok := s.Cache.Load("vaults"); ok {
		return nil
	}
	vres, err := s.GetVaults()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaults", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureKeyvaultVault resource interface
type AzureKeyvaultVault interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	VaultName() (string, error)
	Type() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	VaultUri() (string, error)
	Properties() (interface{}, error)
	Keys() ([]interface{}, error)
	Certificates() ([]interface{}, error)
	Secrets() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
}

// mqlAzureKeyvaultVault for the azure.keyvault.vault resource
type mqlAzureKeyvaultVault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureKeyvaultVault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.keyvault.vault resource
func newAzureKeyvaultVault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureKeyvaultVault{runtime.NewResource("azure.keyvault.vault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "vaultName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"vaultName\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "vaultUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"vaultUri\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.vault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.keyvault.vault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureKeyvaultVault) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.keyvault.vault\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("vaultName"); !ok {
		return errors.New("Initialized \"azure.keyvault.vault\" resource without a \"vaultName\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.keyvault.vault\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.keyvault.vault\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.keyvault.vault\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureKeyvaultVault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.vault].Register")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return nil
	case "properties":
		return nil
	case "keys":
		return nil
	case "certificates":
		return nil
	case "secrets":
		return nil
	case "diagnosticSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.vault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureKeyvaultVault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.keyvault.vault].Field")
	switch name {
	case "id":
		return s.Id()
	case "vaultName":
		return s.VaultName()
	case "type":
		return s.Type()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "vaultUri":
		return s.VaultUri()
	case "properties":
		return s.Properties()
	case "keys":
		return s.Keys()
	case "certificates":
		return s.Certificates()
	case "secrets":
		return s.Secrets()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.keyvault.vault\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureKeyvaultVault) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.vault\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VaultName accessor autogenerated
func (s *mqlAzureKeyvaultVault) VaultName() (string, error) {
	res, ok := s.Cache.Load("vaultName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.vault\" failed: no value provided for static field \"vaultName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"vaultName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureKeyvaultVault) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.vault\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureKeyvaultVault) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.vault\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureKeyvaultVault) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.vault\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// VaultUri accessor autogenerated
func (s *mqlAzureKeyvaultVault) VaultUri() (string, error) {
	res, ok := s.Cache.Load("vaultUri")
	if !ok || !res.Valid {
		if err := s.ComputeVaultUri(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("vaultUri")
		if !ok {
			return "", errors.New("\"azure.keyvault.vault\" calculated \"vaultUri\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaultUri")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"vaultUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureKeyvaultVault) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azure.keyvault.vault\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Keys accessor autogenerated
func (s *mqlAzureKeyvaultVault) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"azure.keyvault.vault\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlAzureKeyvaultVault) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"azure.keyvault.vault\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlAzureKeyvaultVault) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"azure.keyvault.vault\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzureKeyvaultVault) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azure.keyvault.vault\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.vault\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureKeyvaultVault) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.vault].Compute")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return s.ComputeVaultUri()
	case "properties":
		return s.ComputeProperties()
	case "keys":
		return s.ComputeKeys()
	case "certificates":
		return s.ComputeCertificates()
	case "secrets":
		return s.ComputeSecrets()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.vault\" resource")
	}
}

// ComputeVaultUri computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeVaultUri() error {
	var err error
	if _, ok := s.Cache.Load("vaultUri"); ok {
		return nil
	}
	vres, err := s.GetVaultUri()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaultUri", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeys computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCertificates computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecrets computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzureKeyvaultVault) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureKeyvaultKey resource interface
type AzureKeyvaultKey interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Kid() (string, error)
	Tags() (map[string]interface{}, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	KeyName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureKeyvaultKey for the azure.keyvault.key resource
type mqlAzureKeyvaultKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureKeyvaultKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.keyvault.key resource
func newAzureKeyvaultKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureKeyvaultKey{runtime.NewResource("azure.keyvault.key")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "kid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"kid\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "keyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"keyName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.keyvault.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureKeyvaultKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("kid"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"kid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.keyvault.key\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureKeyvaultKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.key].Register")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureKeyvaultKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.keyvault.key].Field")
	switch name {
	case "kid":
		return s.Kid()
	case "tags":
		return s.Tags()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "keyName":
		return s.KeyName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.keyvault.key\" resource")
	}
}

// Kid accessor autogenerated
func (s *mqlAzureKeyvaultKey) Kid() (string, error) {
	res, ok := s.Cache.Load("kid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"kid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"kid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureKeyvaultKey) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureKeyvaultKey) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureKeyvaultKey) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureKeyvaultKey) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureKeyvaultKey) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureKeyvaultKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureKeyvaultKey) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureKeyvaultKey) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.key\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyName accessor autogenerated
func (s *mqlAzureKeyvaultKey) KeyName() (string, error) {
	res, ok := s.Cache.Load("keyName")
	if !ok || !res.Valid {
		if err := s.ComputeKeyName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("keyName")
		if !ok {
			return "", errors.New("\"azure.keyvault.key\" calculated \"keyName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"keyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureKeyvaultKey) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.keyvault.key\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureKeyvaultKey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.keyvault.key\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.key\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureKeyvaultKey) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.key].Compute")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return s.ComputeKeyName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.key\" resource")
	}
}

// ComputeKeyName computer autogenerated
func (s *mqlAzureKeyvaultKey) ComputeKeyName() error {
	var err error
	if _, ok := s.Cache.Load("keyName"); ok {
		return nil
	}
	vres, err := s.GetKeyName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureKeyvaultKey) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureKeyvaultKey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureKeyvaultCertificate resource interface
type AzureKeyvaultCertificate interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	X5t() (string, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	CertName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureKeyvaultCertificate for the azure.keyvault.certificate resource
type mqlAzureKeyvaultCertificate struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureKeyvaultCertificate) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.keyvault.certificate resource
func newAzureKeyvaultCertificate(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureKeyvaultCertificate{runtime.NewResource("azure.keyvault.certificate")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "x5t":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"x5t\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "certName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"certName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.certificate\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.keyvault.certificate with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureKeyvaultCertificate) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("x5t"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"x5t\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.keyvault.certificate\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.certificate].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.certificate\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.keyvault.certificate].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "x5t":
		return s.X5t()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "certName":
		return s.CertName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.keyvault.certificate\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// X5t accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) X5t() (string, error) {
	res, ok := s.Cache.Load("x5t")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"x5t\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"x5t\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.certificate\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertName accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) CertName() (string, error) {
	res, ok := s.Cache.Load("certName")
	if !ok || !res.Valid {
		if err := s.ComputeCertName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("certName")
		if !ok {
			return "", errors.New("\"azure.keyvault.certificate\" calculated \"certName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"certName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.keyvault.certificate\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.keyvault.certificate\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.certificate\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureKeyvaultCertificate) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.certificate].Compute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return s.ComputeCertName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.certificate\" resource")
	}
}

// ComputeCertName computer autogenerated
func (s *mqlAzureKeyvaultCertificate) ComputeCertName() error {
	var err error
	if _, ok := s.Cache.Load("certName"); ok {
		return nil
	}
	vres, err := s.GetCertName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureKeyvaultCertificate) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureKeyvaultCertificate) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureKeyvaultSecret resource interface
type AzureKeyvaultSecret interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	ContentType() (string, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	SecretName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureKeyvaultSecret for the azure.keyvault.secret resource
type mqlAzureKeyvaultSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureKeyvaultSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.keyvault.secret resource
func newAzureKeyvaultSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureKeyvaultSecret{runtime.NewResource("azure.keyvault.secret")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "contentType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"contentType\" argument has the wrong type (expected type \"string\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "secretName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"secretName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.keyvault.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.keyvault.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureKeyvaultSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("contentType"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"contentType\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.keyvault.secret\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.secret].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.keyvault.secret].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "contentType":
		return s.ContentType()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "secretName":
		return s.SecretName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.keyvault.secret\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ContentType accessor autogenerated
func (s *mqlAzureKeyvaultSecret) ContentType() (string, error) {
	res, ok := s.Cache.Load("contentType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"contentType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"contentType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureKeyvaultSecret) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.keyvault.secret\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// SecretName accessor autogenerated
func (s *mqlAzureKeyvaultSecret) SecretName() (string, error) {
	res, ok := s.Cache.Load("secretName")
	if !ok || !res.Valid {
		if err := s.ComputeSecretName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("secretName")
		if !ok {
			return "", errors.New("\"azure.keyvault.secret\" calculated \"secretName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secretName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"secretName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.keyvault.secret\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.keyvault.secret\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.keyvault.secret\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureKeyvaultSecret) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.keyvault.secret].Compute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return s.ComputeSecretName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.keyvault.secret\" resource")
	}
}

// ComputeSecretName computer autogenerated
func (s *mqlAzureKeyvaultSecret) ComputeSecretName() error {
	var err error
	if _, ok := s.Cache.Load("secretName"); ok {
		return nil
	}
	vres, err := s.GetSecretName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secretName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureKeyvaultSecret) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureKeyvaultSecret) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMonitor resource interface
type AzureMonitor interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	LogProfiles() ([]interface{}, error)
}

// mqlAzureMonitor for the azure.monitor resource
type mqlAzureMonitor struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMonitor) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.monitor resource
func newAzureMonitor(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMonitor{runtime.NewResource("azure.monitor")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "logProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor\", its \"logProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.monitor with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMonitor) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMonitor) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor].Register")
	switch name {
	case "logProfiles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMonitor) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.monitor].Field")
	switch name {
	case "logProfiles":
		return s.LogProfiles()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.monitor\" resource")
	}
}

// LogProfiles accessor autogenerated
func (s *mqlAzureMonitor) LogProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("logProfiles")
	if !ok || !res.Valid {
		if err := s.ComputeLogProfiles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logProfiles")
		if !ok {
			return nil, errors.New("\"azure.monitor\" calculated \"logProfiles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logProfiles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor\" failed to cast field \"logProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMonitor) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor].Compute")
	switch name {
	case "logProfiles":
		return s.ComputeLogProfiles()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor\" resource")
	}
}

// ComputeLogProfiles computer autogenerated
func (s *mqlAzureMonitor) ComputeLogProfiles() error {
	var err error
	if _, ok := s.Cache.Load("logProfiles"); ok {
		return nil
	}
	vres, err := s.GetLogProfiles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logProfiles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureMonitorLogprofile resource interface
type AzureMonitorLogprofile interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureStorageAccount, error)
}

// mqlAzureMonitorLogprofile for the azure.monitor.logprofile resource
type mqlAzureMonitorLogprofile struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMonitorLogprofile) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.monitor.logprofile resource
func newAzureMonitorLogprofile(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMonitorLogprofile{runtime.NewResource("azure.monitor.logprofile")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"storageAccount\" argument has the wrong type (expected type \"AzureStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.logprofile\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.monitor.logprofile with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMonitorLogprofile) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.monitor.logprofile\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor.logprofile].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor.logprofile\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.monitor.logprofile].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.monitor.logprofile\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureMonitorLogprofile) StorageAccount() (AzureStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.monitor.logprofile\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor.logprofile\" failed to cast field \"storageAccount\" to the right type (AzureStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMonitorLogprofile) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor.logprofile].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor.logprofile\" resource")
	}
}

// AzureMonitorDiagnosticsetting resource interface
type AzureMonitorDiagnosticsetting interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureStorageAccount, error)
}

// mqlAzureMonitorDiagnosticsetting for the azure.monitor.diagnosticsetting resource
type mqlAzureMonitorDiagnosticsetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureMonitorDiagnosticsetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.monitor.diagnosticsetting resource
func newAzureMonitorDiagnosticsetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureMonitorDiagnosticsetting{runtime.NewResource("azure.monitor.diagnosticsetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"storageAccount\" argument has the wrong type (expected type \"AzureStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.monitor.diagnosticsetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.monitor.diagnosticsetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureMonitorDiagnosticsetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.monitor.diagnosticsetting\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.monitor.diagnosticsetting\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.monitor.diagnosticsetting\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.monitor.diagnosticsetting\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.monitor.diagnosticsetting\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor.diagnosticsetting].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor.diagnosticsetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.monitor.diagnosticsetting].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.monitor.diagnosticsetting\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.diagnosticsetting\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.diagnosticsetting\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.diagnosticsetting\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.diagnosticsetting\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.monitor.diagnosticsetting\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.monitor.diagnosticsetting\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.monitor.diagnosticsetting\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor.diagnosticsetting\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) StorageAccount() (AzureStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.monitor.diagnosticsetting\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.monitor.diagnosticsetting\" failed to cast field \"storageAccount\" to the right type (AzureStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureMonitorDiagnosticsetting) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.monitor.diagnosticsetting].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.monitor.diagnosticsetting\" resource")
	}
}

// AzureCloudDefender resource interface
type AzureCloudDefender interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	MonitoringAgentAutoProvision() (bool, error)
	SecurityContacts() ([]interface{}, error)
}

// mqlAzureCloudDefender for the azure.cloudDefender resource
type mqlAzureCloudDefender struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureCloudDefender) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.cloudDefender resource
func newAzureCloudDefender(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureCloudDefender{runtime.NewResource("azure.cloudDefender")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "monitoringAgentAutoProvision":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender\", its \"monitoringAgentAutoProvision\" argument has the wrong type (expected type \"bool\")")
			}
		case "securityContacts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender\", its \"securityContacts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.cloudDefender with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureCloudDefender) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureCloudDefender) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender].Register")
	switch name {
	case "monitoringAgentAutoProvision":
		return nil
	case "securityContacts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.cloudDefender\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureCloudDefender) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender].Field")
	switch name {
	case "monitoringAgentAutoProvision":
		return s.MonitoringAgentAutoProvision()
	case "securityContacts":
		return s.SecurityContacts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.cloudDefender\" resource")
	}
}

// MonitoringAgentAutoProvision accessor autogenerated
func (s *mqlAzureCloudDefender) MonitoringAgentAutoProvision() (bool, error) {
	res, ok := s.Cache.Load("monitoringAgentAutoProvision")
	if !ok || !res.Valid {
		if err := s.ComputeMonitoringAgentAutoProvision(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("monitoringAgentAutoProvision")
		if !ok {
			return false, errors.New("\"azure.cloudDefender\" calculated \"monitoringAgentAutoProvision\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "monitoringAgentAutoProvision")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.cloudDefender\" failed to cast field \"monitoringAgentAutoProvision\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// SecurityContacts accessor autogenerated
func (s *mqlAzureCloudDefender) SecurityContacts() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityContacts")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityContacts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityContacts")
		if !ok {
			return nil, errors.New("\"azure.cloudDefender\" calculated \"securityContacts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityContacts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.cloudDefender\" failed to cast field \"securityContacts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureCloudDefender) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender].Compute")
	switch name {
	case "monitoringAgentAutoProvision":
		return s.ComputeMonitoringAgentAutoProvision()
	case "securityContacts":
		return s.ComputeSecurityContacts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.cloudDefender\" resource")
	}
}

// ComputeMonitoringAgentAutoProvision computer autogenerated
func (s *mqlAzureCloudDefender) ComputeMonitoringAgentAutoProvision() error {
	var err error
	if _, ok := s.Cache.Load("monitoringAgentAutoProvision"); ok {
		return nil
	}
	vres, err := s.GetMonitoringAgentAutoProvision()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("monitoringAgentAutoProvision", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityContacts computer autogenerated
func (s *mqlAzureCloudDefender) ComputeSecurityContacts() error {
	var err error
	if _, ok := s.Cache.Load("securityContacts"); ok {
		return nil
	}
	vres, err := s.GetSecurityContacts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityContacts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureCloudDefenderSecurityContact resource interface
type AzureCloudDefenderSecurityContact interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Emails() ([]interface{}, error)
	AlertNotifications() (interface{}, error)
	NotificationsByRole() (interface{}, error)
}

// mqlAzureCloudDefenderSecurityContact for the azure.cloudDefender.securityContact resource
type mqlAzureCloudDefenderSecurityContact struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureCloudDefenderSecurityContact) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.cloudDefender.securityContact resource
func newAzureCloudDefenderSecurityContact(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureCloudDefenderSecurityContact{runtime.NewResource("azure.cloudDefender.securityContact")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "emails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"emails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "alertNotifications":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"alertNotifications\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "notificationsByRole":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"notificationsByRole\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.cloudDefender.securityContact\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.cloudDefender.securityContact with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureCloudDefenderSecurityContact) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.cloudDefender.securityContact\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.cloudDefender.securityContact\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("emails"); !ok {
		return errors.New("Initialized \"azure.cloudDefender.securityContact\" resource without a \"emails\". This field is required.")
	}
	if _, ok := s.Cache.Load("alertNotifications"); !ok {
		return errors.New("Initialized \"azure.cloudDefender.securityContact\" resource without a \"alertNotifications\". This field is required.")
	}
	if _, ok := s.Cache.Load("notificationsByRole"); !ok {
		return errors.New("Initialized \"azure.cloudDefender.securityContact\" resource without a \"notificationsByRole\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender.securityContact].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.cloudDefender.securityContact\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender.securityContact].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "emails":
		return s.Emails()
	case "alertNotifications":
		return s.AlertNotifications()
	case "notificationsByRole":
		return s.NotificationsByRole()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.cloudDefender.securityContact\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.cloudDefender.securityContact\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.cloudDefender.securityContact\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.cloudDefender.securityContact\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.cloudDefender.securityContact\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Emails accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Emails() ([]interface{}, error) {
	res, ok := s.Cache.Load("emails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.cloudDefender.securityContact\" failed: no value provided for static field \"emails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.cloudDefender.securityContact\" failed to cast field \"emails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AlertNotifications accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) AlertNotifications() (interface{}, error) {
	res, ok := s.Cache.Load("alertNotifications")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.cloudDefender.securityContact\" failed: no value provided for static field \"alertNotifications\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.cloudDefender.securityContact\" failed to cast field \"alertNotifications\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// NotificationsByRole accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) NotificationsByRole() (interface{}, error) {
	res, ok := s.Cache.Load("notificationsByRole")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.cloudDefender.securityContact\" failed: no value provided for static field \"notificationsByRole\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.cloudDefender.securityContact\" failed to cast field \"notificationsByRole\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureCloudDefenderSecurityContact) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.cloudDefender.securityContact].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.cloudDefender.securityContact\" resource")
	}
}

// AzureAuthorization resource interface
type AzureAuthorization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	RoleDefinitions() ([]interface{}, error)
}

// mqlAzureAuthorization for the azure.authorization resource
type mqlAzureAuthorization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureAuthorization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.authorization resource
func newAzureAuthorization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureAuthorization{runtime.NewResource("azure.authorization")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "roleDefinitions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization\", its \"roleDefinitions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.authorization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureAuthorization) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureAuthorization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization].Register")
	switch name {
	case "roleDefinitions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureAuthorization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.authorization].Field")
	switch name {
	case "roleDefinitions":
		return s.RoleDefinitions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.authorization\" resource")
	}
}

// RoleDefinitions accessor autogenerated
func (s *mqlAzureAuthorization) RoleDefinitions() ([]interface{}, error) {
	res, ok := s.Cache.Load("roleDefinitions")
	if !ok || !res.Valid {
		if err := s.ComputeRoleDefinitions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roleDefinitions")
		if !ok {
			return nil, errors.New("\"azure.authorization\" calculated \"roleDefinitions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roleDefinitions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization\" failed to cast field \"roleDefinitions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureAuthorization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization].Compute")
	switch name {
	case "roleDefinitions":
		return s.ComputeRoleDefinitions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization\" resource")
	}
}

// ComputeRoleDefinitions computer autogenerated
func (s *mqlAzureAuthorization) ComputeRoleDefinitions() error {
	var err error
	if _, ok := s.Cache.Load("roleDefinitions"); ok {
		return nil
	}
	vres, err := s.GetRoleDefinitions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roleDefinitions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureAuthorizationRoleDefinition resource interface
type AzureAuthorizationRoleDefinition interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Description() (string, error)
	Name() (string, error)
	IsCustom() (bool, error)
	Scopes() ([]interface{}, error)
	Permissions() ([]interface{}, error)
}

// mqlAzureAuthorizationRoleDefinition for the azure.authorization.roleDefinition resource
type mqlAzureAuthorizationRoleDefinition struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureAuthorizationRoleDefinition) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.authorization.roleDefinition resource
func newAzureAuthorizationRoleDefinition(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureAuthorizationRoleDefinition{runtime.NewResource("azure.authorization.roleDefinition")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isCustom":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"isCustom\" argument has the wrong type (expected type \"bool\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "permissions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"permissions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.authorization.roleDefinition with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureAuthorizationRoleDefinition) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isCustom"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"isCustom\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"scopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("permissions"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition\" resource without a \"permissions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition].Register")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition].Field")
	switch name {
	case "id":
		return s.Id()
	case "description":
		return s.Description()
	case "name":
		return s.Name()
	case "isCustom":
		return s.IsCustom()
	case "scopes":
		return s.Scopes()
	case "permissions":
		return s.Permissions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsCustom accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) IsCustom() (bool, error) {
	res, ok := s.Cache.Load("isCustom")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"isCustom\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"isCustom\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Permissions accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Permissions() ([]interface{}, error) {
	res, ok := s.Cache.Load("permissions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition\" failed: no value provided for static field \"permissions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition\" failed to cast field \"permissions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinition) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition].Compute")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition\" resource")
	}
}

// AzureAuthorizationRoleDefinitionPermission resource interface
type AzureAuthorizationRoleDefinitionPermission interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AllowedActions() ([]interface{}, error)
	DeniedActions() ([]interface{}, error)
	AllowedDataActions() ([]interface{}, error)
	DeniedDataActions() ([]interface{}, error)
}

// mqlAzureAuthorizationRoleDefinitionPermission for the azure.authorization.roleDefinition.permission resource
type mqlAzureAuthorizationRoleDefinitionPermission struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureAuthorizationRoleDefinitionPermission) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.authorization.roleDefinition.permission resource
func newAzureAuthorizationRoleDefinitionPermission(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureAuthorizationRoleDefinitionPermission{runtime.NewResource("azure.authorization.roleDefinition.permission")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"allowedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"deniedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "allowedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"allowedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"deniedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.authorization.roleDefinition.permission\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.authorization.roleDefinition.permission with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureAuthorizationRoleDefinitionPermission) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition.permission\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedActions"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition.permission\" resource without a \"allowedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedActions"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition.permission\" resource without a \"deniedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedDataActions"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition.permission\" resource without a \"allowedDataActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedDataActions"); !ok {
		return errors.New("Initialized \"azure.authorization.roleDefinition.permission\" resource without a \"deniedDataActions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition.permission].Register")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition.permission\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition.permission].Field")
	switch name {
	case "id":
		return s.Id()
	case "allowedActions":
		return s.AllowedActions()
	case "deniedActions":
		return s.DeniedActions()
	case "allowedDataActions":
		return s.AllowedDataActions()
	case "deniedDataActions":
		return s.DeniedDataActions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition.permission\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.authorization.roleDefinition.permission\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.authorization.roleDefinition.permission\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedActions accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) AllowedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition.permission\" failed: no value provided for static field \"allowedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition.permission\" failed to cast field \"allowedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedActions accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) DeniedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition.permission\" failed: no value provided for static field \"deniedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition.permission\" failed to cast field \"deniedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AllowedDataActions accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) AllowedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition.permission\" failed: no value provided for static field \"allowedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition.permission\" failed to cast field \"allowedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedDataActions accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) DeniedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.authorization.roleDefinition.permission\" failed: no value provided for static field \"deniedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.authorization.roleDefinition.permission\" failed to cast field \"deniedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureAuthorizationRoleDefinitionPermission) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.authorization.roleDefinition.permission].Compute")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.authorization.roleDefinition.permission\" resource")
	}
}

