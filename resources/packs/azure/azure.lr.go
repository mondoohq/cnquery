// Code generated by resources. DO NOT EDIT.
package azure

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("azuread", newAzuread)
	registry.AddFactory("azuread.user", newAzureadUser)
	registry.AddFactory("azuread.group", newAzureadGroup)
	registry.AddFactory("azuread.domain", newAzureadDomain)
	registry.AddFactory("azuread.application", newAzureadApplication)
	registry.AddFactory("azuread.serviceprincipal", newAzureadServiceprincipal)
	registry.AddFactory("azure", newAzure)
	registry.AddFactory("azure.subscription", newAzureSubscription)
	registry.AddFactory("azure.subscription.resource", newAzureSubscriptionResource)
	registry.AddFactory("azure.subscription.resourcegroup", newAzureSubscriptionResourcegroup)
	registry.AddFactory("azure.subscription.compute", newAzureSubscriptionCompute)
	registry.AddFactory("azure.subscription.compute.vm", newAzureSubscriptionComputeVm)
	registry.AddFactory("azure.subscription.compute.disk", newAzureSubscriptionComputeDisk)
	registry.AddFactory("azure.subscription.network", newAzureSubscriptionNetwork)
	registry.AddFactory("azure.subscription.network.interface", newAzureSubscriptionNetworkInterface)
	registry.AddFactory("azure.subscription.network.securitygroup", newAzureSubscriptionNetworkSecuritygroup)
	registry.AddFactory("azure.subscription.network.securityrule", newAzureSubscriptionNetworkSecurityrule)
	registry.AddFactory("azure.subscription.network.watcher", newAzureSubscriptionNetworkWatcher)
	registry.AddFactory("azure.subscription.network.watcher.flowlog", newAzureSubscriptionNetworkWatcherFlowlog)
	registry.AddFactory("azure.subscription.storage", newAzureSubscriptionStorage)
	registry.AddFactory("azure.subscription.storage.account", newAzureSubscriptionStorageAccount)
	registry.AddFactory("azure.subscription.storage.account.dataProtection", newAzureSubscriptionStorageAccountDataProtection)
	registry.AddFactory("azure.subscription.storage.account.blobService.properties", newAzureSubscriptionStorageAccountBlobServiceProperties)
	registry.AddFactory("azure.subscription.storage.account.queueService.properties", newAzureSubscriptionStorageAccountQueueServiceProperties)
	registry.AddFactory("azure.subscription.storage.account.tableService.properties", newAzureSubscriptionStorageAccountTableServiceProperties)
	registry.AddFactory("azure.subscription.storage.account.service.properties.metrics", newAzureSubscriptionStorageAccountServicePropertiesMetrics)
	registry.AddFactory("azure.subscription.storage.account.service.properties.retentionPolicy", newAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy)
	registry.AddFactory("azure.subscription.storage.account.service.properties.logging", newAzureSubscriptionStorageAccountServicePropertiesLogging)
	registry.AddFactory("azure.subscription.storage.container", newAzureSubscriptionStorageContainer)
	registry.AddFactory("azure.subscription.web", newAzureSubscriptionWeb)
	registry.AddFactory("azure.subscription.web.appsite", newAzureSubscriptionWebAppsite)
	registry.AddFactory("azure.subscription.web.appsiteauthsettings", newAzureSubscriptionWebAppsiteauthsettings)
	registry.AddFactory("azure.subscription.web.appsiteconfig", newAzureSubscriptionWebAppsiteconfig)
	registry.AddFactory("azure.subscription.sql", newAzureSubscriptionSql)
	registry.AddFactory("azure.subscription.sql.server", newAzureSubscriptionSqlServer)
	registry.AddFactory("azure.subscription.sql.server.vulnerabilityassessmentsettings", newAzureSubscriptionSqlServerVulnerabilityassessmentsettings)
	registry.AddFactory("azure.subscription.sql.server.administrator", newAzureSubscriptionSqlServerAdministrator)
	registry.AddFactory("azure.subscription.sql.database", newAzureSubscriptionSqlDatabase)
	registry.AddFactory("azure.subscription.sql.databaseusage", newAzureSubscriptionSqlDatabaseusage)
	registry.AddFactory("azure.subscription.postgresql", newAzureSubscriptionPostgresql)
	registry.AddFactory("azure.subscription.postgresql.server", newAzureSubscriptionPostgresqlServer)
	registry.AddFactory("azure.subscription.postgresql.database", newAzureSubscriptionPostgresqlDatabase)
	registry.AddFactory("azure.subscription.mysql", newAzureSubscriptionMysql)
	registry.AddFactory("azure.subscription.mysql.server", newAzureSubscriptionMysqlServer)
	registry.AddFactory("azure.subscription.mysql.database", newAzureSubscriptionMysqlDatabase)
	registry.AddFactory("azure.subscription.mysql.flexibleServer", newAzureSubscriptionMysqlFlexibleServer)
	registry.AddFactory("azure.subscription.mariadb", newAzureSubscriptionMariadb)
	registry.AddFactory("azure.subscription.mariadb.server", newAzureSubscriptionMariadbServer)
	registry.AddFactory("azure.subscription.mariadb.database", newAzureSubscriptionMariadbDatabase)
	registry.AddFactory("azure.subscription.sql.configuration", newAzureSubscriptionSqlConfiguration)
	registry.AddFactory("azure.subscription.sql.firewallrule", newAzureSubscriptionSqlFirewallrule)
	registry.AddFactory("azure.subscription.keyvault", newAzureSubscriptionKeyvault)
	registry.AddFactory("azure.subscription.keyvault.vault", newAzureSubscriptionKeyvaultVault)
	registry.AddFactory("azure.subscription.keyvault.key", newAzureSubscriptionKeyvaultKey)
	registry.AddFactory("azure.subscription.keyvault.certificate", newAzureSubscriptionKeyvaultCertificate)
	registry.AddFactory("azure.subscription.keyvault.secret", newAzureSubscriptionKeyvaultSecret)
	registry.AddFactory("azure.subscription.monitor", newAzureSubscriptionMonitor)
	registry.AddFactory("azure.subscription.monitor.activitylog", newAzureSubscriptionMonitorActivitylog)
	registry.AddFactory("azure.subscription.monitor.activitylog.alert", newAzureSubscriptionMonitorActivitylogAlert)
	registry.AddFactory("azure.subscription.monitor.logprofile", newAzureSubscriptionMonitorLogprofile)
	registry.AddFactory("azure.subscription.monitor.diagnosticsetting", newAzureSubscriptionMonitorDiagnosticsetting)
	registry.AddFactory("azure.subscription.cloudDefender", newAzureSubscriptionCloudDefender)
	registry.AddFactory("azure.subscription.cloudDefender.securityContact", newAzureSubscriptionCloudDefenderSecurityContact)
	registry.AddFactory("azure.subscription.authorization", newAzureSubscriptionAuthorization)
	registry.AddFactory("azure.subscription.authorization.roleDefinition", newAzureSubscriptionAuthorizationRoleDefinition)
	registry.AddFactory("azure.subscription.authorization.roleDefinition.permission", newAzureSubscriptionAuthorizationRoleDefinitionPermission)
}

// Azuread resource interface
type Azuread interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	ServicePrincipals() ([]interface{}, error)
}

// mqlAzuread for the azuread resource
type mqlAzuread struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzuread) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread resource
func newAzuread(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzuread{runtime.NewResource("azuread")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "servicePrincipals":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"servicePrincipals\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzuread) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzuread) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "servicePrincipals":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzuread) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "servicePrincipals":
		return s.ServicePrincipals()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlAzuread) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAzuread) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlAzuread) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlAzuread) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServicePrincipals accessor autogenerated
func (s *mqlAzuread) ServicePrincipals() ([]interface{}, error) {
	res, ok := s.Cache.Load("servicePrincipals")
	if !ok || !res.Valid {
		if err := s.ComputeServicePrincipals(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servicePrincipals")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"servicePrincipals\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servicePrincipals")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"servicePrincipals\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzuread) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].MqlCompute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "servicePrincipals":
		return s.ComputeServicePrincipals()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlAzuread) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAzuread) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlAzuread) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlAzuread) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServicePrincipals computer autogenerated
func (s *mqlAzuread) ComputeServicePrincipals() error {
	var err error
	if _, ok := s.Cache.Load("servicePrincipals"); ok {
		return nil
	}
	vres, err := s.GetServicePrincipals()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servicePrincipals", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadUser resource interface
type AzureadUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	GivenName() (string, error)
	Surname() (string, error)
	UserPrincipalName() (string, error)
	AccountEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	UserType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadUser for the azuread.user resource
type mqlAzureadUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.user resource
func newAzureadUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadUser{runtime.NewResource("azuread.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "surname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"surname\" argument has the wrong type (expected type \"string\")")
			}
		case "userPrincipalName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userPrincipalName\" argument has the wrong type (expected type \"string\")")
			}
		case "accountEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"accountEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "userType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("surname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"surname\". This field is required.")
	}
	if _, ok := s.Cache.Load("userPrincipalName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userPrincipalName\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountEnabled"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"accountEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mail\". This field is required.")
	}
	if _, ok := s.Cache.Load("userType"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "userType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "givenName":
		return s.GivenName()
	case "surname":
		return s.Surname()
	case "userPrincipalName":
		return s.UserPrincipalName()
	case "accountEnabled":
		return s.AccountEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "userType":
		return s.UserType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadUser) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlAzureadUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Surname accessor autogenerated
func (s *mqlAzureadUser) Surname() (string, error) {
	res, ok := s.Cache.Load("surname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"surname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"surname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserPrincipalName accessor autogenerated
func (s *mqlAzureadUser) UserPrincipalName() (string, error) {
	res, ok := s.Cache.Load("userPrincipalName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userPrincipalName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userPrincipalName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountEnabled accessor autogenerated
func (s *mqlAzureadUser) AccountEnabled() (bool, error) {
	res, ok := s.Cache.Load("accountEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.user\" failed: no value provided for static field \"accountEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.user\" failed to cast field \"accountEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadUser) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadUser) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadUser) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.user\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserType accessor autogenerated
func (s *mqlAzureadUser) UserType() (string, error) {
	res, ok := s.Cache.Load("userType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadUser) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.user\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.user\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].MqlCompute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "userType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadUser) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadUser) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadGroup resource interface
type AzureadGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	SecurityEnabled() (bool, error)
	MailEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	Properties() (interface{}, error)
	Members() ([]interface{}, error)
}

// mqlAzureadGroup for the azuread.group resource
type mqlAzureadGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.group resource
func newAzureadGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadGroup{runtime.NewResource("azuread.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "securityEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"securityEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"securityEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "properties":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "securityEnabled":
		return s.SecurityEnabled()
	case "mailEnabled":
		return s.MailEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "properties":
		return s.Properties()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadGroup) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityEnabled accessor autogenerated
func (s *mqlAzureadGroup) SecurityEnabled() (bool, error) {
	res, ok := s.Cache.Load("securityEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"securityEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"securityEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailEnabled accessor autogenerated
func (s *mqlAzureadGroup) MailEnabled() (bool, error) {
	res, ok := s.Cache.Load("mailEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"mailEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"mailEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadGroup) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadGroup) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadGroup) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.group\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadGroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlAzureadGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].MqlCompute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "properties":
		return s.ComputeProperties()
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadGroup) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadGroup) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMembers computer autogenerated
func (s *mqlAzureadGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadDomain resource interface
type AzureadDomain interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsVerified() (bool, error)
	IsDefault() (bool, error)
	AuthenticationType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadDomain for the azuread.domain resource
type mqlAzureadDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.domain resource
func newAzureadDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadDomain{runtime.NewResource("azuread.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "authenticationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"authenticationType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isVerified"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationType"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"authenticationType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Register")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.domain].Field")
	switch name {
	case "name":
		return s.Name()
	case "isVerified":
		return s.IsVerified()
	case "isDefault":
		return s.IsDefault()
	case "authenticationType":
		return s.AuthenticationType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAzureadDomain) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsVerified accessor autogenerated
func (s *mqlAzureadDomain) IsVerified() (bool, error) {
	res, ok := s.Cache.Load("isVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlAzureadDomain) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AuthenticationType accessor autogenerated
func (s *mqlAzureadDomain) AuthenticationType() (string, error) {
	res, ok := s.Cache.Load("authenticationType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"authenticationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"authenticationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadDomain) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.domain\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.domain\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadDomain) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].MqlCompute")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadDomain) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadApplication resource interface
type AzureadApplication interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadApplication for the azuread.application resource
type mqlAzureadApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.application resource
func newAzureadApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadApplication{runtime.NewResource("azuread.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.application\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.application].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadApplication) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].MqlCompute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// AzureadServiceprincipal resource interface
type AzureadServiceprincipal interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadServiceprincipal for the azuread.serviceprincipal resource
type mqlAzureadServiceprincipal struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadServiceprincipal) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.serviceprincipal resource
func newAzureadServiceprincipal(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadServiceprincipal{runtime.NewResource("azuread.serviceprincipal")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.serviceprincipal with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadServiceprincipal) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.serviceprincipal\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadServiceprincipal) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadServiceprincipal) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadServiceprincipal) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.serviceprincipal\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.serviceprincipal\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadServiceprincipal) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].MqlCompute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Azure resource interface
type Azure interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Resources() ([]interface{}, error)
	ResourceGroups() ([]interface{}, error)
	Subscription() (AzureSubscription, error)
}

// mqlAzure for the azure resource
type mqlAzure struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzure) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure resource
func newAzure(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzure{runtime.NewResource("azure")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"resources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "resourceGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"resourceGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "subscription":
			if _, ok := val.(AzureSubscription); !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"subscription\" argument has the wrong type (expected type \"AzureSubscription\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzure) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzure) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure].Register")
	switch name {
	case "resources":
		return nil
	case "resourceGroups":
		return nil
	case "subscription":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzure) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure].Field")
	switch name {
	case "resources":
		return s.Resources()
	case "resourceGroups":
		return s.ResourceGroups()
	case "subscription":
		return s.Subscription()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// Resources accessor autogenerated
func (s *mqlAzure) Resources() ([]interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		if err := s.ComputeResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resources")
		if !ok {
			return nil, errors.New("\"azure\" calculated \"resources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure\" failed to cast field \"resources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ResourceGroups accessor autogenerated
func (s *mqlAzure) ResourceGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("resourceGroups")
	if !ok || !res.Valid {
		if err := s.ComputeResourceGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resourceGroups")
		if !ok {
			return nil, errors.New("\"azure\" calculated \"resourceGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resourceGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure\" failed to cast field \"resourceGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Subscription accessor autogenerated
func (s *mqlAzure) Subscription() (AzureSubscription, error) {
	res, ok := s.Cache.Load("subscription")
	if !ok || !res.Valid {
		if err := s.ComputeSubscription(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subscription")
		if !ok {
			return nil, errors.New("\"azure\" calculated \"subscription\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscription")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscription)
	if !ok {
		return nil, fmt.Errorf("\"azure\" failed to cast field \"subscription\" to the right type (AzureSubscription): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzure) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure].MqlCompute")
	switch name {
	case "resources":
		return s.ComputeResources()
	case "resourceGroups":
		return s.ComputeResourceGroups()
	case "subscription":
		return s.ComputeSubscription()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure\" resource")
	}
}

// ComputeResources computer autogenerated
func (s *mqlAzure) ComputeResources() error {
	var err error
	if _, ok := s.Cache.Load("resources"); ok {
		return nil
	}
	vres, err := s.GetResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeResourceGroups computer autogenerated
func (s *mqlAzure) ComputeResourceGroups() error {
	var err error
	if _, ok := s.Cache.Load("resourceGroups"); ok {
		return nil
	}
	vres, err := s.GetResourceGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resourceGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubscription computer autogenerated
func (s *mqlAzure) ComputeSubscription() error {
	var err error
	if _, ok := s.Cache.Load("subscription"); ok {
		return nil
	}
	vres, err := s.GetSubscription()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscription", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscription resource interface
type AzureSubscription interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	SubscriptionId() (string, error)
	TenantId() (string, error)
	ManagedByTenants() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
	State() (string, error)
	AuthorizationSource() (string, error)
	SubscriptionsPolicies() (interface{}, error)
	ResourceGroups() ([]interface{}, error)
	Compute() (AzureSubscriptionCompute, error)
	Network() (AzureSubscriptionNetwork, error)
	Storage() (AzureSubscriptionStorage, error)
	Web() (AzureSubscriptionWeb, error)
	Sql() (AzureSubscriptionSql, error)
	MySql() (AzureSubscriptionMysql, error)
	PostgreSql() (AzureSubscriptionPostgresql, error)
	MariaDb() (AzureSubscriptionMariadb, error)
	KeyVault() (AzureSubscriptionKeyvault, error)
	Authorization() (AzureSubscriptionAuthorization, error)
	Monitor() (AzureSubscriptionMonitor, error)
	CloudDefender() (AzureSubscriptionCloudDefender, error)
	Resources() ([]interface{}, error)
}

// mqlAzureSubscription for the azure.subscription resource
type mqlAzureSubscription struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscription) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription resource
func newAzureSubscription(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscription{runtime.NewResource("azure.subscription")}
	var existing AzureSubscription
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByTenants":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"managedByTenants\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "authorizationSource":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"authorizationSource\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionsPolicies":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"subscriptionsPolicies\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "resourceGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"resourceGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "compute":
			if _, ok := val.(AzureSubscriptionCompute); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"compute\" argument has the wrong type (expected type \"AzureSubscriptionCompute\")")
			}
		case "network":
			if _, ok := val.(AzureSubscriptionNetwork); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"network\" argument has the wrong type (expected type \"AzureSubscriptionNetwork\")")
			}
		case "storage":
			if _, ok := val.(AzureSubscriptionStorage); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"storage\" argument has the wrong type (expected type \"AzureSubscriptionStorage\")")
			}
		case "web":
			if _, ok := val.(AzureSubscriptionWeb); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"web\" argument has the wrong type (expected type \"AzureSubscriptionWeb\")")
			}
		case "sql":
			if _, ok := val.(AzureSubscriptionSql); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"sql\" argument has the wrong type (expected type \"AzureSubscriptionSql\")")
			}
		case "mySql":
			if _, ok := val.(AzureSubscriptionMysql); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"mySql\" argument has the wrong type (expected type \"AzureSubscriptionMysql\")")
			}
		case "postgreSql":
			if _, ok := val.(AzureSubscriptionPostgresql); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"postgreSql\" argument has the wrong type (expected type \"AzureSubscriptionPostgresql\")")
			}
		case "mariaDb":
			if _, ok := val.(AzureSubscriptionMariadb); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"mariaDb\" argument has the wrong type (expected type \"AzureSubscriptionMariadb\")")
			}
		case "keyVault":
			if _, ok := val.(AzureSubscriptionKeyvault); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"keyVault\" argument has the wrong type (expected type \"AzureSubscriptionKeyvault\")")
			}
		case "authorization":
			if _, ok := val.(AzureSubscriptionAuthorization); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"authorization\" argument has the wrong type (expected type \"AzureSubscriptionAuthorization\")")
			}
		case "monitor":
			if _, ok := val.(AzureSubscriptionMonitor); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"monitor\" argument has the wrong type (expected type \"AzureSubscriptionMonitor\")")
			}
		case "cloudDefender":
			if _, ok := val.(AzureSubscriptionCloudDefender); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"cloudDefender\" argument has the wrong type (expected type \"AzureSubscriptionCloudDefender\")")
			}
		case "resources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"resources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscription) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"subscriptionId\". This field is required.")
	}
	if _, ok := s.Cache.Load("tenantId"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"tenantId\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedByTenants"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"managedByTenants\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("authorizationSource"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"authorizationSource\". This field is required.")
	}
	if _, ok := s.Cache.Load("subscriptionsPolicies"); !ok {
		return errors.New("Initialized \"azure.subscription\" resource without a \"subscriptionsPolicies\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscription) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "subscriptionId":
		return nil
	case "tenantId":
		return nil
	case "managedByTenants":
		return nil
	case "tags":
		return nil
	case "state":
		return nil
	case "authorizationSource":
		return nil
	case "subscriptionsPolicies":
		return nil
	case "resourceGroups":
		return nil
	case "compute":
		return nil
	case "network":
		return nil
	case "storage":
		return nil
	case "web":
		return nil
	case "sql":
		return nil
	case "mySql":
		return nil
	case "postgreSql":
		return nil
	case "mariaDb":
		return nil
	case "keyVault":
		return nil
	case "authorization":
		return nil
	case "monitor":
		return nil
	case "cloudDefender":
		return nil
	case "resources":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscription) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "subscriptionId":
		return s.SubscriptionId()
	case "tenantId":
		return s.TenantId()
	case "managedByTenants":
		return s.ManagedByTenants()
	case "tags":
		return s.Tags()
	case "state":
		return s.State()
	case "authorizationSource":
		return s.AuthorizationSource()
	case "subscriptionsPolicies":
		return s.SubscriptionsPolicies()
	case "resourceGroups":
		return s.ResourceGroups()
	case "compute":
		return s.Compute()
	case "network":
		return s.Network()
	case "storage":
		return s.Storage()
	case "web":
		return s.Web()
	case "sql":
		return s.Sql()
	case "mySql":
		return s.MySql()
	case "postgreSql":
		return s.PostgreSql()
	case "mariaDb":
		return s.MariaDb()
	case "keyVault":
		return s.KeyVault()
	case "authorization":
		return s.Authorization()
	case "monitor":
		return s.Monitor()
	case "cloudDefender":
		return s.CloudDefender()
	case "resources":
		return s.Resources()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscription) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscription) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscription) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzureSubscription) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"tenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByTenants accessor autogenerated
func (s *mqlAzureSubscription) ManagedByTenants() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByTenants")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription\" failed: no value provided for static field \"managedByTenants\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"managedByTenants\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscription) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAzureSubscription) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AuthorizationSource accessor autogenerated
func (s *mqlAzureSubscription) AuthorizationSource() (string, error) {
	res, ok := s.Cache.Load("authorizationSource")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription\" failed: no value provided for static field \"authorizationSource\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"authorizationSource\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionsPolicies accessor autogenerated
func (s *mqlAzureSubscription) SubscriptionsPolicies() (interface{}, error) {
	res, ok := s.Cache.Load("subscriptionsPolicies")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription\" failed: no value provided for static field \"subscriptionsPolicies\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"subscriptionsPolicies\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ResourceGroups accessor autogenerated
func (s *mqlAzureSubscription) ResourceGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("resourceGroups")
	if !ok || !res.Valid {
		if err := s.ComputeResourceGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resourceGroups")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"resourceGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resourceGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"resourceGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscription) Compute() (AzureSubscriptionCompute, error) {
	res, ok := s.Cache.Load("compute")
	if !ok || !res.Valid {
		if err := s.ComputeCompute(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("compute")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"compute\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "compute")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionCompute)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"compute\" to the right type (AzureSubscriptionCompute): %#v", res)
	}
	return tres, nil
}

// Network accessor autogenerated
func (s *mqlAzureSubscription) Network() (AzureSubscriptionNetwork, error) {
	res, ok := s.Cache.Load("network")
	if !ok || !res.Valid {
		if err := s.ComputeNetwork(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("network")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"network\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "network")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionNetwork)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"network\" to the right type (AzureSubscriptionNetwork): %#v", res)
	}
	return tres, nil
}

// Storage accessor autogenerated
func (s *mqlAzureSubscription) Storage() (AzureSubscriptionStorage, error) {
	res, ok := s.Cache.Load("storage")
	if !ok || !res.Valid {
		if err := s.ComputeStorage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("storage")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"storage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "storage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorage)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"storage\" to the right type (AzureSubscriptionStorage): %#v", res)
	}
	return tres, nil
}

// Web accessor autogenerated
func (s *mqlAzureSubscription) Web() (AzureSubscriptionWeb, error) {
	res, ok := s.Cache.Load("web")
	if !ok || !res.Valid {
		if err := s.ComputeWeb(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("web")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"web\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "web")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWeb)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"web\" to the right type (AzureSubscriptionWeb): %#v", res)
	}
	return tres, nil
}

// Sql accessor autogenerated
func (s *mqlAzureSubscription) Sql() (AzureSubscriptionSql, error) {
	res, ok := s.Cache.Load("sql")
	if !ok || !res.Valid {
		if err := s.ComputeSql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("sql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"sql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "sql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionSql)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"sql\" to the right type (AzureSubscriptionSql): %#v", res)
	}
	return tres, nil
}

// MySql accessor autogenerated
func (s *mqlAzureSubscription) MySql() (AzureSubscriptionMysql, error) {
	res, ok := s.Cache.Load("mySql")
	if !ok || !res.Valid {
		if err := s.ComputeMySql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mySql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"mySql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mySql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMysql)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"mySql\" to the right type (AzureSubscriptionMysql): %#v", res)
	}
	return tres, nil
}

// PostgreSql accessor autogenerated
func (s *mqlAzureSubscription) PostgreSql() (AzureSubscriptionPostgresql, error) {
	res, ok := s.Cache.Load("postgreSql")
	if !ok || !res.Valid {
		if err := s.ComputePostgreSql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("postgreSql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"postgreSql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "postgreSql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionPostgresql)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"postgreSql\" to the right type (AzureSubscriptionPostgresql): %#v", res)
	}
	return tres, nil
}

// MariaDb accessor autogenerated
func (s *mqlAzureSubscription) MariaDb() (AzureSubscriptionMariadb, error) {
	res, ok := s.Cache.Load("mariaDb")
	if !ok || !res.Valid {
		if err := s.ComputeMariaDb(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mariaDb")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"mariaDb\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mariaDb")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMariadb)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"mariaDb\" to the right type (AzureSubscriptionMariadb): %#v", res)
	}
	return tres, nil
}

// KeyVault accessor autogenerated
func (s *mqlAzureSubscription) KeyVault() (AzureSubscriptionKeyvault, error) {
	res, ok := s.Cache.Load("keyVault")
	if !ok || !res.Valid {
		if err := s.ComputeKeyVault(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keyVault")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"keyVault\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyVault")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionKeyvault)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"keyVault\" to the right type (AzureSubscriptionKeyvault): %#v", res)
	}
	return tres, nil
}

// Authorization accessor autogenerated
func (s *mqlAzureSubscription) Authorization() (AzureSubscriptionAuthorization, error) {
	res, ok := s.Cache.Load("authorization")
	if !ok || !res.Valid {
		if err := s.ComputeAuthorization(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authorization")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"authorization\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authorization")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionAuthorization)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"authorization\" to the right type (AzureSubscriptionAuthorization): %#v", res)
	}
	return tres, nil
}

// Monitor accessor autogenerated
func (s *mqlAzureSubscription) Monitor() (AzureSubscriptionMonitor, error) {
	res, ok := s.Cache.Load("monitor")
	if !ok || !res.Valid {
		if err := s.ComputeMonitor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("monitor")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"monitor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "monitor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMonitor)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"monitor\" to the right type (AzureSubscriptionMonitor): %#v", res)
	}
	return tres, nil
}

// CloudDefender accessor autogenerated
func (s *mqlAzureSubscription) CloudDefender() (AzureSubscriptionCloudDefender, error) {
	res, ok := s.Cache.Load("cloudDefender")
	if !ok || !res.Valid {
		if err := s.ComputeCloudDefender(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cloudDefender")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"cloudDefender\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cloudDefender")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionCloudDefender)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"cloudDefender\" to the right type (AzureSubscriptionCloudDefender): %#v", res)
	}
	return tres, nil
}

// Resources accessor autogenerated
func (s *mqlAzureSubscription) Resources() ([]interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		if err := s.ComputeResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resources")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"resources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"resources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscription) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "subscriptionId":
		return nil
	case "tenantId":
		return nil
	case "managedByTenants":
		return nil
	case "tags":
		return nil
	case "state":
		return nil
	case "authorizationSource":
		return nil
	case "subscriptionsPolicies":
		return nil
	case "resourceGroups":
		return s.ComputeResourceGroups()
	case "compute":
		return s.ComputeCompute()
	case "network":
		return s.ComputeNetwork()
	case "storage":
		return s.ComputeStorage()
	case "web":
		return s.ComputeWeb()
	case "sql":
		return s.ComputeSql()
	case "mySql":
		return s.ComputeMySql()
	case "postgreSql":
		return s.ComputePostgreSql()
	case "mariaDb":
		return s.ComputeMariaDb()
	case "keyVault":
		return s.ComputeKeyVault()
	case "authorization":
		return s.ComputeAuthorization()
	case "monitor":
		return s.ComputeMonitor()
	case "cloudDefender":
		return s.ComputeCloudDefender()
	case "resources":
		return s.ComputeResources()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// ComputeResourceGroups computer autogenerated
func (s *mqlAzureSubscription) ComputeResourceGroups() error {
	var err error
	if _, ok := s.Cache.Load("resourceGroups"); ok {
		return nil
	}
	vres, err := s.GetResourceGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resourceGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCompute computer autogenerated
func (s *mqlAzureSubscription) ComputeCompute() error {
	var err error
	if _, ok := s.Cache.Load("compute"); ok {
		return nil
	}
	vres, err := s.GetCompute()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("compute", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetwork computer autogenerated
func (s *mqlAzureSubscription) ComputeNetwork() error {
	var err error
	if _, ok := s.Cache.Load("network"); ok {
		return nil
	}
	vres, err := s.GetNetwork()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("network", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStorage computer autogenerated
func (s *mqlAzureSubscription) ComputeStorage() error {
	var err error
	if _, ok := s.Cache.Load("storage"); ok {
		return nil
	}
	vres, err := s.GetStorage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("storage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWeb computer autogenerated
func (s *mqlAzureSubscription) ComputeWeb() error {
	var err error
	if _, ok := s.Cache.Load("web"); ok {
		return nil
	}
	vres, err := s.GetWeb()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("web", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSql computer autogenerated
func (s *mqlAzureSubscription) ComputeSql() error {
	var err error
	if _, ok := s.Cache.Load("sql"); ok {
		return nil
	}
	vres, err := s.GetSql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("sql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMySql computer autogenerated
func (s *mqlAzureSubscription) ComputeMySql() error {
	var err error
	if _, ok := s.Cache.Load("mySql"); ok {
		return nil
	}
	vres, err := s.GetMySql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mySql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePostgreSql computer autogenerated
func (s *mqlAzureSubscription) ComputePostgreSql() error {
	var err error
	if _, ok := s.Cache.Load("postgreSql"); ok {
		return nil
	}
	vres, err := s.GetPostgreSql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("postgreSql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMariaDb computer autogenerated
func (s *mqlAzureSubscription) ComputeMariaDb() error {
	var err error
	if _, ok := s.Cache.Load("mariaDb"); ok {
		return nil
	}
	vres, err := s.GetMariaDb()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mariaDb", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeyVault computer autogenerated
func (s *mqlAzureSubscription) ComputeKeyVault() error {
	var err error
	if _, ok := s.Cache.Load("keyVault"); ok {
		return nil
	}
	vres, err := s.GetKeyVault()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyVault", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthorization computer autogenerated
func (s *mqlAzureSubscription) ComputeAuthorization() error {
	var err error
	if _, ok := s.Cache.Load("authorization"); ok {
		return nil
	}
	vres, err := s.GetAuthorization()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authorization", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMonitor computer autogenerated
func (s *mqlAzureSubscription) ComputeMonitor() error {
	var err error
	if _, ok := s.Cache.Load("monitor"); ok {
		return nil
	}
	vres, err := s.GetMonitor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("monitor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCloudDefender computer autogenerated
func (s *mqlAzureSubscription) ComputeCloudDefender() error {
	var err error
	if _, ok := s.Cache.Load("cloudDefender"); ok {
		return nil
	}
	vres, err := s.GetCloudDefender()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cloudDefender", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeResources computer autogenerated
func (s *mqlAzureSubscription) ComputeResources() error {
	var err error
	if _, ok := s.Cache.Load("resources"); ok {
		return nil
	}
	vres, err := s.GetResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionResource resource interface
type AzureSubscriptionResource interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	Sku() (interface{}, error)
	Plan() (interface{}, error)
	Identity() (interface{}, error)
	ProvisioningState() (string, error)
	CreatedTime() (*time.Time, error)
	ChangedTime() (*time.Time, error)
}

// mqlAzureSubscriptionResource for the azure.subscription.resource resource
type mqlAzureSubscriptionResource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionResource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.resource resource
func newAzureSubscriptionResource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionResource{runtime.NewResource("azure.subscription.resource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "plan":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"plan\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "createdTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"createdTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "changedTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"changedTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.resource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionResource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("plan"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"plan\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdTime"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"createdTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("changedTime"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"changedTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionResource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionResource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "sku":
		return s.Sku()
	case "plan":
		return s.Plan()
	case "identity":
		return s.Identity()
	case "provisioningState":
		return s.ProvisioningState()
	case "createdTime":
		return s.CreatedTime()
	case "changedTime":
		return s.ChangedTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionResource) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionResource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionResource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionResource) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionResource) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionResource) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionResource) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionResource) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Plan accessor autogenerated
func (s *mqlAzureSubscriptionResource) Plan() (interface{}, error) {
	res, ok := s.Cache.Load("plan")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"plan\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"plan\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionResource) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionResource) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedTime accessor autogenerated
func (s *mqlAzureSubscriptionResource) CreatedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"createdTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"createdTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ChangedTime accessor autogenerated
func (s *mqlAzureSubscriptionResource) ChangedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("changedTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"changedTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"changedTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionResource) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// AzureSubscriptionResourcegroup resource interface
type AzureSubscriptionResourcegroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ProvisioningState() (string, error)
}

// mqlAzureSubscriptionResourcegroup for the azure.subscription.resourcegroup resource
type mqlAzureSubscriptionResourcegroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionResourcegroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.resourcegroup resource
func newAzureSubscriptionResourcegroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionResourcegroup{runtime.NewResource("azure.subscription.resourcegroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.resourcegroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionResourcegroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"provisioningState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "provisioningState":
		return s.ProvisioningState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// AzureSubscriptionCompute resource interface
type AzureSubscriptionCompute interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vms() ([]interface{}, error)
	Disks() ([]interface{}, error)
}

// mqlAzureSubscriptionCompute for the azure.subscription.compute resource
type mqlAzureSubscriptionCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.compute resource
func newAzureSubscriptionCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCompute{runtime.NewResource("azure.subscription.compute")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCompute) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute].Register")
	switch name {
	case "vms":
		return nil
	case "disks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute].Field")
	switch name {
	case "vms":
		return s.Vms()
	case "disks":
		return s.Disks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.compute\" resource")
	}
}

// Vms accessor autogenerated
func (s *mqlAzureSubscriptionCompute) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"azure.subscription.compute\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlAzureSubscriptionCompute) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"azure.subscription.compute\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCompute) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute].MqlCompute")
	switch name {
	case "vms":
		return s.ComputeVms()
	case "disks":
		return s.ComputeDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute\" resource")
	}
}

// ComputeVms computer autogenerated
func (s *mqlAzureSubscriptionCompute) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlAzureSubscriptionCompute) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionComputeVm resource interface
type AzureSubscriptionComputeVm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Extensions() ([]interface{}, error)
	OsDisk() (AzureSubscriptionComputeDisk, error)
	DataDisks() ([]interface{}, error)
}

// mqlAzureSubscriptionComputeVm for the azure.subscription.compute.vm resource
type mqlAzureSubscriptionComputeVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionComputeVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.compute.vm resource
func newAzureSubscriptionComputeVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionComputeVm{runtime.NewResource("azure.subscription.compute.vm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "extensions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"extensions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "osDisk":
			if _, ok := val.(AzureSubscriptionComputeDisk); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"osDisk\" argument has the wrong type (expected type \"AzureSubscriptionComputeDisk\")")
			}
		case "dataDisks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"dataDisks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.compute.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionComputeVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.vm\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.vm].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return nil
	case "osDisk":
		return nil
	case "dataDisks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.vm].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "extensions":
		return s.Extensions()
	case "osDisk":
		return s.OsDisk()
	case "dataDisks":
		return s.DataDisks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.compute.vm\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.vm\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Extensions accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) Extensions() ([]interface{}, error) {
	res, ok := s.Cache.Load("extensions")
	if !ok || !res.Valid {
		if err := s.ComputeExtensions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("extensions")
		if !ok {
			return nil, errors.New("\"azure.subscription.compute.vm\" calculated \"extensions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "extensions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"extensions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OsDisk accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) OsDisk() (AzureSubscriptionComputeDisk, error) {
	res, ok := s.Cache.Load("osDisk")
	if !ok || !res.Valid {
		if err := s.ComputeOsDisk(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("osDisk")
		if !ok {
			return nil, errors.New("\"azure.subscription.compute.vm\" calculated \"osDisk\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "osDisk")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionComputeDisk)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"osDisk\" to the right type (AzureSubscriptionComputeDisk): %#v", res)
	}
	return tres, nil
}

// DataDisks accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) DataDisks() ([]interface{}, error) {
	res, ok := s.Cache.Load("dataDisks")
	if !ok || !res.Valid {
		if err := s.ComputeDataDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataDisks")
		if !ok {
			return nil, errors.New("\"azure.subscription.compute.vm\" calculated \"dataDisks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataDisks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.vm\" failed to cast field \"dataDisks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionComputeVm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.vm].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return s.ComputeExtensions()
	case "osDisk":
		return s.ComputeOsDisk()
	case "dataDisks":
		return s.ComputeDataDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute.vm\" resource")
	}
}

// ComputeExtensions computer autogenerated
func (s *mqlAzureSubscriptionComputeVm) ComputeExtensions() error {
	var err error
	if _, ok := s.Cache.Load("extensions"); ok {
		return nil
	}
	vres, err := s.GetExtensions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("extensions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOsDisk computer autogenerated
func (s *mqlAzureSubscriptionComputeVm) ComputeOsDisk() error {
	var err error
	if _, ok := s.Cache.Load("osDisk"); ok {
		return nil
	}
	vres, err := s.GetOsDisk()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("osDisk", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataDisks computer autogenerated
func (s *mqlAzureSubscriptionComputeVm) ComputeDataDisks() error {
	var err error
	if _, ok := s.Cache.Load("dataDisks"); ok {
		return nil
	}
	vres, err := s.GetDataDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataDisks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionComputeDisk resource interface
type AzureSubscriptionComputeDisk interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ManagedByExtended() ([]interface{}, error)
	Zones() ([]interface{}, error)
	Sku() (interface{}, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionComputeDisk for the azure.subscription.compute.disk resource
type mqlAzureSubscriptionComputeDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionComputeDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.compute.disk resource
func newAzureSubscriptionComputeDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionComputeDisk{runtime.NewResource("azure.subscription.compute.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByExtended":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"managedByExtended\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.compute.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.compute.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionComputeDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedByExtended"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"managedByExtended\". This field is required.")
	}
	if _, ok := s.Cache.Load("zones"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"zones\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.compute.disk\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "managedByExtended":
		return s.ManagedByExtended()
	case "zones":
		return s.Zones()
	case "sku":
		return s.Sku()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.compute.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByExtended accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) ManagedByExtended() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByExtended")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"managedByExtended\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"managedByExtended\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"zones\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.compute.disk\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.compute.disk\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionComputeDisk) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.compute.disk].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.compute.disk\" resource")
	}
}

// AzureSubscriptionNetwork resource interface
type AzureSubscriptionNetwork interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Interfaces() ([]interface{}, error)
	SecurityGroups() ([]interface{}, error)
	Watchers() ([]interface{}, error)
}

// mqlAzureSubscriptionNetwork for the azure.subscription.network resource
type mqlAzureSubscriptionNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network resource
func newAzureSubscriptionNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetwork{runtime.NewResource("azure.subscription.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "watchers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network\", its \"watchers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetwork) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network].Register")
	switch name {
	case "interfaces":
		return nil
	case "securityGroups":
		return nil
	case "watchers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network].Field")
	switch name {
	case "interfaces":
		return s.Interfaces()
	case "securityGroups":
		return s.SecurityGroups()
	case "watchers":
		return s.Watchers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network\" resource")
	}
}

// Interfaces accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		if err := s.ComputeInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("interfaces")
		if !ok {
			return nil, errors.New("\"azure.subscription.network\" calculated \"interfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "interfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityGroups")
		if !ok {
			return nil, errors.New("\"azure.subscription.network\" calculated \"securityGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Watchers accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) Watchers() ([]interface{}, error) {
	res, ok := s.Cache.Load("watchers")
	if !ok || !res.Valid {
		if err := s.ComputeWatchers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("watchers")
		if !ok {
			return nil, errors.New("\"azure.subscription.network\" calculated \"watchers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "watchers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network\" failed to cast field \"watchers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetwork) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network].MqlCompute")
	switch name {
	case "interfaces":
		return s.ComputeInterfaces()
	case "securityGroups":
		return s.ComputeSecurityGroups()
	case "watchers":
		return s.ComputeWatchers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network\" resource")
	}
}

// ComputeInterfaces computer autogenerated
func (s *mqlAzureSubscriptionNetwork) ComputeInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("interfaces"); ok {
		return nil
	}
	vres, err := s.GetInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("interfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityGroups computer autogenerated
func (s *mqlAzureSubscriptionNetwork) ComputeSecurityGroups() error {
	var err error
	if _, ok := s.Cache.Load("securityGroups"); ok {
		return nil
	}
	vres, err := s.GetSecurityGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWatchers computer autogenerated
func (s *mqlAzureSubscriptionNetwork) ComputeWatchers() error {
	var err error
	if _, ok := s.Cache.Load("watchers"); ok {
		return nil
	}
	vres, err := s.GetWatchers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("watchers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkInterface resource interface
type AzureSubscriptionNetworkInterface interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Vm() (AzureSubscriptionComputeVm, error)
}

// mqlAzureSubscriptionNetworkInterface for the azure.subscription.network.interface resource
type mqlAzureSubscriptionNetworkInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network.interface resource
func newAzureSubscriptionNetworkInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkInterface{runtime.NewResource("azure.subscription.network.interface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vm":
			if _, ok := val.(AzureSubscriptionComputeVm); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"vm\" argument has the wrong type (expected type \"AzureSubscriptionComputeVm\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.interface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network.interface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.network.interface\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.interface].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.interface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.interface].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "vm":
		return s.Vm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network.interface\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.interface\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Vm accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) Vm() (AzureSubscriptionComputeVm, error) {
	res, ok := s.Cache.Load("vm")
	if !ok || !res.Valid {
		if err := s.ComputeVm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vm")
		if !ok {
			return nil, errors.New("\"azure.subscription.network.interface\" calculated \"vm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionComputeVm)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.interface\" failed to cast field \"vm\" to the right type (AzureSubscriptionComputeVm): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.interface].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return s.ComputeVm()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.interface\" resource")
	}
}

// ComputeVm computer autogenerated
func (s *mqlAzureSubscriptionNetworkInterface) ComputeVm() error {
	var err error
	if _, ok := s.Cache.Load("vm"); ok {
		return nil
	}
	vres, err := s.GetVm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkSecuritygroup resource interface
type AzureSubscriptionNetworkSecuritygroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Interfaces() ([]interface{}, error)
	SecurityRules() ([]interface{}, error)
	DefaultSecurityRules() ([]interface{}, error)
}

// mqlAzureSubscriptionNetworkSecuritygroup for the azure.subscription.network.securitygroup resource
type mqlAzureSubscriptionNetworkSecuritygroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkSecuritygroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network.securitygroup resource
func newAzureSubscriptionNetworkSecuritygroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkSecuritygroup{runtime.NewResource("azure.subscription.network.securitygroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"securityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"defaultSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securitygroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network.securitygroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkSecuritygroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaces"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"interfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityRules"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"securityRules\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecurityRules"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securitygroup\" resource without a \"defaultSecurityRules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securitygroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.securitygroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securitygroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "interfaces":
		return s.Interfaces()
	case "securityRules":
		return s.SecurityRules()
	case "defaultSecurityRules":
		return s.DefaultSecurityRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network.securitygroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"interfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityRules accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) SecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"securityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"securityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultSecurityRules accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) DefaultSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("defaultSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securitygroup\" failed: no value provided for static field \"defaultSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securitygroup\" failed to cast field \"defaultSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecuritygroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securitygroup].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.securitygroup\" resource")
	}
}

// AzureSubscriptionNetworkSecurityrule resource interface
type AzureSubscriptionNetworkSecurityrule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	DestinationPortRange() ([]interface{}, error)
}

// mqlAzureSubscriptionNetworkSecurityrule for the azure.subscription.network.securityrule resource
type mqlAzureSubscriptionNetworkSecurityrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkSecurityrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network.securityrule resource
func newAzureSubscriptionNetworkSecurityrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkSecurityrule{runtime.NewResource("azure.subscription.network.securityrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "destinationPortRange":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"destinationPortRange\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.securityrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network.securityrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkSecurityrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securityrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securityrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securityrule\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securityrule\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationPortRange"); !ok {
		return errors.New("Initialized \"azure.subscription.network.securityrule\" resource without a \"destinationPortRange\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securityrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.securityrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securityrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "destinationPortRange":
		return s.DestinationPortRange()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network.securityrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securityrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securityrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securityrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securityrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.securityrule\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.securityrule\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securityrule\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securityrule\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationPortRange accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) DestinationPortRange() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationPortRange")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.securityrule\" failed: no value provided for static field \"destinationPortRange\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.securityrule\" failed to cast field \"destinationPortRange\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkSecurityrule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.securityrule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.securityrule\" resource")
	}
}

// AzureSubscriptionNetworkWatcher resource interface
type AzureSubscriptionNetworkWatcher interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	FlowLogs() ([]interface{}, error)
	ProvisioningState() (string, error)
}

// mqlAzureSubscriptionNetworkWatcher for the azure.subscription.network.watcher resource
type mqlAzureSubscriptionNetworkWatcher struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkWatcher) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network.watcher resource
func newAzureSubscriptionNetworkWatcher(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkWatcher{runtime.NewResource("azure.subscription.network.watcher")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "flowLogs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"flowLogs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network.watcher with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkWatcher) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher\" resource without a \"provisioningState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "flowLogs":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.watcher\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "flowLogs":
		return s.FlowLogs()
	case "provisioningState":
		return s.ProvisioningState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network.watcher\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FlowLogs accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) FlowLogs() ([]interface{}, error) {
	res, ok := s.Cache.Load("flowLogs")
	if !ok || !res.Valid {
		if err := s.ComputeFlowLogs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flowLogs")
		if !ok {
			return nil, errors.New("\"azure.subscription.network.watcher\" calculated \"flowLogs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flowLogs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"flowLogs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "flowLogs":
		return s.ComputeFlowLogs()
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.watcher\" resource")
	}
}

// ComputeFlowLogs computer autogenerated
func (s *mqlAzureSubscriptionNetworkWatcher) ComputeFlowLogs() error {
	var err error
	if _, ok := s.Cache.Load("flowLogs"); ok {
		return nil
	}
	vres, err := s.GetFlowLogs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flowLogs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkWatcherFlowlog resource interface
type AzureSubscriptionNetworkWatcherFlowlog interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	ProvisioningState() (string, error)
	Enabled() (bool, error)
	StorageAccountId() (string, error)
	TargetResourceId() (string, error)
	TargetResourceGuid() (string, error)
	Version() (int64, error)
	Format() (string, error)
	RetentionPolicy() (interface{}, error)
	Analytics() (interface{}, error)
}

// mqlAzureSubscriptionNetworkWatcherFlowlog for the azure.subscription.network.watcher.flowlog resource
type mqlAzureSubscriptionNetworkWatcherFlowlog struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.network.watcher.flowlog resource
func newAzureSubscriptionNetworkWatcherFlowlog(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkWatcherFlowlog{runtime.NewResource("azure.subscription.network.watcher.flowlog")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "storageAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"storageAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "targetResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"targetResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "targetResourceGuid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"targetResourceGuid\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"version\" argument has the wrong type (expected type \"int64\")")
			}
		case "format":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"format\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"retentionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "analytics":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"analytics\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.network.watcher.flowlog\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.network.watcher.flowlog with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccountId"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"storageAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetResourceId"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"targetResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetResourceGuid"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"targetResourceGuid\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("format"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"format\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"retentionPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("analytics"); !ok {
		return errors.New("Initialized \"azure.subscription.network.watcher.flowlog\" resource without a \"analytics\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher.flowlog].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "provisioningState":
		return nil
	case "enabled":
		return nil
	case "storageAccountId":
		return nil
	case "targetResourceId":
		return nil
	case "targetResourceGuid":
		return nil
	case "version":
		return nil
	case "format":
		return nil
	case "retentionPolicy":
		return nil
	case "analytics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.watcher.flowlog\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher.flowlog].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "provisioningState":
		return s.ProvisioningState()
	case "enabled":
		return s.Enabled()
	case "storageAccountId":
		return s.StorageAccountId()
	case "targetResourceId":
		return s.TargetResourceId()
	case "targetResourceGuid":
		return s.TargetResourceGuid()
	case "version":
		return s.Version()
	case "format":
		return s.Format()
	case "retentionPolicy":
		return s.RetentionPolicy()
	case "analytics":
		return s.Analytics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.network.watcher.flowlog\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StorageAccountId accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) StorageAccountId() (string, error) {
	res, ok := s.Cache.Load("storageAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"storageAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"storageAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TargetResourceId accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) TargetResourceId() (string, error) {
	res, ok := s.Cache.Load("targetResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"targetResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"targetResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TargetResourceGuid accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) TargetResourceGuid() (string, error) {
	res, ok := s.Cache.Load("targetResourceGuid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"targetResourceGuid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"targetResourceGuid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Version() (int64, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"version\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Format accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Format() (string, error) {
	res, ok := s.Cache.Load("format")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"format\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"format\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) RetentionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"retentionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Analytics accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) Analytics() (interface{}, error) {
	res, ok := s.Cache.Load("analytics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.network.watcher.flowlog\" failed: no value provided for static field \"analytics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.network.watcher.flowlog\" failed to cast field \"analytics\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkWatcherFlowlog) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.network.watcher.flowlog].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "provisioningState":
		return nil
	case "enabled":
		return nil
	case "storageAccountId":
		return nil
	case "targetResourceId":
		return nil
	case "targetResourceGuid":
		return nil
	case "version":
		return nil
	case "format":
		return nil
	case "retentionPolicy":
		return nil
	case "analytics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.network.watcher.flowlog\" resource")
	}
}

// AzureSubscriptionStorage resource interface
type AzureSubscriptionStorage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Accounts() ([]interface{}, error)
}

// mqlAzureSubscriptionStorage for the azure.subscription.storage resource
type mqlAzureSubscriptionStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage resource
func newAzureSubscriptionStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorage{runtime.NewResource("azure.subscription.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "accounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage\", its \"accounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage].Register")
	switch name {
	case "accounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage].Field")
	switch name {
	case "accounts":
		return s.Accounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage\" resource")
	}
}

// Accounts accessor autogenerated
func (s *mqlAzureSubscriptionStorage) Accounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("accounts")
	if !ok || !res.Valid {
		if err := s.ComputeAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accounts")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage\" calculated \"accounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage\" failed to cast field \"accounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage].MqlCompute")
	switch name {
	case "accounts":
		return s.ComputeAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage\" resource")
	}
}

// ComputeAccounts computer autogenerated
func (s *mqlAzureSubscriptionStorage) ComputeAccounts() error {
	var err error
	if _, ok := s.Cache.Load("accounts"); ok {
		return nil
	}
	vres, err := s.GetAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionStorageAccount resource interface
type AzureSubscriptionStorageAccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Sku() (interface{}, error)
	Kind() (string, error)
	Containers() ([]interface{}, error)
	QueueProperties() (AzureSubscriptionStorageAccountQueueServiceProperties, error)
	TableProperties() (AzureSubscriptionStorageAccountTableServiceProperties, error)
	BlobProperties() (AzureSubscriptionStorageAccountBlobServiceProperties, error)
	DataProtection() (AzureSubscriptionStorageAccountDataProtection, error)
}

// mqlAzureSubscriptionStorageAccount for the azure.subscription.storage.account resource
type mqlAzureSubscriptionStorageAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account resource
func newAzureSubscriptionStorageAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccount{runtime.NewResource("azure.subscription.storage.account")}
	var existing AzureSubscriptionStorageAccount
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "queueProperties":
			if _, ok := val.(AzureSubscriptionStorageAccountQueueServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"queueProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountQueueServiceProperties\")")
			}
		case "tableProperties":
			if _, ok := val.(AzureSubscriptionStorageAccountTableServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"tableProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountTableServiceProperties\")")
			}
		case "blobProperties":
			if _, ok := val.(AzureSubscriptionStorageAccountBlobServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"blobProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountBlobServiceProperties\")")
			}
		case "dataProtection":
			if _, ok := val.(AzureSubscriptionStorageAccountDataProtection); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"dataProtection\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountDataProtection\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return nil
	case "queueProperties":
		return nil
	case "tableProperties":
		return nil
	case "blobProperties":
		return nil
	case "dataProtection":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "sku":
		return s.Sku()
	case "kind":
		return s.Kind()
	case "containers":
		return s.Containers()
	case "queueProperties":
		return s.QueueProperties()
	case "tableProperties":
		return s.TableProperties()
	case "blobProperties":
		return s.BlobProperties()
	case "dataProtection":
		return s.DataProtection()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage.account\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// QueueProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) QueueProperties() (AzureSubscriptionStorageAccountQueueServiceProperties, error) {
	res, ok := s.Cache.Load("queueProperties")
	if !ok || !res.Valid {
		if err := s.ComputeQueueProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("queueProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage.account\" calculated \"queueProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "queueProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountQueueServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"queueProperties\" to the right type (AzureSubscriptionStorageAccountQueueServiceProperties): %#v", res)
	}
	return tres, nil
}

// TableProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) TableProperties() (AzureSubscriptionStorageAccountTableServiceProperties, error) {
	res, ok := s.Cache.Load("tableProperties")
	if !ok || !res.Valid {
		if err := s.ComputeTableProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tableProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage.account\" calculated \"tableProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tableProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountTableServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"tableProperties\" to the right type (AzureSubscriptionStorageAccountTableServiceProperties): %#v", res)
	}
	return tres, nil
}

// BlobProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) BlobProperties() (AzureSubscriptionStorageAccountBlobServiceProperties, error) {
	res, ok := s.Cache.Load("blobProperties")
	if !ok || !res.Valid {
		if err := s.ComputeBlobProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("blobProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage.account\" calculated \"blobProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "blobProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountBlobServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"blobProperties\" to the right type (AzureSubscriptionStorageAccountBlobServiceProperties): %#v", res)
	}
	return tres, nil
}

// DataProtection accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) DataProtection() (AzureSubscriptionStorageAccountDataProtection, error) {
	res, ok := s.Cache.Load("dataProtection")
	if !ok || !res.Valid {
		if err := s.ComputeDataProtection(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataProtection")
		if !ok {
			return nil, errors.New("\"azure.subscription.storage.account\" calculated \"dataProtection\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataProtection")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountDataProtection)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account\" failed to cast field \"dataProtection\" to the right type (AzureSubscriptionStorageAccountDataProtection): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return s.ComputeContainers()
	case "queueProperties":
		return s.ComputeQueueProperties()
	case "tableProperties":
		return s.ComputeTableProperties()
	case "blobProperties":
		return s.ComputeBlobProperties()
	case "dataProtection":
		return s.ComputeDataProtection()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account\" resource")
	}
}

// ComputeContainers computer autogenerated
func (s *mqlAzureSubscriptionStorageAccount) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeQueueProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageAccount) ComputeQueueProperties() error {
	var err error
	if _, ok := s.Cache.Load("queueProperties"); ok {
		return nil
	}
	vres, err := s.GetQueueProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("queueProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTableProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageAccount) ComputeTableProperties() error {
	var err error
	if _, ok := s.Cache.Load("tableProperties"); ok {
		return nil
	}
	vres, err := s.GetTableProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tableProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBlobProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageAccount) ComputeBlobProperties() error {
	var err error
	if _, ok := s.Cache.Load("blobProperties"); ok {
		return nil
	}
	vres, err := s.GetBlobProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("blobProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataProtection computer autogenerated
func (s *mqlAzureSubscriptionStorageAccount) ComputeDataProtection() error {
	var err error
	if _, ok := s.Cache.Load("dataProtection"); ok {
		return nil
	}
	vres, err := s.GetDataProtection()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataProtection", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionStorageAccountDataProtection resource interface
type AzureSubscriptionStorageAccountDataProtection interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	StorageAccountId() (string, error)
	BlobSoftDeletionEnabled() (bool, error)
	BlobRetentionDays() (int64, error)
	ContainerSoftDeletionEnabled() (bool, error)
	ContainerRetentionDays() (int64, error)
}

// mqlAzureSubscriptionStorageAccountDataProtection for the azure.subscription.storage.account.dataProtection resource
type mqlAzureSubscriptionStorageAccountDataProtection struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountDataProtection) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.dataProtection resource
func newAzureSubscriptionStorageAccountDataProtection(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountDataProtection{runtime.NewResource("azure.subscription.storage.account.dataProtection")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "storageAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"storageAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "blobSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"blobSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "blobRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"blobRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "containerSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"containerSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "containerRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"containerRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.dataProtection\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.dataProtection with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountDataProtection) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("storageAccountId"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.dataProtection\" resource without a \"storageAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.dataProtection\" resource without a \"blobSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobRetentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.dataProtection\" resource without a \"blobRetentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.dataProtection\" resource without a \"containerSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerRetentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.dataProtection\" resource without a \"containerRetentionDays\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.dataProtection].Register")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.dataProtection\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.dataProtection].Field")
	switch name {
	case "storageAccountId":
		return s.StorageAccountId()
	case "blobSoftDeletionEnabled":
		return s.BlobSoftDeletionEnabled()
	case "blobRetentionDays":
		return s.BlobRetentionDays()
	case "containerSoftDeletionEnabled":
		return s.ContainerSoftDeletionEnabled()
	case "containerRetentionDays":
		return s.ContainerRetentionDays()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.dataProtection\" resource")
	}
}

// StorageAccountId accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) StorageAccountId() (string, error) {
	res, ok := s.Cache.Load("storageAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.dataProtection\" failed: no value provided for static field \"storageAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.dataProtection\" failed to cast field \"storageAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BlobSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) BlobSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("blobSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.dataProtection\" failed: no value provided for static field \"blobSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.dataProtection\" failed to cast field \"blobSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// BlobRetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) BlobRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("blobRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storage.account.dataProtection\" failed: no value provided for static field \"blobRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storage.account.dataProtection\" failed to cast field \"blobRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ContainerSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) ContainerSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("containerSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.dataProtection\" failed: no value provided for static field \"containerSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.dataProtection\" failed to cast field \"containerSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ContainerRetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) ContainerRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("containerRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storage.account.dataProtection\" failed: no value provided for static field \"containerRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storage.account.dataProtection\" failed to cast field \"containerRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountDataProtection) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.dataProtection].MqlCompute")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.dataProtection\" resource")
	}
}

// AzureSubscriptionStorageAccountBlobServiceProperties resource interface
type AzureSubscriptionStorageAccountBlobServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageAccountBlobServiceProperties for the azure.subscription.storage.account.blobService.properties resource
type mqlAzureSubscriptionStorageAccountBlobServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.blobService.properties resource
func newAzureSubscriptionStorageAccountBlobServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountBlobServiceProperties{runtime.NewResource("azure.subscription.storage.account.blobService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.blobService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.blobService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.blobService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.blobService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.blobService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.blobService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.blobService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.blobService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.blobService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.blobService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.blobService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.blobService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.blobService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.blobService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.blobService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.blobService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.blobService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.blobService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.blobService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.blobService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.blobService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.blobService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountBlobServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.blobService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.blobService.properties\" resource")
	}
}

// AzureSubscriptionStorageAccountQueueServiceProperties resource interface
type AzureSubscriptionStorageAccountQueueServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageAccountQueueServiceProperties for the azure.subscription.storage.account.queueService.properties resource
type mqlAzureSubscriptionStorageAccountQueueServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.queueService.properties resource
func newAzureSubscriptionStorageAccountQueueServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountQueueServiceProperties{runtime.NewResource("azure.subscription.storage.account.queueService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.queueService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.queueService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.queueService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.queueService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.queueService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.queueService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.queueService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.queueService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.queueService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.queueService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.queueService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.queueService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.queueService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.queueService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.queueService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.queueService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.queueService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.queueService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.queueService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.queueService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.queueService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.queueService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountQueueServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.queueService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.queueService.properties\" resource")
	}
}

// AzureSubscriptionStorageAccountTableServiceProperties resource interface
type AzureSubscriptionStorageAccountTableServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageAccountTableServiceProperties for the azure.subscription.storage.account.tableService.properties resource
type mqlAzureSubscriptionStorageAccountTableServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.tableService.properties resource
func newAzureSubscriptionStorageAccountTableServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountTableServiceProperties{runtime.NewResource("azure.subscription.storage.account.tableService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.tableService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.tableService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.tableService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.tableService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.tableService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.tableService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.tableService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.tableService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.tableService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.tableService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.tableService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.tableService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.tableService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.tableService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.tableService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.tableService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) HourMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.tableService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.tableService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) MinuteMetrics() (AzureSubscriptionStorageAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.tableService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.tableService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) Logging() (AzureSubscriptionStorageAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.tableService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.tableService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountTableServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.tableService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.tableService.properties\" resource")
	}
}

// AzureSubscriptionStorageAccountServicePropertiesMetrics resource interface
type AzureSubscriptionStorageAccountServicePropertiesMetrics interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	IncludeAPIs() (bool, error)
	RetentionPolicy() (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy, error)
	Enabled() (bool, error)
	Version() (string, error)
}

// mqlAzureSubscriptionStorageAccountServicePropertiesMetrics for the azure.subscription.storage.account.service.properties.metrics resource
type mqlAzureSubscriptionStorageAccountServicePropertiesMetrics struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.service.properties.metrics resource
func newAzureSubscriptionStorageAccountServicePropertiesMetrics(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountServicePropertiesMetrics{runtime.NewResource("azure.subscription.storage.account.service.properties.metrics")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "includeAPIs":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"includeAPIs\" argument has the wrong type (expected type \"bool\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.metrics\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.service.properties.metrics with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.metrics\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("includeAPIs"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.metrics\" resource without a \"includeAPIs\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.metrics\" resource without a \"retentionPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.metrics\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.metrics\" resource without a \"version\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.metrics].Register")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.metrics\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.metrics].Field")
	switch name {
	case "id":
		return s.Id()
	case "includeAPIs":
		return s.IncludeAPIs()
	case "retentionPolicy":
		return s.RetentionPolicy()
	case "enabled":
		return s.Enabled()
	case "version":
		return s.Version()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.metrics\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.service.properties.metrics\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.service.properties.metrics\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IncludeAPIs accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) IncludeAPIs() (bool, error) {
	res, ok := s.Cache.Load("includeAPIs")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.metrics\" failed: no value provided for static field \"includeAPIs\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.metrics\" failed to cast field \"includeAPIs\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) RetentionPolicy() (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.service.properties.metrics\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.service.properties.metrics\" failed to cast field \"retentionPolicy\" to the right type (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.metrics\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.metrics\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.service.properties.metrics\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.service.properties.metrics\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesMetrics) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.metrics].MqlCompute")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.metrics\" resource")
	}
}

// AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy resource interface
type AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	RetentionDays() (int64, error)
	Enabled() (bool, error)
}

// mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy for the azure.subscription.storage.account.service.properties.retentionPolicy resource
type mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.service.properties.retentionPolicy resource
func newAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy{runtime.NewResource("azure.subscription.storage.account.service.properties.retentionPolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.retentionPolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.retentionPolicy\", its \"retentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.retentionPolicy\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.retentionPolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.service.properties.retentionPolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource without a \"retentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.retentionPolicy].Register")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.retentionPolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "retentionDays":
		return s.RetentionDays()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) RetentionDays() (int64, error) {
	res, ok := s.Cache.Load("retentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"retentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed to cast field \"retentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.retentionPolicy\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesRetentionPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.retentionPolicy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.retentionPolicy\" resource")
	}
}

// AzureSubscriptionStorageAccountServicePropertiesLogging resource interface
type AzureSubscriptionStorageAccountServicePropertiesLogging interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Delete() (bool, error)
	Read() (bool, error)
	Write() (bool, error)
	Version() (string, error)
	RetentionPolicy() (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy, error)
}

// mqlAzureSubscriptionStorageAccountServicePropertiesLogging for the azure.subscription.storage.account.service.properties.logging resource
type mqlAzureSubscriptionStorageAccountServicePropertiesLogging struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.account.service.properties.logging resource
func newAzureSubscriptionStorageAccountServicePropertiesLogging(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageAccountServicePropertiesLogging{runtime.NewResource("azure.subscription.storage.account.service.properties.logging")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "delete":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"delete\" argument has the wrong type (expected type \"bool\")")
			}
		case "read":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"read\" argument has the wrong type (expected type \"bool\")")
			}
		case "write":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"write\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.account.service.properties.logging\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.account.service.properties.logging with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("delete"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"delete\". This field is required.")
	}
	if _, ok := s.Cache.Load("read"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"read\". This field is required.")
	}
	if _, ok := s.Cache.Load("write"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"write\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.account.service.properties.logging\" resource without a \"retentionPolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.logging].Register")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.logging\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.logging].Field")
	switch name {
	case "id":
		return s.Id()
	case "delete":
		return s.Delete()
	case "read":
		return s.Read()
	case "write":
		return s.Write()
	case "version":
		return s.Version()
	case "retentionPolicy":
		return s.RetentionPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.logging\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Delete accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Delete() (bool, error) {
	res, ok := s.Cache.Load("delete")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"delete\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"delete\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Read accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Read() (bool, error) {
	res, ok := s.Cache.Load("read")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"read\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"read\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Write accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Write() (bool, error) {
	res, ok := s.Cache.Load("write")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"write\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"write\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) RetentionPolicy() (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.account.service.properties.logging\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.account.service.properties.logging\" failed to cast field \"retentionPolicy\" to the right type (AzureSubscriptionStorageAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageAccountServicePropertiesLogging) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.account.service.properties.logging].MqlCompute")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.account.service.properties.logging\" resource")
	}
}

// AzureSubscriptionStorageContainer resource interface
type AzureSubscriptionStorageContainer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionStorageContainer for the azure.subscription.storage.container resource
type mqlAzureSubscriptionStorageContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storage.container resource
func newAzureSubscriptionStorageContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageContainer{runtime.NewResource("azure.subscription.storage.container")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storage.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storage.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.container\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.container\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.container\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.storage.container\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.container].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.container].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storage.container\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.container\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.container\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.container\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.container\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storage.container\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storage.container\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storage.container\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storage.container\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageContainer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storage.container].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storage.container\" resource")
	}
}

// AzureSubscriptionWeb resource interface
type AzureSubscriptionWeb interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Apps() ([]interface{}, error)
	AvailableRuntimes() ([]interface{}, error)
}

// mqlAzureSubscriptionWeb for the azure.subscription.web resource
type mqlAzureSubscriptionWeb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWeb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.web resource
func newAzureSubscriptionWeb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWeb{runtime.NewResource("azure.subscription.web")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "apps":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web\", its \"apps\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "availableRuntimes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web\", its \"availableRuntimes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.web with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWeb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWeb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web].Register")
	switch name {
	case "apps":
		return nil
	case "availableRuntimes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWeb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.web].Field")
	switch name {
	case "apps":
		return s.Apps()
	case "availableRuntimes":
		return s.AvailableRuntimes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.web\" resource")
	}
}

// Apps accessor autogenerated
func (s *mqlAzureSubscriptionWeb) Apps() ([]interface{}, error) {
	res, ok := s.Cache.Load("apps")
	if !ok || !res.Valid {
		if err := s.ComputeApps(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apps")
		if !ok {
			return nil, errors.New("\"azure.subscription.web\" calculated \"apps\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apps")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web\" failed to cast field \"apps\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AvailableRuntimes accessor autogenerated
func (s *mqlAzureSubscriptionWeb) AvailableRuntimes() ([]interface{}, error) {
	res, ok := s.Cache.Load("availableRuntimes")
	if !ok || !res.Valid {
		if err := s.ComputeAvailableRuntimes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("availableRuntimes")
		if !ok {
			return nil, errors.New("\"azure.subscription.web\" calculated \"availableRuntimes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "availableRuntimes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web\" failed to cast field \"availableRuntimes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWeb) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web].MqlCompute")
	switch name {
	case "apps":
		return s.ComputeApps()
	case "availableRuntimes":
		return s.ComputeAvailableRuntimes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web\" resource")
	}
}

// ComputeApps computer autogenerated
func (s *mqlAzureSubscriptionWeb) ComputeApps() error {
	var err error
	if _, ok := s.Cache.Load("apps"); ok {
		return nil
	}
	vres, err := s.GetApps()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apps", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAvailableRuntimes computer autogenerated
func (s *mqlAzureSubscriptionWeb) ComputeAvailableRuntimes() error {
	var err error
	if _, ok := s.Cache.Load("availableRuntimes"); ok {
		return nil
	}
	vres, err := s.GetAvailableRuntimes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("availableRuntimes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionWebAppsite resource interface
type AzureSubscriptionWebAppsite interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Configuration() (AzureSubscriptionWebAppsiteconfig, error)
	AuthenticationSettings() (AzureSubscriptionWebAppsiteauthsettings, error)
	Metadata() (interface{}, error)
	ApplicationSettings() (interface{}, error)
	ConnectionSettings() (interface{}, error)
	Stack() (interface{}, error)
}

// mqlAzureSubscriptionWebAppsite for the azure.subscription.web.appsite resource
type mqlAzureSubscriptionWebAppsite struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebAppsite) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.web.appsite resource
func newAzureSubscriptionWebAppsite(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebAppsite{runtime.NewResource("azure.subscription.web.appsite")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.(AzureSubscriptionWebAppsiteconfig); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"configuration\" argument has the wrong type (expected type \"AzureSubscriptionWebAppsiteconfig\")")
			}
		case "authenticationSettings":
			if _, ok := val.(AzureSubscriptionWebAppsiteauthsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"authenticationSettings\" argument has the wrong type (expected type \"AzureSubscriptionWebAppsiteauthsettings\")")
			}
		case "metadata":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"metadata\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "applicationSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"applicationSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"connectionSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stack":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"stack\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsite\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.web.appsite with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebAppsite) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsite\" resource without a \"identity\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsite].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return nil
	case "authenticationSettings":
		return nil
	case "metadata":
		return nil
	case "applicationSettings":
		return nil
	case "connectionSettings":
		return nil
	case "stack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsite\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsite].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "configuration":
		return s.Configuration()
	case "authenticationSettings":
		return s.AuthenticationSettings()
	case "metadata":
		return s.Metadata()
	case "applicationSettings":
		return s.ApplicationSettings()
	case "connectionSettings":
		return s.ConnectionSettings()
	case "stack":
		return s.Stack()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.web.appsite\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.web.appsite\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Configuration() (AzureSubscriptionWebAppsiteconfig, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWebAppsiteconfig)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"configuration\" to the right type (AzureSubscriptionWebAppsiteconfig): %#v", res)
	}
	return tres, nil
}

// AuthenticationSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) AuthenticationSettings() (AzureSubscriptionWebAppsiteauthsettings, error) {
	res, ok := s.Cache.Load("authenticationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAuthenticationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authenticationSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"authenticationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authenticationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWebAppsiteauthsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"authenticationSettings\" to the right type (AzureSubscriptionWebAppsiteauthsettings): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Metadata() (interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"metadata\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ApplicationSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ApplicationSettings() (interface{}, error) {
	res, ok := s.Cache.Load("applicationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeApplicationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applicationSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"applicationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applicationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"applicationSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ConnectionSettings() (interface{}, error) {
	res, ok := s.Cache.Load("connectionSettings")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"connectionSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"connectionSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Stack accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) Stack() (interface{}, error) {
	res, ok := s.Cache.Load("stack")
	if !ok || !res.Valid {
		if err := s.ComputeStack(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("stack")
		if !ok {
			return nil, errors.New("\"azure.subscription.web.appsite\" calculated \"stack\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "stack")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsite\" failed to cast field \"stack\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsite) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsite].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "authenticationSettings":
		return s.ComputeAuthenticationSettings()
	case "metadata":
		return s.ComputeMetadata()
	case "applicationSettings":
		return s.ComputeApplicationSettings()
	case "connectionSettings":
		return s.ComputeConnectionSettings()
	case "stack":
		return s.ComputeStack()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsite\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthenticationSettings computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeAuthenticationSettings() error {
	var err error
	if _, ok := s.Cache.Load("authenticationSettings"); ok {
		return nil
	}
	vres, err := s.GetAuthenticationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authenticationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetadata computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplicationSettings computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeApplicationSettings() error {
	var err error
	if _, ok := s.Cache.Load("applicationSettings"); ok {
		return nil
	}
	vres, err := s.GetApplicationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applicationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionSettings computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeConnectionSettings() error {
	var err error
	if _, ok := s.Cache.Load("connectionSettings"); ok {
		return nil
	}
	vres, err := s.GetConnectionSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStack computer autogenerated
func (s *mqlAzureSubscriptionWebAppsite) ComputeStack() error {
	var err error
	if _, ok := s.Cache.Load("stack"); ok {
		return nil
	}
	vres, err := s.GetStack()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("stack", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionWebAppsiteauthsettings resource interface
type AzureSubscriptionWebAppsiteauthsettings interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionWebAppsiteauthsettings for the azure.subscription.web.appsiteauthsettings resource
type mqlAzureSubscriptionWebAppsiteauthsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.web.appsiteauthsettings resource
func newAzureSubscriptionWebAppsiteauthsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebAppsiteauthsettings{runtime.NewResource("azure.subscription.web.appsiteauthsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteauthsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.web.appsiteauthsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteauthsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteauthsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteauthsettings\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteauthsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteauthsettings\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteauthsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteauthsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteauthsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteauthsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteauthsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteauthsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteauthsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteauthsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteauthsettings\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteauthsettings\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteauthsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteauthsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.web.appsiteauthsettings\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsiteauthsettings\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteauthsettings) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteauthsettings].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteauthsettings\" resource")
	}
}

// AzureSubscriptionWebAppsiteconfig resource interface
type AzureSubscriptionWebAppsiteconfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionWebAppsiteconfig for the azure.subscription.web.appsiteconfig resource
type mqlAzureSubscriptionWebAppsiteconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebAppsiteconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.web.appsiteconfig resource
func newAzureSubscriptionWebAppsiteconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebAppsiteconfig{runtime.NewResource("azure.subscription.web.appsiteconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.web.appsiteconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.web.appsiteconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebAppsiteconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteconfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteconfig\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteconfig\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteconfig\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.web.appsiteconfig\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteconfig].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteconfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteconfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteconfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteconfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteconfig\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteconfig\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteconfig\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteconfig\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.web.appsiteconfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.web.appsiteconfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.web.appsiteconfig\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.web.appsiteconfig\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebAppsiteconfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.web.appsiteconfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.web.appsiteconfig\" resource")
	}
}

// AzureSubscriptionSql resource interface
type AzureSubscriptionSql interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionSql for the azure.subscription.sql resource
type mqlAzureSubscriptionSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql resource
func newAzureSubscriptionSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSql{runtime.NewResource("azure.subscription.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionSql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSql) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql].MqlCompute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionSql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlServer resource interface
type AzureSubscriptionSqlServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
	AzureAdAdministrators() ([]interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	SecurityAlertPolicy() (interface{}, error)
	EncryptionProtector() (interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	VulnerabilityAssessmentSettings() (AzureSubscriptionSqlServerVulnerabilityassessmentsettings, error)
}

// mqlAzureSubscriptionSqlServer for the azure.subscription.sql.server resource
type mqlAzureSubscriptionSqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.server resource
func newAzureSubscriptionSqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServer{runtime.NewResource("azure.subscription.sql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "azureAdAdministrators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"azureAdAdministrators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityAlertPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"securityAlertPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "encryptionProtector":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"encryptionProtector\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vulnerabilityAssessmentSettings":
			if _, ok := val.(AzureSubscriptionSqlServerVulnerabilityassessmentsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"vulnerabilityAssessmentSettings\" argument has the wrong type (expected type \"AzureSubscriptionSqlServerVulnerabilityassessmentsettings\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	case "azureAdAdministrators":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "securityAlertPolicy":
		return nil
	case "encryptionProtector":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "vulnerabilityAssessmentSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	case "azureAdAdministrators":
		return s.AzureAdAdministrators()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "securityAlertPolicy":
		return s.SecurityAlertPolicy()
	case "encryptionProtector":
		return s.EncryptionProtector()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.VulnerabilityAssessmentSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AzureAdAdministrators accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) AzureAdAdministrators() ([]interface{}, error) {
	res, ok := s.Cache.Load("azureAdAdministrators")
	if !ok || !res.Valid {
		if err := s.ComputeAzureAdAdministrators(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("azureAdAdministrators")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"azureAdAdministrators\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "azureAdAdministrators")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"azureAdAdministrators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityAlertPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) SecurityAlertPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("securityAlertPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityAlertPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityAlertPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"securityAlertPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityAlertPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"securityAlertPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptionProtector accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) EncryptionProtector() (interface{}, error) {
	res, ok := s.Cache.Load("encryptionProtector")
	if !ok || !res.Valid {
		if err := s.ComputeEncryptionProtector(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("encryptionProtector")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"encryptionProtector\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "encryptionProtector")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"encryptionProtector\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VulnerabilityAssessmentSettings accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) VulnerabilityAssessmentSettings() (AzureSubscriptionSqlServerVulnerabilityassessmentsettings, error) {
	res, ok := s.Cache.Load("vulnerabilityAssessmentSettings")
	if !ok || !res.Valid {
		if err := s.ComputeVulnerabilityAssessmentSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vulnerabilityAssessmentSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.server\" calculated \"vulnerabilityAssessmentSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vulnerabilityAssessmentSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionSqlServerVulnerabilityassessmentsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server\" failed to cast field \"vulnerabilityAssessmentSettings\" to the right type (AzureSubscriptionSqlServerVulnerabilityassessmentsettings): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	case "azureAdAdministrators":
		return s.ComputeAzureAdAdministrators()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "securityAlertPolicy":
		return s.ComputeSecurityAlertPolicy()
	case "encryptionProtector":
		return s.ComputeEncryptionProtector()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.ComputeVulnerabilityAssessmentSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server\" resource")
	}
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAzureAdAdministrators computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeAzureAdAdministrators() error {
	var err error
	if _, ok := s.Cache.Load("azureAdAdministrators"); ok {
		return nil
	}
	vres, err := s.GetAzureAdAdministrators()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("azureAdAdministrators", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityAlertPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeSecurityAlertPolicy() error {
	var err error
	if _, ok := s.Cache.Load("securityAlertPolicy"); ok {
		return nil
	}
	vres, err := s.GetSecurityAlertPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityAlertPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEncryptionProtector computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeEncryptionProtector() error {
	var err error
	if _, ok := s.Cache.Load("encryptionProtector"); ok {
		return nil
	}
	vres, err := s.GetEncryptionProtector()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("encryptionProtector", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVulnerabilityAssessmentSettings computer autogenerated
func (s *mqlAzureSubscriptionSqlServer) ComputeVulnerabilityAssessmentSettings() error {
	var err error
	if _, ok := s.Cache.Load("vulnerabilityAssessmentSettings"); ok {
		return nil
	}
	vres, err := s.GetVulnerabilityAssessmentSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vulnerabilityAssessmentSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlServerVulnerabilityassessmentsettings resource interface
type AzureSubscriptionSqlServerVulnerabilityassessmentsettings interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StorageContainerPath() (string, error)
	StorageAccountAccessKey() (string, error)
	StorageContainerSasKey() (string, error)
	RecurringScanEnabled() (bool, error)
	RecurringScanEmails() ([]interface{}, error)
	MailSubscriptionAdmins() (bool, error)
}

// mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings for the azure.subscription.sql.server.vulnerabilityassessmentsettings resource
type mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.server.vulnerabilityassessmentsettings resource
func newAzureSubscriptionSqlServerVulnerabilityassessmentsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings{runtime.NewResource("azure.subscription.sql.server.vulnerabilityassessmentsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"storageContainerPath\" argument has the wrong type (expected type \"string\")")
			}
		case "storageAccountAccessKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"storageAccountAccessKey\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerSasKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"storageContainerSasKey\" argument has the wrong type (expected type \"string\")")
			}
		case "recurringScanEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"recurringScanEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "recurringScanEmails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"recurringScanEmails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mailSubscriptionAdmins":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"mailSubscriptionAdmins\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.vulnerabilityassessmentsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.server.vulnerabilityassessmentsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerPath"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccountAccessKey"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageAccountAccessKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerSasKey"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerSasKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEmails"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEmails\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailSubscriptionAdmins"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource without a \"mailSubscriptionAdmins\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.vulnerabilityassessmentsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.vulnerabilityassessmentsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "storageContainerPath":
		return s.StorageContainerPath()
	case "storageAccountAccessKey":
		return s.StorageAccountAccessKey()
	case "storageContainerSasKey":
		return s.StorageContainerSasKey()
	case "recurringScanEnabled":
		return s.RecurringScanEnabled()
	case "recurringScanEmails":
		return s.RecurringScanEmails()
	case "mailSubscriptionAdmins":
		return s.MailSubscriptionAdmins()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerPath accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) StorageContainerPath() (string, error) {
	res, ok := s.Cache.Load("storageContainerPath")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageAccountAccessKey accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) StorageAccountAccessKey() (string, error) {
	res, ok := s.Cache.Load("storageAccountAccessKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageAccountAccessKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageAccountAccessKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerSasKey accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) StorageContainerSasKey() (string, error) {
	res, ok := s.Cache.Load("storageContainerSasKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerSasKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerSasKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecurringScanEnabled accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) RecurringScanEnabled() (bool, error) {
	res, ok := s.Cache.Load("recurringScanEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RecurringScanEmails accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) RecurringScanEmails() ([]interface{}, error) {
	res, ok := s.Cache.Load("recurringScanEmails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEmails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEmails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MailSubscriptionAdmins accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) MailSubscriptionAdmins() (bool, error) {
	res, ok := s.Cache.Load("mailSubscriptionAdmins")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"mailSubscriptionAdmins\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sql.server.vulnerabilityassessmentsettings\" failed to cast field \"mailSubscriptionAdmins\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerVulnerabilityassessmentsettings) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.vulnerabilityassessmentsettings].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server.vulnerabilityassessmentsettings\" resource")
	}
}

// AzureSubscriptionSqlServerAdministrator resource interface
type AzureSubscriptionSqlServerAdministrator interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	AdministratorType() (string, error)
	Login() (string, error)
	Sid() (string, error)
	TenantId() (string, error)
}

// mqlAzureSubscriptionSqlServerAdministrator for the azure.subscription.sql.server.administrator resource
type mqlAzureSubscriptionSqlServerAdministrator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServerAdministrator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.server.administrator resource
func newAzureSubscriptionSqlServerAdministrator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServerAdministrator{runtime.NewResource("azure.subscription.sql.server.administrator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "administratorType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"administratorType\" argument has the wrong type (expected type \"string\")")
			}
		case "login":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"login\" argument has the wrong type (expected type \"string\")")
			}
		case "sid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"sid\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.server.administrator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.server.administrator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServerAdministrator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("administratorType"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"administratorType\". This field is required.")
	}
	if _, ok := s.Cache.Load("login"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"login\". This field is required.")
	}
	if _, ok := s.Cache.Load("sid"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"sid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tenantId"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.server.administrator\" resource without a \"tenantId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.administrator].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server.administrator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.administrator].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "administratorType":
		return s.AdministratorType()
	case "login":
		return s.Login()
	case "sid":
		return s.Sid()
	case "tenantId":
		return s.TenantId()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.server.administrator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AdministratorType accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) AdministratorType() (string, error) {
	res, ok := s.Cache.Load("administratorType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"administratorType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"administratorType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Login accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Login() (string, error) {
	res, ok := s.Cache.Load("login")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"login\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"login\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sid accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) Sid() (string, error) {
	res, ok := s.Cache.Load("sid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"sid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"sid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.server.administrator\" failed: no value provided for static field \"tenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.server.administrator\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServerAdministrator) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.server.administrator].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.server.administrator\" resource")
	}
}

// AzureSubscriptionSqlDatabase resource interface
type AzureSubscriptionSqlDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Collation() (string, error)
	CreationDate() (*time.Time, error)
	ContainmentState() (int64, error)
	CurrentServiceObjectiveId() (string, error)
	DatabaseId() (string, error)
	EarliestRestoreDate() (*time.Time, error)
	CreateMode() (string, error)
	SourceDatabaseId() (string, error)
	SourceDatabaseDeletionDate() (*time.Time, error)
	RestorePointInTime() (*time.Time, error)
	RecoveryServicesRecoveryPointResourceId() (string, error)
	Edition() (string, error)
	MaxSizeBytes() (int64, error)
	RequestedServiceObjectiveId() (string, error)
	RequestedServiceObjectiveName() (string, error)
	ServiceLevelObjective() (string, error)
	Status() (string, error)
	ElasticPoolName() (string, error)
	DefaultSecondaryLocation() (string, error)
	ServiceTierAdvisors() (interface{}, error)
	RecommendedIndex() (interface{}, error)
	FailoverGroupId() (string, error)
	ReadScale() (string, error)
	SampleName() (string, error)
	ZoneRedundant() (bool, error)
	TransparentDataEncryption() (interface{}, error)
	Advisor() ([]interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	Usage() ([]interface{}, error)
}

// mqlAzureSubscriptionSqlDatabase for the azure.subscription.sql.database resource
type mqlAzureSubscriptionSqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.database resource
func newAzureSubscriptionSqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlDatabase{runtime.NewResource("azure.subscription.sql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "containmentState":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"containmentState\" argument has the wrong type (expected type \"int64\")")
			}
		case "currentServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"currentServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"databaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "earliestRestoreDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"earliestRestoreDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"createMode\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"sourceDatabaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseDeletionDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"sourceDatabaseDeletionDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "restorePointInTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"restorePointInTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryServicesRecoveryPointResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"recoveryServicesRecoveryPointResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "edition":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"edition\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"maxSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "requestedServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"requestedServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "requestedServiceObjectiveName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"requestedServiceObjectiveName\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceLevelObjective":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"serviceLevelObjective\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "elasticPoolName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"elasticPoolName\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultSecondaryLocation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"defaultSecondaryLocation\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceTierAdvisors":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"serviceTierAdvisors\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "recommendedIndex":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"recommendedIndex\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "failoverGroupId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"failoverGroupId\" argument has the wrong type (expected type \"string\")")
			}
		case "readScale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"readScale\" argument has the wrong type (expected type \"string\")")
			}
		case "sampleName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"sampleName\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneRedundant":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"zoneRedundant\" argument has the wrong type (expected type \"bool\")")
			}
		case "transparentDataEncryption":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"transparentDataEncryption\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "advisor":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"advisor\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "usage":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"usage\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseId"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"databaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("earliestRestoreDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"earliestRestoreDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("createMode"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"createMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseId"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"sourceDatabaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseDeletionDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"sourceDatabaseDeletionDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("restorePointInTime"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"restorePointInTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"recoveryServicesRecoveryPointResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("edition"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"edition\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSizeBytes"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"maxSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("requestedServiceObjectiveName"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"requestedServiceObjectiveName\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceLevelObjective"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"serviceLevelObjective\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("elasticPoolName"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"elasticPoolName\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecondaryLocation"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"defaultSecondaryLocation\". This field is required.")
	}
	if _, ok := s.Cache.Load("failoverGroupId"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"failoverGroupId\". This field is required.")
	}
	if _, ok := s.Cache.Load("readScale"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"readScale\". This field is required.")
	}
	if _, ok := s.Cache.Load("sampleName"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"sampleName\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneRedundant"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.database\" resource without a \"zoneRedundant\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return nil
	case "currentServiceObjectiveId":
		return nil
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return nil
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return nil
	case "recommendedIndex":
		return nil
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return nil
	case "advisor":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "usage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "collation":
		return s.Collation()
	case "creationDate":
		return s.CreationDate()
	case "containmentState":
		return s.ContainmentState()
	case "currentServiceObjectiveId":
		return s.CurrentServiceObjectiveId()
	case "databaseId":
		return s.DatabaseId()
	case "earliestRestoreDate":
		return s.EarliestRestoreDate()
	case "createMode":
		return s.CreateMode()
	case "sourceDatabaseId":
		return s.SourceDatabaseId()
	case "sourceDatabaseDeletionDate":
		return s.SourceDatabaseDeletionDate()
	case "restorePointInTime":
		return s.RestorePointInTime()
	case "recoveryServicesRecoveryPointResourceId":
		return s.RecoveryServicesRecoveryPointResourceId()
	case "edition":
		return s.Edition()
	case "maxSizeBytes":
		return s.MaxSizeBytes()
	case "requestedServiceObjectiveId":
		return s.RequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return s.RequestedServiceObjectiveName()
	case "serviceLevelObjective":
		return s.ServiceLevelObjective()
	case "status":
		return s.Status()
	case "elasticPoolName":
		return s.ElasticPoolName()
	case "defaultSecondaryLocation":
		return s.DefaultSecondaryLocation()
	case "serviceTierAdvisors":
		return s.ServiceTierAdvisors()
	case "recommendedIndex":
		return s.RecommendedIndex()
	case "failoverGroupId":
		return s.FailoverGroupId()
	case "readScale":
		return s.ReadScale()
	case "sampleName":
		return s.SampleName()
	case "zoneRedundant":
		return s.ZoneRedundant()
	case "transparentDataEncryption":
		return s.TransparentDataEncryption()
	case "advisor":
		return s.Advisor()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "usage":
		return s.Usage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ContainmentState accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ContainmentState() (int64, error) {
	res, ok := s.Cache.Load("containmentState")
	if !ok || !res.Valid {
		if err := s.ComputeContainmentState(); err != nil {
			return 0, err
		}
		res, ok = s.Cache.Load("containmentState")
		if !ok {
			return 0, errors.New("\"azure.subscription.sql.database\" calculated \"containmentState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containmentState")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"containmentState\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CurrentServiceObjectiveId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) CurrentServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("currentServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeCurrentServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("currentServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azure.subscription.sql.database\" calculated \"currentServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "currentServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"currentServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) DatabaseId() (string, error) {
	res, ok := s.Cache.Load("databaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"databaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"databaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EarliestRestoreDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) EarliestRestoreDate() (*time.Time, error) {
	res, ok := s.Cache.Load("earliestRestoreDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"earliestRestoreDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"earliestRestoreDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreateMode accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) CreateMode() (string, error) {
	res, ok := s.Cache.Load("createMode")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"createMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"createMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) SourceDatabaseId() (string, error) {
	res, ok := s.Cache.Load("sourceDatabaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"sourceDatabaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"sourceDatabaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseDeletionDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) SourceDatabaseDeletionDate() (*time.Time, error) {
	res, ok := s.Cache.Load("sourceDatabaseDeletionDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"sourceDatabaseDeletionDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"sourceDatabaseDeletionDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RestorePointInTime accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) RestorePointInTime() (*time.Time, error) {
	res, ok := s.Cache.Load("restorePointInTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"restorePointInTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"restorePointInTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryServicesRecoveryPointResourceId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) RecoveryServicesRecoveryPointResourceId() (string, error) {
	res, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"recoveryServicesRecoveryPointResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"recoveryServicesRecoveryPointResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Edition accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Edition() (string, error) {
	res, ok := s.Cache.Load("edition")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"edition\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"edition\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSizeBytes accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) MaxSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("maxSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"maxSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"maxSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) RequestedServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeRequestedServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("requestedServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azure.subscription.sql.database\" calculated \"requestedServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "requestedServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"requestedServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveName accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) RequestedServiceObjectiveName() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"requestedServiceObjectiveName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"requestedServiceObjectiveName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceLevelObjective accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ServiceLevelObjective() (string, error) {
	res, ok := s.Cache.Load("serviceLevelObjective")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"serviceLevelObjective\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"serviceLevelObjective\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ElasticPoolName accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ElasticPoolName() (string, error) {
	res, ok := s.Cache.Load("elasticPoolName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"elasticPoolName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"elasticPoolName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultSecondaryLocation accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) DefaultSecondaryLocation() (string, error) {
	res, ok := s.Cache.Load("defaultSecondaryLocation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"defaultSecondaryLocation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"defaultSecondaryLocation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceTierAdvisors accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ServiceTierAdvisors() (interface{}, error) {
	res, ok := s.Cache.Load("serviceTierAdvisors")
	if !ok || !res.Valid {
		if err := s.ComputeServiceTierAdvisors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceTierAdvisors")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"serviceTierAdvisors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceTierAdvisors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"serviceTierAdvisors\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RecommendedIndex accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) RecommendedIndex() (interface{}, error) {
	res, ok := s.Cache.Load("recommendedIndex")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendedIndex(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendedIndex")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"recommendedIndex\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendedIndex")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"recommendedIndex\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FailoverGroupId accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) FailoverGroupId() (string, error) {
	res, ok := s.Cache.Load("failoverGroupId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"failoverGroupId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"failoverGroupId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReadScale accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ReadScale() (string, error) {
	res, ok := s.Cache.Load("readScale")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"readScale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"readScale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SampleName accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) SampleName() (string, error) {
	res, ok := s.Cache.Load("sampleName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"sampleName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"sampleName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneRedundant accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ZoneRedundant() (bool, error) {
	res, ok := s.Cache.Load("zoneRedundant")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sql.database\" failed: no value provided for static field \"zoneRedundant\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"zoneRedundant\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// TransparentDataEncryption accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) TransparentDataEncryption() (interface{}, error) {
	res, ok := s.Cache.Load("transparentDataEncryption")
	if !ok || !res.Valid {
		if err := s.ComputeTransparentDataEncryption(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("transparentDataEncryption")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"transparentDataEncryption\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "transparentDataEncryption")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"transparentDataEncryption\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Advisor accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Advisor() ([]interface{}, error) {
	res, ok := s.Cache.Load("advisor")
	if !ok || !res.Valid {
		if err := s.ComputeAdvisor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advisor")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"advisor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advisor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"advisor\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Usage accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) Usage() ([]interface{}, error) {
	res, ok := s.Cache.Load("usage")
	if !ok || !res.Valid {
		if err := s.ComputeUsage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("usage")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.database\" calculated \"usage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "usage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.database\" failed to cast field \"usage\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return s.ComputeContainmentState()
	case "currentServiceObjectiveId":
		return s.ComputeCurrentServiceObjectiveId()
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return s.ComputeRequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return s.ComputeServiceTierAdvisors()
	case "recommendedIndex":
		return s.ComputeRecommendedIndex()
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return s.ComputeTransparentDataEncryption()
	case "advisor":
		return s.ComputeAdvisor()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "usage":
		return s.ComputeUsage()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.database\" resource")
	}
}

// ComputeContainmentState computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeContainmentState() error {
	var err error
	if _, ok := s.Cache.Load("containmentState"); ok {
		return nil
	}
	vres, err := s.GetContainmentState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containmentState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCurrentServiceObjectiveId computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeCurrentServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("currentServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetCurrentServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("currentServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRequestedServiceObjectiveId computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeRequestedServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("requestedServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetRequestedServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("requestedServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServiceTierAdvisors computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeServiceTierAdvisors() error {
	var err error
	if _, ok := s.Cache.Load("serviceTierAdvisors"); ok {
		return nil
	}
	vres, err := s.GetServiceTierAdvisors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceTierAdvisors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendedIndex computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeRecommendedIndex() error {
	var err error
	if _, ok := s.Cache.Load("recommendedIndex"); ok {
		return nil
	}
	vres, err := s.GetRecommendedIndex()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendedIndex", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTransparentDataEncryption computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeTransparentDataEncryption() error {
	var err error
	if _, ok := s.Cache.Load("transparentDataEncryption"); ok {
		return nil
	}
	vres, err := s.GetTransparentDataEncryption()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("transparentDataEncryption", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdvisor computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeAdvisor() error {
	var err error
	if _, ok := s.Cache.Load("advisor"); ok {
		return nil
	}
	vres, err := s.GetAdvisor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advisor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsage computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabase) ComputeUsage() error {
	var err error
	if _, ok := s.Cache.Load("usage"); ok {
		return nil
	}
	vres, err := s.GetUsage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("usage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlDatabaseusage resource interface
type AzureSubscriptionSqlDatabaseusage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	ResourceName() (string, error)
	DisplayName() (string, error)
	CurrentValue() (float64, error)
	Limit() (float64, error)
	Unit() (string, error)
	NextResetTime() (*time.Time, error)
}

// mqlAzureSubscriptionSqlDatabaseusage for the azure.subscription.sql.databaseusage resource
type mqlAzureSubscriptionSqlDatabaseusage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlDatabaseusage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.databaseusage resource
func newAzureSubscriptionSqlDatabaseusage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlDatabaseusage{runtime.NewResource("azure.subscription.sql.databaseusage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"resourceName\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "currentValue":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"currentValue\" argument has the wrong type (expected type \"float64\")")
			}
		case "limit":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"limit\" argument has the wrong type (expected type \"float64\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "nextResetTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"nextResetTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.databaseusage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.databaseusage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlDatabaseusage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceName"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"resourceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentValue"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"currentValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("limit"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"limit\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.databaseusage\" resource without a \"unit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.databaseusage].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.databaseusage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.databaseusage].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "resourceName":
		return s.ResourceName()
	case "displayName":
		return s.DisplayName()
	case "currentValue":
		return s.CurrentValue()
	case "limit":
		return s.Limit()
	case "unit":
		return s.Unit()
	case "nextResetTime":
		return s.NextResetTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.databaseusage\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceName accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) ResourceName() (string, error) {
	res, ok := s.Cache.Load("resourceName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"resourceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"resourceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentValue accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) CurrentValue() (float64, error) {
	res, ok := s.Cache.Load("currentValue")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"currentValue\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"currentValue\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Limit accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Limit() (float64, error) {
	res, ok := s.Cache.Load("limit")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"limit\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"limit\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.databaseusage\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NextResetTime accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) NextResetTime() (*time.Time, error) {
	res, ok := s.Cache.Load("nextResetTime")
	if !ok || !res.Valid {
		if err := s.ComputeNextResetTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("nextResetTime")
		if !ok {
			return nil, errors.New("\"azure.subscription.sql.databaseusage\" calculated \"nextResetTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "nextResetTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sql.databaseusage\" failed to cast field \"nextResetTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.databaseusage].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return s.ComputeNextResetTime()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.databaseusage\" resource")
	}
}

// ComputeNextResetTime computer autogenerated
func (s *mqlAzureSubscriptionSqlDatabaseusage) ComputeNextResetTime() error {
	var err error
	if _, ok := s.Cache.Load("nextResetTime"); ok {
		return nil
	}
	vres, err := s.GetNextResetTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("nextResetTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionPostgresql resource interface
type AzureSubscriptionPostgresql interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionPostgresql for the azure.subscription.postgresql resource
type mqlAzureSubscriptionPostgresql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresql resource
func newAzureSubscriptionPostgresql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresql{runtime.NewResource("azure.subscription.postgresql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionPostgresql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresql) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql].MqlCompute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionPostgresql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionPostgresqlServer resource interface
type AzureSubscriptionPostgresqlServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionPostgresqlServer for the azure.subscription.postgresql.server resource
type mqlAzureSubscriptionPostgresqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresql.server resource
func newAzureSubscriptionPostgresqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresqlServer{runtime.NewResource("azure.subscription.postgresql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.postgresql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionPostgresqlDatabase resource interface
type AzureSubscriptionPostgresqlDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionPostgresqlDatabase for the azure.subscription.postgresql.database resource
type mqlAzureSubscriptionPostgresqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresql.database resource
func newAzureSubscriptionPostgresqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresqlDatabase{runtime.NewResource("azure.subscription.postgresql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresql.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresql.database\" resource")
	}
}

// AzureSubscriptionMysql resource interface
type AzureSubscriptionMysql interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
	FlexibleServers() ([]interface{}, error)
}

// mqlAzureSubscriptionMysql for the azure.subscription.mysql resource
type mqlAzureSubscriptionMysql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysql resource
func newAzureSubscriptionMysql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysql{runtime.NewResource("azure.subscription.mysql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "flexibleServers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql\", its \"flexibleServers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql].Register")
	switch name {
	case "servers":
		return nil
	case "flexibleServers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql].Field")
	switch name {
	case "servers":
		return s.Servers()
	case "flexibleServers":
		return s.FlexibleServers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionMysql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FlexibleServers accessor autogenerated
func (s *mqlAzureSubscriptionMysql) FlexibleServers() ([]interface{}, error) {
	res, ok := s.Cache.Load("flexibleServers")
	if !ok || !res.Valid {
		if err := s.ComputeFlexibleServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flexibleServers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql\" calculated \"flexibleServers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flexibleServers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql\" failed to cast field \"flexibleServers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysql) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql].MqlCompute")
	switch name {
	case "servers":
		return s.ComputeServers()
	case "flexibleServers":
		return s.ComputeFlexibleServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionMysql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFlexibleServers computer autogenerated
func (s *mqlAzureSubscriptionMysql) ComputeFlexibleServers() error {
	var err error
	if _, ok := s.Cache.Load("flexibleServers"); ok {
		return nil
	}
	vres, err := s.GetFlexibleServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flexibleServers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMysqlServer resource interface
type AzureSubscriptionMysqlServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMysqlServer for the azure.subscription.mysql.server resource
type mqlAzureSubscriptionMysqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysql.server resource
func newAzureSubscriptionMysqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlServer{runtime.NewResource("azure.subscription.mysql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMysqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMysqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMysqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMysqlDatabase resource interface
type AzureSubscriptionMysqlDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionMysqlDatabase for the azure.subscription.mysql.database resource
type mqlAzureSubscriptionMysqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysql.database resource
func newAzureSubscriptionMysqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlDatabase{runtime.NewResource("azure.subscription.mysql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.database\" resource")
	}
}

// AzureSubscriptionMysqlFlexibleServer resource interface
type AzureSubscriptionMysqlFlexibleServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMysqlFlexibleServer for the azure.subscription.mysql.flexibleServer resource
type mqlAzureSubscriptionMysqlFlexibleServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlFlexibleServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysql.flexibleServer resource
func newAzureSubscriptionMysqlFlexibleServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlFlexibleServer{runtime.NewResource("azure.subscription.mysql.flexibleServer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysql.flexibleServer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysql.flexibleServer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlFlexibleServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mysql.flexibleServer\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.flexibleServer].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.flexibleServer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.flexibleServer].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysql.flexibleServer\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysql.flexibleServer\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.flexibleServer\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.flexibleServer\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysql.flexibleServer\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysql.flexibleServer\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysql.flexibleServer].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysql.flexibleServer\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMysqlFlexibleServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadb resource interface
type AzureSubscriptionMariadb interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionMariadb for the azure.subscription.mariadb resource
type mqlAzureSubscriptionMariadb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadb resource
func newAzureSubscriptionMariadb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadb{runtime.NewResource("azure.subscription.mariadb")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadb with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadb\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionMariadb) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadb\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadb) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb].MqlCompute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionMariadb) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadbServer resource interface
type AzureSubscriptionMariadbServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMariadbServer for the azure.subscription.mariadb.server resource
type mqlAzureSubscriptionMariadbServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadbServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadb.server resource
func newAzureSubscriptionMariadbServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadbServer{runtime.NewResource("azure.subscription.mariadb.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadb.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadbServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadb.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mariadb.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadb.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadb.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadb.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadb.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMariadbServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMariadbServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMariadbServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadbDatabase resource interface
type AzureSubscriptionMariadbDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionMariadbDatabase for the azure.subscription.mariadb.database resource
type mqlAzureSubscriptionMariadbDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadbDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadb.database resource
func newAzureSubscriptionMariadbDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadbDatabase{runtime.NewResource("azure.subscription.mariadb.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadb.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadb.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadbDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadb.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadb.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadb.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadb.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadbDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadb.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadb.database\" resource")
	}
}

// AzureSubscriptionSqlConfiguration resource interface
type AzureSubscriptionSqlConfiguration interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Value() (string, error)
	Description() (string, error)
	DefaultValue() (string, error)
	DataType() (string, error)
	AllowedValues() (string, error)
	Source() (string, error)
}

// mqlAzureSubscriptionSqlConfiguration for the azure.subscription.sql.configuration resource
type mqlAzureSubscriptionSqlConfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlConfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.configuration resource
func newAzureSubscriptionSqlConfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlConfiguration{runtime.NewResource("azure.subscription.sql.configuration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultValue":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"defaultValue\" argument has the wrong type (expected type \"string\")")
			}
		case "dataType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"dataType\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedValues":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"allowedValues\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"source\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.configuration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.configuration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlConfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultValue"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"defaultValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataType"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"dataType\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedValues"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"allowedValues\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.configuration\" resource without a \"source\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.configuration].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.configuration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.configuration].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "value":
		return s.Value()
	case "description":
		return s.Description()
	case "defaultValue":
		return s.DefaultValue()
	case "dataType":
		return s.DataType()
	case "allowedValues":
		return s.AllowedValues()
	case "source":
		return s.Source()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.configuration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultValue accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) DefaultValue() (string, error) {
	res, ok := s.Cache.Load("defaultValue")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"defaultValue\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"defaultValue\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DataType accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) DataType() (string, error) {
	res, ok := s.Cache.Load("dataType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"dataType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"dataType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedValues accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) AllowedValues() (string, error) {
	res, ok := s.Cache.Load("allowedValues")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"allowedValues\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"allowedValues\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) Source() (string, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.configuration\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.configuration\" failed to cast field \"source\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlConfiguration) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.configuration].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.configuration\" resource")
	}
}

// AzureSubscriptionSqlFirewallrule resource interface
type AzureSubscriptionSqlFirewallrule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StartIpAddress() (string, error)
	EndIpAddress() (string, error)
}

// mqlAzureSubscriptionSqlFirewallrule for the azure.subscription.sql.firewallrule resource
type mqlAzureSubscriptionSqlFirewallrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlFirewallrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sql.firewallrule resource
func newAzureSubscriptionSqlFirewallrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlFirewallrule{runtime.NewResource("azure.subscription.sql.firewallrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "startIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"startIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "endIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"endIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sql.firewallrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sql.firewallrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlFirewallrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.firewallrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.firewallrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.firewallrule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("startIpAddress"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.firewallrule\" resource without a \"startIpAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("endIpAddress"); !ok {
		return errors.New("Initialized \"azure.subscription.sql.firewallrule\" resource without a \"endIpAddress\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.firewallrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.firewallrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.firewallrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "startIpAddress":
		return s.StartIpAddress()
	case "endIpAddress":
		return s.EndIpAddress()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sql.firewallrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.firewallrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.firewallrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.firewallrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.firewallrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.firewallrule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.firewallrule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartIpAddress accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) StartIpAddress() (string, error) {
	res, ok := s.Cache.Load("startIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.firewallrule\" failed: no value provided for static field \"startIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.firewallrule\" failed to cast field \"startIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndIpAddress accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) EndIpAddress() (string, error) {
	res, ok := s.Cache.Load("endIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sql.firewallrule\" failed: no value provided for static field \"endIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sql.firewallrule\" failed to cast field \"endIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlFirewallrule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sql.firewallrule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sql.firewallrule\" resource")
	}
}

// AzureSubscriptionKeyvault resource interface
type AzureSubscriptionKeyvault interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vaults() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvault for the azure.subscription.keyvault resource
type mqlAzureSubscriptionKeyvault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvault resource
func newAzureSubscriptionKeyvault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvault{runtime.NewResource("azure.subscription.keyvault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vaults":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault\", its \"vaults\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvault) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault].Register")
	switch name {
	case "vaults":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault].Field")
	switch name {
	case "vaults":
		return s.Vaults()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvault\" resource")
	}
}

// Vaults accessor autogenerated
func (s *mqlAzureSubscriptionKeyvault) Vaults() ([]interface{}, error) {
	res, ok := s.Cache.Load("vaults")
	if !ok || !res.Valid {
		if err := s.ComputeVaults(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vaults")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault\" calculated \"vaults\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaults")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault\" failed to cast field \"vaults\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvault) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault].MqlCompute")
	switch name {
	case "vaults":
		return s.ComputeVaults()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault\" resource")
	}
}

// ComputeVaults computer autogenerated
func (s *mqlAzureSubscriptionKeyvault) ComputeVaults() error {
	var err error
	if _, ok := s.Cache.Load("vaults"); ok {
		return nil
	}
	vres, err := s.GetVaults()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaults", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultVault resource interface
type AzureSubscriptionKeyvaultVault interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	VaultName() (string, error)
	Type() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	VaultUri() (string, error)
	Properties() (interface{}, error)
	Keys() ([]interface{}, error)
	Certificates() ([]interface{}, error)
	Secrets() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultVault for the azure.subscription.keyvault.vault resource
type mqlAzureSubscriptionKeyvaultVault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultVault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvault.vault resource
func newAzureSubscriptionKeyvaultVault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultVault{runtime.NewResource("azure.subscription.keyvault.vault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "vaultName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"vaultName\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "vaultUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"vaultUri\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.vault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvault.vault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultVault) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.vault\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("vaultName"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.vault\" resource without a \"vaultName\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.vault\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.vault\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.vault\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.vault].Register")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return nil
	case "properties":
		return nil
	case "keys":
		return nil
	case "certificates":
		return nil
	case "secrets":
		return nil
	case "diagnosticSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.vault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.vault].Field")
	switch name {
	case "id":
		return s.Id()
	case "vaultName":
		return s.VaultName()
	case "type":
		return s.Type()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "vaultUri":
		return s.VaultUri()
	case "properties":
		return s.Properties()
	case "keys":
		return s.Keys()
	case "certificates":
		return s.Certificates()
	case "secrets":
		return s.Secrets()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvault.vault\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.vault\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VaultName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) VaultName() (string, error) {
	res, ok := s.Cache.Load("vaultName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.vault\" failed: no value provided for static field \"vaultName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"vaultName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.vault\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.vault\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.vault\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// VaultUri accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) VaultUri() (string, error) {
	res, ok := s.Cache.Load("vaultUri")
	if !ok || !res.Valid {
		if err := s.ComputeVaultUri(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("vaultUri")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.vault\" calculated \"vaultUri\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaultUri")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"vaultUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.vault\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Keys accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.vault\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.vault\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.vault\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.vault\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.vault\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.vault].MqlCompute")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return s.ComputeVaultUri()
	case "properties":
		return s.ComputeProperties()
	case "keys":
		return s.ComputeKeys()
	case "certificates":
		return s.ComputeCertificates()
	case "secrets":
		return s.ComputeSecrets()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.vault\" resource")
	}
}

// ComputeVaultUri computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeVaultUri() error {
	var err error
	if _, ok := s.Cache.Load("vaultUri"); ok {
		return nil
	}
	vres, err := s.GetVaultUri()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaultUri", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeys computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCertificates computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecrets computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultVault) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultKey resource interface
type AzureSubscriptionKeyvaultKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Kid() (string, error)
	Tags() (map[string]interface{}, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	KeyName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultKey for the azure.subscription.keyvault.key resource
type mqlAzureSubscriptionKeyvaultKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvault.key resource
func newAzureSubscriptionKeyvaultKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultKey{runtime.NewResource("azure.subscription.keyvault.key")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "kid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"kid\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "keyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"keyName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvault.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("kid"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"kid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.key\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.key].Register")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.key].Field")
	switch name {
	case "kid":
		return s.Kid()
	case "tags":
		return s.Tags()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "keyName":
		return s.KeyName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvault.key\" resource")
	}
}

// Kid accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Kid() (string, error) {
	res, ok := s.Cache.Load("kid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"kid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"kid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.key\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) KeyName() (string, error) {
	res, ok := s.Cache.Load("keyName")
	if !ok || !res.Valid {
		if err := s.ComputeKeyName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("keyName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.key\" calculated \"keyName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"keyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.key\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.key\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.key\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.key].MqlCompute")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return s.ComputeKeyName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.key\" resource")
	}
}

// ComputeKeyName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) ComputeKeyName() error {
	var err error
	if _, ok := s.Cache.Load("keyName"); ok {
		return nil
	}
	vres, err := s.GetKeyName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultKey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultCertificate resource interface
type AzureSubscriptionKeyvaultCertificate interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	X5t() (string, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	CertName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultCertificate for the azure.subscription.keyvault.certificate resource
type mqlAzureSubscriptionKeyvaultCertificate struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultCertificate) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvault.certificate resource
func newAzureSubscriptionKeyvaultCertificate(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultCertificate{runtime.NewResource("azure.subscription.keyvault.certificate")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "x5t":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"x5t\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "certName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"certName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.certificate\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvault.certificate with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultCertificate) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("x5t"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"x5t\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.certificate\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.certificate].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.certificate\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.certificate].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "x5t":
		return s.X5t()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "certName":
		return s.CertName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvault.certificate\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// X5t accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) X5t() (string, error) {
	res, ok := s.Cache.Load("x5t")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"x5t\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"x5t\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.certificate\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) CertName() (string, error) {
	res, ok := s.Cache.Load("certName")
	if !ok || !res.Valid {
		if err := s.ComputeCertName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("certName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.certificate\" calculated \"certName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"certName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.certificate\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.certificate\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.certificate\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.certificate].MqlCompute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return s.ComputeCertName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.certificate\" resource")
	}
}

// ComputeCertName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) ComputeCertName() error {
	var err error
	if _, ok := s.Cache.Load("certName"); ok {
		return nil
	}
	vres, err := s.GetCertName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultCertificate) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultSecret resource interface
type AzureSubscriptionKeyvaultSecret interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	ContentType() (string, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	SecretName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultSecret for the azure.subscription.keyvault.secret resource
type mqlAzureSubscriptionKeyvaultSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvault.secret resource
func newAzureSubscriptionKeyvaultSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultSecret{runtime.NewResource("azure.subscription.keyvault.secret")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "contentType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"contentType\" argument has the wrong type (expected type \"string\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "secretName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"secretName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvault.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvault.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("contentType"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"contentType\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvault.secret\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.secret].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.secret].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "contentType":
		return s.ContentType()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "secretName":
		return s.SecretName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvault.secret\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ContentType accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) ContentType() (string, error) {
	res, ok := s.Cache.Load("contentType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"contentType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"contentType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvault.secret\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// SecretName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) SecretName() (string, error) {
	res, ok := s.Cache.Load("secretName")
	if !ok || !res.Valid {
		if err := s.ComputeSecretName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("secretName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.secret\" calculated \"secretName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secretName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"secretName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvault.secret\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvault.secret\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvault.secret\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvault.secret].MqlCompute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return s.ComputeSecretName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvault.secret\" resource")
	}
}

// ComputeSecretName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) ComputeSecretName() error {
	var err error
	if _, ok := s.Cache.Load("secretName"); ok {
		return nil
	}
	vres, err := s.GetSecretName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secretName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultSecret) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitor resource interface
type AzureSubscriptionMonitor interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	LogProfiles() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
	ActivityLog() (AzureSubscriptionMonitorActivitylog, error)
}

// mqlAzureSubscriptionMonitor for the azure.subscription.monitor resource
type mqlAzureSubscriptionMonitor struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitor) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitor resource
func newAzureSubscriptionMonitor(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitor{runtime.NewResource("azure.subscription.monitor")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "logProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor\", its \"logProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "activityLog":
			if _, ok := val.(AzureSubscriptionMonitorActivitylog); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor\", its \"activityLog\" argument has the wrong type (expected type \"AzureSubscriptionMonitorActivitylog\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitor with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitor) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor].Register")
	switch name {
	case "logProfiles":
		return nil
	case "diagnosticSettings":
		return nil
	case "activityLog":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor].Field")
	switch name {
	case "logProfiles":
		return s.LogProfiles()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	case "activityLog":
		return s.ActivityLog()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitor\" resource")
	}
}

// LogProfiles accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) LogProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("logProfiles")
	if !ok || !res.Valid {
		if err := s.ComputeLogProfiles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logProfiles")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitor\" calculated \"logProfiles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logProfiles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor\" failed to cast field \"logProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitor\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ActivityLog accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) ActivityLog() (AzureSubscriptionMonitorActivitylog, error) {
	res, ok := s.Cache.Load("activityLog")
	if !ok || !res.Valid {
		if err := s.ComputeActivityLog(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("activityLog")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitor\" calculated \"activityLog\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "activityLog")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMonitorActivitylog)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor\" failed to cast field \"activityLog\" to the right type (AzureSubscriptionMonitorActivitylog): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitor) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor].MqlCompute")
	switch name {
	case "logProfiles":
		return s.ComputeLogProfiles()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	case "activityLog":
		return s.ComputeActivityLog()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor\" resource")
	}
}

// ComputeLogProfiles computer autogenerated
func (s *mqlAzureSubscriptionMonitor) ComputeLogProfiles() error {
	var err error
	if _, ok := s.Cache.Load("logProfiles"); ok {
		return nil
	}
	vres, err := s.GetLogProfiles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logProfiles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzureSubscriptionMonitor) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeActivityLog computer autogenerated
func (s *mqlAzureSubscriptionMonitor) ComputeActivityLog() error {
	var err error
	if _, ok := s.Cache.Load("activityLog"); ok {
		return nil
	}
	vres, err := s.GetActivityLog()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("activityLog", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitorActivitylog resource interface
type AzureSubscriptionMonitorActivitylog interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Alerts() ([]interface{}, error)
}

// mqlAzureSubscriptionMonitorActivitylog for the azure.subscription.monitor.activitylog resource
type mqlAzureSubscriptionMonitorActivitylog struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorActivitylog) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitor.activitylog resource
func newAzureSubscriptionMonitorActivitylog(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorActivitylog{runtime.NewResource("azure.subscription.monitor.activitylog")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "alerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog\", its \"alerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitor.activitylog with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorActivitylog) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylog) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog].Register")
	switch name {
	case "alerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylog) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog].Field")
	switch name {
	case "alerts":
		return s.Alerts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog\" resource")
	}
}

// Alerts accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylog) Alerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("alerts")
	if !ok || !res.Valid {
		if err := s.ComputeAlerts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("alerts")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitor.activitylog\" calculated \"alerts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "alerts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.activitylog\" failed to cast field \"alerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylog) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog].MqlCompute")
	switch name {
	case "alerts":
		return s.ComputeAlerts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog\" resource")
	}
}

// ComputeAlerts computer autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylog) ComputeAlerts() error {
	var err error
	if _, ok := s.Cache.Load("alerts"); ok {
		return nil
	}
	vres, err := s.GetAlerts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("alerts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitorActivitylogAlert resource interface
type AzureSubscriptionMonitorActivitylogAlert interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Type() (string, error)
	Name() (string, error)
	Description() (string, error)
	Conditions() ([]interface{}, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Actions() ([]interface{}, error)
	Scopes() ([]interface{}, error)
}

// mqlAzureSubscriptionMonitorActivitylogAlert for the azure.subscription.monitor.activitylog.alert resource
type mqlAzureSubscriptionMonitorActivitylogAlert struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitor.activitylog.alert resource
func newAzureSubscriptionMonitorActivitylogAlert(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorActivitylogAlert{runtime.NewResource("azure.subscription.monitor.activitylog.alert")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "conditions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"conditions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "actions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"actions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.activitylog.alert\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitor.activitylog.alert with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("conditions"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"conditions\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("actions"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"actions\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.activitylog.alert\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog.alert].Register")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "conditions":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "actions":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog.alert\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog.alert].Field")
	switch name {
	case "id":
		return s.Id()
	case "type":
		return s.Type()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "conditions":
		return s.Conditions()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "actions":
		return s.Actions()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog.alert\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Conditions accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Conditions() ([]interface{}, error) {
	res, ok := s.Cache.Load("conditions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"conditions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"conditions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Actions accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Actions() ([]interface{}, error) {
	res, ok := s.Cache.Load("actions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"actions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"actions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.activitylog.alert\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.activitylog.alert\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorActivitylogAlert) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.activitylog.alert].MqlCompute")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "conditions":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "actions":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.activitylog.alert\" resource")
	}
}

// AzureSubscriptionMonitorLogprofile resource interface
type AzureSubscriptionMonitorLogprofile interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureSubscriptionStorageAccount, error)
}

// mqlAzureSubscriptionMonitorLogprofile for the azure.subscription.monitor.logprofile resource
type mqlAzureSubscriptionMonitorLogprofile struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorLogprofile) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitor.logprofile resource
func newAzureSubscriptionMonitorLogprofile(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorLogprofile{runtime.NewResource("azure.subscription.monitor.logprofile")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureSubscriptionStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"storageAccount\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.logprofile\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitor.logprofile with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorLogprofile) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.logprofile\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.logprofile].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.logprofile\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.logprofile].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitor.logprofile\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) StorageAccount() (AzureSubscriptionStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.logprofile\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.logprofile\" failed to cast field \"storageAccount\" to the right type (AzureSubscriptionStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorLogprofile) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.logprofile].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.logprofile\" resource")
	}
}

// AzureSubscriptionMonitorDiagnosticsetting resource interface
type AzureSubscriptionMonitorDiagnosticsetting interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureSubscriptionStorageAccount, error)
}

// mqlAzureSubscriptionMonitorDiagnosticsetting for the azure.subscription.monitor.diagnosticsetting resource
type mqlAzureSubscriptionMonitorDiagnosticsetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitor.diagnosticsetting resource
func newAzureSubscriptionMonitorDiagnosticsetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorDiagnosticsetting{runtime.NewResource("azure.subscription.monitor.diagnosticsetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureSubscriptionStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"storageAccount\" argument has the wrong type (expected type \"AzureSubscriptionStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitor.diagnosticsetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitor.diagnosticsetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.diagnosticsetting\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.diagnosticsetting\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.diagnosticsetting\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.diagnosticsetting\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.subscription.monitor.diagnosticsetting\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.diagnosticsetting].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.diagnosticsetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.diagnosticsetting].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitor.diagnosticsetting\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.diagnosticsetting\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.diagnosticsetting\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.diagnosticsetting\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.diagnosticsetting\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitor.diagnosticsetting\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitor.diagnosticsetting\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.diagnosticsetting\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.diagnosticsetting\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) StorageAccount() (AzureSubscriptionStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitor.diagnosticsetting\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitor.diagnosticsetting\" failed to cast field \"storageAccount\" to the right type (AzureSubscriptionStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorDiagnosticsetting) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitor.diagnosticsetting].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitor.diagnosticsetting\" resource")
	}
}

// AzureSubscriptionCloudDefender resource interface
type AzureSubscriptionCloudDefender interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	MonitoringAgentAutoProvision() (bool, error)
	DefenderForServers() (interface{}, error)
	DefenderForContainers() (interface{}, error)
	SecurityContacts() ([]interface{}, error)
}

// mqlAzureSubscriptionCloudDefender for the azure.subscription.cloudDefender resource
type mqlAzureSubscriptionCloudDefender struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCloudDefender) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cloudDefender resource
func newAzureSubscriptionCloudDefender(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCloudDefender{runtime.NewResource("azure.subscription.cloudDefender")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "monitoringAgentAutoProvision":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender\", its \"monitoringAgentAutoProvision\" argument has the wrong type (expected type \"bool\")")
			}
		case "defenderForServers":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender\", its \"defenderForServers\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "defenderForContainers":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender\", its \"defenderForContainers\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityContacts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender\", its \"securityContacts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cloudDefender with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCloudDefender) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender].Register")
	switch name {
	case "monitoringAgentAutoProvision":
		return nil
	case "defenderForServers":
		return nil
	case "defenderForContainers":
		return nil
	case "securityContacts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender].Field")
	switch name {
	case "monitoringAgentAutoProvision":
		return s.MonitoringAgentAutoProvision()
	case "defenderForServers":
		return s.DefenderForServers()
	case "defenderForContainers":
		return s.DefenderForContainers()
	case "securityContacts":
		return s.SecurityContacts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender\" resource")
	}
}

// MonitoringAgentAutoProvision accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) MonitoringAgentAutoProvision() (bool, error) {
	res, ok := s.Cache.Load("monitoringAgentAutoProvision")
	if !ok || !res.Valid {
		if err := s.ComputeMonitoringAgentAutoProvision(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("monitoringAgentAutoProvision")
		if !ok {
			return false, errors.New("\"azure.subscription.cloudDefender\" calculated \"monitoringAgentAutoProvision\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "monitoringAgentAutoProvision")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.cloudDefender\" failed to cast field \"monitoringAgentAutoProvision\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DefenderForServers accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) DefenderForServers() (interface{}, error) {
	res, ok := s.Cache.Load("defenderForServers")
	if !ok || !res.Valid {
		if err := s.ComputeDefenderForServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("defenderForServers")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefender\" calculated \"defenderForServers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defenderForServers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender\" failed to cast field \"defenderForServers\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DefenderForContainers accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) DefenderForContainers() (interface{}, error) {
	res, ok := s.Cache.Load("defenderForContainers")
	if !ok || !res.Valid {
		if err := s.ComputeDefenderForContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("defenderForContainers")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefender\" calculated \"defenderForContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defenderForContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender\" failed to cast field \"defenderForContainers\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityContacts accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) SecurityContacts() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityContacts")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityContacts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityContacts")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefender\" calculated \"securityContacts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityContacts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender\" failed to cast field \"securityContacts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefender) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender].MqlCompute")
	switch name {
	case "monitoringAgentAutoProvision":
		return s.ComputeMonitoringAgentAutoProvision()
	case "defenderForServers":
		return s.ComputeDefenderForServers()
	case "defenderForContainers":
		return s.ComputeDefenderForContainers()
	case "securityContacts":
		return s.ComputeSecurityContacts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender\" resource")
	}
}

// ComputeMonitoringAgentAutoProvision computer autogenerated
func (s *mqlAzureSubscriptionCloudDefender) ComputeMonitoringAgentAutoProvision() error {
	var err error
	if _, ok := s.Cache.Load("monitoringAgentAutoProvision"); ok {
		return nil
	}
	vres, err := s.GetMonitoringAgentAutoProvision()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("monitoringAgentAutoProvision", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefenderForServers computer autogenerated
func (s *mqlAzureSubscriptionCloudDefender) ComputeDefenderForServers() error {
	var err error
	if _, ok := s.Cache.Load("defenderForServers"); ok {
		return nil
	}
	vres, err := s.GetDefenderForServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defenderForServers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefenderForContainers computer autogenerated
func (s *mqlAzureSubscriptionCloudDefender) ComputeDefenderForContainers() error {
	var err error
	if _, ok := s.Cache.Load("defenderForContainers"); ok {
		return nil
	}
	vres, err := s.GetDefenderForContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defenderForContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityContacts computer autogenerated
func (s *mqlAzureSubscriptionCloudDefender) ComputeSecurityContacts() error {
	var err error
	if _, ok := s.Cache.Load("securityContacts"); ok {
		return nil
	}
	vres, err := s.GetSecurityContacts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityContacts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionCloudDefenderSecurityContact resource interface
type AzureSubscriptionCloudDefenderSecurityContact interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Emails() ([]interface{}, error)
	AlertNotifications() (interface{}, error)
	NotificationsByRole() (interface{}, error)
}

// mqlAzureSubscriptionCloudDefenderSecurityContact for the azure.subscription.cloudDefender.securityContact resource
type mqlAzureSubscriptionCloudDefenderSecurityContact struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cloudDefender.securityContact resource
func newAzureSubscriptionCloudDefenderSecurityContact(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCloudDefenderSecurityContact{runtime.NewResource("azure.subscription.cloudDefender.securityContact")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "emails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"emails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "alertNotifications":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"alertNotifications\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "notificationsByRole":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"notificationsByRole\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefender.securityContact\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cloudDefender.securityContact with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefender.securityContact\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefender.securityContact\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("emails"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefender.securityContact\" resource without a \"emails\". This field is required.")
	}
	if _, ok := s.Cache.Load("alertNotifications"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefender.securityContact\" resource without a \"alertNotifications\". This field is required.")
	}
	if _, ok := s.Cache.Load("notificationsByRole"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefender.securityContact\" resource without a \"notificationsByRole\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender.securityContact].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender.securityContact\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender.securityContact].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "emails":
		return s.Emails()
	case "alertNotifications":
		return s.AlertNotifications()
	case "notificationsByRole":
		return s.NotificationsByRole()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender.securityContact\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cloudDefender.securityContact\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cloudDefender.securityContact\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cloudDefender.securityContact\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cloudDefender.securityContact\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Emails accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) Emails() ([]interface{}, error) {
	res, ok := s.Cache.Load("emails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefender.securityContact\" failed: no value provided for static field \"emails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender.securityContact\" failed to cast field \"emails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AlertNotifications accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) AlertNotifications() (interface{}, error) {
	res, ok := s.Cache.Load("alertNotifications")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefender.securityContact\" failed: no value provided for static field \"alertNotifications\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender.securityContact\" failed to cast field \"alertNotifications\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// NotificationsByRole accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) NotificationsByRole() (interface{}, error) {
	res, ok := s.Cache.Load("notificationsByRole")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefender.securityContact\" failed: no value provided for static field \"notificationsByRole\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefender.securityContact\" failed to cast field \"notificationsByRole\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderSecurityContact) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefender.securityContact].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefender.securityContact\" resource")
	}
}

// AzureSubscriptionAuthorization resource interface
type AzureSubscriptionAuthorization interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	RoleDefinitions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorization for the azure.subscription.authorization resource
type mqlAzureSubscriptionAuthorization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorization resource
func newAzureSubscriptionAuthorization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorization{runtime.NewResource("azure.subscription.authorization")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "roleDefinitions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization\", its \"roleDefinitions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorization) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization].Register")
	switch name {
	case "roleDefinitions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization].Field")
	switch name {
	case "roleDefinitions":
		return s.RoleDefinitions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorization\" resource")
	}
}

// RoleDefinitions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorization) RoleDefinitions() ([]interface{}, error) {
	res, ok := s.Cache.Load("roleDefinitions")
	if !ok || !res.Valid {
		if err := s.ComputeRoleDefinitions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roleDefinitions")
		if !ok {
			return nil, errors.New("\"azure.subscription.authorization\" calculated \"roleDefinitions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roleDefinitions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization\" failed to cast field \"roleDefinitions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorization) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization].MqlCompute")
	switch name {
	case "roleDefinitions":
		return s.ComputeRoleDefinitions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization\" resource")
	}
}

// ComputeRoleDefinitions computer autogenerated
func (s *mqlAzureSubscriptionAuthorization) ComputeRoleDefinitions() error {
	var err error
	if _, ok := s.Cache.Load("roleDefinitions"); ok {
		return nil
	}
	vres, err := s.GetRoleDefinitions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roleDefinitions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionAuthorizationRoleDefinition resource interface
type AzureSubscriptionAuthorizationRoleDefinition interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Description() (string, error)
	Name() (string, error)
	IsCustom() (bool, error)
	Scopes() ([]interface{}, error)
	Permissions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorizationRoleDefinition for the azure.subscription.authorization.roleDefinition resource
type mqlAzureSubscriptionAuthorizationRoleDefinition struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorization.roleDefinition resource
func newAzureSubscriptionAuthorizationRoleDefinition(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorizationRoleDefinition{runtime.NewResource("azure.subscription.authorization.roleDefinition")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isCustom":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"isCustom\" argument has the wrong type (expected type \"bool\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "permissions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"permissions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorization.roleDefinition with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isCustom"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"isCustom\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"scopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("permissions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition\" resource without a \"permissions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition].Register")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition].Field")
	switch name {
	case "id":
		return s.Id()
	case "description":
		return s.Description()
	case "name":
		return s.Name()
	case "isCustom":
		return s.IsCustom()
	case "scopes":
		return s.Scopes()
	case "permissions":
		return s.Permissions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsCustom accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) IsCustom() (bool, error) {
	res, ok := s.Cache.Load("isCustom")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"isCustom\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"isCustom\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Permissions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) Permissions() ([]interface{}, error) {
	res, ok := s.Cache.Load("permissions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition\" failed: no value provided for static field \"permissions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition\" failed to cast field \"permissions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinition) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition].MqlCompute")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition\" resource")
	}
}

// AzureSubscriptionAuthorizationRoleDefinitionPermission resource interface
type AzureSubscriptionAuthorizationRoleDefinitionPermission interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AllowedActions() ([]interface{}, error)
	DeniedActions() ([]interface{}, error)
	AllowedDataActions() ([]interface{}, error)
	DeniedDataActions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorizationRoleDefinitionPermission for the azure.subscription.authorization.roleDefinition.permission resource
type mqlAzureSubscriptionAuthorizationRoleDefinitionPermission struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorization.roleDefinition.permission resource
func newAzureSubscriptionAuthorizationRoleDefinitionPermission(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorizationRoleDefinitionPermission{runtime.NewResource("azure.subscription.authorization.roleDefinition.permission")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"allowedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"deniedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "allowedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"allowedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"deniedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorization.roleDefinition.permission\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorization.roleDefinition.permission with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition.permission\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition.permission\" resource without a \"allowedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition.permission\" resource without a \"deniedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedDataActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition.permission\" resource without a \"allowedDataActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedDataActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorization.roleDefinition.permission\" resource without a \"deniedDataActions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition.permission].Register")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition.permission\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition.permission].Field")
	switch name {
	case "id":
		return s.Id()
	case "allowedActions":
		return s.AllowedActions()
	case "deniedActions":
		return s.DeniedActions()
	case "allowedDataActions":
		return s.AllowedDataActions()
	case "deniedDataActions":
		return s.DeniedDataActions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition.permission\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorization.roleDefinition.permission\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorization.roleDefinition.permission\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) AllowedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition.permission\" failed: no value provided for static field \"allowedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition.permission\" failed to cast field \"allowedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) DeniedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition.permission\" failed: no value provided for static field \"deniedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition.permission\" failed to cast field \"deniedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AllowedDataActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) AllowedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition.permission\" failed: no value provided for static field \"allowedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition.permission\" failed to cast field \"allowedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedDataActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) DeniedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorization.roleDefinition.permission\" failed: no value provided for static field \"deniedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorization.roleDefinition.permission\" failed to cast field \"deniedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationRoleDefinitionPermission) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorization.roleDefinition.permission].MqlCompute")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorization.roleDefinition.permission\" resource")
	}
}

