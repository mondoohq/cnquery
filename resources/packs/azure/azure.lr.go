// Code generated by resources. DO NOT EDIT.
package azure

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("azuread", newAzuread)
	registry.AddFactory("azuread.user", newAzureadUser)
	registry.AddFactory("azuread.group", newAzureadGroup)
	registry.AddFactory("azuread.domain", newAzureadDomain)
	registry.AddFactory("azuread.application", newAzureadApplication)
	registry.AddFactory("azuread.serviceprincipal", newAzureadServiceprincipal)
	registry.AddFactory("azure.subscription", newAzureSubscription)
	registry.AddFactory("azure.subscription.resource", newAzureSubscriptionResource)
	registry.AddFactory("azure.subscription.resourcegroup", newAzureSubscriptionResourcegroup)
	registry.AddFactory("azure.subscription.computeService", newAzureSubscriptionComputeService)
	registry.AddFactory("azure.subscription.computeService.vm", newAzureSubscriptionComputeServiceVm)
	registry.AddFactory("azure.subscription.computeService.disk", newAzureSubscriptionComputeServiceDisk)
	registry.AddFactory("azure.subscription.networkService", newAzureSubscriptionNetworkService)
	registry.AddFactory("azure.subscription.networkService.interface", newAzureSubscriptionNetworkServiceInterface)
	registry.AddFactory("azure.subscription.networkService.ipAddress", newAzureSubscriptionNetworkServiceIpAddress)
	registry.AddFactory("azure.subscription.networkService.bastionHost", newAzureSubscriptionNetworkServiceBastionHost)
	registry.AddFactory("azure.subscription.networkService.securityGroup", newAzureSubscriptionNetworkServiceSecurityGroup)
	registry.AddFactory("azure.subscription.networkService.securityrule", newAzureSubscriptionNetworkServiceSecurityrule)
	registry.AddFactory("azure.subscription.networkService.watcher", newAzureSubscriptionNetworkServiceWatcher)
	registry.AddFactory("azure.subscription.networkService.watcher.flowlog", newAzureSubscriptionNetworkServiceWatcherFlowlog)
	registry.AddFactory("azure.subscription.storageService", newAzureSubscriptionStorageService)
	registry.AddFactory("azure.subscription.storageService.account", newAzureSubscriptionStorageServiceAccount)
	registry.AddFactory("azure.subscription.storageService.account.dataProtection", newAzureSubscriptionStorageServiceAccountDataProtection)
	registry.AddFactory("azure.subscription.storageService.account.blobService.properties", newAzureSubscriptionStorageServiceAccountBlobServiceProperties)
	registry.AddFactory("azure.subscription.storageService.account.queueService.properties", newAzureSubscriptionStorageServiceAccountQueueServiceProperties)
	registry.AddFactory("azure.subscription.storageService.account.tableService.properties", newAzureSubscriptionStorageServiceAccountTableServiceProperties)
	registry.AddFactory("azure.subscription.storageService.account.service.properties.metrics", newAzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	registry.AddFactory("azure.subscription.storageService.account.service.properties.retentionPolicy", newAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy)
	registry.AddFactory("azure.subscription.storageService.account.service.properties.logging", newAzureSubscriptionStorageServiceAccountServicePropertiesLogging)
	registry.AddFactory("azure.subscription.storageService.account.container", newAzureSubscriptionStorageServiceAccountContainer)
	registry.AddFactory("azure.subscription.webService", newAzureSubscriptionWebService)
	registry.AddFactory("azure.subscription.webService.appsite", newAzureSubscriptionWebServiceAppsite)
	registry.AddFactory("azure.subscription.webService.appsiteauthsettings", newAzureSubscriptionWebServiceAppsiteauthsettings)
	registry.AddFactory("azure.subscription.webService.appsiteconfig", newAzureSubscriptionWebServiceAppsiteconfig)
	registry.AddFactory("azure.subscription.sqlService", newAzureSubscriptionSqlService)
	registry.AddFactory("azure.subscription.sqlService.server", newAzureSubscriptionSqlServiceServer)
	registry.AddFactory("azure.subscription.sqlService.server.vulnerabilityassessmentsettings", newAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings)
	registry.AddFactory("azure.subscription.sqlService.server.administrator", newAzureSubscriptionSqlServiceServerAdministrator)
	registry.AddFactory("azure.subscription.sqlService.database", newAzureSubscriptionSqlServiceDatabase)
	registry.AddFactory("azure.subscription.sqlService.databaseusage", newAzureSubscriptionSqlServiceDatabaseusage)
	registry.AddFactory("azure.subscription.postgresqlService", newAzureSubscriptionPostgresqlService)
	registry.AddFactory("azure.subscription.postgresqlService.server", newAzureSubscriptionPostgresqlServiceServer)
	registry.AddFactory("azure.subscription.postgresqlService.database", newAzureSubscriptionPostgresqlServiceDatabase)
	registry.AddFactory("azure.subscription.mysqlService", newAzureSubscriptionMysqlService)
	registry.AddFactory("azure.subscription.mysqlService.server", newAzureSubscriptionMysqlServiceServer)
	registry.AddFactory("azure.subscription.mysqlService.database", newAzureSubscriptionMysqlServiceDatabase)
	registry.AddFactory("azure.subscription.mysqlService.flexibleServer", newAzureSubscriptionMysqlServiceFlexibleServer)
	registry.AddFactory("azure.subscription.mariadbService", newAzureSubscriptionMariadbService)
	registry.AddFactory("azure.subscription.mariadbService.server", newAzureSubscriptionMariadbServiceServer)
	registry.AddFactory("azure.subscription.mariadbService.database", newAzureSubscriptionMariadbServiceDatabase)
	registry.AddFactory("azure.subscription.cosmosdbService", newAzureSubscriptionCosmosdbService)
	registry.AddFactory("azure.subscription.cosmosdbService.account", newAzureSubscriptionCosmosdbServiceAccount)
	registry.AddFactory("azure.subscription.sqlService.configuration", newAzureSubscriptionSqlServiceConfiguration)
	registry.AddFactory("azure.subscription.sqlService.firewallrule", newAzureSubscriptionSqlServiceFirewallrule)
	registry.AddFactory("azure.subscription.sqlService.virtualNetworkRule", newAzureSubscriptionSqlServiceVirtualNetworkRule)
	registry.AddFactory("azure.subscription.keyvaultService", newAzureSubscriptionKeyvaultService)
	registry.AddFactory("azure.subscription.keyvaultService.vault", newAzureSubscriptionKeyvaultServiceVault)
	registry.AddFactory("azure.subscription.keyvaultService.key", newAzureSubscriptionKeyvaultServiceKey)
	registry.AddFactory("azure.subscription.keyvaultService.certificate", newAzureSubscriptionKeyvaultServiceCertificate)
	registry.AddFactory("azure.subscription.keyvaultService.secret", newAzureSubscriptionKeyvaultServiceSecret)
	registry.AddFactory("azure.subscription.monitorService", newAzureSubscriptionMonitorService)
	registry.AddFactory("azure.subscription.monitorService.activitylog", newAzureSubscriptionMonitorServiceActivitylog)
	registry.AddFactory("azure.subscription.monitorService.applicationInsight", newAzureSubscriptionMonitorServiceApplicationInsight)
	registry.AddFactory("azure.subscription.monitorService.activitylog.alert", newAzureSubscriptionMonitorServiceActivitylogAlert)
	registry.AddFactory("azure.subscription.monitorService.logprofile", newAzureSubscriptionMonitorServiceLogprofile)
	registry.AddFactory("azure.subscription.monitorService.diagnosticsetting", newAzureSubscriptionMonitorServiceDiagnosticsetting)
	registry.AddFactory("azure.subscription.cloudDefenderService", newAzureSubscriptionCloudDefenderService)
	registry.AddFactory("azure.subscription.cloudDefenderService.securityContact", newAzureSubscriptionCloudDefenderServiceSecurityContact)
	registry.AddFactory("azure.subscription.authorizationService", newAzureSubscriptionAuthorizationService)
	registry.AddFactory("azure.subscription.authorizationService.roleDefinition", newAzureSubscriptionAuthorizationServiceRoleDefinition)
	registry.AddFactory("azure.subscription.authorizationService.roleDefinition.permission", newAzureSubscriptionAuthorizationServiceRoleDefinitionPermission)
	registry.AddFactory("azure.subscription.aksService", newAzureSubscriptionAksService)
	registry.AddFactory("azure.subscription.aksService.cluster", newAzureSubscriptionAksServiceCluster)
}

// Azuread resource interface
type Azuread interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	ServicePrincipals() ([]interface{}, error)
}

// mqlAzuread for the azuread resource
type mqlAzuread struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzuread) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread resource
func newAzuread(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzuread{runtime.NewResource("azuread")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "servicePrincipals":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"servicePrincipals\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzuread) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzuread) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "servicePrincipals":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzuread) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "servicePrincipals":
		return s.ServicePrincipals()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlAzuread) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAzuread) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlAzuread) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlAzuread) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServicePrincipals accessor autogenerated
func (s *mqlAzuread) ServicePrincipals() ([]interface{}, error) {
	res, ok := s.Cache.Load("servicePrincipals")
	if !ok || !res.Valid {
		if err := s.ComputeServicePrincipals(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servicePrincipals")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"servicePrincipals\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servicePrincipals")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"servicePrincipals\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzuread) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].MqlCompute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "servicePrincipals":
		return s.ComputeServicePrincipals()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlAzuread) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAzuread) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlAzuread) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlAzuread) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServicePrincipals computer autogenerated
func (s *mqlAzuread) ComputeServicePrincipals() error {
	var err error
	if _, ok := s.Cache.Load("servicePrincipals"); ok {
		return nil
	}
	vres, err := s.GetServicePrincipals()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servicePrincipals", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadUser resource interface
type AzureadUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	GivenName() (string, error)
	Surname() (string, error)
	UserPrincipalName() (string, error)
	AccountEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	UserType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadUser for the azuread.user resource
type mqlAzureadUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.user resource
func newAzureadUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadUser{runtime.NewResource("azuread.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "surname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"surname\" argument has the wrong type (expected type \"string\")")
			}
		case "userPrincipalName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userPrincipalName\" argument has the wrong type (expected type \"string\")")
			}
		case "accountEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"accountEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "userType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("surname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"surname\". This field is required.")
	}
	if _, ok := s.Cache.Load("userPrincipalName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userPrincipalName\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountEnabled"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"accountEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mail\". This field is required.")
	}
	if _, ok := s.Cache.Load("userType"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "userType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "givenName":
		return s.GivenName()
	case "surname":
		return s.Surname()
	case "userPrincipalName":
		return s.UserPrincipalName()
	case "accountEnabled":
		return s.AccountEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "userType":
		return s.UserType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadUser) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlAzureadUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Surname accessor autogenerated
func (s *mqlAzureadUser) Surname() (string, error) {
	res, ok := s.Cache.Load("surname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"surname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"surname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserPrincipalName accessor autogenerated
func (s *mqlAzureadUser) UserPrincipalName() (string, error) {
	res, ok := s.Cache.Load("userPrincipalName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userPrincipalName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userPrincipalName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountEnabled accessor autogenerated
func (s *mqlAzureadUser) AccountEnabled() (bool, error) {
	res, ok := s.Cache.Load("accountEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.user\" failed: no value provided for static field \"accountEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.user\" failed to cast field \"accountEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadUser) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadUser) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadUser) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.user\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserType accessor autogenerated
func (s *mqlAzureadUser) UserType() (string, error) {
	res, ok := s.Cache.Load("userType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadUser) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.user\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.user\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].MqlCompute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "userType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadUser) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadUser) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadGroup resource interface
type AzureadGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	SecurityEnabled() (bool, error)
	MailEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	Properties() (interface{}, error)
	Members() ([]interface{}, error)
}

// mqlAzureadGroup for the azuread.group resource
type mqlAzureadGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.group resource
func newAzureadGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadGroup{runtime.NewResource("azuread.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "securityEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"securityEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"securityEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "properties":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "securityEnabled":
		return s.SecurityEnabled()
	case "mailEnabled":
		return s.MailEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "properties":
		return s.Properties()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadGroup) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityEnabled accessor autogenerated
func (s *mqlAzureadGroup) SecurityEnabled() (bool, error) {
	res, ok := s.Cache.Load("securityEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"securityEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"securityEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailEnabled accessor autogenerated
func (s *mqlAzureadGroup) MailEnabled() (bool, error) {
	res, ok := s.Cache.Load("mailEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"mailEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"mailEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadGroup) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadGroup) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadGroup) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.group\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadGroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlAzureadGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].MqlCompute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "properties":
		return s.ComputeProperties()
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadGroup) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadGroup) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMembers computer autogenerated
func (s *mqlAzureadGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadDomain resource interface
type AzureadDomain interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsVerified() (bool, error)
	IsDefault() (bool, error)
	AuthenticationType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadDomain for the azuread.domain resource
type mqlAzureadDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.domain resource
func newAzureadDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadDomain{runtime.NewResource("azuread.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "authenticationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"authenticationType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isVerified"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationType"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"authenticationType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Register")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.domain].Field")
	switch name {
	case "name":
		return s.Name()
	case "isVerified":
		return s.IsVerified()
	case "isDefault":
		return s.IsDefault()
	case "authenticationType":
		return s.AuthenticationType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAzureadDomain) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsVerified accessor autogenerated
func (s *mqlAzureadDomain) IsVerified() (bool, error) {
	res, ok := s.Cache.Load("isVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlAzureadDomain) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AuthenticationType accessor autogenerated
func (s *mqlAzureadDomain) AuthenticationType() (string, error) {
	res, ok := s.Cache.Load("authenticationType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"authenticationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"authenticationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadDomain) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.domain\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.domain\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadDomain) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].MqlCompute")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadDomain) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadApplication resource interface
type AzureadApplication interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadApplication for the azuread.application resource
type mqlAzureadApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.application resource
func newAzureadApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadApplication{runtime.NewResource("azuread.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.application\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.application].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadApplication) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].MqlCompute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// AzureadServiceprincipal resource interface
type AzureadServiceprincipal interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadServiceprincipal for the azuread.serviceprincipal resource
type mqlAzureadServiceprincipal struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadServiceprincipal) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.serviceprincipal resource
func newAzureadServiceprincipal(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadServiceprincipal{runtime.NewResource("azuread.serviceprincipal")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.serviceprincipal with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadServiceprincipal) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.serviceprincipal\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadServiceprincipal) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadServiceprincipal) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadServiceprincipal) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.serviceprincipal\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.serviceprincipal\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadServiceprincipal) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].MqlCompute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// AzureSubscription resource interface
type AzureSubscription interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	SubscriptionId() (string, error)
	TenantId() (string, error)
	ManagedByTenants() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
	State() (string, error)
	AuthorizationSource() (string, error)
	SubscriptionsPolicies() (interface{}, error)
	ResourceGroups() ([]interface{}, error)
	Compute() (AzureSubscriptionComputeService, error)
	Network() (AzureSubscriptionNetworkService, error)
	Storage() (AzureSubscriptionStorageService, error)
	Web() (AzureSubscriptionWebService, error)
	Sql() (AzureSubscriptionSqlService, error)
	MySql() (AzureSubscriptionMysqlService, error)
	PostgreSql() (AzureSubscriptionPostgresqlService, error)
	MariaDb() (AzureSubscriptionMariadbService, error)
	CosmosDb() (AzureSubscriptionCosmosdbService, error)
	KeyVault() (AzureSubscriptionKeyvaultService, error)
	Authorization() (AzureSubscriptionAuthorizationService, error)
	Monitor() (AzureSubscriptionMonitorService, error)
	CloudDefender() (AzureSubscriptionCloudDefenderService, error)
	Resources() ([]interface{}, error)
	Aks() (AzureSubscriptionAksService, error)
}

// mqlAzureSubscription for the azure.subscription resource
type mqlAzureSubscription struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscription) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription resource
func newAzureSubscription(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscription{runtime.NewResource("azure.subscription")}
	var existing AzureSubscription
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByTenants":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"managedByTenants\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "authorizationSource":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"authorizationSource\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionsPolicies":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"subscriptionsPolicies\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "resourceGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"resourceGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "compute":
			if _, ok := val.(AzureSubscriptionComputeService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"compute\" argument has the wrong type (expected type \"AzureSubscriptionComputeService\")")
			}
		case "network":
			if _, ok := val.(AzureSubscriptionNetworkService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"network\" argument has the wrong type (expected type \"AzureSubscriptionNetworkService\")")
			}
		case "storage":
			if _, ok := val.(AzureSubscriptionStorageService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"storage\" argument has the wrong type (expected type \"AzureSubscriptionStorageService\")")
			}
		case "web":
			if _, ok := val.(AzureSubscriptionWebService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"web\" argument has the wrong type (expected type \"AzureSubscriptionWebService\")")
			}
		case "sql":
			if _, ok := val.(AzureSubscriptionSqlService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"sql\" argument has the wrong type (expected type \"AzureSubscriptionSqlService\")")
			}
		case "mySql":
			if _, ok := val.(AzureSubscriptionMysqlService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"mySql\" argument has the wrong type (expected type \"AzureSubscriptionMysqlService\")")
			}
		case "postgreSql":
			if _, ok := val.(AzureSubscriptionPostgresqlService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"postgreSql\" argument has the wrong type (expected type \"AzureSubscriptionPostgresqlService\")")
			}
		case "mariaDb":
			if _, ok := val.(AzureSubscriptionMariadbService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"mariaDb\" argument has the wrong type (expected type \"AzureSubscriptionMariadbService\")")
			}
		case "cosmosDb":
			if _, ok := val.(AzureSubscriptionCosmosdbService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"cosmosDb\" argument has the wrong type (expected type \"AzureSubscriptionCosmosdbService\")")
			}
		case "keyVault":
			if _, ok := val.(AzureSubscriptionKeyvaultService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"keyVault\" argument has the wrong type (expected type \"AzureSubscriptionKeyvaultService\")")
			}
		case "authorization":
			if _, ok := val.(AzureSubscriptionAuthorizationService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"authorization\" argument has the wrong type (expected type \"AzureSubscriptionAuthorizationService\")")
			}
		case "monitor":
			if _, ok := val.(AzureSubscriptionMonitorService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"monitor\" argument has the wrong type (expected type \"AzureSubscriptionMonitorService\")")
			}
		case "cloudDefender":
			if _, ok := val.(AzureSubscriptionCloudDefenderService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"cloudDefender\" argument has the wrong type (expected type \"AzureSubscriptionCloudDefenderService\")")
			}
		case "resources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"resources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "aks":
			if _, ok := val.(AzureSubscriptionAksService); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"aks\" argument has the wrong type (expected type \"AzureSubscriptionAksService\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscription) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscription) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "subscriptionId":
		return nil
	case "tenantId":
		return nil
	case "managedByTenants":
		return nil
	case "tags":
		return nil
	case "state":
		return nil
	case "authorizationSource":
		return nil
	case "subscriptionsPolicies":
		return nil
	case "resourceGroups":
		return nil
	case "compute":
		return nil
	case "network":
		return nil
	case "storage":
		return nil
	case "web":
		return nil
	case "sql":
		return nil
	case "mySql":
		return nil
	case "postgreSql":
		return nil
	case "mariaDb":
		return nil
	case "cosmosDb":
		return nil
	case "keyVault":
		return nil
	case "authorization":
		return nil
	case "monitor":
		return nil
	case "cloudDefender":
		return nil
	case "resources":
		return nil
	case "aks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscription) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "subscriptionId":
		return s.SubscriptionId()
	case "tenantId":
		return s.TenantId()
	case "managedByTenants":
		return s.ManagedByTenants()
	case "tags":
		return s.Tags()
	case "state":
		return s.State()
	case "authorizationSource":
		return s.AuthorizationSource()
	case "subscriptionsPolicies":
		return s.SubscriptionsPolicies()
	case "resourceGroups":
		return s.ResourceGroups()
	case "compute":
		return s.Compute()
	case "network":
		return s.Network()
	case "storage":
		return s.Storage()
	case "web":
		return s.Web()
	case "sql":
		return s.Sql()
	case "mySql":
		return s.MySql()
	case "postgreSql":
		return s.PostgreSql()
	case "mariaDb":
		return s.MariaDb()
	case "cosmosDb":
		return s.CosmosDb()
	case "keyVault":
		return s.KeyVault()
	case "authorization":
		return s.Authorization()
	case "monitor":
		return s.Monitor()
	case "cloudDefender":
		return s.CloudDefender()
	case "resources":
		return s.Resources()
	case "aks":
		return s.Aks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscription) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscription) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscription) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		if err := s.ComputeSubscriptionId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("subscriptionId")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"subscriptionId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscriptionId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzureSubscription) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		if err := s.ComputeTenantId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("tenantId")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"tenantId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tenantId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByTenants accessor autogenerated
func (s *mqlAzureSubscription) ManagedByTenants() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByTenants")
	if !ok || !res.Valid {
		if err := s.ComputeManagedByTenants(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("managedByTenants")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"managedByTenants\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "managedByTenants")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"managedByTenants\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscription) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		if err := s.ComputeTags(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tags")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"tags\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tags")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAzureSubscription) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		if err := s.ComputeState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("state")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"state\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "state")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AuthorizationSource accessor autogenerated
func (s *mqlAzureSubscription) AuthorizationSource() (string, error) {
	res, ok := s.Cache.Load("authorizationSource")
	if !ok || !res.Valid {
		if err := s.ComputeAuthorizationSource(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("authorizationSource")
		if !ok {
			return "", errors.New("\"azure.subscription\" calculated \"authorizationSource\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authorizationSource")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription\" failed to cast field \"authorizationSource\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionsPolicies accessor autogenerated
func (s *mqlAzureSubscription) SubscriptionsPolicies() (interface{}, error) {
	res, ok := s.Cache.Load("subscriptionsPolicies")
	if !ok || !res.Valid {
		if err := s.ComputeSubscriptionsPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subscriptionsPolicies")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"subscriptionsPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscriptionsPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"subscriptionsPolicies\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ResourceGroups accessor autogenerated
func (s *mqlAzureSubscription) ResourceGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("resourceGroups")
	if !ok || !res.Valid {
		if err := s.ComputeResourceGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resourceGroups")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"resourceGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resourceGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"resourceGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscription) Compute() (AzureSubscriptionComputeService, error) {
	res, ok := s.Cache.Load("compute")
	if !ok || !res.Valid {
		if err := s.ComputeCompute(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("compute")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"compute\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "compute")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionComputeService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"compute\" to the right type (AzureSubscriptionComputeService): %#v", res)
	}
	return tres, nil
}

// Network accessor autogenerated
func (s *mqlAzureSubscription) Network() (AzureSubscriptionNetworkService, error) {
	res, ok := s.Cache.Load("network")
	if !ok || !res.Valid {
		if err := s.ComputeNetwork(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("network")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"network\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "network")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionNetworkService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"network\" to the right type (AzureSubscriptionNetworkService): %#v", res)
	}
	return tres, nil
}

// Storage accessor autogenerated
func (s *mqlAzureSubscription) Storage() (AzureSubscriptionStorageService, error) {
	res, ok := s.Cache.Load("storage")
	if !ok || !res.Valid {
		if err := s.ComputeStorage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("storage")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"storage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "storage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"storage\" to the right type (AzureSubscriptionStorageService): %#v", res)
	}
	return tres, nil
}

// Web accessor autogenerated
func (s *mqlAzureSubscription) Web() (AzureSubscriptionWebService, error) {
	res, ok := s.Cache.Load("web")
	if !ok || !res.Valid {
		if err := s.ComputeWeb(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("web")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"web\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "web")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWebService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"web\" to the right type (AzureSubscriptionWebService): %#v", res)
	}
	return tres, nil
}

// Sql accessor autogenerated
func (s *mqlAzureSubscription) Sql() (AzureSubscriptionSqlService, error) {
	res, ok := s.Cache.Load("sql")
	if !ok || !res.Valid {
		if err := s.ComputeSql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("sql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"sql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "sql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionSqlService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"sql\" to the right type (AzureSubscriptionSqlService): %#v", res)
	}
	return tres, nil
}

// MySql accessor autogenerated
func (s *mqlAzureSubscription) MySql() (AzureSubscriptionMysqlService, error) {
	res, ok := s.Cache.Load("mySql")
	if !ok || !res.Valid {
		if err := s.ComputeMySql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mySql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"mySql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mySql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMysqlService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"mySql\" to the right type (AzureSubscriptionMysqlService): %#v", res)
	}
	return tres, nil
}

// PostgreSql accessor autogenerated
func (s *mqlAzureSubscription) PostgreSql() (AzureSubscriptionPostgresqlService, error) {
	res, ok := s.Cache.Load("postgreSql")
	if !ok || !res.Valid {
		if err := s.ComputePostgreSql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("postgreSql")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"postgreSql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "postgreSql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionPostgresqlService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"postgreSql\" to the right type (AzureSubscriptionPostgresqlService): %#v", res)
	}
	return tres, nil
}

// MariaDb accessor autogenerated
func (s *mqlAzureSubscription) MariaDb() (AzureSubscriptionMariadbService, error) {
	res, ok := s.Cache.Load("mariaDb")
	if !ok || !res.Valid {
		if err := s.ComputeMariaDb(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mariaDb")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"mariaDb\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mariaDb")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMariadbService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"mariaDb\" to the right type (AzureSubscriptionMariadbService): %#v", res)
	}
	return tres, nil
}

// CosmosDb accessor autogenerated
func (s *mqlAzureSubscription) CosmosDb() (AzureSubscriptionCosmosdbService, error) {
	res, ok := s.Cache.Load("cosmosDb")
	if !ok || !res.Valid {
		if err := s.ComputeCosmosDb(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cosmosDb")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"cosmosDb\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cosmosDb")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionCosmosdbService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"cosmosDb\" to the right type (AzureSubscriptionCosmosdbService): %#v", res)
	}
	return tres, nil
}

// KeyVault accessor autogenerated
func (s *mqlAzureSubscription) KeyVault() (AzureSubscriptionKeyvaultService, error) {
	res, ok := s.Cache.Load("keyVault")
	if !ok || !res.Valid {
		if err := s.ComputeKeyVault(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keyVault")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"keyVault\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyVault")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionKeyvaultService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"keyVault\" to the right type (AzureSubscriptionKeyvaultService): %#v", res)
	}
	return tres, nil
}

// Authorization accessor autogenerated
func (s *mqlAzureSubscription) Authorization() (AzureSubscriptionAuthorizationService, error) {
	res, ok := s.Cache.Load("authorization")
	if !ok || !res.Valid {
		if err := s.ComputeAuthorization(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authorization")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"authorization\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authorization")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionAuthorizationService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"authorization\" to the right type (AzureSubscriptionAuthorizationService): %#v", res)
	}
	return tres, nil
}

// Monitor accessor autogenerated
func (s *mqlAzureSubscription) Monitor() (AzureSubscriptionMonitorService, error) {
	res, ok := s.Cache.Load("monitor")
	if !ok || !res.Valid {
		if err := s.ComputeMonitor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("monitor")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"monitor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "monitor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMonitorService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"monitor\" to the right type (AzureSubscriptionMonitorService): %#v", res)
	}
	return tres, nil
}

// CloudDefender accessor autogenerated
func (s *mqlAzureSubscription) CloudDefender() (AzureSubscriptionCloudDefenderService, error) {
	res, ok := s.Cache.Load("cloudDefender")
	if !ok || !res.Valid {
		if err := s.ComputeCloudDefender(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cloudDefender")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"cloudDefender\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cloudDefender")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionCloudDefenderService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"cloudDefender\" to the right type (AzureSubscriptionCloudDefenderService): %#v", res)
	}
	return tres, nil
}

// Resources accessor autogenerated
func (s *mqlAzureSubscription) Resources() ([]interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		if err := s.ComputeResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resources")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"resources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"resources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Aks accessor autogenerated
func (s *mqlAzureSubscription) Aks() (AzureSubscriptionAksService, error) {
	res, ok := s.Cache.Load("aks")
	if !ok || !res.Valid {
		if err := s.ComputeAks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("aks")
		if !ok {
			return nil, errors.New("\"azure.subscription\" calculated \"aks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "aks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionAksService)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription\" failed to cast field \"aks\" to the right type (AzureSubscriptionAksService): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscription) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription].MqlCompute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "subscriptionId":
		return s.ComputeSubscriptionId()
	case "tenantId":
		return s.ComputeTenantId()
	case "managedByTenants":
		return s.ComputeManagedByTenants()
	case "tags":
		return s.ComputeTags()
	case "state":
		return s.ComputeState()
	case "authorizationSource":
		return s.ComputeAuthorizationSource()
	case "subscriptionsPolicies":
		return s.ComputeSubscriptionsPolicies()
	case "resourceGroups":
		return s.ComputeResourceGroups()
	case "compute":
		return s.ComputeCompute()
	case "network":
		return s.ComputeNetwork()
	case "storage":
		return s.ComputeStorage()
	case "web":
		return s.ComputeWeb()
	case "sql":
		return s.ComputeSql()
	case "mySql":
		return s.ComputeMySql()
	case "postgreSql":
		return s.ComputePostgreSql()
	case "mariaDb":
		return s.ComputeMariaDb()
	case "cosmosDb":
		return s.ComputeCosmosDb()
	case "keyVault":
		return s.ComputeKeyVault()
	case "authorization":
		return s.ComputeAuthorization()
	case "monitor":
		return s.ComputeMonitor()
	case "cloudDefender":
		return s.ComputeCloudDefender()
	case "resources":
		return s.ComputeResources()
	case "aks":
		return s.ComputeAks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlAzureSubscription) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlAzureSubscription) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubscriptionId computer autogenerated
func (s *mqlAzureSubscription) ComputeSubscriptionId() error {
	var err error
	if _, ok := s.Cache.Load("subscriptionId"); ok {
		return nil
	}
	vres, err := s.GetSubscriptionId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscriptionId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTenantId computer autogenerated
func (s *mqlAzureSubscription) ComputeTenantId() error {
	var err error
	if _, ok := s.Cache.Load("tenantId"); ok {
		return nil
	}
	vres, err := s.GetTenantId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tenantId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeManagedByTenants computer autogenerated
func (s *mqlAzureSubscription) ComputeManagedByTenants() error {
	var err error
	if _, ok := s.Cache.Load("managedByTenants"); ok {
		return nil
	}
	vres, err := s.GetManagedByTenants()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("managedByTenants", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTags computer autogenerated
func (s *mqlAzureSubscription) ComputeTags() error {
	var err error
	if _, ok := s.Cache.Load("tags"); ok {
		return nil
	}
	vres, err := s.GetTags()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tags", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeState computer autogenerated
func (s *mqlAzureSubscription) ComputeState() error {
	var err error
	if _, ok := s.Cache.Load("state"); ok {
		return nil
	}
	vres, err := s.GetState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("state", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthorizationSource computer autogenerated
func (s *mqlAzureSubscription) ComputeAuthorizationSource() error {
	var err error
	if _, ok := s.Cache.Load("authorizationSource"); ok {
		return nil
	}
	vres, err := s.GetAuthorizationSource()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authorizationSource", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubscriptionsPolicies computer autogenerated
func (s *mqlAzureSubscription) ComputeSubscriptionsPolicies() error {
	var err error
	if _, ok := s.Cache.Load("subscriptionsPolicies"); ok {
		return nil
	}
	vres, err := s.GetSubscriptionsPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscriptionsPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeResourceGroups computer autogenerated
func (s *mqlAzureSubscription) ComputeResourceGroups() error {
	var err error
	if _, ok := s.Cache.Load("resourceGroups"); ok {
		return nil
	}
	vres, err := s.GetResourceGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resourceGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCompute computer autogenerated
func (s *mqlAzureSubscription) ComputeCompute() error {
	var err error
	if _, ok := s.Cache.Load("compute"); ok {
		return nil
	}
	vres, err := s.GetCompute()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("compute", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetwork computer autogenerated
func (s *mqlAzureSubscription) ComputeNetwork() error {
	var err error
	if _, ok := s.Cache.Load("network"); ok {
		return nil
	}
	vres, err := s.GetNetwork()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("network", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStorage computer autogenerated
func (s *mqlAzureSubscription) ComputeStorage() error {
	var err error
	if _, ok := s.Cache.Load("storage"); ok {
		return nil
	}
	vres, err := s.GetStorage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("storage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWeb computer autogenerated
func (s *mqlAzureSubscription) ComputeWeb() error {
	var err error
	if _, ok := s.Cache.Load("web"); ok {
		return nil
	}
	vres, err := s.GetWeb()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("web", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSql computer autogenerated
func (s *mqlAzureSubscription) ComputeSql() error {
	var err error
	if _, ok := s.Cache.Load("sql"); ok {
		return nil
	}
	vres, err := s.GetSql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("sql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMySql computer autogenerated
func (s *mqlAzureSubscription) ComputeMySql() error {
	var err error
	if _, ok := s.Cache.Load("mySql"); ok {
		return nil
	}
	vres, err := s.GetMySql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mySql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePostgreSql computer autogenerated
func (s *mqlAzureSubscription) ComputePostgreSql() error {
	var err error
	if _, ok := s.Cache.Load("postgreSql"); ok {
		return nil
	}
	vres, err := s.GetPostgreSql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("postgreSql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMariaDb computer autogenerated
func (s *mqlAzureSubscription) ComputeMariaDb() error {
	var err error
	if _, ok := s.Cache.Load("mariaDb"); ok {
		return nil
	}
	vres, err := s.GetMariaDb()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mariaDb", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCosmosDb computer autogenerated
func (s *mqlAzureSubscription) ComputeCosmosDb() error {
	var err error
	if _, ok := s.Cache.Load("cosmosDb"); ok {
		return nil
	}
	vres, err := s.GetCosmosDb()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cosmosDb", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeyVault computer autogenerated
func (s *mqlAzureSubscription) ComputeKeyVault() error {
	var err error
	if _, ok := s.Cache.Load("keyVault"); ok {
		return nil
	}
	vres, err := s.GetKeyVault()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyVault", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthorization computer autogenerated
func (s *mqlAzureSubscription) ComputeAuthorization() error {
	var err error
	if _, ok := s.Cache.Load("authorization"); ok {
		return nil
	}
	vres, err := s.GetAuthorization()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authorization", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMonitor computer autogenerated
func (s *mqlAzureSubscription) ComputeMonitor() error {
	var err error
	if _, ok := s.Cache.Load("monitor"); ok {
		return nil
	}
	vres, err := s.GetMonitor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("monitor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCloudDefender computer autogenerated
func (s *mqlAzureSubscription) ComputeCloudDefender() error {
	var err error
	if _, ok := s.Cache.Load("cloudDefender"); ok {
		return nil
	}
	vres, err := s.GetCloudDefender()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cloudDefender", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeResources computer autogenerated
func (s *mqlAzureSubscription) ComputeResources() error {
	var err error
	if _, ok := s.Cache.Load("resources"); ok {
		return nil
	}
	vres, err := s.GetResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAks computer autogenerated
func (s *mqlAzureSubscription) ComputeAks() error {
	var err error
	if _, ok := s.Cache.Load("aks"); ok {
		return nil
	}
	vres, err := s.GetAks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("aks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionResource resource interface
type AzureSubscriptionResource interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	Sku() (interface{}, error)
	Plan() (interface{}, error)
	Identity() (interface{}, error)
	ProvisioningState() (string, error)
	CreatedTime() (*time.Time, error)
	ChangedTime() (*time.Time, error)
}

// mqlAzureSubscriptionResource for the azure.subscription.resource resource
type mqlAzureSubscriptionResource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionResource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.resource resource
func newAzureSubscriptionResource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionResource{runtime.NewResource("azure.subscription.resource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "plan":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"plan\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "createdTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"createdTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "changedTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"changedTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.resource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionResource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("plan"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"plan\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdTime"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"createdTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("changedTime"); !ok {
		return errors.New("Initialized \"azure.subscription.resource\" resource without a \"changedTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionResource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionResource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "sku":
		return s.Sku()
	case "plan":
		return s.Plan()
	case "identity":
		return s.Identity()
	case "provisioningState":
		return s.ProvisioningState()
	case "createdTime":
		return s.CreatedTime()
	case "changedTime":
		return s.ChangedTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionResource) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionResource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionResource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionResource) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionResource) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionResource) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionResource) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionResource) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Plan accessor autogenerated
func (s *mqlAzureSubscriptionResource) Plan() (interface{}, error) {
	res, ok := s.Cache.Load("plan")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"plan\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"plan\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionResource) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionResource) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedTime accessor autogenerated
func (s *mqlAzureSubscriptionResource) CreatedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"createdTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"createdTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ChangedTime accessor autogenerated
func (s *mqlAzureSubscriptionResource) ChangedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("changedTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resource\" failed: no value provided for static field \"changedTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resource\" failed to cast field \"changedTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionResource) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resource].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resource\" resource")
	}
}

// AzureSubscriptionResourcegroup resource interface
type AzureSubscriptionResourcegroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ProvisioningState() (string, error)
}

// mqlAzureSubscriptionResourcegroup for the azure.subscription.resourcegroup resource
type mqlAzureSubscriptionResourcegroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionResourcegroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.resourcegroup resource
func newAzureSubscriptionResourcegroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionResourcegroup{runtime.NewResource("azure.subscription.resourcegroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.resourcegroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.resourcegroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionResourcegroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.resourcegroup\" resource without a \"provisioningState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "provisioningState":
		return s.ProvisioningState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.resourcegroup\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.resourcegroup\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionResourcegroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.resourcegroup].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.resourcegroup\" resource")
	}
}

// AzureSubscriptionComputeService resource interface
type AzureSubscriptionComputeService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Vms() ([]interface{}, error)
	Disks() ([]interface{}, error)
}

// mqlAzureSubscriptionComputeService for the azure.subscription.computeService resource
type mqlAzureSubscriptionComputeService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionComputeService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.computeService resource
func newAzureSubscriptionComputeService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionComputeService{runtime.NewResource("azure.subscription.computeService")}
	var existing AzureSubscriptionComputeService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.computeService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionComputeService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "vms":
		return nil
	case "disks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "vms":
		return s.Vms()
	case "disks":
		return s.Disks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.computeService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Vms accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionComputeService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "vms":
		return s.ComputeVms()
	case "disks":
		return s.ComputeDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService\" resource")
	}
}

// ComputeVms computer autogenerated
func (s *mqlAzureSubscriptionComputeService) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlAzureSubscriptionComputeService) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionComputeServiceVm resource interface
type AzureSubscriptionComputeServiceVm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Extensions() ([]interface{}, error)
	OsDisk() (AzureSubscriptionComputeServiceDisk, error)
	DataDisks() ([]interface{}, error)
	PublicIpAddresses() ([]interface{}, error)
}

// mqlAzureSubscriptionComputeServiceVm for the azure.subscription.computeService.vm resource
type mqlAzureSubscriptionComputeServiceVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionComputeServiceVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.computeService.vm resource
func newAzureSubscriptionComputeServiceVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionComputeServiceVm{runtime.NewResource("azure.subscription.computeService.vm")}
	var existing AzureSubscriptionComputeServiceVm
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "extensions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"extensions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "osDisk":
			if _, ok := val.(AzureSubscriptionComputeServiceDisk); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"osDisk\" argument has the wrong type (expected type \"AzureSubscriptionComputeServiceDisk\")")
			}
		case "dataDisks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"dataDisks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "publicIpAddresses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"publicIpAddresses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.computeService.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionComputeServiceVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.vm\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.vm].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return nil
	case "osDisk":
		return nil
	case "dataDisks":
		return nil
	case "publicIpAddresses":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.vm].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "extensions":
		return s.Extensions()
	case "osDisk":
		return s.OsDisk()
	case "dataDisks":
		return s.DataDisks()
	case "publicIpAddresses":
		return s.PublicIpAddresses()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.computeService.vm\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.vm\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Extensions accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) Extensions() ([]interface{}, error) {
	res, ok := s.Cache.Load("extensions")
	if !ok || !res.Valid {
		if err := s.ComputeExtensions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("extensions")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService.vm\" calculated \"extensions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "extensions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"extensions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OsDisk accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) OsDisk() (AzureSubscriptionComputeServiceDisk, error) {
	res, ok := s.Cache.Load("osDisk")
	if !ok || !res.Valid {
		if err := s.ComputeOsDisk(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("osDisk")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService.vm\" calculated \"osDisk\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "osDisk")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionComputeServiceDisk)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"osDisk\" to the right type (AzureSubscriptionComputeServiceDisk): %#v", res)
	}
	return tres, nil
}

// DataDisks accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) DataDisks() ([]interface{}, error) {
	res, ok := s.Cache.Load("dataDisks")
	if !ok || !res.Valid {
		if err := s.ComputeDataDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataDisks")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService.vm\" calculated \"dataDisks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataDisks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"dataDisks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PublicIpAddresses accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) PublicIpAddresses() ([]interface{}, error) {
	res, ok := s.Cache.Load("publicIpAddresses")
	if !ok || !res.Valid {
		if err := s.ComputePublicIpAddresses(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("publicIpAddresses")
		if !ok {
			return nil, errors.New("\"azure.subscription.computeService.vm\" calculated \"publicIpAddresses\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "publicIpAddresses")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.vm\" failed to cast field \"publicIpAddresses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.vm].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return s.ComputeExtensions()
	case "osDisk":
		return s.ComputeOsDisk()
	case "dataDisks":
		return s.ComputeDataDisks()
	case "publicIpAddresses":
		return s.ComputePublicIpAddresses()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService.vm\" resource")
	}
}

// ComputeExtensions computer autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) ComputeExtensions() error {
	var err error
	if _, ok := s.Cache.Load("extensions"); ok {
		return nil
	}
	vres, err := s.GetExtensions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("extensions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOsDisk computer autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) ComputeOsDisk() error {
	var err error
	if _, ok := s.Cache.Load("osDisk"); ok {
		return nil
	}
	vres, err := s.GetOsDisk()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("osDisk", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataDisks computer autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) ComputeDataDisks() error {
	var err error
	if _, ok := s.Cache.Load("dataDisks"); ok {
		return nil
	}
	vres, err := s.GetDataDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataDisks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePublicIpAddresses computer autogenerated
func (s *mqlAzureSubscriptionComputeServiceVm) ComputePublicIpAddresses() error {
	var err error
	if _, ok := s.Cache.Load("publicIpAddresses"); ok {
		return nil
	}
	vres, err := s.GetPublicIpAddresses()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("publicIpAddresses", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionComputeServiceDisk resource interface
type AzureSubscriptionComputeServiceDisk interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ManagedByExtended() ([]interface{}, error)
	Zones() ([]interface{}, error)
	Sku() (interface{}, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionComputeServiceDisk for the azure.subscription.computeService.disk resource
type mqlAzureSubscriptionComputeServiceDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionComputeServiceDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.computeService.disk resource
func newAzureSubscriptionComputeServiceDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionComputeServiceDisk{runtime.NewResource("azure.subscription.computeService.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByExtended":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"managedByExtended\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.computeService.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.computeService.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionComputeServiceDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedByExtended"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"managedByExtended\". This field is required.")
	}
	if _, ok := s.Cache.Load("zones"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"zones\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.computeService.disk\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "managedByExtended":
		return s.ManagedByExtended()
	case "zones":
		return s.Zones()
	case "sku":
		return s.Sku()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.computeService.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByExtended accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) ManagedByExtended() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByExtended")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"managedByExtended\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"managedByExtended\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"zones\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.computeService.disk\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.computeService.disk\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionComputeServiceDisk) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.computeService.disk].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.computeService.disk\" resource")
	}
}

// AzureSubscriptionNetworkService resource interface
type AzureSubscriptionNetworkService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Interfaces() ([]interface{}, error)
	SecurityGroups() ([]interface{}, error)
	Watchers() ([]interface{}, error)
	PublicIpAddresses() ([]interface{}, error)
	BastionHosts() ([]interface{}, error)
}

// mqlAzureSubscriptionNetworkService for the azure.subscription.networkService resource
type mqlAzureSubscriptionNetworkService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService resource
func newAzureSubscriptionNetworkService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkService{runtime.NewResource("azure.subscription.networkService")}
	var existing AzureSubscriptionNetworkService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "watchers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"watchers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "publicIpAddresses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"publicIpAddresses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "bastionHosts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"bastionHosts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "interfaces":
		return nil
	case "securityGroups":
		return nil
	case "watchers":
		return nil
	case "publicIpAddresses":
		return nil
	case "bastionHosts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "interfaces":
		return s.Interfaces()
	case "securityGroups":
		return s.SecurityGroups()
	case "watchers":
		return s.Watchers()
	case "publicIpAddresses":
		return s.PublicIpAddresses()
	case "bastionHosts":
		return s.BastionHosts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		if err := s.ComputeInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("interfaces")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService\" calculated \"interfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "interfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityGroups")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService\" calculated \"securityGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Watchers accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) Watchers() ([]interface{}, error) {
	res, ok := s.Cache.Load("watchers")
	if !ok || !res.Valid {
		if err := s.ComputeWatchers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("watchers")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService\" calculated \"watchers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "watchers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"watchers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PublicIpAddresses accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) PublicIpAddresses() ([]interface{}, error) {
	res, ok := s.Cache.Load("publicIpAddresses")
	if !ok || !res.Valid {
		if err := s.ComputePublicIpAddresses(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("publicIpAddresses")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService\" calculated \"publicIpAddresses\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "publicIpAddresses")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"publicIpAddresses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// BastionHosts accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) BastionHosts() ([]interface{}, error) {
	res, ok := s.Cache.Load("bastionHosts")
	if !ok || !res.Valid {
		if err := s.ComputeBastionHosts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("bastionHosts")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService\" calculated \"bastionHosts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "bastionHosts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService\" failed to cast field \"bastionHosts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "interfaces":
		return s.ComputeInterfaces()
	case "securityGroups":
		return s.ComputeSecurityGroups()
	case "watchers":
		return s.ComputeWatchers()
	case "publicIpAddresses":
		return s.ComputePublicIpAddresses()
	case "bastionHosts":
		return s.ComputeBastionHosts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService\" resource")
	}
}

// ComputeInterfaces computer autogenerated
func (s *mqlAzureSubscriptionNetworkService) ComputeInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("interfaces"); ok {
		return nil
	}
	vres, err := s.GetInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("interfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityGroups computer autogenerated
func (s *mqlAzureSubscriptionNetworkService) ComputeSecurityGroups() error {
	var err error
	if _, ok := s.Cache.Load("securityGroups"); ok {
		return nil
	}
	vres, err := s.GetSecurityGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWatchers computer autogenerated
func (s *mqlAzureSubscriptionNetworkService) ComputeWatchers() error {
	var err error
	if _, ok := s.Cache.Load("watchers"); ok {
		return nil
	}
	vres, err := s.GetWatchers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("watchers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePublicIpAddresses computer autogenerated
func (s *mqlAzureSubscriptionNetworkService) ComputePublicIpAddresses() error {
	var err error
	if _, ok := s.Cache.Load("publicIpAddresses"); ok {
		return nil
	}
	vres, err := s.GetPublicIpAddresses()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("publicIpAddresses", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBastionHosts computer autogenerated
func (s *mqlAzureSubscriptionNetworkService) ComputeBastionHosts() error {
	var err error
	if _, ok := s.Cache.Load("bastionHosts"); ok {
		return nil
	}
	vres, err := s.GetBastionHosts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("bastionHosts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkServiceInterface resource interface
type AzureSubscriptionNetworkServiceInterface interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Vm() (AzureSubscriptionComputeServiceVm, error)
}

// mqlAzureSubscriptionNetworkServiceInterface for the azure.subscription.networkService.interface resource
type mqlAzureSubscriptionNetworkServiceInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.interface resource
func newAzureSubscriptionNetworkServiceInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceInterface{runtime.NewResource("azure.subscription.networkService.interface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vm":
			if _, ok := val.(AzureSubscriptionComputeServiceVm); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"vm\" argument has the wrong type (expected type \"AzureSubscriptionComputeServiceVm\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.interface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.interface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.interface\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.interface].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.interface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.interface].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "vm":
		return s.Vm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.interface\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.interface\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Vm accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) Vm() (AzureSubscriptionComputeServiceVm, error) {
	res, ok := s.Cache.Load("vm")
	if !ok || !res.Valid {
		if err := s.ComputeVm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vm")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService.interface\" calculated \"vm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionComputeServiceVm)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.interface\" failed to cast field \"vm\" to the right type (AzureSubscriptionComputeServiceVm): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.interface].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return s.ComputeVm()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.interface\" resource")
	}
}

// ComputeVm computer autogenerated
func (s *mqlAzureSubscriptionNetworkServiceInterface) ComputeVm() error {
	var err error
	if _, ok := s.Cache.Load("vm"); ok {
		return nil
	}
	vres, err := s.GetVm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkServiceIpAddress resource interface
type AzureSubscriptionNetworkServiceIpAddress interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	IpAddress() (string, error)
	Type() (string, error)
}

// mqlAzureSubscriptionNetworkServiceIpAddress for the azure.subscription.networkService.ipAddress resource
type mqlAzureSubscriptionNetworkServiceIpAddress struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.ipAddress resource
func newAzureSubscriptionNetworkServiceIpAddress(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceIpAddress{runtime.NewResource("azure.subscription.networkService.ipAddress")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "ipAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"ipAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.ipAddress\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.ipAddress with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddress"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"ipAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.ipAddress\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.ipAddress].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "ipAddress":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.ipAddress\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.ipAddress].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "ipAddress":
		return s.IpAddress()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.ipAddress\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IpAddress accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) IpAddress() (string, error) {
	res, ok := s.Cache.Load("ipAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"ipAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"ipAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.ipAddress\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.ipAddress\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceIpAddress) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.ipAddress].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "ipAddress":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.ipAddress\" resource")
	}
}

// AzureSubscriptionNetworkServiceBastionHost resource interface
type AzureSubscriptionNetworkServiceBastionHost interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Sku() (interface{}, error)
}

// mqlAzureSubscriptionNetworkServiceBastionHost for the azure.subscription.networkService.bastionHost resource
type mqlAzureSubscriptionNetworkServiceBastionHost struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.bastionHost resource
func newAzureSubscriptionNetworkServiceBastionHost(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceBastionHost{runtime.NewResource("azure.subscription.networkService.bastionHost")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.bastionHost\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.bastionHost with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.bastionHost\" resource without a \"sku\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.bastionHost].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "sku":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.bastionHost\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.bastionHost].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "sku":
		return s.Sku()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.bastionHost\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.bastionHost\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.bastionHost\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceBastionHost) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.bastionHost].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "sku":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.bastionHost\" resource")
	}
}

// AzureSubscriptionNetworkServiceSecurityGroup resource interface
type AzureSubscriptionNetworkServiceSecurityGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Interfaces() ([]interface{}, error)
	SecurityRules() ([]interface{}, error)
	DefaultSecurityRules() ([]interface{}, error)
}

// mqlAzureSubscriptionNetworkServiceSecurityGroup for the azure.subscription.networkService.securityGroup resource
type mqlAzureSubscriptionNetworkServiceSecurityGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.securityGroup resource
func newAzureSubscriptionNetworkServiceSecurityGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceSecurityGroup{runtime.NewResource("azure.subscription.networkService.securityGroup")}
	var existing AzureSubscriptionNetworkServiceSecurityGroup
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"securityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"defaultSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityGroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.securityGroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaces"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"interfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityRules"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"securityRules\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecurityRules"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityGroup\" resource without a \"defaultSecurityRules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityGroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityGroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityGroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "interfaces":
		return s.Interfaces()
	case "securityRules":
		return s.SecurityRules()
	case "defaultSecurityRules":
		return s.DefaultSecurityRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityGroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"interfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityRules accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) SecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"securityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"securityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultSecurityRules accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) DefaultSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("defaultSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityGroup\" failed: no value provided for static field \"defaultSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityGroup\" failed to cast field \"defaultSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityGroup].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityGroup\" resource")
	}
}

// AzureSubscriptionNetworkServiceSecurityrule resource interface
type AzureSubscriptionNetworkServiceSecurityrule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	DestinationPortRange() ([]interface{}, error)
}

// mqlAzureSubscriptionNetworkServiceSecurityrule for the azure.subscription.networkService.securityrule resource
type mqlAzureSubscriptionNetworkServiceSecurityrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.securityrule resource
func newAzureSubscriptionNetworkServiceSecurityrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceSecurityrule{runtime.NewResource("azure.subscription.networkService.securityrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "destinationPortRange":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"destinationPortRange\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.securityrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.securityrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityrule\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityrule\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationPortRange"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.securityrule\" resource without a \"destinationPortRange\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "destinationPortRange":
		return s.DestinationPortRange()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.securityrule\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.securityrule\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityrule\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityrule\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationPortRange accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) DestinationPortRange() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationPortRange")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.securityrule\" failed: no value provided for static field \"destinationPortRange\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.securityrule\" failed to cast field \"destinationPortRange\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceSecurityrule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.securityrule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.securityrule\" resource")
	}
}

// AzureSubscriptionNetworkServiceWatcher resource interface
type AzureSubscriptionNetworkServiceWatcher interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	FlowLogs() ([]interface{}, error)
	ProvisioningState() (string, error)
}

// mqlAzureSubscriptionNetworkServiceWatcher for the azure.subscription.networkService.watcher resource
type mqlAzureSubscriptionNetworkServiceWatcher struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceWatcher) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.watcher resource
func newAzureSubscriptionNetworkServiceWatcher(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceWatcher{runtime.NewResource("azure.subscription.networkService.watcher")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "flowLogs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"flowLogs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.watcher with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceWatcher) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher\" resource without a \"provisioningState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "flowLogs":
		return nil
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "flowLogs":
		return s.FlowLogs()
	case "provisioningState":
		return s.ProvisioningState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FlowLogs accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) FlowLogs() ([]interface{}, error) {
	res, ok := s.Cache.Load("flowLogs")
	if !ok || !res.Valid {
		if err := s.ComputeFlowLogs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flowLogs")
		if !ok {
			return nil, errors.New("\"azure.subscription.networkService.watcher\" calculated \"flowLogs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flowLogs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"flowLogs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "flowLogs":
		return s.ComputeFlowLogs()
	case "provisioningState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher\" resource")
	}
}

// ComputeFlowLogs computer autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcher) ComputeFlowLogs() error {
	var err error
	if _, ok := s.Cache.Load("flowLogs"); ok {
		return nil
	}
	vres, err := s.GetFlowLogs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flowLogs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionNetworkServiceWatcherFlowlog resource interface
type AzureSubscriptionNetworkServiceWatcherFlowlog interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	ProvisioningState() (string, error)
	Enabled() (bool, error)
	StorageAccountId() (string, error)
	TargetResourceId() (string, error)
	TargetResourceGuid() (string, error)
	Version() (int64, error)
	Format() (string, error)
	RetentionPolicy() (interface{}, error)
	Analytics() (interface{}, error)
}

// mqlAzureSubscriptionNetworkServiceWatcherFlowlog for the azure.subscription.networkService.watcher.flowlog resource
type mqlAzureSubscriptionNetworkServiceWatcherFlowlog struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.networkService.watcher.flowlog resource
func newAzureSubscriptionNetworkServiceWatcherFlowlog(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionNetworkServiceWatcherFlowlog{runtime.NewResource("azure.subscription.networkService.watcher.flowlog")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "storageAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"storageAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "targetResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"targetResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "targetResourceGuid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"targetResourceGuid\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"version\" argument has the wrong type (expected type \"int64\")")
			}
		case "format":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"format\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"retentionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "analytics":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"analytics\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.networkService.watcher.flowlog\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.networkService.watcher.flowlog with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccountId"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"storageAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetResourceId"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"targetResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetResourceGuid"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"targetResourceGuid\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("format"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"format\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"retentionPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("analytics"); !ok {
		return errors.New("Initialized \"azure.subscription.networkService.watcher.flowlog\" resource without a \"analytics\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher.flowlog].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "provisioningState":
		return nil
	case "enabled":
		return nil
	case "storageAccountId":
		return nil
	case "targetResourceId":
		return nil
	case "targetResourceGuid":
		return nil
	case "version":
		return nil
	case "format":
		return nil
	case "retentionPolicy":
		return nil
	case "analytics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher.flowlog\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher.flowlog].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "provisioningState":
		return s.ProvisioningState()
	case "enabled":
		return s.Enabled()
	case "storageAccountId":
		return s.StorageAccountId()
	case "targetResourceId":
		return s.TargetResourceId()
	case "targetResourceGuid":
		return s.TargetResourceGuid()
	case "version":
		return s.Version()
	case "format":
		return s.Format()
	case "retentionPolicy":
		return s.RetentionPolicy()
	case "analytics":
		return s.Analytics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher.flowlog\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StorageAccountId accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) StorageAccountId() (string, error) {
	res, ok := s.Cache.Load("storageAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"storageAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"storageAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TargetResourceId accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) TargetResourceId() (string, error) {
	res, ok := s.Cache.Load("targetResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"targetResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"targetResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TargetResourceGuid accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) TargetResourceGuid() (string, error) {
	res, ok := s.Cache.Load("targetResourceGuid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"targetResourceGuid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"targetResourceGuid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Version() (int64, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"version\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Format accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Format() (string, error) {
	res, ok := s.Cache.Load("format")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"format\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"format\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) RetentionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"retentionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Analytics accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) Analytics() (interface{}, error) {
	res, ok := s.Cache.Load("analytics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.networkService.watcher.flowlog\" failed: no value provided for static field \"analytics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.networkService.watcher.flowlog\" failed to cast field \"analytics\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionNetworkServiceWatcherFlowlog) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.networkService.watcher.flowlog].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "provisioningState":
		return nil
	case "enabled":
		return nil
	case "storageAccountId":
		return nil
	case "targetResourceId":
		return nil
	case "targetResourceGuid":
		return nil
	case "version":
		return nil
	case "format":
		return nil
	case "retentionPolicy":
		return nil
	case "analytics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.networkService.watcher.flowlog\" resource")
	}
}

// AzureSubscriptionStorageService resource interface
type AzureSubscriptionStorageService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Accounts() ([]interface{}, error)
}

// mqlAzureSubscriptionStorageService for the azure.subscription.storageService resource
type mqlAzureSubscriptionStorageService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService resource
func newAzureSubscriptionStorageService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageService{runtime.NewResource("azure.subscription.storageService")}
	var existing AzureSubscriptionStorageService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "accounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService\", its \"accounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "accounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "accounts":
		return s.Accounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionStorageService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Accounts accessor autogenerated
func (s *mqlAzureSubscriptionStorageService) Accounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("accounts")
	if !ok || !res.Valid {
		if err := s.ComputeAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accounts")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService\" calculated \"accounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService\" failed to cast field \"accounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "accounts":
		return s.ComputeAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService\" resource")
	}
}

// ComputeAccounts computer autogenerated
func (s *mqlAzureSubscriptionStorageService) ComputeAccounts() error {
	var err error
	if _, ok := s.Cache.Load("accounts"); ok {
		return nil
	}
	vres, err := s.GetAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionStorageServiceAccount resource interface
type AzureSubscriptionStorageServiceAccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Sku() (interface{}, error)
	Kind() (string, error)
	Containers() ([]interface{}, error)
	QueueProperties() (AzureSubscriptionStorageServiceAccountQueueServiceProperties, error)
	TableProperties() (AzureSubscriptionStorageServiceAccountTableServiceProperties, error)
	BlobProperties() (AzureSubscriptionStorageServiceAccountBlobServiceProperties, error)
	DataProtection() (AzureSubscriptionStorageServiceAccountDataProtection, error)
}

// mqlAzureSubscriptionStorageServiceAccount for the azure.subscription.storageService.account resource
type mqlAzureSubscriptionStorageServiceAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account resource
func newAzureSubscriptionStorageServiceAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccount{runtime.NewResource("azure.subscription.storageService.account")}
	var existing AzureSubscriptionStorageServiceAccount
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "queueProperties":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountQueueServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"queueProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountQueueServiceProperties\")")
			}
		case "tableProperties":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountTableServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"tableProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountTableServiceProperties\")")
			}
		case "blobProperties":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountBlobServiceProperties); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"blobProperties\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountBlobServiceProperties\")")
			}
		case "dataProtection":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountDataProtection); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"dataProtection\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountDataProtection\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return nil
	case "queueProperties":
		return nil
	case "tableProperties":
		return nil
	case "blobProperties":
		return nil
	case "dataProtection":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "sku":
		return s.Sku()
	case "kind":
		return s.Kind()
	case "containers":
		return s.Containers()
	case "queueProperties":
		return s.QueueProperties()
	case "tableProperties":
		return s.TableProperties()
	case "blobProperties":
		return s.BlobProperties()
	case "dataProtection":
		return s.DataProtection()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService.account\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// QueueProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) QueueProperties() (AzureSubscriptionStorageServiceAccountQueueServiceProperties, error) {
	res, ok := s.Cache.Load("queueProperties")
	if !ok || !res.Valid {
		if err := s.ComputeQueueProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("queueProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService.account\" calculated \"queueProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "queueProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountQueueServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"queueProperties\" to the right type (AzureSubscriptionStorageServiceAccountQueueServiceProperties): %#v", res)
	}
	return tres, nil
}

// TableProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) TableProperties() (AzureSubscriptionStorageServiceAccountTableServiceProperties, error) {
	res, ok := s.Cache.Load("tableProperties")
	if !ok || !res.Valid {
		if err := s.ComputeTableProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tableProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService.account\" calculated \"tableProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tableProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountTableServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"tableProperties\" to the right type (AzureSubscriptionStorageServiceAccountTableServiceProperties): %#v", res)
	}
	return tres, nil
}

// BlobProperties accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) BlobProperties() (AzureSubscriptionStorageServiceAccountBlobServiceProperties, error) {
	res, ok := s.Cache.Load("blobProperties")
	if !ok || !res.Valid {
		if err := s.ComputeBlobProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("blobProperties")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService.account\" calculated \"blobProperties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "blobProperties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountBlobServiceProperties)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"blobProperties\" to the right type (AzureSubscriptionStorageServiceAccountBlobServiceProperties): %#v", res)
	}
	return tres, nil
}

// DataProtection accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) DataProtection() (AzureSubscriptionStorageServiceAccountDataProtection, error) {
	res, ok := s.Cache.Load("dataProtection")
	if !ok || !res.Valid {
		if err := s.ComputeDataProtection(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataProtection")
		if !ok {
			return nil, errors.New("\"azure.subscription.storageService.account\" calculated \"dataProtection\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataProtection")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountDataProtection)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account\" failed to cast field \"dataProtection\" to the right type (AzureSubscriptionStorageServiceAccountDataProtection): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return s.ComputeContainers()
	case "queueProperties":
		return s.ComputeQueueProperties()
	case "tableProperties":
		return s.ComputeTableProperties()
	case "blobProperties":
		return s.ComputeBlobProperties()
	case "dataProtection":
		return s.ComputeDataProtection()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account\" resource")
	}
}

// ComputeContainers computer autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeQueueProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) ComputeQueueProperties() error {
	var err error
	if _, ok := s.Cache.Load("queueProperties"); ok {
		return nil
	}
	vres, err := s.GetQueueProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("queueProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTableProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) ComputeTableProperties() error {
	var err error
	if _, ok := s.Cache.Load("tableProperties"); ok {
		return nil
	}
	vres, err := s.GetTableProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tableProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBlobProperties computer autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) ComputeBlobProperties() error {
	var err error
	if _, ok := s.Cache.Load("blobProperties"); ok {
		return nil
	}
	vres, err := s.GetBlobProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("blobProperties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataProtection computer autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccount) ComputeDataProtection() error {
	var err error
	if _, ok := s.Cache.Load("dataProtection"); ok {
		return nil
	}
	vres, err := s.GetDataProtection()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataProtection", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionStorageServiceAccountDataProtection resource interface
type AzureSubscriptionStorageServiceAccountDataProtection interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	StorageAccountId() (string, error)
	BlobSoftDeletionEnabled() (bool, error)
	BlobRetentionDays() (int64, error)
	ContainerSoftDeletionEnabled() (bool, error)
	ContainerRetentionDays() (int64, error)
}

// mqlAzureSubscriptionStorageServiceAccountDataProtection for the azure.subscription.storageService.account.dataProtection resource
type mqlAzureSubscriptionStorageServiceAccountDataProtection struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.dataProtection resource
func newAzureSubscriptionStorageServiceAccountDataProtection(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountDataProtection{runtime.NewResource("azure.subscription.storageService.account.dataProtection")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "storageAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"storageAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "blobSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"blobSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "blobRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"blobRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "containerSoftDeletionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"containerSoftDeletionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "containerRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"containerRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.dataProtection\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.dataProtection with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("storageAccountId"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.dataProtection\" resource without a \"storageAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.dataProtection\" resource without a \"blobSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("blobRetentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.dataProtection\" resource without a \"blobRetentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerSoftDeletionEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.dataProtection\" resource without a \"containerSoftDeletionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerRetentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.dataProtection\" resource without a \"containerRetentionDays\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.dataProtection].Register")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.dataProtection\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.dataProtection].Field")
	switch name {
	case "storageAccountId":
		return s.StorageAccountId()
	case "blobSoftDeletionEnabled":
		return s.BlobSoftDeletionEnabled()
	case "blobRetentionDays":
		return s.BlobRetentionDays()
	case "containerSoftDeletionEnabled":
		return s.ContainerSoftDeletionEnabled()
	case "containerRetentionDays":
		return s.ContainerRetentionDays()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.dataProtection\" resource")
	}
}

// StorageAccountId accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) StorageAccountId() (string, error) {
	res, ok := s.Cache.Load("storageAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.dataProtection\" failed: no value provided for static field \"storageAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.dataProtection\" failed to cast field \"storageAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BlobSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) BlobSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("blobSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.dataProtection\" failed: no value provided for static field \"blobSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.dataProtection\" failed to cast field \"blobSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// BlobRetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) BlobRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("blobRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storageService.account.dataProtection\" failed: no value provided for static field \"blobRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storageService.account.dataProtection\" failed to cast field \"blobRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ContainerSoftDeletionEnabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) ContainerSoftDeletionEnabled() (bool, error) {
	res, ok := s.Cache.Load("containerSoftDeletionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.dataProtection\" failed: no value provided for static field \"containerSoftDeletionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.dataProtection\" failed to cast field \"containerSoftDeletionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ContainerRetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) ContainerRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("containerRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storageService.account.dataProtection\" failed: no value provided for static field \"containerRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storageService.account.dataProtection\" failed to cast field \"containerRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountDataProtection) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.dataProtection].MqlCompute")
	switch name {
	case "storageAccountId":
		return nil
	case "blobSoftDeletionEnabled":
		return nil
	case "blobRetentionDays":
		return nil
	case "containerSoftDeletionEnabled":
		return nil
	case "containerRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.dataProtection\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountBlobServiceProperties resource interface
type AzureSubscriptionStorageServiceAccountBlobServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties for the azure.subscription.storageService.account.blobService.properties resource
type mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.blobService.properties resource
func newAzureSubscriptionStorageServiceAccountBlobServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties{runtime.NewResource("azure.subscription.storageService.account.blobService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.blobService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.blobService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.blobService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.blobService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.blobService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.blobService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.blobService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.blobService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.blobService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.blobService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.blobService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.blobService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.blobService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.blobService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.blobService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.blobService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.blobService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.blobService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.blobService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.blobService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.blobService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.blobService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountBlobServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.blobService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.blobService.properties\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountQueueServiceProperties resource interface
type AzureSubscriptionStorageServiceAccountQueueServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties for the azure.subscription.storageService.account.queueService.properties resource
type mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.queueService.properties resource
func newAzureSubscriptionStorageServiceAccountQueueServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties{runtime.NewResource("azure.subscription.storageService.account.queueService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.queueService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.queueService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.queueService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.queueService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.queueService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.queueService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.queueService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.queueService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.queueService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.queueService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.queueService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.queueService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.queueService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.queueService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.queueService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.queueService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.queueService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.queueService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.queueService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.queueService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.queueService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.queueService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountQueueServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.queueService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.queueService.properties\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountTableServiceProperties resource interface
type AzureSubscriptionStorageServiceAccountTableServiceProperties interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error)
	Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error)
}

// mqlAzureSubscriptionStorageServiceAccountTableServiceProperties for the azure.subscription.storageService.account.tableService.properties resource
type mqlAzureSubscriptionStorageServiceAccountTableServiceProperties struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.tableService.properties resource
func newAzureSubscriptionStorageServiceAccountTableServiceProperties(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountTableServiceProperties{runtime.NewResource("azure.subscription.storageService.account.tableService.properties")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.tableService.properties\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hourMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.tableService.properties\", its \"hourMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "minuteMetrics":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.tableService.properties\", its \"minuteMetrics\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesMetrics\")")
			}
		case "logging":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.tableService.properties\", its \"logging\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesLogging\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.tableService.properties\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.tableService.properties with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.tableService.properties\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hourMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.tableService.properties\" resource without a \"hourMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("minuteMetrics"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.tableService.properties\" resource without a \"minuteMetrics\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.tableService.properties\" resource without a \"logging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.tableService.properties].Register")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.tableService.properties\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.tableService.properties].Field")
	switch name {
	case "id":
		return s.Id()
	case "hourMetrics":
		return s.HourMetrics()
	case "minuteMetrics":
		return s.MinuteMetrics()
	case "logging":
		return s.Logging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.tableService.properties\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.tableService.properties\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.tableService.properties\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HourMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) HourMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("hourMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.tableService.properties\" failed: no value provided for static field \"hourMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.tableService.properties\" failed to cast field \"hourMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// MinuteMetrics accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) MinuteMetrics() (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics, error) {
	res, ok := s.Cache.Load("minuteMetrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.tableService.properties\" failed: no value provided for static field \"minuteMetrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesMetrics)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.tableService.properties\" failed to cast field \"minuteMetrics\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesMetrics): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) Logging() (AzureSubscriptionStorageServiceAccountServicePropertiesLogging, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.tableService.properties\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesLogging)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.tableService.properties\" failed to cast field \"logging\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesLogging): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountTableServiceProperties) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.tableService.properties].MqlCompute")
	switch name {
	case "id":
		return nil
	case "hourMetrics":
		return nil
	case "minuteMetrics":
		return nil
	case "logging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.tableService.properties\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountServicePropertiesMetrics resource interface
type AzureSubscriptionStorageServiceAccountServicePropertiesMetrics interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	IncludeAPIs() (bool, error)
	RetentionPolicy() (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy, error)
	Enabled() (bool, error)
	Version() (string, error)
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics for the azure.subscription.storageService.account.service.properties.metrics resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.service.properties.metrics resource
func newAzureSubscriptionStorageServiceAccountServicePropertiesMetrics(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics{runtime.NewResource("azure.subscription.storageService.account.service.properties.metrics")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "includeAPIs":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"includeAPIs\" argument has the wrong type (expected type \"bool\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.metrics\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.service.properties.metrics with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.metrics\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("includeAPIs"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.metrics\" resource without a \"includeAPIs\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.metrics\" resource without a \"retentionPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.metrics\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.metrics\" resource without a \"version\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.metrics].Register")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.metrics\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.metrics].Field")
	switch name {
	case "id":
		return s.Id()
	case "includeAPIs":
		return s.IncludeAPIs()
	case "retentionPolicy":
		return s.RetentionPolicy()
	case "enabled":
		return s.Enabled()
	case "version":
		return s.Version()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.metrics\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.service.properties.metrics\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.service.properties.metrics\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IncludeAPIs accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) IncludeAPIs() (bool, error) {
	res, ok := s.Cache.Load("includeAPIs")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.metrics\" failed: no value provided for static field \"includeAPIs\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.metrics\" failed to cast field \"includeAPIs\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) RetentionPolicy() (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.service.properties.metrics\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.metrics\" failed to cast field \"retentionPolicy\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.metrics\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.metrics\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.service.properties.metrics\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.service.properties.metrics\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesMetrics) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.metrics].MqlCompute")
	switch name {
	case "id":
		return nil
	case "includeAPIs":
		return nil
	case "retentionPolicy":
		return nil
	case "enabled":
		return nil
	case "version":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.metrics\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy resource interface
type AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	RetentionDays() (int64, error)
	Enabled() (bool, error)
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy for the azure.subscription.storageService.account.service.properties.retentionPolicy resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.service.properties.retentionPolicy resource
func newAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy{runtime.NewResource("azure.subscription.storageService.account.service.properties.retentionPolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.retentionPolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.retentionPolicy\", its \"retentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.retentionPolicy\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.retentionPolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.service.properties.retentionPolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDays"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource without a \"retentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.retentionPolicy].Register")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.retentionPolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "retentionDays":
		return s.RetentionDays()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionDays accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) RetentionDays() (int64, error) {
	res, ok := s.Cache.Load("retentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed: no value provided for static field \"retentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed to cast field \"retentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.retentionPolicy\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.retentionPolicy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "retentionDays":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.retentionPolicy\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountServicePropertiesLogging resource interface
type AzureSubscriptionStorageServiceAccountServicePropertiesLogging interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Delete() (bool, error)
	Read() (bool, error)
	Write() (bool, error)
	Version() (string, error)
	RetentionPolicy() (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy, error)
}

// mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging for the azure.subscription.storageService.account.service.properties.logging resource
type mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.service.properties.logging resource
func newAzureSubscriptionStorageServiceAccountServicePropertiesLogging(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging{runtime.NewResource("azure.subscription.storageService.account.service.properties.logging")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "delete":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"delete\" argument has the wrong type (expected type \"bool\")")
			}
		case "read":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"read\" argument has the wrong type (expected type \"bool\")")
			}
		case "write":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"write\" argument has the wrong type (expected type \"bool\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPolicy":
			if _, ok := val.(AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"retentionPolicy\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.service.properties.logging\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.service.properties.logging with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("delete"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"delete\". This field is required.")
	}
	if _, ok := s.Cache.Load("read"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"read\". This field is required.")
	}
	if _, ok := s.Cache.Load("write"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"write\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionPolicy"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.service.properties.logging\" resource without a \"retentionPolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.logging].Register")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.logging\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.logging].Field")
	switch name {
	case "id":
		return s.Id()
	case "delete":
		return s.Delete()
	case "read":
		return s.Read()
	case "write":
		return s.Write()
	case "version":
		return s.Version()
	case "retentionPolicy":
		return s.RetentionPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.logging\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Delete accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Delete() (bool, error) {
	res, ok := s.Cache.Load("delete")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"delete\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"delete\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Read accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Read() (bool, error) {
	res, ok := s.Cache.Load("read")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"read\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"read\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Write accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Write() (bool, error) {
	res, ok := s.Cache.Load("write")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"write\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"write\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) RetentionPolicy() (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy, error) {
	res, ok := s.Cache.Load("retentionPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.service.properties.logging\" failed: no value provided for static field \"retentionPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.service.properties.logging\" failed to cast field \"retentionPolicy\" to the right type (AzureSubscriptionStorageServiceAccountServicePropertiesRetentionPolicy): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountServicePropertiesLogging) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.service.properties.logging].MqlCompute")
	switch name {
	case "id":
		return nil
	case "delete":
		return nil
	case "read":
		return nil
	case "write":
		return nil
	case "version":
		return nil
	case "retentionPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.service.properties.logging\" resource")
	}
}

// AzureSubscriptionStorageServiceAccountContainer resource interface
type AzureSubscriptionStorageServiceAccountContainer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionStorageServiceAccountContainer for the azure.subscription.storageService.account.container resource
type mqlAzureSubscriptionStorageServiceAccountContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.storageService.account.container resource
func newAzureSubscriptionStorageServiceAccountContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionStorageServiceAccountContainer{runtime.NewResource("azure.subscription.storageService.account.container")}
	var existing AzureSubscriptionStorageServiceAccountContainer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.storageService.account.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.storageService.account.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.container\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.container\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.container\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.storageService.account.container\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.container].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.container].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.container\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.container\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.container\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.container\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.container\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.storageService.account.container\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.storageService.account.container\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.storageService.account.container\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.storageService.account.container\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionStorageServiceAccountContainer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.storageService.account.container].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.storageService.account.container\" resource")
	}
}

// AzureSubscriptionWebService resource interface
type AzureSubscriptionWebService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Apps() ([]interface{}, error)
	AvailableRuntimes() ([]interface{}, error)
}

// mqlAzureSubscriptionWebService for the azure.subscription.webService resource
type mqlAzureSubscriptionWebService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.webService resource
func newAzureSubscriptionWebService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebService{runtime.NewResource("azure.subscription.webService")}
	var existing AzureSubscriptionWebService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "apps":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService\", its \"apps\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "availableRuntimes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService\", its \"availableRuntimes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.webService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.webService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "apps":
		return nil
	case "availableRuntimes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "apps":
		return s.Apps()
	case "availableRuntimes":
		return s.AvailableRuntimes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.webService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionWebService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Apps accessor autogenerated
func (s *mqlAzureSubscriptionWebService) Apps() ([]interface{}, error) {
	res, ok := s.Cache.Load("apps")
	if !ok || !res.Valid {
		if err := s.ComputeApps(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apps")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService\" calculated \"apps\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apps")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService\" failed to cast field \"apps\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AvailableRuntimes accessor autogenerated
func (s *mqlAzureSubscriptionWebService) AvailableRuntimes() ([]interface{}, error) {
	res, ok := s.Cache.Load("availableRuntimes")
	if !ok || !res.Valid {
		if err := s.ComputeAvailableRuntimes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("availableRuntimes")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService\" calculated \"availableRuntimes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "availableRuntimes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService\" failed to cast field \"availableRuntimes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "apps":
		return s.ComputeApps()
	case "availableRuntimes":
		return s.ComputeAvailableRuntimes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService\" resource")
	}
}

// ComputeApps computer autogenerated
func (s *mqlAzureSubscriptionWebService) ComputeApps() error {
	var err error
	if _, ok := s.Cache.Load("apps"); ok {
		return nil
	}
	vres, err := s.GetApps()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apps", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAvailableRuntimes computer autogenerated
func (s *mqlAzureSubscriptionWebService) ComputeAvailableRuntimes() error {
	var err error
	if _, ok := s.Cache.Load("availableRuntimes"); ok {
		return nil
	}
	vres, err := s.GetAvailableRuntimes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("availableRuntimes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionWebServiceAppsite resource interface
type AzureSubscriptionWebServiceAppsite interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Configuration() (AzureSubscriptionWebServiceAppsiteconfig, error)
	AuthenticationSettings() (AzureSubscriptionWebServiceAppsiteauthsettings, error)
	Metadata() (interface{}, error)
	ApplicationSettings() (interface{}, error)
	ConnectionSettings() (interface{}, error)
	Stack() (interface{}, error)
}

// mqlAzureSubscriptionWebServiceAppsite for the azure.subscription.webService.appsite resource
type mqlAzureSubscriptionWebServiceAppsite struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebServiceAppsite) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.webService.appsite resource
func newAzureSubscriptionWebServiceAppsite(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebServiceAppsite{runtime.NewResource("azure.subscription.webService.appsite")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.(AzureSubscriptionWebServiceAppsiteconfig); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"configuration\" argument has the wrong type (expected type \"AzureSubscriptionWebServiceAppsiteconfig\")")
			}
		case "authenticationSettings":
			if _, ok := val.(AzureSubscriptionWebServiceAppsiteauthsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"authenticationSettings\" argument has the wrong type (expected type \"AzureSubscriptionWebServiceAppsiteauthsettings\")")
			}
		case "metadata":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"metadata\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "applicationSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"applicationSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"connectionSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stack":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"stack\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsite\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.webService.appsite with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebServiceAppsite) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsite\" resource without a \"identity\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsite].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return nil
	case "authenticationSettings":
		return nil
	case "metadata":
		return nil
	case "applicationSettings":
		return nil
	case "connectionSettings":
		return nil
	case "stack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsite\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsite].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "configuration":
		return s.Configuration()
	case "authenticationSettings":
		return s.AuthenticationSettings()
	case "metadata":
		return s.Metadata()
	case "applicationSettings":
		return s.ApplicationSettings()
	case "connectionSettings":
		return s.ConnectionSettings()
	case "stack":
		return s.Stack()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.webService.appsite\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.webService.appsite\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Configuration() (AzureSubscriptionWebServiceAppsiteconfig, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWebServiceAppsiteconfig)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"configuration\" to the right type (AzureSubscriptionWebServiceAppsiteconfig): %#v", res)
	}
	return tres, nil
}

// AuthenticationSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) AuthenticationSettings() (AzureSubscriptionWebServiceAppsiteauthsettings, error) {
	res, ok := s.Cache.Load("authenticationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAuthenticationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authenticationSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"authenticationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authenticationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionWebServiceAppsiteauthsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"authenticationSettings\" to the right type (AzureSubscriptionWebServiceAppsiteauthsettings): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Metadata() (interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"metadata\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ApplicationSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ApplicationSettings() (interface{}, error) {
	res, ok := s.Cache.Load("applicationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeApplicationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applicationSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"applicationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applicationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"applicationSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionSettings accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ConnectionSettings() (interface{}, error) {
	res, ok := s.Cache.Load("connectionSettings")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"connectionSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"connectionSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Stack accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) Stack() (interface{}, error) {
	res, ok := s.Cache.Load("stack")
	if !ok || !res.Valid {
		if err := s.ComputeStack(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("stack")
		if !ok {
			return nil, errors.New("\"azure.subscription.webService.appsite\" calculated \"stack\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "stack")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsite\" failed to cast field \"stack\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsite].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "authenticationSettings":
		return s.ComputeAuthenticationSettings()
	case "metadata":
		return s.ComputeMetadata()
	case "applicationSettings":
		return s.ComputeApplicationSettings()
	case "connectionSettings":
		return s.ComputeConnectionSettings()
	case "stack":
		return s.ComputeStack()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsite\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthenticationSettings computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeAuthenticationSettings() error {
	var err error
	if _, ok := s.Cache.Load("authenticationSettings"); ok {
		return nil
	}
	vres, err := s.GetAuthenticationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authenticationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetadata computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplicationSettings computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeApplicationSettings() error {
	var err error
	if _, ok := s.Cache.Load("applicationSettings"); ok {
		return nil
	}
	vres, err := s.GetApplicationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applicationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionSettings computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeConnectionSettings() error {
	var err error
	if _, ok := s.Cache.Load("connectionSettings"); ok {
		return nil
	}
	vres, err := s.GetConnectionSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStack computer autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsite) ComputeStack() error {
	var err error
	if _, ok := s.Cache.Load("stack"); ok {
		return nil
	}
	vres, err := s.GetStack()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("stack", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionWebServiceAppsiteauthsettings resource interface
type AzureSubscriptionWebServiceAppsiteauthsettings interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionWebServiceAppsiteauthsettings for the azure.subscription.webService.appsiteauthsettings resource
type mqlAzureSubscriptionWebServiceAppsiteauthsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.webService.appsiteauthsettings resource
func newAzureSubscriptionWebServiceAppsiteauthsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebServiceAppsiteauthsettings{runtime.NewResource("azure.subscription.webService.appsiteauthsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteauthsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.webService.appsiteauthsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteauthsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteauthsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteauthsettings\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteauthsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteauthsettings\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteauthsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteauthsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteauthsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteauthsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteauthsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteauthsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteauthsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteauthsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteauthsettings\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteauthsettings\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteauthsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteauthsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.webService.appsiteauthsettings\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsiteauthsettings\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteauthsettings) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteauthsettings].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteauthsettings\" resource")
	}
}

// AzureSubscriptionWebServiceAppsiteconfig resource interface
type AzureSubscriptionWebServiceAppsiteconfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureSubscriptionWebServiceAppsiteconfig for the azure.subscription.webService.appsiteconfig resource
type mqlAzureSubscriptionWebServiceAppsiteconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.webService.appsiteconfig resource
func newAzureSubscriptionWebServiceAppsiteconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionWebServiceAppsiteconfig{runtime.NewResource("azure.subscription.webService.appsiteconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.webService.appsiteconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.webService.appsiteconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteconfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteconfig\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteconfig\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteconfig\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.webService.appsiteconfig\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteconfig].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteconfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteconfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteconfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteconfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteconfig\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteconfig\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteconfig\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteconfig\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.webService.appsiteconfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.webService.appsiteconfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.webService.appsiteconfig\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.webService.appsiteconfig\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionWebServiceAppsiteconfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.webService.appsiteconfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.webService.appsiteconfig\" resource")
	}
}

// AzureSubscriptionSqlService resource interface
type AzureSubscriptionSqlService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionSqlService for the azure.subscription.sqlService resource
type mqlAzureSubscriptionSqlService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService resource
func newAzureSubscriptionSqlService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlService{runtime.NewResource("azure.subscription.sqlService")}
	var existing AzureSubscriptionSqlService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionSqlService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionSqlService) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionSqlService) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlServiceServer resource interface
type AzureSubscriptionSqlServiceServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
	AzureAdAdministrators() ([]interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	SecurityAlertPolicy() (interface{}, error)
	EncryptionProtector() (interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	VulnerabilityAssessmentSettings() (AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings, error)
	VirtualNetworkRules() ([]interface{}, error)
}

// mqlAzureSubscriptionSqlServiceServer for the azure.subscription.sqlService.server resource
type mqlAzureSubscriptionSqlServiceServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.server resource
func newAzureSubscriptionSqlServiceServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceServer{runtime.NewResource("azure.subscription.sqlService.server")}
	var existing AzureSubscriptionSqlServiceServer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "azureAdAdministrators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"azureAdAdministrators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityAlertPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"securityAlertPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "encryptionProtector":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"encryptionProtector\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vulnerabilityAssessmentSettings":
			if _, ok := val.(AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"vulnerabilityAssessmentSettings\" argument has the wrong type (expected type \"AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings\")")
			}
		case "virtualNetworkRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"virtualNetworkRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	case "azureAdAdministrators":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "securityAlertPolicy":
		return nil
	case "encryptionProtector":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "vulnerabilityAssessmentSettings":
		return nil
	case "virtualNetworkRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	case "azureAdAdministrators":
		return s.AzureAdAdministrators()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "securityAlertPolicy":
		return s.SecurityAlertPolicy()
	case "encryptionProtector":
		return s.EncryptionProtector()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.VulnerabilityAssessmentSettings()
	case "virtualNetworkRules":
		return s.VirtualNetworkRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AzureAdAdministrators accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) AzureAdAdministrators() ([]interface{}, error) {
	res, ok := s.Cache.Load("azureAdAdministrators")
	if !ok || !res.Valid {
		if err := s.ComputeAzureAdAdministrators(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("azureAdAdministrators")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"azureAdAdministrators\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "azureAdAdministrators")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"azureAdAdministrators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityAlertPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) SecurityAlertPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("securityAlertPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityAlertPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityAlertPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"securityAlertPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityAlertPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"securityAlertPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptionProtector accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) EncryptionProtector() (interface{}, error) {
	res, ok := s.Cache.Load("encryptionProtector")
	if !ok || !res.Valid {
		if err := s.ComputeEncryptionProtector(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("encryptionProtector")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"encryptionProtector\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "encryptionProtector")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"encryptionProtector\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VulnerabilityAssessmentSettings accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) VulnerabilityAssessmentSettings() (AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings, error) {
	res, ok := s.Cache.Load("vulnerabilityAssessmentSettings")
	if !ok || !res.Valid {
		if err := s.ComputeVulnerabilityAssessmentSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vulnerabilityAssessmentSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"vulnerabilityAssessmentSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vulnerabilityAssessmentSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"vulnerabilityAssessmentSettings\" to the right type (AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings): %#v", res)
	}
	return tres, nil
}

// VirtualNetworkRules accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) VirtualNetworkRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("virtualNetworkRules")
	if !ok || !res.Valid {
		if err := s.ComputeVirtualNetworkRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("virtualNetworkRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.server\" calculated \"virtualNetworkRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "virtualNetworkRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server\" failed to cast field \"virtualNetworkRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	case "azureAdAdministrators":
		return s.ComputeAzureAdAdministrators()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "securityAlertPolicy":
		return s.ComputeSecurityAlertPolicy()
	case "encryptionProtector":
		return s.ComputeEncryptionProtector()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "vulnerabilityAssessmentSettings":
		return s.ComputeVulnerabilityAssessmentSettings()
	case "virtualNetworkRules":
		return s.ComputeVirtualNetworkRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server\" resource")
	}
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAzureAdAdministrators computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeAzureAdAdministrators() error {
	var err error
	if _, ok := s.Cache.Load("azureAdAdministrators"); ok {
		return nil
	}
	vres, err := s.GetAzureAdAdministrators()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("azureAdAdministrators", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityAlertPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeSecurityAlertPolicy() error {
	var err error
	if _, ok := s.Cache.Load("securityAlertPolicy"); ok {
		return nil
	}
	vres, err := s.GetSecurityAlertPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityAlertPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEncryptionProtector computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeEncryptionProtector() error {
	var err error
	if _, ok := s.Cache.Load("encryptionProtector"); ok {
		return nil
	}
	vres, err := s.GetEncryptionProtector()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("encryptionProtector", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVulnerabilityAssessmentSettings computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeVulnerabilityAssessmentSettings() error {
	var err error
	if _, ok := s.Cache.Load("vulnerabilityAssessmentSettings"); ok {
		return nil
	}
	vres, err := s.GetVulnerabilityAssessmentSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vulnerabilityAssessmentSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVirtualNetworkRules computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceServer) ComputeVirtualNetworkRules() error {
	var err error
	if _, ok := s.Cache.Load("virtualNetworkRules"); ok {
		return nil
	}
	vres, err := s.GetVirtualNetworkRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("virtualNetworkRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings resource interface
type AzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StorageContainerPath() (string, error)
	StorageAccountAccessKey() (string, error)
	StorageContainerSasKey() (string, error)
	RecurringScanEnabled() (bool, error)
	RecurringScanEmails() ([]interface{}, error)
	MailSubscriptionAdmins() (bool, error)
}

// mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings for the azure.subscription.sqlService.server.vulnerabilityassessmentsettings resource
type mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.server.vulnerabilityassessmentsettings resource
func newAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings{runtime.NewResource("azure.subscription.sqlService.server.vulnerabilityassessmentsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"storageContainerPath\" argument has the wrong type (expected type \"string\")")
			}
		case "storageAccountAccessKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"storageAccountAccessKey\" argument has the wrong type (expected type \"string\")")
			}
		case "storageContainerSasKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"storageContainerSasKey\" argument has the wrong type (expected type \"string\")")
			}
		case "recurringScanEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"recurringScanEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "recurringScanEmails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"recurringScanEmails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mailSubscriptionAdmins":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"mailSubscriptionAdmins\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.server.vulnerabilityassessmentsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerPath"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccountAccessKey"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"storageAccountAccessKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageContainerSasKey"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"storageContainerSasKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("recurringScanEmails"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"recurringScanEmails\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailSubscriptionAdmins"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource without a \"mailSubscriptionAdmins\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.vulnerabilityassessmentsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.vulnerabilityassessmentsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "storageContainerPath":
		return s.StorageContainerPath()
	case "storageAccountAccessKey":
		return s.StorageAccountAccessKey()
	case "storageContainerSasKey":
		return s.StorageContainerSasKey()
	case "recurringScanEnabled":
		return s.RecurringScanEnabled()
	case "recurringScanEmails":
		return s.RecurringScanEmails()
	case "mailSubscriptionAdmins":
		return s.MailSubscriptionAdmins()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerPath accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) StorageContainerPath() (string, error) {
	res, ok := s.Cache.Load("storageContainerPath")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageAccountAccessKey accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) StorageAccountAccessKey() (string, error) {
	res, ok := s.Cache.Load("storageAccountAccessKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageAccountAccessKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"storageAccountAccessKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageContainerSasKey accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) StorageContainerSasKey() (string, error) {
	res, ok := s.Cache.Load("storageContainerSasKey")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"storageContainerSasKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"storageContainerSasKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecurringScanEnabled accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) RecurringScanEnabled() (bool, error) {
	res, ok := s.Cache.Load("recurringScanEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RecurringScanEmails accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) RecurringScanEmails() ([]interface{}, error) {
	res, ok := s.Cache.Load("recurringScanEmails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"recurringScanEmails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"recurringScanEmails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MailSubscriptionAdmins accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) MailSubscriptionAdmins() (bool, error) {
	res, ok := s.Cache.Load("mailSubscriptionAdmins")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed: no value provided for static field \"mailSubscriptionAdmins\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" failed to cast field \"mailSubscriptionAdmins\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerVulnerabilityassessmentsettings) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.vulnerabilityassessmentsettings].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "storageContainerPath":
		return nil
	case "storageAccountAccessKey":
		return nil
	case "storageContainerSasKey":
		return nil
	case "recurringScanEnabled":
		return nil
	case "recurringScanEmails":
		return nil
	case "mailSubscriptionAdmins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.vulnerabilityassessmentsettings\" resource")
	}
}

// AzureSubscriptionSqlServiceServerAdministrator resource interface
type AzureSubscriptionSqlServiceServerAdministrator interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	AdministratorType() (string, error)
	Login() (string, error)
	Sid() (string, error)
	TenantId() (string, error)
}

// mqlAzureSubscriptionSqlServiceServerAdministrator for the azure.subscription.sqlService.server.administrator resource
type mqlAzureSubscriptionSqlServiceServerAdministrator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.server.administrator resource
func newAzureSubscriptionSqlServiceServerAdministrator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceServerAdministrator{runtime.NewResource("azure.subscription.sqlService.server.administrator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "administratorType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"administratorType\" argument has the wrong type (expected type \"string\")")
			}
		case "login":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"login\" argument has the wrong type (expected type \"string\")")
			}
		case "sid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"sid\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.server.administrator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.server.administrator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("administratorType"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"administratorType\". This field is required.")
	}
	if _, ok := s.Cache.Load("login"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"login\". This field is required.")
	}
	if _, ok := s.Cache.Load("sid"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"sid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tenantId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.server.administrator\" resource without a \"tenantId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.administrator].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.administrator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.administrator].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "administratorType":
		return s.AdministratorType()
	case "login":
		return s.Login()
	case "sid":
		return s.Sid()
	case "tenantId":
		return s.TenantId()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.administrator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AdministratorType accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) AdministratorType() (string, error) {
	res, ok := s.Cache.Load("administratorType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"administratorType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"administratorType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Login accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Login() (string, error) {
	res, ok := s.Cache.Load("login")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"login\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"login\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sid accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) Sid() (string, error) {
	res, ok := s.Cache.Load("sid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"sid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"sid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.server.administrator\" failed: no value provided for static field \"tenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.server.administrator\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceServerAdministrator) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.server.administrator].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.server.administrator\" resource")
	}
}

// AzureSubscriptionSqlServiceDatabase resource interface
type AzureSubscriptionSqlServiceDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Collation() (string, error)
	CreationDate() (*time.Time, error)
	DatabaseId() (string, error)
	EarliestRestoreDate() (*time.Time, error)
	CreateMode() (string, error)
	SourceDatabaseId() (string, error)
	SourceDatabaseDeletionDate() (*time.Time, error)
	RestorePointInTime() (*time.Time, error)
	RecoveryServicesRecoveryPointResourceId() (string, error)
	Edition() (string, error)
	MaxSizeBytes() (int64, error)
	RequestedServiceObjectiveName() (string, error)
	ServiceLevelObjective() (string, error)
	Status() (string, error)
	ElasticPoolName() (string, error)
	DefaultSecondaryLocation() (string, error)
	FailoverGroupId() (string, error)
	ReadScale() (string, error)
	SampleName() (string, error)
	ZoneRedundant() (bool, error)
	TransparentDataEncryption() (interface{}, error)
	Advisor() ([]interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	Usage() ([]interface{}, error)
}

// mqlAzureSubscriptionSqlServiceDatabase for the azure.subscription.sqlService.database resource
type mqlAzureSubscriptionSqlServiceDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.database resource
func newAzureSubscriptionSqlServiceDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceDatabase{runtime.NewResource("azure.subscription.sqlService.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "databaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"databaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "earliestRestoreDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"earliestRestoreDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"createMode\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"sourceDatabaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseDeletionDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"sourceDatabaseDeletionDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "restorePointInTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"restorePointInTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryServicesRecoveryPointResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"recoveryServicesRecoveryPointResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "edition":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"edition\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"maxSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "requestedServiceObjectiveName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"requestedServiceObjectiveName\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceLevelObjective":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"serviceLevelObjective\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "elasticPoolName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"elasticPoolName\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultSecondaryLocation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"defaultSecondaryLocation\" argument has the wrong type (expected type \"string\")")
			}
		case "failoverGroupId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"failoverGroupId\" argument has the wrong type (expected type \"string\")")
			}
		case "readScale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"readScale\" argument has the wrong type (expected type \"string\")")
			}
		case "sampleName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"sampleName\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneRedundant":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"zoneRedundant\" argument has the wrong type (expected type \"bool\")")
			}
		case "transparentDataEncryption":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"transparentDataEncryption\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "advisor":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"advisor\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "usage":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"usage\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"databaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("earliestRestoreDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"earliestRestoreDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("createMode"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"createMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"sourceDatabaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseDeletionDate"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"sourceDatabaseDeletionDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("restorePointInTime"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"restorePointInTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"recoveryServicesRecoveryPointResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("edition"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"edition\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSizeBytes"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"maxSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("requestedServiceObjectiveName"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"requestedServiceObjectiveName\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceLevelObjective"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"serviceLevelObjective\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("elasticPoolName"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"elasticPoolName\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecondaryLocation"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"defaultSecondaryLocation\". This field is required.")
	}
	if _, ok := s.Cache.Load("failoverGroupId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"failoverGroupId\". This field is required.")
	}
	if _, ok := s.Cache.Load("readScale"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"readScale\". This field is required.")
	}
	if _, ok := s.Cache.Load("sampleName"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"sampleName\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneRedundant"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.database\" resource without a \"zoneRedundant\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return nil
	case "advisor":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "usage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "collation":
		return s.Collation()
	case "creationDate":
		return s.CreationDate()
	case "databaseId":
		return s.DatabaseId()
	case "earliestRestoreDate":
		return s.EarliestRestoreDate()
	case "createMode":
		return s.CreateMode()
	case "sourceDatabaseId":
		return s.SourceDatabaseId()
	case "sourceDatabaseDeletionDate":
		return s.SourceDatabaseDeletionDate()
	case "restorePointInTime":
		return s.RestorePointInTime()
	case "recoveryServicesRecoveryPointResourceId":
		return s.RecoveryServicesRecoveryPointResourceId()
	case "edition":
		return s.Edition()
	case "maxSizeBytes":
		return s.MaxSizeBytes()
	case "requestedServiceObjectiveName":
		return s.RequestedServiceObjectiveName()
	case "serviceLevelObjective":
		return s.ServiceLevelObjective()
	case "status":
		return s.Status()
	case "elasticPoolName":
		return s.ElasticPoolName()
	case "defaultSecondaryLocation":
		return s.DefaultSecondaryLocation()
	case "failoverGroupId":
		return s.FailoverGroupId()
	case "readScale":
		return s.ReadScale()
	case "sampleName":
		return s.SampleName()
	case "zoneRedundant":
		return s.ZoneRedundant()
	case "transparentDataEncryption":
		return s.TransparentDataEncryption()
	case "advisor":
		return s.Advisor()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "usage":
		return s.Usage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DatabaseId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) DatabaseId() (string, error) {
	res, ok := s.Cache.Load("databaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"databaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"databaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EarliestRestoreDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) EarliestRestoreDate() (*time.Time, error) {
	res, ok := s.Cache.Load("earliestRestoreDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"earliestRestoreDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"earliestRestoreDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreateMode accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) CreateMode() (string, error) {
	res, ok := s.Cache.Load("createMode")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"createMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"createMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) SourceDatabaseId() (string, error) {
	res, ok := s.Cache.Load("sourceDatabaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"sourceDatabaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"sourceDatabaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseDeletionDate accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) SourceDatabaseDeletionDate() (*time.Time, error) {
	res, ok := s.Cache.Load("sourceDatabaseDeletionDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"sourceDatabaseDeletionDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"sourceDatabaseDeletionDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RestorePointInTime accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) RestorePointInTime() (*time.Time, error) {
	res, ok := s.Cache.Load("restorePointInTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"restorePointInTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"restorePointInTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryServicesRecoveryPointResourceId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) RecoveryServicesRecoveryPointResourceId() (string, error) {
	res, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"recoveryServicesRecoveryPointResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"recoveryServicesRecoveryPointResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Edition accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Edition() (string, error) {
	res, ok := s.Cache.Load("edition")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"edition\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"edition\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSizeBytes accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) MaxSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("maxSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"maxSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"maxSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveName accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) RequestedServiceObjectiveName() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"requestedServiceObjectiveName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"requestedServiceObjectiveName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceLevelObjective accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ServiceLevelObjective() (string, error) {
	res, ok := s.Cache.Load("serviceLevelObjective")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"serviceLevelObjective\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"serviceLevelObjective\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ElasticPoolName accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ElasticPoolName() (string, error) {
	res, ok := s.Cache.Load("elasticPoolName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"elasticPoolName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"elasticPoolName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultSecondaryLocation accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) DefaultSecondaryLocation() (string, error) {
	res, ok := s.Cache.Load("defaultSecondaryLocation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"defaultSecondaryLocation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"defaultSecondaryLocation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FailoverGroupId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) FailoverGroupId() (string, error) {
	res, ok := s.Cache.Load("failoverGroupId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"failoverGroupId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"failoverGroupId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReadScale accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ReadScale() (string, error) {
	res, ok := s.Cache.Load("readScale")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"readScale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"readScale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SampleName accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) SampleName() (string, error) {
	res, ok := s.Cache.Load("sampleName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"sampleName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"sampleName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneRedundant accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ZoneRedundant() (bool, error) {
	res, ok := s.Cache.Load("zoneRedundant")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.sqlService.database\" failed: no value provided for static field \"zoneRedundant\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"zoneRedundant\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// TransparentDataEncryption accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) TransparentDataEncryption() (interface{}, error) {
	res, ok := s.Cache.Load("transparentDataEncryption")
	if !ok || !res.Valid {
		if err := s.ComputeTransparentDataEncryption(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("transparentDataEncryption")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"transparentDataEncryption\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "transparentDataEncryption")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"transparentDataEncryption\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Advisor accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Advisor() ([]interface{}, error) {
	res, ok := s.Cache.Load("advisor")
	if !ok || !res.Valid {
		if err := s.ComputeAdvisor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advisor")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"advisor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advisor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"advisor\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Usage accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) Usage() ([]interface{}, error) {
	res, ok := s.Cache.Load("usage")
	if !ok || !res.Valid {
		if err := s.ComputeUsage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("usage")
		if !ok {
			return nil, errors.New("\"azure.subscription.sqlService.database\" calculated \"usage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "usage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.database\" failed to cast field \"usage\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return s.ComputeTransparentDataEncryption()
	case "advisor":
		return s.ComputeAdvisor()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "usage":
		return s.ComputeUsage()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.database\" resource")
	}
}

// ComputeTransparentDataEncryption computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeTransparentDataEncryption() error {
	var err error
	if _, ok := s.Cache.Load("transparentDataEncryption"); ok {
		return nil
	}
	vres, err := s.GetTransparentDataEncryption()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("transparentDataEncryption", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdvisor computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeAdvisor() error {
	var err error
	if _, ok := s.Cache.Load("advisor"); ok {
		return nil
	}
	vres, err := s.GetAdvisor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advisor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsage computer autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabase) ComputeUsage() error {
	var err error
	if _, ok := s.Cache.Load("usage"); ok {
		return nil
	}
	vres, err := s.GetUsage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("usage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionSqlServiceDatabaseusage resource interface
type AzureSubscriptionSqlServiceDatabaseusage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	ResourceName() (string, error)
	DisplayName() (string, error)
	CurrentValue() (float64, error)
	Limit() (float64, error)
	Unit() (string, error)
}

// mqlAzureSubscriptionSqlServiceDatabaseusage for the azure.subscription.sqlService.databaseusage resource
type mqlAzureSubscriptionSqlServiceDatabaseusage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.databaseusage resource
func newAzureSubscriptionSqlServiceDatabaseusage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceDatabaseusage{runtime.NewResource("azure.subscription.sqlService.databaseusage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"resourceName\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "currentValue":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"currentValue\" argument has the wrong type (expected type \"float64\")")
			}
		case "limit":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"limit\" argument has the wrong type (expected type \"float64\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.databaseusage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.databaseusage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceName"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"resourceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentValue"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"currentValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("limit"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"limit\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.databaseusage\" resource without a \"unit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.databaseusage].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.databaseusage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.databaseusage].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "resourceName":
		return s.ResourceName()
	case "displayName":
		return s.DisplayName()
	case "currentValue":
		return s.CurrentValue()
	case "limit":
		return s.Limit()
	case "unit":
		return s.Unit()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.databaseusage\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceName accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) ResourceName() (string, error) {
	res, ok := s.Cache.Load("resourceName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"resourceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"resourceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentValue accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) CurrentValue() (float64, error) {
	res, ok := s.Cache.Load("currentValue")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"currentValue\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"currentValue\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Limit accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Limit() (float64, error) {
	res, ok := s.Cache.Load("limit")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"limit\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"limit\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.databaseusage\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.databaseusage\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceDatabaseusage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.databaseusage].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.databaseusage\" resource")
	}
}

// AzureSubscriptionPostgresqlService resource interface
type AzureSubscriptionPostgresqlService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionPostgresqlService for the azure.subscription.postgresqlService resource
type mqlAzureSubscriptionPostgresqlService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresqlService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresqlService resource
func newAzureSubscriptionPostgresqlService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresqlService{runtime.NewResource("azure.subscription.postgresqlService")}
	var existing AzureSubscriptionPostgresqlService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresqlService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresqlService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresqlService\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlService) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionPostgresqlServiceServer resource interface
type AzureSubscriptionPostgresqlServiceServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionPostgresqlServiceServer for the azure.subscription.postgresqlService.server resource
type mqlAzureSubscriptionPostgresqlServiceServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresqlServiceServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresqlService.server resource
func newAzureSubscriptionPostgresqlServiceServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresqlServiceServer{runtime.NewResource("azure.subscription.postgresqlService.server")}
	var existing AzureSubscriptionPostgresqlServiceServer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresqlService.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresqlServiceServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.postgresqlService.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresqlService.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresqlService.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.postgresqlService.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.postgresqlService.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionPostgresqlServiceDatabase resource interface
type AzureSubscriptionPostgresqlServiceDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionPostgresqlServiceDatabase for the azure.subscription.postgresqlService.database resource
type mqlAzureSubscriptionPostgresqlServiceDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.postgresqlService.database resource
func newAzureSubscriptionPostgresqlServiceDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionPostgresqlServiceDatabase{runtime.NewResource("azure.subscription.postgresqlService.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.postgresqlService.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.postgresqlService.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.postgresqlService.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.postgresqlService.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.postgresqlService.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionPostgresqlServiceDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.postgresqlService.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.postgresqlService.database\" resource")
	}
}

// AzureSubscriptionMysqlService resource interface
type AzureSubscriptionMysqlService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Servers() ([]interface{}, error)
	FlexibleServers() ([]interface{}, error)
}

// mqlAzureSubscriptionMysqlService for the azure.subscription.mysqlService resource
type mqlAzureSubscriptionMysqlService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysqlService resource
func newAzureSubscriptionMysqlService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlService{runtime.NewResource("azure.subscription.mysqlService")}
	var existing AzureSubscriptionMysqlService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "flexibleServers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService\", its \"flexibleServers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysqlService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return nil
	case "flexibleServers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "servers":
		return s.Servers()
	case "flexibleServers":
		return s.FlexibleServers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysqlService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FlexibleServers accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) FlexibleServers() ([]interface{}, error) {
	res, ok := s.Cache.Load("flexibleServers")
	if !ok || !res.Valid {
		if err := s.ComputeFlexibleServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flexibleServers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService\" calculated \"flexibleServers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flexibleServers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService\" failed to cast field \"flexibleServers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return s.ComputeServers()
	case "flexibleServers":
		return s.ComputeFlexibleServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionMysqlService) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFlexibleServers computer autogenerated
func (s *mqlAzureSubscriptionMysqlService) ComputeFlexibleServers() error {
	var err error
	if _, ok := s.Cache.Load("flexibleServers"); ok {
		return nil
	}
	vres, err := s.GetFlexibleServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flexibleServers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMysqlServiceServer resource interface
type AzureSubscriptionMysqlServiceServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMysqlServiceServer for the azure.subscription.mysqlService.server resource
type mqlAzureSubscriptionMysqlServiceServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlServiceServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysqlService.server resource
func newAzureSubscriptionMysqlServiceServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlServiceServer{runtime.NewResource("azure.subscription.mysqlService.server")}
	var existing AzureSubscriptionMysqlServiceServer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysqlService.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlServiceServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysqlService.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMysqlServiceDatabase resource interface
type AzureSubscriptionMysqlServiceDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionMysqlServiceDatabase for the azure.subscription.mysqlService.database resource
type mqlAzureSubscriptionMysqlServiceDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlServiceDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysqlService.database resource
func newAzureSubscriptionMysqlServiceDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlServiceDatabase{runtime.NewResource("azure.subscription.mysqlService.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysqlService.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlServiceDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.database\" resource")
	}
}

// AzureSubscriptionMysqlServiceFlexibleServer resource interface
type AzureSubscriptionMysqlServiceFlexibleServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMysqlServiceFlexibleServer for the azure.subscription.mysqlService.flexibleServer resource
type mqlAzureSubscriptionMysqlServiceFlexibleServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mysqlService.flexibleServer resource
func newAzureSubscriptionMysqlServiceFlexibleServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMysqlServiceFlexibleServer{runtime.NewResource("azure.subscription.mysqlService.flexibleServer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mysqlService.flexibleServer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mysqlService.flexibleServer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mysqlService.flexibleServer\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.flexibleServer].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.flexibleServer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.flexibleServer].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.flexibleServer\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mysqlService.flexibleServer\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.flexibleServer\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.flexibleServer\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mysqlService.flexibleServer\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mysqlService.flexibleServer\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mysqlService.flexibleServer].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mysqlService.flexibleServer\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMysqlServiceFlexibleServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadbService resource interface
type AzureSubscriptionMariadbService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Servers() ([]interface{}, error)
}

// mqlAzureSubscriptionMariadbService for the azure.subscription.mariadbService resource
type mqlAzureSubscriptionMariadbService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadbService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadbService resource
func newAzureSubscriptionMariadbService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadbService{runtime.NewResource("azure.subscription.mariadbService")}
	var existing AzureSubscriptionMariadbService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadbService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadbService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadbService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadbService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadbService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionMariadbService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Servers accessor autogenerated
func (s *mqlAzureSubscriptionMariadbService) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadbService\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadbService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzureSubscriptionMariadbService) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadbServiceServer resource interface
type AzureSubscriptionMariadbServiceServer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzureSubscriptionMariadbServiceServer for the azure.subscription.mariadbService.server resource
type mqlAzureSubscriptionMariadbServiceServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadbServiceServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadbService.server resource
func newAzureSubscriptionMariadbServiceServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadbServiceServer{runtime.NewResource("azure.subscription.mariadbService.server")}
	var existing AzureSubscriptionMariadbServiceServer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadbService.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadbServiceServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.mariadbService.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadbService.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadbService.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azure.subscription.mariadbService.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.mariadbService.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.server].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzureSubscriptionMariadbServiceServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMariadbServiceDatabase resource interface
type AzureSubscriptionMariadbServiceDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzureSubscriptionMariadbServiceDatabase for the azure.subscription.mariadbService.database resource
type mqlAzureSubscriptionMariadbServiceDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMariadbServiceDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.mariadbService.database resource
func newAzureSubscriptionMariadbServiceDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMariadbServiceDatabase{runtime.NewResource("azure.subscription.mariadbService.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.mariadbService.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.mariadbService.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMariadbServiceDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azure.subscription.mariadbService.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.mariadbService.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.mariadbService.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMariadbServiceDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.mariadbService.database].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.mariadbService.database\" resource")
	}
}

// AzureSubscriptionCosmosdbService resource interface
type AzureSubscriptionCosmosdbService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Accounts() ([]interface{}, error)
}

// mqlAzureSubscriptionCosmosdbService for the azure.subscription.cosmosdbService resource
type mqlAzureSubscriptionCosmosdbService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCosmosdbService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cosmosdbService resource
func newAzureSubscriptionCosmosdbService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCosmosdbService{runtime.NewResource("azure.subscription.cosmosdbService")}
	var existing AzureSubscriptionCosmosdbService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "accounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService\", its \"accounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cosmosdbService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCosmosdbService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "accounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "accounts":
		return s.Accounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Accounts accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) Accounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("accounts")
	if !ok || !res.Valid {
		if err := s.ComputeAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accounts")
		if !ok {
			return nil, errors.New("\"azure.subscription.cosmosdbService\" calculated \"accounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cosmosdbService\" failed to cast field \"accounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "accounts":
		return s.ComputeAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService\" resource")
	}
}

// ComputeAccounts computer autogenerated
func (s *mqlAzureSubscriptionCosmosdbService) ComputeAccounts() error {
	var err error
	if _, ok := s.Cache.Load("accounts"); ok {
		return nil
	}
	vres, err := s.GetAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionCosmosdbServiceAccount resource interface
type AzureSubscriptionCosmosdbServiceAccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Properties() (interface{}, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Kind() (string, error)
}

// mqlAzureSubscriptionCosmosdbServiceAccount for the azure.subscription.cosmosdbService.account resource
type mqlAzureSubscriptionCosmosdbServiceAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cosmosdbService.account resource
func newAzureSubscriptionCosmosdbServiceAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCosmosdbServiceAccount{runtime.NewResource("azure.subscription.cosmosdbService.account")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cosmosdbService.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cosmosdbService.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.cosmosdbService.account\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService.account].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "properties":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "kind":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "kind":
		return s.Kind()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cosmosdbService.account\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cosmosdbService.account\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCosmosdbServiceAccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cosmosdbService.account].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "properties":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "kind":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cosmosdbService.account\" resource")
	}
}

// AzureSubscriptionSqlServiceConfiguration resource interface
type AzureSubscriptionSqlServiceConfiguration interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Value() (string, error)
	Description() (string, error)
	DefaultValue() (string, error)
	DataType() (string, error)
	AllowedValues() (string, error)
	Source() (string, error)
}

// mqlAzureSubscriptionSqlServiceConfiguration for the azure.subscription.sqlService.configuration resource
type mqlAzureSubscriptionSqlServiceConfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceConfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.configuration resource
func newAzureSubscriptionSqlServiceConfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceConfiguration{runtime.NewResource("azure.subscription.sqlService.configuration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultValue":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"defaultValue\" argument has the wrong type (expected type \"string\")")
			}
		case "dataType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"dataType\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedValues":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"allowedValues\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"source\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.configuration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.configuration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceConfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultValue"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"defaultValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataType"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"dataType\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedValues"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"allowedValues\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.configuration\" resource without a \"source\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.configuration].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.configuration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.configuration].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "value":
		return s.Value()
	case "description":
		return s.Description()
	case "defaultValue":
		return s.DefaultValue()
	case "dataType":
		return s.DataType()
	case "allowedValues":
		return s.AllowedValues()
	case "source":
		return s.Source()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.configuration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultValue accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) DefaultValue() (string, error) {
	res, ok := s.Cache.Load("defaultValue")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"defaultValue\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"defaultValue\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DataType accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) DataType() (string, error) {
	res, ok := s.Cache.Load("dataType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"dataType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"dataType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedValues accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) AllowedValues() (string, error) {
	res, ok := s.Cache.Load("allowedValues")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"allowedValues\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"allowedValues\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) Source() (string, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.configuration\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.configuration\" failed to cast field \"source\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceConfiguration) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.configuration].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.configuration\" resource")
	}
}

// AzureSubscriptionSqlServiceFirewallrule resource interface
type AzureSubscriptionSqlServiceFirewallrule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StartIpAddress() (string, error)
	EndIpAddress() (string, error)
}

// mqlAzureSubscriptionSqlServiceFirewallrule for the azure.subscription.sqlService.firewallrule resource
type mqlAzureSubscriptionSqlServiceFirewallrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.firewallrule resource
func newAzureSubscriptionSqlServiceFirewallrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceFirewallrule{runtime.NewResource("azure.subscription.sqlService.firewallrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "startIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"startIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "endIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"endIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.firewallrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.firewallrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.firewallrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.firewallrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.firewallrule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("startIpAddress"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.firewallrule\" resource without a \"startIpAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("endIpAddress"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.firewallrule\" resource without a \"endIpAddress\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.firewallrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.firewallrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.firewallrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "startIpAddress":
		return s.StartIpAddress()
	case "endIpAddress":
		return s.EndIpAddress()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.firewallrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.firewallrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.firewallrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.firewallrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.firewallrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.firewallrule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.firewallrule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartIpAddress accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) StartIpAddress() (string, error) {
	res, ok := s.Cache.Load("startIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.firewallrule\" failed: no value provided for static field \"startIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.firewallrule\" failed to cast field \"startIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndIpAddress accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) EndIpAddress() (string, error) {
	res, ok := s.Cache.Load("endIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.firewallrule\" failed: no value provided for static field \"endIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.firewallrule\" failed to cast field \"endIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceFirewallrule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.firewallrule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.firewallrule\" resource")
	}
}

// AzureSubscriptionSqlServiceVirtualNetworkRule resource interface
type AzureSubscriptionSqlServiceVirtualNetworkRule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
	VirtualNetworkSubnetId() (string, error)
}

// mqlAzureSubscriptionSqlServiceVirtualNetworkRule for the azure.subscription.sqlService.virtualNetworkRule resource
type mqlAzureSubscriptionSqlServiceVirtualNetworkRule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.sqlService.virtualNetworkRule resource
func newAzureSubscriptionSqlServiceVirtualNetworkRule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionSqlServiceVirtualNetworkRule{runtime.NewResource("azure.subscription.sqlService.virtualNetworkRule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "virtualNetworkSubnetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"virtualNetworkSubnetId\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.sqlService.virtualNetworkRule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.sqlService.virtualNetworkRule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.virtualNetworkRule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.virtualNetworkRule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.virtualNetworkRule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.virtualNetworkRule\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("virtualNetworkSubnetId"); !ok {
		return errors.New("Initialized \"azure.subscription.sqlService.virtualNetworkRule\" resource without a \"virtualNetworkSubnetId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.virtualNetworkRule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "virtualNetworkSubnetId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.virtualNetworkRule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.virtualNetworkRule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "virtualNetworkSubnetId":
		return s.VirtualNetworkSubnetId()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.sqlService.virtualNetworkRule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.virtualNetworkRule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.virtualNetworkRule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.virtualNetworkRule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.virtualNetworkRule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.virtualNetworkRule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.virtualNetworkRule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.sqlService.virtualNetworkRule\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.sqlService.virtualNetworkRule\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VirtualNetworkSubnetId accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) VirtualNetworkSubnetId() (string, error) {
	res, ok := s.Cache.Load("virtualNetworkSubnetId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.sqlService.virtualNetworkRule\" failed: no value provided for static field \"virtualNetworkSubnetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.sqlService.virtualNetworkRule\" failed to cast field \"virtualNetworkSubnetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionSqlServiceVirtualNetworkRule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.sqlService.virtualNetworkRule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "virtualNetworkSubnetId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.sqlService.virtualNetworkRule\" resource")
	}
}

// AzureSubscriptionKeyvaultService resource interface
type AzureSubscriptionKeyvaultService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Vaults() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultService for the azure.subscription.keyvaultService resource
type mqlAzureSubscriptionKeyvaultService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvaultService resource
func newAzureSubscriptionKeyvaultService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultService{runtime.NewResource("azure.subscription.keyvaultService")}
	var existing AzureSubscriptionKeyvaultService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "vaults":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService\", its \"vaults\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvaultService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "vaults":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "vaults":
		return s.Vaults()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Vaults accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) Vaults() ([]interface{}, error) {
	res, ok := s.Cache.Load("vaults")
	if !ok || !res.Valid {
		if err := s.ComputeVaults(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vaults")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService\" calculated \"vaults\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaults")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService\" failed to cast field \"vaults\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "vaults":
		return s.ComputeVaults()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService\" resource")
	}
}

// ComputeVaults computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultService) ComputeVaults() error {
	var err error
	if _, ok := s.Cache.Load("vaults"); ok {
		return nil
	}
	vres, err := s.GetVaults()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaults", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultServiceVault resource interface
type AzureSubscriptionKeyvaultServiceVault interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	VaultName() (string, error)
	Type() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	VaultUri() (string, error)
	Properties() (interface{}, error)
	Keys() ([]interface{}, error)
	Certificates() ([]interface{}, error)
	Secrets() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultServiceVault for the azure.subscription.keyvaultService.vault resource
type mqlAzureSubscriptionKeyvaultServiceVault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultServiceVault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvaultService.vault resource
func newAzureSubscriptionKeyvaultServiceVault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultServiceVault{runtime.NewResource("azure.subscription.keyvaultService.vault")}
	var existing AzureSubscriptionKeyvaultServiceVault
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "vaultName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"vaultName\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "vaultUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"vaultUri\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.vault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvaultService.vault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultServiceVault) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.vault\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("vaultName"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.vault\" resource without a \"vaultName\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.vault\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.vault\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.vault\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.vault].Register")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return nil
	case "properties":
		return nil
	case "keys":
		return nil
	case "certificates":
		return nil
	case "secrets":
		return nil
	case "diagnosticSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.vault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.vault].Field")
	switch name {
	case "id":
		return s.Id()
	case "vaultName":
		return s.VaultName()
	case "type":
		return s.Type()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "vaultUri":
		return s.VaultUri()
	case "properties":
		return s.Properties()
	case "keys":
		return s.Keys()
	case "certificates":
		return s.Certificates()
	case "secrets":
		return s.Secrets()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.vault\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.vault\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VaultName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) VaultName() (string, error) {
	res, ok := s.Cache.Load("vaultName")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.vault\" failed: no value provided for static field \"vaultName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"vaultName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.vault\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.vault\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.vault\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// VaultUri accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) VaultUri() (string, error) {
	res, ok := s.Cache.Load("vaultUri")
	if !ok || !res.Valid {
		if err := s.ComputeVaultUri(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("vaultUri")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"vaultUri\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaultUri")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"vaultUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Keys accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.vault\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.vault\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.vault].MqlCompute")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return s.ComputeVaultUri()
	case "properties":
		return s.ComputeProperties()
	case "keys":
		return s.ComputeKeys()
	case "certificates":
		return s.ComputeCertificates()
	case "secrets":
		return s.ComputeSecrets()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.vault\" resource")
	}
}

// ComputeVaultUri computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeVaultUri() error {
	var err error
	if _, ok := s.Cache.Load("vaultUri"); ok {
		return nil
	}
	vres, err := s.GetVaultUri()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaultUri", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeys computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCertificates computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecrets computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceVault) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultServiceKey resource interface
type AzureSubscriptionKeyvaultServiceKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Kid() (string, error)
	Tags() (map[string]interface{}, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	KeyName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultServiceKey for the azure.subscription.keyvaultService.key resource
type mqlAzureSubscriptionKeyvaultServiceKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultServiceKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvaultService.key resource
func newAzureSubscriptionKeyvaultServiceKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultServiceKey{runtime.NewResource("azure.subscription.keyvaultService.key")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "kid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"kid\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "keyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"keyName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvaultService.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultServiceKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("kid"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"kid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.key\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.key].Register")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.key].Field")
	switch name {
	case "kid":
		return s.Kid()
	case "tags":
		return s.Tags()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "keyName":
		return s.KeyName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.key\" resource")
	}
}

// Kid accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Kid() (string, error) {
	res, ok := s.Cache.Load("kid")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"kid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"kid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.key\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) KeyName() (string, error) {
	res, ok := s.Cache.Load("keyName")
	if !ok || !res.Valid {
		if err := s.ComputeKeyName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("keyName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.key\" calculated \"keyName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"keyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.key\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.key\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.key\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.key].MqlCompute")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return s.ComputeKeyName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.key\" resource")
	}
}

// ComputeKeyName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) ComputeKeyName() error {
	var err error
	if _, ok := s.Cache.Load("keyName"); ok {
		return nil
	}
	vres, err := s.GetKeyName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceKey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultServiceCertificate resource interface
type AzureSubscriptionKeyvaultServiceCertificate interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	X5t() (string, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	CertName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultServiceCertificate for the azure.subscription.keyvaultService.certificate resource
type mqlAzureSubscriptionKeyvaultServiceCertificate struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvaultService.certificate resource
func newAzureSubscriptionKeyvaultServiceCertificate(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultServiceCertificate{runtime.NewResource("azure.subscription.keyvaultService.certificate")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "x5t":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"x5t\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "certName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"certName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.certificate\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvaultService.certificate with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("x5t"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"x5t\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.certificate\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.certificate].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.certificate\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.certificate].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "x5t":
		return s.X5t()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "certName":
		return s.CertName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.certificate\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// X5t accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) X5t() (string, error) {
	res, ok := s.Cache.Load("x5t")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"x5t\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"x5t\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.certificate\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) CertName() (string, error) {
	res, ok := s.Cache.Load("certName")
	if !ok || !res.Valid {
		if err := s.ComputeCertName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("certName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.certificate\" calculated \"certName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"certName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.certificate\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.certificate\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.certificate\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.certificate].MqlCompute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return s.ComputeCertName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.certificate\" resource")
	}
}

// ComputeCertName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) ComputeCertName() error {
	var err error
	if _, ok := s.Cache.Load("certName"); ok {
		return nil
	}
	vres, err := s.GetCertName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceCertificate) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionKeyvaultServiceSecret resource interface
type AzureSubscriptionKeyvaultServiceSecret interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	ContentType() (string, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	SecretName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzureSubscriptionKeyvaultServiceSecret for the azure.subscription.keyvaultService.secret resource
type mqlAzureSubscriptionKeyvaultServiceSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.keyvaultService.secret resource
func newAzureSubscriptionKeyvaultServiceSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionKeyvaultServiceSecret{runtime.NewResource("azure.subscription.keyvaultService.secret")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "contentType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"contentType\" argument has the wrong type (expected type \"string\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "secretName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"secretName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.keyvaultService.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.keyvaultService.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("contentType"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"contentType\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azure.subscription.keyvaultService.secret\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.secret].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.secret].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "contentType":
		return s.ContentType()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "secretName":
		return s.SecretName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.secret\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ContentType accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) ContentType() (string, error) {
	res, ok := s.Cache.Load("contentType")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"contentType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"contentType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.keyvaultService.secret\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// SecretName accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) SecretName() (string, error) {
	res, ok := s.Cache.Load("secretName")
	if !ok || !res.Valid {
		if err := s.ComputeSecretName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("secretName")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.secret\" calculated \"secretName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secretName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"secretName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azure.subscription.keyvaultService.secret\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azure.subscription.keyvaultService.secret\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.keyvaultService.secret\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.keyvaultService.secret].MqlCompute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return s.ComputeSecretName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.keyvaultService.secret\" resource")
	}
}

// ComputeSecretName computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) ComputeSecretName() error {
	var err error
	if _, ok := s.Cache.Load("secretName"); ok {
		return nil
	}
	vres, err := s.GetSecretName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secretName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzureSubscriptionKeyvaultServiceSecret) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitorService resource interface
type AzureSubscriptionMonitorService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	LogProfiles() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
	ActivityLog() (AzureSubscriptionMonitorServiceActivitylog, error)
	ApplicationInsights() ([]interface{}, error)
}

// mqlAzureSubscriptionMonitorService for the azure.subscription.monitorService resource
type mqlAzureSubscriptionMonitorService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService resource
func newAzureSubscriptionMonitorService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorService{runtime.NewResource("azure.subscription.monitorService")}
	var existing AzureSubscriptionMonitorService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "logProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"logProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "activityLog":
			if _, ok := val.(AzureSubscriptionMonitorServiceActivitylog); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"activityLog\" argument has the wrong type (expected type \"AzureSubscriptionMonitorServiceActivitylog\")")
			}
		case "applicationInsights":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"applicationInsights\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "logProfiles":
		return nil
	case "diagnosticSettings":
		return nil
	case "activityLog":
		return nil
	case "applicationInsights":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "logProfiles":
		return s.LogProfiles()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	case "activityLog":
		return s.ActivityLog()
	case "applicationInsights":
		return s.ApplicationInsights()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LogProfiles accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) LogProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("logProfiles")
	if !ok || !res.Valid {
		if err := s.ComputeLogProfiles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logProfiles")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitorService\" calculated \"logProfiles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logProfiles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService\" failed to cast field \"logProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitorService\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ActivityLog accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) ActivityLog() (AzureSubscriptionMonitorServiceActivitylog, error) {
	res, ok := s.Cache.Load("activityLog")
	if !ok || !res.Valid {
		if err := s.ComputeActivityLog(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("activityLog")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitorService\" calculated \"activityLog\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "activityLog")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionMonitorServiceActivitylog)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService\" failed to cast field \"activityLog\" to the right type (AzureSubscriptionMonitorServiceActivitylog): %#v", res)
	}
	return tres, nil
}

// ApplicationInsights accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) ApplicationInsights() ([]interface{}, error) {
	res, ok := s.Cache.Load("applicationInsights")
	if !ok || !res.Valid {
		if err := s.ComputeApplicationInsights(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applicationInsights")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitorService\" calculated \"applicationInsights\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applicationInsights")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService\" failed to cast field \"applicationInsights\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "logProfiles":
		return s.ComputeLogProfiles()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	case "activityLog":
		return s.ComputeActivityLog()
	case "applicationInsights":
		return s.ComputeApplicationInsights()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService\" resource")
	}
}

// ComputeLogProfiles computer autogenerated
func (s *mqlAzureSubscriptionMonitorService) ComputeLogProfiles() error {
	var err error
	if _, ok := s.Cache.Load("logProfiles"); ok {
		return nil
	}
	vres, err := s.GetLogProfiles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logProfiles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzureSubscriptionMonitorService) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeActivityLog computer autogenerated
func (s *mqlAzureSubscriptionMonitorService) ComputeActivityLog() error {
	var err error
	if _, ok := s.Cache.Load("activityLog"); ok {
		return nil
	}
	vres, err := s.GetActivityLog()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("activityLog", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplicationInsights computer autogenerated
func (s *mqlAzureSubscriptionMonitorService) ComputeApplicationInsights() error {
	var err error
	if _, ok := s.Cache.Load("applicationInsights"); ok {
		return nil
	}
	vres, err := s.GetApplicationInsights()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applicationInsights", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitorServiceActivitylog resource interface
type AzureSubscriptionMonitorServiceActivitylog interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Alerts() ([]interface{}, error)
}

// mqlAzureSubscriptionMonitorServiceActivitylog for the azure.subscription.monitorService.activitylog resource
type mqlAzureSubscriptionMonitorServiceActivitylog struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService.activitylog resource
func newAzureSubscriptionMonitorServiceActivitylog(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorServiceActivitylog{runtime.NewResource("azure.subscription.monitorService.activitylog")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "alerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog\", its \"alerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService.activitylog with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorServiceActivitylog) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog].Register")
	switch name {
	case "alerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog].Field")
	switch name {
	case "alerts":
		return s.Alerts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog\" resource")
	}
}

// Alerts accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) Alerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("alerts")
	if !ok || !res.Valid {
		if err := s.ComputeAlerts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("alerts")
		if !ok {
			return nil, errors.New("\"azure.subscription.monitorService.activitylog\" calculated \"alerts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "alerts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.activitylog\" failed to cast field \"alerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog].MqlCompute")
	switch name {
	case "alerts":
		return s.ComputeAlerts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog\" resource")
	}
}

// ComputeAlerts computer autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylog) ComputeAlerts() error {
	var err error
	if _, ok := s.Cache.Load("alerts"); ok {
		return nil
	}
	vres, err := s.GetAlerts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("alerts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionMonitorServiceApplicationInsight resource interface
type AzureSubscriptionMonitorServiceApplicationInsight interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Properties() (interface{}, error)
	Tags() (map[string]interface{}, error)
	Location() (string, error)
	Kind() (string, error)
	Type() (string, error)
}

// mqlAzureSubscriptionMonitorServiceApplicationInsight for the azure.subscription.monitorService.applicationInsight resource
type mqlAzureSubscriptionMonitorServiceApplicationInsight struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService.applicationInsight resource
func newAzureSubscriptionMonitorServiceApplicationInsight(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorServiceApplicationInsight{runtime.NewResource("azure.subscription.monitorService.applicationInsight")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.applicationInsight\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService.applicationInsight with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.applicationInsight\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.applicationInsight].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "properties":
		return nil
	case "tags":
		return nil
	case "location":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.applicationInsight\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.applicationInsight].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "properties":
		return s.Properties()
	case "tags":
		return s.Tags()
	case "location":
		return s.Location()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService.applicationInsight\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.applicationInsight\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.applicationInsight\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceApplicationInsight) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.applicationInsight].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "properties":
		return nil
	case "tags":
		return nil
	case "location":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.applicationInsight\" resource")
	}
}

// AzureSubscriptionMonitorServiceActivitylogAlert resource interface
type AzureSubscriptionMonitorServiceActivitylogAlert interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Type() (string, error)
	Name() (string, error)
	Description() (string, error)
	Conditions() ([]interface{}, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Actions() ([]interface{}, error)
	Scopes() ([]interface{}, error)
}

// mqlAzureSubscriptionMonitorServiceActivitylogAlert for the azure.subscription.monitorService.activitylog.alert resource
type mqlAzureSubscriptionMonitorServiceActivitylogAlert struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService.activitylog.alert resource
func newAzureSubscriptionMonitorServiceActivitylogAlert(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorServiceActivitylogAlert{runtime.NewResource("azure.subscription.monitorService.activitylog.alert")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "conditions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"conditions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "actions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"actions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.activitylog.alert\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService.activitylog.alert with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("conditions"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"conditions\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("actions"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"actions\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.activitylog.alert\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog.alert].Register")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "conditions":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "actions":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog.alert\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog.alert].Field")
	switch name {
	case "id":
		return s.Id()
	case "type":
		return s.Type()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "conditions":
		return s.Conditions()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "actions":
		return s.Actions()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog.alert\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Conditions accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Conditions() ([]interface{}, error) {
	res, ok := s.Cache.Load("conditions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"conditions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"conditions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Actions accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Actions() ([]interface{}, error) {
	res, ok := s.Cache.Load("actions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"actions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"actions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.activitylog.alert\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.activitylog.alert\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceActivitylogAlert) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.activitylog.alert].MqlCompute")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "conditions":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "actions":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.activitylog.alert\" resource")
	}
}

// AzureSubscriptionMonitorServiceLogprofile resource interface
type AzureSubscriptionMonitorServiceLogprofile interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureSubscriptionStorageServiceAccount, error)
}

// mqlAzureSubscriptionMonitorServiceLogprofile for the azure.subscription.monitorService.logprofile resource
type mqlAzureSubscriptionMonitorServiceLogprofile struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService.logprofile resource
func newAzureSubscriptionMonitorServiceLogprofile(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorServiceLogprofile{runtime.NewResource("azure.subscription.monitorService.logprofile")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureSubscriptionStorageServiceAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"storageAccount\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.logprofile\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService.logprofile with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.logprofile\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.logprofile].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.logprofile\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.logprofile].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService.logprofile\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) StorageAccount() (AzureSubscriptionStorageServiceAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.logprofile\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.logprofile\" failed to cast field \"storageAccount\" to the right type (AzureSubscriptionStorageServiceAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceLogprofile) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.logprofile].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.logprofile\" resource")
	}
}

// AzureSubscriptionMonitorServiceDiagnosticsetting resource interface
type AzureSubscriptionMonitorServiceDiagnosticsetting interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
	StorageAccount() (AzureSubscriptionStorageServiceAccount, error)
}

// mqlAzureSubscriptionMonitorServiceDiagnosticsetting for the azure.subscription.monitorService.diagnosticsetting resource
type mqlAzureSubscriptionMonitorServiceDiagnosticsetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.monitorService.diagnosticsetting resource
func newAzureSubscriptionMonitorServiceDiagnosticsetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionMonitorServiceDiagnosticsetting{runtime.NewResource("azure.subscription.monitorService.diagnosticsetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzureSubscriptionStorageServiceAccount); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"storageAccount\" argument has the wrong type (expected type \"AzureSubscriptionStorageServiceAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.monitorService.diagnosticsetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.monitorService.diagnosticsetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.diagnosticsetting\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.diagnosticsetting\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.diagnosticsetting\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.diagnosticsetting\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azure.subscription.monitorService.diagnosticsetting\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.diagnosticsetting].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.diagnosticsetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.diagnosticsetting].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.monitorService.diagnosticsetting\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.diagnosticsetting\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.diagnosticsetting\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.diagnosticsetting\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.diagnosticsetting\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.monitorService.diagnosticsetting\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.monitorService.diagnosticsetting\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.diagnosticsetting\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.diagnosticsetting\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) StorageAccount() (AzureSubscriptionStorageServiceAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.monitorService.diagnosticsetting\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzureSubscriptionStorageServiceAccount)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.monitorService.diagnosticsetting\" failed to cast field \"storageAccount\" to the right type (AzureSubscriptionStorageServiceAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionMonitorServiceDiagnosticsetting) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.monitorService.diagnosticsetting].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.monitorService.diagnosticsetting\" resource")
	}
}

// AzureSubscriptionCloudDefenderService resource interface
type AzureSubscriptionCloudDefenderService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	MonitoringAgentAutoProvision() (bool, error)
	DefenderForServers() (interface{}, error)
	DefenderForContainers() (interface{}, error)
	SecurityContacts() ([]interface{}, error)
}

// mqlAzureSubscriptionCloudDefenderService for the azure.subscription.cloudDefenderService resource
type mqlAzureSubscriptionCloudDefenderService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCloudDefenderService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cloudDefenderService resource
func newAzureSubscriptionCloudDefenderService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCloudDefenderService{runtime.NewResource("azure.subscription.cloudDefenderService")}
	var existing AzureSubscriptionCloudDefenderService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "monitoringAgentAutoProvision":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"monitoringAgentAutoProvision\" argument has the wrong type (expected type \"bool\")")
			}
		case "defenderForServers":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"defenderForServers\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "defenderForContainers":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"defenderForContainers\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityContacts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"securityContacts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cloudDefenderService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCloudDefenderService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "monitoringAgentAutoProvision":
		return nil
	case "defenderForServers":
		return nil
	case "defenderForContainers":
		return nil
	case "securityContacts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "monitoringAgentAutoProvision":
		return s.MonitoringAgentAutoProvision()
	case "defenderForServers":
		return s.DefenderForServers()
	case "defenderForContainers":
		return s.DefenderForContainers()
	case "securityContacts":
		return s.SecurityContacts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cloudDefenderService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cloudDefenderService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MonitoringAgentAutoProvision accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) MonitoringAgentAutoProvision() (bool, error) {
	res, ok := s.Cache.Load("monitoringAgentAutoProvision")
	if !ok || !res.Valid {
		if err := s.ComputeMonitoringAgentAutoProvision(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("monitoringAgentAutoProvision")
		if !ok {
			return false, errors.New("\"azure.subscription.cloudDefenderService\" calculated \"monitoringAgentAutoProvision\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "monitoringAgentAutoProvision")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.cloudDefenderService\" failed to cast field \"monitoringAgentAutoProvision\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DefenderForServers accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) DefenderForServers() (interface{}, error) {
	res, ok := s.Cache.Load("defenderForServers")
	if !ok || !res.Valid {
		if err := s.ComputeDefenderForServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("defenderForServers")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefenderService\" calculated \"defenderForServers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defenderForServers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService\" failed to cast field \"defenderForServers\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DefenderForContainers accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) DefenderForContainers() (interface{}, error) {
	res, ok := s.Cache.Load("defenderForContainers")
	if !ok || !res.Valid {
		if err := s.ComputeDefenderForContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("defenderForContainers")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefenderService\" calculated \"defenderForContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defenderForContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService\" failed to cast field \"defenderForContainers\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityContacts accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) SecurityContacts() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityContacts")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityContacts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityContacts")
		if !ok {
			return nil, errors.New("\"azure.subscription.cloudDefenderService\" calculated \"securityContacts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityContacts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService\" failed to cast field \"securityContacts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "monitoringAgentAutoProvision":
		return s.ComputeMonitoringAgentAutoProvision()
	case "defenderForServers":
		return s.ComputeDefenderForServers()
	case "defenderForContainers":
		return s.ComputeDefenderForContainers()
	case "securityContacts":
		return s.ComputeSecurityContacts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService\" resource")
	}
}

// ComputeMonitoringAgentAutoProvision computer autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) ComputeMonitoringAgentAutoProvision() error {
	var err error
	if _, ok := s.Cache.Load("monitoringAgentAutoProvision"); ok {
		return nil
	}
	vres, err := s.GetMonitoringAgentAutoProvision()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("monitoringAgentAutoProvision", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefenderForServers computer autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) ComputeDefenderForServers() error {
	var err error
	if _, ok := s.Cache.Load("defenderForServers"); ok {
		return nil
	}
	vres, err := s.GetDefenderForServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defenderForServers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefenderForContainers computer autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) ComputeDefenderForContainers() error {
	var err error
	if _, ok := s.Cache.Load("defenderForContainers"); ok {
		return nil
	}
	vres, err := s.GetDefenderForContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defenderForContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityContacts computer autogenerated
func (s *mqlAzureSubscriptionCloudDefenderService) ComputeSecurityContacts() error {
	var err error
	if _, ok := s.Cache.Load("securityContacts"); ok {
		return nil
	}
	vres, err := s.GetSecurityContacts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityContacts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionCloudDefenderServiceSecurityContact resource interface
type AzureSubscriptionCloudDefenderServiceSecurityContact interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Emails() ([]interface{}, error)
	AlertNotifications() (interface{}, error)
	NotificationsByRole() (interface{}, error)
}

// mqlAzureSubscriptionCloudDefenderServiceSecurityContact for the azure.subscription.cloudDefenderService.securityContact resource
type mqlAzureSubscriptionCloudDefenderServiceSecurityContact struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.cloudDefenderService.securityContact resource
func newAzureSubscriptionCloudDefenderServiceSecurityContact(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionCloudDefenderServiceSecurityContact{runtime.NewResource("azure.subscription.cloudDefenderService.securityContact")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "emails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"emails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "alertNotifications":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"alertNotifications\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "notificationsByRole":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"notificationsByRole\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.cloudDefenderService.securityContact\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.cloudDefenderService.securityContact with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService.securityContact\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService.securityContact\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("emails"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService.securityContact\" resource without a \"emails\". This field is required.")
	}
	if _, ok := s.Cache.Load("alertNotifications"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService.securityContact\" resource without a \"alertNotifications\". This field is required.")
	}
	if _, ok := s.Cache.Load("notificationsByRole"); !ok {
		return errors.New("Initialized \"azure.subscription.cloudDefenderService.securityContact\" resource without a \"notificationsByRole\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService.securityContact].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService.securityContact\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService.securityContact].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "emails":
		return s.Emails()
	case "alertNotifications":
		return s.AlertNotifications()
	case "notificationsByRole":
		return s.NotificationsByRole()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService.securityContact\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cloudDefenderService.securityContact\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cloudDefenderService.securityContact\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.cloudDefenderService.securityContact\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.cloudDefenderService.securityContact\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Emails accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) Emails() ([]interface{}, error) {
	res, ok := s.Cache.Load("emails")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefenderService.securityContact\" failed: no value provided for static field \"emails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService.securityContact\" failed to cast field \"emails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AlertNotifications accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) AlertNotifications() (interface{}, error) {
	res, ok := s.Cache.Load("alertNotifications")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefenderService.securityContact\" failed: no value provided for static field \"alertNotifications\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService.securityContact\" failed to cast field \"alertNotifications\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// NotificationsByRole accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) NotificationsByRole() (interface{}, error) {
	res, ok := s.Cache.Load("notificationsByRole")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.cloudDefenderService.securityContact\" failed: no value provided for static field \"notificationsByRole\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.cloudDefenderService.securityContact\" failed to cast field \"notificationsByRole\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionCloudDefenderServiceSecurityContact) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.cloudDefenderService.securityContact].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "emails":
		return nil
	case "alertNotifications":
		return nil
	case "notificationsByRole":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.cloudDefenderService.securityContact\" resource")
	}
}

// AzureSubscriptionAuthorizationService resource interface
type AzureSubscriptionAuthorizationService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	RoleDefinitions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorizationService for the azure.subscription.authorizationService resource
type mqlAzureSubscriptionAuthorizationService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorizationService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorizationService resource
func newAzureSubscriptionAuthorizationService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorizationService{runtime.NewResource("azure.subscription.authorizationService")}
	var existing AzureSubscriptionAuthorizationService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "roleDefinitions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService\", its \"roleDefinitions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorizationService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorizationService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "roleDefinitions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "roleDefinitions":
		return s.RoleDefinitions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorizationService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorizationService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorizationService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RoleDefinitions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) RoleDefinitions() ([]interface{}, error) {
	res, ok := s.Cache.Load("roleDefinitions")
	if !ok || !res.Valid {
		if err := s.ComputeRoleDefinitions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roleDefinitions")
		if !ok {
			return nil, errors.New("\"azure.subscription.authorizationService\" calculated \"roleDefinitions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roleDefinitions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService\" failed to cast field \"roleDefinitions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "roleDefinitions":
		return s.ComputeRoleDefinitions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService\" resource")
	}
}

// ComputeRoleDefinitions computer autogenerated
func (s *mqlAzureSubscriptionAuthorizationService) ComputeRoleDefinitions() error {
	var err error
	if _, ok := s.Cache.Load("roleDefinitions"); ok {
		return nil
	}
	vres, err := s.GetRoleDefinitions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roleDefinitions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionAuthorizationServiceRoleDefinition resource interface
type AzureSubscriptionAuthorizationServiceRoleDefinition interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Description() (string, error)
	Name() (string, error)
	IsCustom() (bool, error)
	Scopes() ([]interface{}, error)
	Permissions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorizationServiceRoleDefinition for the azure.subscription.authorizationService.roleDefinition resource
type mqlAzureSubscriptionAuthorizationServiceRoleDefinition struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorizationService.roleDefinition resource
func newAzureSubscriptionAuthorizationServiceRoleDefinition(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorizationServiceRoleDefinition{runtime.NewResource("azure.subscription.authorizationService.roleDefinition")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isCustom":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"isCustom\" argument has the wrong type (expected type \"bool\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "permissions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"permissions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorizationService.roleDefinition with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isCustom"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"isCustom\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"scopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("permissions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition\" resource without a \"permissions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition].Register")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition].Field")
	switch name {
	case "id":
		return s.Id()
	case "description":
		return s.Description()
	case "name":
		return s.Name()
	case "isCustom":
		return s.IsCustom()
	case "scopes":
		return s.Scopes()
	case "permissions":
		return s.Permissions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsCustom accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) IsCustom() (bool, error) {
	res, ok := s.Cache.Load("isCustom")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"isCustom\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"isCustom\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Permissions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) Permissions() ([]interface{}, error) {
	res, ok := s.Cache.Load("permissions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition\" failed: no value provided for static field \"permissions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition\" failed to cast field \"permissions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinition) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition].MqlCompute")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "isCustom":
		return nil
	case "scopes":
		return nil
	case "permissions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition\" resource")
	}
}

// AzureSubscriptionAuthorizationServiceRoleDefinitionPermission resource interface
type AzureSubscriptionAuthorizationServiceRoleDefinitionPermission interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AllowedActions() ([]interface{}, error)
	DeniedActions() ([]interface{}, error)
	AllowedDataActions() ([]interface{}, error)
	DeniedDataActions() ([]interface{}, error)
}

// mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission for the azure.subscription.authorizationService.roleDefinition.permission resource
type mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.authorizationService.roleDefinition.permission resource
func newAzureSubscriptionAuthorizationServiceRoleDefinitionPermission(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission{runtime.NewResource("azure.subscription.authorizationService.roleDefinition.permission")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"allowedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"deniedActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "allowedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"allowedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deniedDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"deniedDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.authorizationService.roleDefinition.permission\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.authorizationService.roleDefinition.permission with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition.permission\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition.permission\" resource without a \"allowedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition.permission\" resource without a \"deniedActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedDataActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition.permission\" resource without a \"allowedDataActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("deniedDataActions"); !ok {
		return errors.New("Initialized \"azure.subscription.authorizationService.roleDefinition.permission\" resource without a \"deniedDataActions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition.permission].Register")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition.permission\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition.permission].Field")
	switch name {
	case "id":
		return s.Id()
	case "allowedActions":
		return s.AllowedActions()
	case "deniedActions":
		return s.DeniedActions()
	case "allowedDataActions":
		return s.AllowedDataActions()
	case "deniedDataActions":
		return s.DeniedDataActions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition.permission\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.authorizationService.roleDefinition.permission\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition.permission\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) AllowedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition.permission\" failed: no value provided for static field \"allowedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition.permission\" failed to cast field \"allowedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) DeniedActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition.permission\" failed: no value provided for static field \"deniedActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition.permission\" failed to cast field \"deniedActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AllowedDataActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) AllowedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition.permission\" failed: no value provided for static field \"allowedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition.permission\" failed to cast field \"allowedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeniedDataActions accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) DeniedDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("deniedDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.authorizationService.roleDefinition.permission\" failed: no value provided for static field \"deniedDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.authorizationService.roleDefinition.permission\" failed to cast field \"deniedDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAuthorizationServiceRoleDefinitionPermission) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.authorizationService.roleDefinition.permission].MqlCompute")
	switch name {
	case "id":
		return nil
	case "allowedActions":
		return nil
	case "deniedActions":
		return nil
	case "allowedDataActions":
		return nil
	case "deniedDataActions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.authorizationService.roleDefinition.permission\" resource")
	}
}

// AzureSubscriptionAksService resource interface
type AzureSubscriptionAksService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SubscriptionId() (string, error)
	Clusters() ([]interface{}, error)
}

// mqlAzureSubscriptionAksService for the azure.subscription.aksService resource
type mqlAzureSubscriptionAksService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAksService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.aksService resource
func newAzureSubscriptionAksService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAksService{runtime.NewResource("azure.subscription.aksService")}
	var existing AzureSubscriptionAksService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "subscriptionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService\", its \"subscriptionId\" argument has the wrong type (expected type \"string\")")
			}
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.aksService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAksService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("subscriptionId"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService\" resource without a \"subscriptionId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAksService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService].Register")
	switch name {
	case "subscriptionId":
		return nil
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.aksService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAksService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService].Field")
	switch name {
	case "subscriptionId":
		return s.SubscriptionId()
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.aksService\" resource")
	}
}

// SubscriptionId accessor autogenerated
func (s *mqlAzureSubscriptionAksService) SubscriptionId() (string, error) {
	res, ok := s.Cache.Load("subscriptionId")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService\" failed: no value provided for static field \"subscriptionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService\" failed to cast field \"subscriptionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Clusters accessor autogenerated
func (s *mqlAzureSubscriptionAksService) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"azure.subscription.aksService\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAksService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService].MqlCompute")
	switch name {
	case "subscriptionId":
		return nil
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.aksService\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAzureSubscriptionAksService) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureSubscriptionAksServiceCluster resource interface
type AzureSubscriptionAksServiceCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	KubernetesVersion() (string, error)
	ProvisioningState() (string, error)
	PowerState() (string, error)
	Tags() (map[string]interface{}, error)
	NodeResourceGroup() (string, error)
	CreatedAt() (*time.Time, error)
	RbacEnabled() (bool, error)
	Fqdn() (string, error)
	DnsPrefix() (string, error)
	StorageProfile() (interface{}, error)
	WorkloadAutoScalerProfile() (interface{}, error)
	SecurityProfile() (interface{}, error)
	PodIdentityProfile() (interface{}, error)
	NetworkProfile() (interface{}, error)
	HttpProxyConfig() (interface{}, error)
	AddonProfiles() ([]interface{}, error)
	AgentPoolProfiles() ([]interface{}, error)
}

// mqlAzureSubscriptionAksServiceCluster for the azure.subscription.aksService.cluster resource
type mqlAzureSubscriptionAksServiceCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureSubscriptionAksServiceCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azure.subscription.aksService.cluster resource
func newAzureSubscriptionAksServiceCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureSubscriptionAksServiceCluster{runtime.NewResource("azure.subscription.aksService.cluster")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "kubernetesVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"kubernetesVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "powerState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"powerState\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "nodeResourceGroup":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"nodeResourceGroup\" argument has the wrong type (expected type \"string\")")
			}
		case "createdAt":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"createdAt\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "rbacEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"rbacEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "fqdn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"fqdn\" argument has the wrong type (expected type \"string\")")
			}
		case "dnsPrefix":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"dnsPrefix\" argument has the wrong type (expected type \"string\")")
			}
		case "storageProfile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"storageProfile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "workloadAutoScalerProfile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"workloadAutoScalerProfile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityProfile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"securityProfile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podIdentityProfile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"podIdentityProfile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "networkProfile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"networkProfile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "httpProxyConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"httpProxyConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "addonProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"addonProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "agentPoolProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"agentPoolProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azure.subscription.aksService.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azure.subscription.aksService.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureSubscriptionAksServiceCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("kubernetesVersion"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"kubernetesVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("powerState"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"powerState\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("nodeResourceGroup"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"nodeResourceGroup\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdAt"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"createdAt\". This field is required.")
	}
	if _, ok := s.Cache.Load("rbacEnabled"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"rbacEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("fqdn"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"fqdn\". This field is required.")
	}
	if _, ok := s.Cache.Load("dnsPrefix"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"dnsPrefix\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageProfile"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"storageProfile\". This field is required.")
	}
	if _, ok := s.Cache.Load("workloadAutoScalerProfile"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"workloadAutoScalerProfile\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityProfile"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"securityProfile\". This field is required.")
	}
	if _, ok := s.Cache.Load("podIdentityProfile"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"podIdentityProfile\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkProfile"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"networkProfile\". This field is required.")
	}
	if _, ok := s.Cache.Load("httpProxyConfig"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"httpProxyConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("addonProfiles"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"addonProfiles\". This field is required.")
	}
	if _, ok := s.Cache.Load("agentPoolProfiles"); !ok {
		return errors.New("Initialized \"azure.subscription.aksService.cluster\" resource without a \"agentPoolProfiles\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService.cluster].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "kubernetesVersion":
		return nil
	case "provisioningState":
		return nil
	case "powerState":
		return nil
	case "tags":
		return nil
	case "nodeResourceGroup":
		return nil
	case "createdAt":
		return nil
	case "rbacEnabled":
		return nil
	case "fqdn":
		return nil
	case "dnsPrefix":
		return nil
	case "storageProfile":
		return nil
	case "workloadAutoScalerProfile":
		return nil
	case "securityProfile":
		return nil
	case "podIdentityProfile":
		return nil
	case "networkProfile":
		return nil
	case "httpProxyConfig":
		return nil
	case "addonProfiles":
		return nil
	case "agentPoolProfiles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.aksService.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService.cluster].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "kubernetesVersion":
		return s.KubernetesVersion()
	case "provisioningState":
		return s.ProvisioningState()
	case "powerState":
		return s.PowerState()
	case "tags":
		return s.Tags()
	case "nodeResourceGroup":
		return s.NodeResourceGroup()
	case "createdAt":
		return s.CreatedAt()
	case "rbacEnabled":
		return s.RbacEnabled()
	case "fqdn":
		return s.Fqdn()
	case "dnsPrefix":
		return s.DnsPrefix()
	case "storageProfile":
		return s.StorageProfile()
	case "workloadAutoScalerProfile":
		return s.WorkloadAutoScalerProfile()
	case "securityProfile":
		return s.SecurityProfile()
	case "podIdentityProfile":
		return s.PodIdentityProfile()
	case "networkProfile":
		return s.NetworkProfile()
	case "httpProxyConfig":
		return s.HttpProxyConfig()
	case "addonProfiles":
		return s.AddonProfiles()
	case "agentPoolProfiles":
		return s.AgentPoolProfiles()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azure.subscription.aksService.cluster\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KubernetesVersion accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) KubernetesVersion() (string, error) {
	res, ok := s.Cache.Load("kubernetesVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"kubernetesVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"kubernetesVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PowerState accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) PowerState() (string, error) {
	res, ok := s.Cache.Load("powerState")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"powerState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"powerState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// NodeResourceGroup accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) NodeResourceGroup() (string, error) {
	res, ok := s.Cache.Load("nodeResourceGroup")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"nodeResourceGroup\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"nodeResourceGroup\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedAt accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) CreatedAt() (*time.Time, error) {
	res, ok := s.Cache.Load("createdAt")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"createdAt\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"createdAt\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RbacEnabled accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) RbacEnabled() (bool, error) {
	res, ok := s.Cache.Load("rbacEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"rbacEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"rbacEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Fqdn accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) Fqdn() (string, error) {
	res, ok := s.Cache.Load("fqdn")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"fqdn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"fqdn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DnsPrefix accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) DnsPrefix() (string, error) {
	res, ok := s.Cache.Load("dnsPrefix")
	if !ok || !res.Valid {
		return "", errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"dnsPrefix\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"dnsPrefix\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageProfile accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) StorageProfile() (interface{}, error) {
	res, ok := s.Cache.Load("storageProfile")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"storageProfile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"storageProfile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// WorkloadAutoScalerProfile accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) WorkloadAutoScalerProfile() (interface{}, error) {
	res, ok := s.Cache.Load("workloadAutoScalerProfile")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"workloadAutoScalerProfile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"workloadAutoScalerProfile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityProfile accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) SecurityProfile() (interface{}, error) {
	res, ok := s.Cache.Load("securityProfile")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"securityProfile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"securityProfile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodIdentityProfile accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) PodIdentityProfile() (interface{}, error) {
	res, ok := s.Cache.Load("podIdentityProfile")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"podIdentityProfile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"podIdentityProfile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkProfile accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) NetworkProfile() (interface{}, error) {
	res, ok := s.Cache.Load("networkProfile")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"networkProfile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"networkProfile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// HttpProxyConfig accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) HttpProxyConfig() (interface{}, error) {
	res, ok := s.Cache.Load("httpProxyConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"httpProxyConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"httpProxyConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AddonProfiles accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) AddonProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("addonProfiles")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"addonProfiles\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"addonProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AgentPoolProfiles accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) AgentPoolProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("agentPoolProfiles")
	if !ok || !res.Valid {
		return nil, errors.New("\"azure.subscription.aksService.cluster\" failed: no value provided for static field \"agentPoolProfiles\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azure.subscription.aksService.cluster\" failed to cast field \"agentPoolProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureSubscriptionAksServiceCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[azure.subscription.aksService.cluster].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "kubernetesVersion":
		return nil
	case "provisioningState":
		return nil
	case "powerState":
		return nil
	case "tags":
		return nil
	case "nodeResourceGroup":
		return nil
	case "createdAt":
		return nil
	case "rbacEnabled":
		return nil
	case "fqdn":
		return nil
	case "dnsPrefix":
		return nil
	case "storageProfile":
		return nil
	case "workloadAutoScalerProfile":
		return nil
	case "securityProfile":
		return nil
	case "podIdentityProfile":
		return nil
	case "networkProfile":
		return nil
	case "httpProxyConfig":
		return nil
	case "addonProfiles":
		return nil
	case "agentPoolProfiles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azure.subscription.aksService.cluster\" resource")
	}
}

