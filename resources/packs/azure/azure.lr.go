// Code generated by resources. DO NOT EDIT.
package azure

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("azuread", newAzuread)
	registry.AddFactory("azuread.user", newAzureadUser)
	registry.AddFactory("azuread.group", newAzureadGroup)
	registry.AddFactory("azuread.domain", newAzureadDomain)
	registry.AddFactory("azuread.application", newAzureadApplication)
	registry.AddFactory("azuread.serviceprincipal", newAzureadServiceprincipal)
	registry.AddFactory("azurerm", newAzurerm)
	registry.AddFactory("azurerm.resource", newAzurermResource)
	registry.AddFactory("azurerm.compute", newAzurermCompute)
	registry.AddFactory("azurerm.compute.vm", newAzurermComputeVm)
	registry.AddFactory("azurerm.compute.disk", newAzurermComputeDisk)
	registry.AddFactory("azurerm.network", newAzurermNetwork)
	registry.AddFactory("azurerm.network.interface", newAzurermNetworkInterface)
	registry.AddFactory("azurerm.network.securitygroup", newAzurermNetworkSecuritygroup)
	registry.AddFactory("azurerm.network.securityrule", newAzurermNetworkSecurityrule)
	registry.AddFactory("azurerm.network.watcher", newAzurermNetworkWatcher)
	registry.AddFactory("azurerm.storage", newAzurermStorage)
	registry.AddFactory("azurerm.storage.account", newAzurermStorageAccount)
	registry.AddFactory("azurerm.storage.container", newAzurermStorageContainer)
	registry.AddFactory("azurerm.web", newAzurermWeb)
	registry.AddFactory("azurerm.web.appsite", newAzurermWebAppsite)
	registry.AddFactory("azurerm.web.appsiteauthsettings", newAzurermWebAppsiteauthsettings)
	registry.AddFactory("azurerm.web.appsiteconfig", newAzurermWebAppsiteconfig)
	registry.AddFactory("azurerm.sql", newAzurermSql)
	registry.AddFactory("azurerm.sql.server", newAzurermSqlServer)
	registry.AddFactory("azurerm.sql.server.administrator", newAzurermSqlServerAdministrator)
	registry.AddFactory("azurerm.sql.database", newAzurermSqlDatabase)
	registry.AddFactory("azurerm.sql.databaseusage", newAzurermSqlDatabaseusage)
	registry.AddFactory("azurerm.postgresql", newAzurermPostgresql)
	registry.AddFactory("azurerm.postgresql.server", newAzurermPostgresqlServer)
	registry.AddFactory("azurerm.postgresql.database", newAzurermPostgresqlDatabase)
	registry.AddFactory("azurerm.mysql", newAzurermMysql)
	registry.AddFactory("azurerm.mysql.server", newAzurermMysqlServer)
	registry.AddFactory("azurerm.mysql.database", newAzurermMysqlDatabase)
	registry.AddFactory("azurerm.mariadb", newAzurermMariadb)
	registry.AddFactory("azurerm.mariadb.server", newAzurermMariadbServer)
	registry.AddFactory("azurerm.mariadb.database", newAzurermMariadbDatabase)
	registry.AddFactory("azurerm.sql.configuration", newAzurermSqlConfiguration)
	registry.AddFactory("azurerm.sql.firewallrule", newAzurermSqlFirewallrule)
	registry.AddFactory("azurerm.keyvault", newAzurermKeyvault)
	registry.AddFactory("azurerm.keyvault.vault", newAzurermKeyvaultVault)
	registry.AddFactory("azurerm.keyvault.key", newAzurermKeyvaultKey)
	registry.AddFactory("azurerm.keyvault.certificate", newAzurermKeyvaultCertificate)
	registry.AddFactory("azurerm.keyvault.secret", newAzurermKeyvaultSecret)
	registry.AddFactory("azurerm.monitor", newAzurermMonitor)
	registry.AddFactory("azurerm.monitor.logprofile", newAzurermMonitorLogprofile)
	registry.AddFactory("azurerm.monitor.diagnosticsetting", newAzurermMonitorDiagnosticsetting)
}

// Azuread resource interface
type Azuread interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	ServicePrincipals() ([]interface{}, error)
}

// mqlAzuread for the azuread resource
type mqlAzuread struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzuread) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread resource
func newAzuread(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzuread{runtime.NewResource("azuread")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "servicePrincipals":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"servicePrincipals\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzuread) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzuread) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "servicePrincipals":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzuread) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "servicePrincipals":
		return s.ServicePrincipals()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlAzuread) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAzuread) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlAzuread) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlAzuread) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServicePrincipals accessor autogenerated
func (s *mqlAzuread) ServicePrincipals() ([]interface{}, error) {
	res, ok := s.Cache.Load("servicePrincipals")
	if !ok || !res.Valid {
		if err := s.ComputeServicePrincipals(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servicePrincipals")
		if !ok {
			return nil, errors.New("\"azuread\" calculated \"servicePrincipals\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servicePrincipals")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread\" failed to cast field \"servicePrincipals\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzuread) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread].Compute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "servicePrincipals":
		return s.ComputeServicePrincipals()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlAzuread) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAzuread) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlAzuread) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlAzuread) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServicePrincipals computer autogenerated
func (s *mqlAzuread) ComputeServicePrincipals() error {
	var err error
	if _, ok := s.Cache.Load("servicePrincipals"); ok {
		return nil
	}
	vres, err := s.GetServicePrincipals()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servicePrincipals", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadUser resource interface
type AzureadUser interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	GivenName() (string, error)
	Surname() (string, error)
	UserPrincipalName() (string, error)
	AccountEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	UserType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadUser for the azuread.user resource
type mqlAzureadUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.user resource
func newAzureadUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadUser{runtime.NewResource("azuread.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "surname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"surname\" argument has the wrong type (expected type \"string\")")
			}
		case "userPrincipalName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userPrincipalName\" argument has the wrong type (expected type \"string\")")
			}
		case "accountEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"accountEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "userType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"userType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("surname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"surname\". This field is required.")
	}
	if _, ok := s.Cache.Load("userPrincipalName"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userPrincipalName\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountEnabled"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"accountEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"mail\". This field is required.")
	}
	if _, ok := s.Cache.Load("userType"); !ok {
		return errors.New("Initialized \"azuread.user\" resource without a \"userType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "userType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "givenName":
		return s.GivenName()
	case "surname":
		return s.Surname()
	case "userPrincipalName":
		return s.UserPrincipalName()
	case "accountEnabled":
		return s.AccountEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "userType":
		return s.UserType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadUser) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlAzureadUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Surname accessor autogenerated
func (s *mqlAzureadUser) Surname() (string, error) {
	res, ok := s.Cache.Load("surname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"surname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"surname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserPrincipalName accessor autogenerated
func (s *mqlAzureadUser) UserPrincipalName() (string, error) {
	res, ok := s.Cache.Load("userPrincipalName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userPrincipalName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userPrincipalName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountEnabled accessor autogenerated
func (s *mqlAzureadUser) AccountEnabled() (bool, error) {
	res, ok := s.Cache.Load("accountEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.user\" failed: no value provided for static field \"accountEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.user\" failed to cast field \"accountEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadUser) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadUser) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadUser) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.user\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserType accessor autogenerated
func (s *mqlAzureadUser) UserType() (string, error) {
	res, ok := s.Cache.Load("userType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.user\" failed: no value provided for static field \"userType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.user\" failed to cast field \"userType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadUser) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.user\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.user\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadUser) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.user].Compute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "givenName":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "accountEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "userType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.user\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadUser) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadUser) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadGroup resource interface
type AzureadGroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	SecurityEnabled() (bool, error)
	MailEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	ObjectType() (string, error)
	Properties() (interface{}, error)
	Members() ([]interface{}, error)
}

// mqlAzureadGroup for the azuread.group resource
type mqlAzureadGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.group resource
func newAzureadGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadGroup{runtime.NewResource("azuread.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "securityEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"securityEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "objectType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"objectType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"securityEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailEnabled"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"azuread.group\" resource without a \"mail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return nil
	case "properties":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "securityEnabled":
		return s.SecurityEnabled()
	case "mailEnabled":
		return s.MailEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "objectType":
		return s.ObjectType()
	case "properties":
		return s.Properties()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzureadGroup) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityEnabled accessor autogenerated
func (s *mqlAzureadGroup) SecurityEnabled() (bool, error) {
	res, ok := s.Cache.Load("securityEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"securityEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"securityEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailEnabled accessor autogenerated
func (s *mqlAzureadGroup) MailEnabled() (bool, error) {
	res, ok := s.Cache.Load("mailEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.group\" failed: no value provided for static field \"mailEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.group\" failed to cast field \"mailEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlAzureadGroup) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlAzureadGroup) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.group\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectType accessor autogenerated
func (s *mqlAzureadGroup) ObjectType() (string, error) {
	res, ok := s.Cache.Load("objectType")
	if !ok || !res.Valid {
		if err := s.ComputeObjectType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("objectType")
		if !ok {
			return "", errors.New("\"azuread.group\" calculated \"objectType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.group\" failed to cast field \"objectType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadGroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlAzureadGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"azuread.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadGroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.group].Compute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "objectType":
		return s.ComputeObjectType()
	case "properties":
		return s.ComputeProperties()
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.group\" resource")
	}
}

// ComputeObjectType computer autogenerated
func (s *mqlAzureadGroup) ComputeObjectType() error {
	var err error
	if _, ok := s.Cache.Load("objectType"); ok {
		return nil
	}
	vres, err := s.GetObjectType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadGroup) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMembers computer autogenerated
func (s *mqlAzureadGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadDomain resource interface
type AzureadDomain interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsVerified() (bool, error)
	IsDefault() (bool, error)
	AuthenticationType() (string, error)
	Properties() (interface{}, error)
}

// mqlAzureadDomain for the azuread.domain resource
type mqlAzureadDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.domain resource
func newAzureadDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadDomain{runtime.NewResource("azuread.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "authenticationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"authenticationType\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isVerified"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationType"); !ok {
		return errors.New("Initialized \"azuread.domain\" resource without a \"authenticationType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Register")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.domain].Field")
	switch name {
	case "name":
		return s.Name()
	case "isVerified":
		return s.IsVerified()
	case "isDefault":
		return s.IsDefault()
	case "authenticationType":
		return s.AuthenticationType()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAzureadDomain) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsVerified accessor autogenerated
func (s *mqlAzureadDomain) IsVerified() (bool, error) {
	res, ok := s.Cache.Load("isVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlAzureadDomain) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"azuread.domain\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azuread.domain\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AuthenticationType accessor autogenerated
func (s *mqlAzureadDomain) AuthenticationType() (string, error) {
	res, ok := s.Cache.Load("authenticationType")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.domain\" failed: no value provided for static field \"authenticationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.domain\" failed to cast field \"authenticationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzureadDomain) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azuread.domain\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azuread.domain\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadDomain) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.domain].Compute")
	switch name {
	case "name":
		return nil
	case "isVerified":
		return nil
	case "isDefault":
		return nil
	case "authenticationType":
		return nil
	case "properties":
		return s.ComputeProperties()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.domain\" resource")
	}
}

// ComputeProperties computer autogenerated
func (s *mqlAzureadDomain) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzureadApplication resource interface
type AzureadApplication interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadApplication for the azuread.application resource
type mqlAzureadApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.application resource
func newAzureadApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadApplication{runtime.NewResource("azuread.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.application\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.application].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadApplication) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.application].Compute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.application\" resource")
	}
}

// AzureadServiceprincipal resource interface
type AzureadServiceprincipal interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlAzureadServiceprincipal for the azuread.serviceprincipal resource
type mqlAzureadServiceprincipal struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzureadServiceprincipal) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azuread.serviceprincipal resource
func newAzureadServiceprincipal(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzureadServiceprincipal{runtime.NewResource("azuread.serviceprincipal")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azuread.serviceprincipal\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azuread.serviceprincipal with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzureadServiceprincipal) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azuread.serviceprincipal\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzureadServiceprincipal) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzureadServiceprincipal) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzureadServiceprincipal) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azuread.serviceprincipal\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azuread.serviceprincipal\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzureadServiceprincipal) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azuread.serviceprincipal].Compute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azuread.serviceprincipal\" resource")
	}
}

// Azurerm resource interface
type Azurerm interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Resources() ([]interface{}, error)
}

// mqlAzurerm for the azurerm resource
type mqlAzurerm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurerm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm resource
func newAzurerm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurerm{runtime.NewResource("azurerm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm\", its \"resources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurerm) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurerm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm].Register")
	switch name {
	case "resources":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurerm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm].Field")
	switch name {
	case "resources":
		return s.Resources()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm\" resource")
	}
}

// Resources accessor autogenerated
func (s *mqlAzurerm) Resources() ([]interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		if err := s.ComputeResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("resources")
		if !ok {
			return nil, errors.New("\"azurerm\" calculated \"resources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "resources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm\" failed to cast field \"resources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurerm) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm].Compute")
	switch name {
	case "resources":
		return s.ComputeResources()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm\" resource")
	}
}

// ComputeResources computer autogenerated
func (s *mqlAzurerm) ComputeResources() error {
	var err error
	if _, ok := s.Cache.Load("resources"); ok {
		return nil
	}
	vres, err := s.GetResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("resources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermResource resource interface
type AzurermResource interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	Sku() (interface{}, error)
	Plan() (interface{}, error)
	Identity() (interface{}, error)
	ProvisioningState() (string, error)
	CreatedTime() (*time.Time, error)
	ChangedTime() (*time.Time, error)
}

// mqlAzurermResource for the azurerm.resource resource
type mqlAzurermResource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermResource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.resource resource
func newAzurermResource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermResource{runtime.NewResource("azurerm.resource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "plan":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"plan\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "provisioningState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"provisioningState\" argument has the wrong type (expected type \"string\")")
			}
		case "createdTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"createdTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "changedTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"changedTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.resource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.resource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermResource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("plan"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"plan\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisioningState"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"provisioningState\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdTime"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"createdTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("changedTime"); !ok {
		return errors.New("Initialized \"azurerm.resource\" resource without a \"changedTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermResource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.resource].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.resource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermResource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.resource].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "sku":
		return s.Sku()
	case "plan":
		return s.Plan()
	case "identity":
		return s.Identity()
	case "provisioningState":
		return s.ProvisioningState()
	case "createdTime":
		return s.CreatedTime()
	case "changedTime":
		return s.ChangedTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.resource\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermResource) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermResource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzurermResource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermResource) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermResource) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermResource) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzurermResource) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzurermResource) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Plan accessor autogenerated
func (s *mqlAzurermResource) Plan() (interface{}, error) {
	res, ok := s.Cache.Load("plan")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"plan\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"plan\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzurermResource) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisioningState accessor autogenerated
func (s *mqlAzurermResource) ProvisioningState() (string, error) {
	res, ok := s.Cache.Load("provisioningState")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.resource\" failed: no value provided for static field \"provisioningState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.resource\" failed to cast field \"provisioningState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedTime accessor autogenerated
func (s *mqlAzurermResource) CreatedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"createdTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"createdTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ChangedTime accessor autogenerated
func (s *mqlAzurermResource) ChangedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("changedTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.resource\" failed: no value provided for static field \"changedTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.resource\" failed to cast field \"changedTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermResource) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.resource].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "sku":
		return nil
	case "plan":
		return nil
	case "identity":
		return nil
	case "provisioningState":
		return nil
	case "createdTime":
		return nil
	case "changedTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.resource\" resource")
	}
}

// AzurermCompute resource interface
type AzurermCompute interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vms() ([]interface{}, error)
	Disks() ([]interface{}, error)
}

// mqlAzurermCompute for the azurerm.compute resource
type mqlAzurermCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.compute resource
func newAzurermCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermCompute{runtime.NewResource("azurerm.compute")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermCompute) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute].Register")
	switch name {
	case "vms":
		return nil
	case "disks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.compute].Field")
	switch name {
	case "vms":
		return s.Vms()
	case "disks":
		return s.Disks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.compute\" resource")
	}
}

// Vms accessor autogenerated
func (s *mqlAzurermCompute) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"azurerm.compute\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlAzurermCompute) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"azurerm.compute\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermCompute) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute].Compute")
	switch name {
	case "vms":
		return s.ComputeVms()
	case "disks":
		return s.ComputeDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute\" resource")
	}
}

// ComputeVms computer autogenerated
func (s *mqlAzurermCompute) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlAzurermCompute) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermComputeVm resource interface
type AzurermComputeVm interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Extensions() ([]interface{}, error)
	OsDisk() (AzurermComputeDisk, error)
	DataDisks() ([]interface{}, error)
}

// mqlAzurermComputeVm for the azurerm.compute.vm resource
type mqlAzurermComputeVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermComputeVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.compute.vm resource
func newAzurermComputeVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermComputeVm{runtime.NewResource("azurerm.compute.vm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "extensions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"extensions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "osDisk":
			if _, ok := val.(AzurermComputeDisk); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"osDisk\" argument has the wrong type (expected type \"AzurermComputeDisk\")")
			}
		case "dataDisks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"dataDisks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.compute.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermComputeVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.compute.vm\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermComputeVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute.vm].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return nil
	case "osDisk":
		return nil
	case "dataDisks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermComputeVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.compute.vm].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "extensions":
		return s.Extensions()
	case "osDisk":
		return s.OsDisk()
	case "dataDisks":
		return s.DataDisks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.compute.vm\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermComputeVm) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermComputeVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermComputeVm) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermComputeVm) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermComputeVm) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermComputeVm) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.vm\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Extensions accessor autogenerated
func (s *mqlAzurermComputeVm) Extensions() ([]interface{}, error) {
	res, ok := s.Cache.Load("extensions")
	if !ok || !res.Valid {
		if err := s.ComputeExtensions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("extensions")
		if !ok {
			return nil, errors.New("\"azurerm.compute.vm\" calculated \"extensions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "extensions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"extensions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OsDisk accessor autogenerated
func (s *mqlAzurermComputeVm) OsDisk() (AzurermComputeDisk, error) {
	res, ok := s.Cache.Load("osDisk")
	if !ok || !res.Valid {
		if err := s.ComputeOsDisk(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("osDisk")
		if !ok {
			return nil, errors.New("\"azurerm.compute.vm\" calculated \"osDisk\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "osDisk")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermComputeDisk)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"osDisk\" to the right type (AzurermComputeDisk): %#v", res)
	}
	return tres, nil
}

// DataDisks accessor autogenerated
func (s *mqlAzurermComputeVm) DataDisks() ([]interface{}, error) {
	res, ok := s.Cache.Load("dataDisks")
	if !ok || !res.Valid {
		if err := s.ComputeDataDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dataDisks")
		if !ok {
			return nil, errors.New("\"azurerm.compute.vm\" calculated \"dataDisks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dataDisks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.vm\" failed to cast field \"dataDisks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermComputeVm) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute.vm].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "extensions":
		return s.ComputeExtensions()
	case "osDisk":
		return s.ComputeOsDisk()
	case "dataDisks":
		return s.ComputeDataDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute.vm\" resource")
	}
}

// ComputeExtensions computer autogenerated
func (s *mqlAzurermComputeVm) ComputeExtensions() error {
	var err error
	if _, ok := s.Cache.Load("extensions"); ok {
		return nil
	}
	vres, err := s.GetExtensions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("extensions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOsDisk computer autogenerated
func (s *mqlAzurermComputeVm) ComputeOsDisk() error {
	var err error
	if _, ok := s.Cache.Load("osDisk"); ok {
		return nil
	}
	vres, err := s.GetOsDisk()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("osDisk", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDataDisks computer autogenerated
func (s *mqlAzurermComputeVm) ComputeDataDisks() error {
	var err error
	if _, ok := s.Cache.Load("dataDisks"); ok {
		return nil
	}
	vres, err := s.GetDataDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dataDisks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermComputeDisk resource interface
type AzurermComputeDisk interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	ManagedBy() (string, error)
	ManagedByExtended() ([]interface{}, error)
	Zones() ([]interface{}, error)
	Sku() (interface{}, error)
	Properties() (interface{}, error)
}

// mqlAzurermComputeDisk for the azurerm.compute.disk resource
type mqlAzurermComputeDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermComputeDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.compute.disk resource
func newAzurermComputeDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermComputeDisk{runtime.NewResource("azurerm.compute.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "managedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"managedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "managedByExtended":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"managedByExtended\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.compute.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.compute.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermComputeDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedBy"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"managedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("managedByExtended"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"managedByExtended\". This field is required.")
	}
	if _, ok := s.Cache.Load("zones"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"zones\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.compute.disk\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermComputeDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermComputeDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.compute.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "managedBy":
		return s.ManagedBy()
	case "managedByExtended":
		return s.ManagedByExtended()
	case "zones":
		return s.Zones()
	case "sku":
		return s.Sku()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.compute.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermComputeDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermComputeDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermComputeDisk) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermComputeDisk) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermComputeDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedBy accessor autogenerated
func (s *mqlAzurermComputeDisk) ManagedBy() (string, error) {
	res, ok := s.Cache.Load("managedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"managedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"managedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedByExtended accessor autogenerated
func (s *mqlAzurermComputeDisk) ManagedByExtended() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedByExtended")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"managedByExtended\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"managedByExtended\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlAzurermComputeDisk) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"zones\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzurermComputeDisk) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermComputeDisk) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.compute.disk\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.compute.disk\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermComputeDisk) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.compute.disk].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "managedBy":
		return nil
	case "managedByExtended":
		return nil
	case "zones":
		return nil
	case "sku":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.compute.disk\" resource")
	}
}

// AzurermNetwork resource interface
type AzurermNetwork interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Interfaces() ([]interface{}, error)
	SecurityGroups() ([]interface{}, error)
	Watchers() ([]interface{}, error)
}

// mqlAzurermNetwork for the azurerm.network resource
type mqlAzurermNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.network resource
func newAzurermNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermNetwork{runtime.NewResource("azurerm.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "watchers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network\", its \"watchers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermNetwork) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network].Register")
	switch name {
	case "interfaces":
		return nil
	case "securityGroups":
		return nil
	case "watchers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.network].Field")
	switch name {
	case "interfaces":
		return s.Interfaces()
	case "securityGroups":
		return s.SecurityGroups()
	case "watchers":
		return s.Watchers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.network\" resource")
	}
}

// Interfaces accessor autogenerated
func (s *mqlAzurermNetwork) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		if err := s.ComputeInterfaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("interfaces")
		if !ok {
			return nil, errors.New("\"azurerm.network\" calculated \"interfaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "interfaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAzurermNetwork) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityGroups")
		if !ok {
			return nil, errors.New("\"azurerm.network\" calculated \"securityGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Watchers accessor autogenerated
func (s *mqlAzurermNetwork) Watchers() ([]interface{}, error) {
	res, ok := s.Cache.Load("watchers")
	if !ok || !res.Valid {
		if err := s.ComputeWatchers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("watchers")
		if !ok {
			return nil, errors.New("\"azurerm.network\" calculated \"watchers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "watchers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network\" failed to cast field \"watchers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermNetwork) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network].Compute")
	switch name {
	case "interfaces":
		return s.ComputeInterfaces()
	case "securityGroups":
		return s.ComputeSecurityGroups()
	case "watchers":
		return s.ComputeWatchers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network\" resource")
	}
}

// ComputeInterfaces computer autogenerated
func (s *mqlAzurermNetwork) ComputeInterfaces() error {
	var err error
	if _, ok := s.Cache.Load("interfaces"); ok {
		return nil
	}
	vres, err := s.GetInterfaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("interfaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityGroups computer autogenerated
func (s *mqlAzurermNetwork) ComputeSecurityGroups() error {
	var err error
	if _, ok := s.Cache.Load("securityGroups"); ok {
		return nil
	}
	vres, err := s.GetSecurityGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeWatchers computer autogenerated
func (s *mqlAzurermNetwork) ComputeWatchers() error {
	var err error
	if _, ok := s.Cache.Load("watchers"); ok {
		return nil
	}
	vres, err := s.GetWatchers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("watchers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermNetworkInterface resource interface
type AzurermNetworkInterface interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Vm() (AzurermComputeVm, error)
}

// mqlAzurermNetworkInterface for the azurerm.network.interface resource
type mqlAzurermNetworkInterface struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermNetworkInterface) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.network.interface resource
func newAzurermNetworkInterface(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermNetworkInterface{runtime.NewResource("azurerm.network.interface")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vm":
			if _, ok := val.(AzurermComputeVm); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"vm\" argument has the wrong type (expected type \"AzurermComputeVm\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.interface\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.network.interface with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermNetworkInterface) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.network.interface\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermNetworkInterface) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.interface].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.interface\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermNetworkInterface) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.network.interface].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "vm":
		return s.Vm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.network.interface\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermNetworkInterface) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermNetworkInterface) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermNetworkInterface) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermNetworkInterface) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermNetworkInterface) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzurermNetworkInterface) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermNetworkInterface) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.interface\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Vm accessor autogenerated
func (s *mqlAzurermNetworkInterface) Vm() (AzurermComputeVm, error) {
	res, ok := s.Cache.Load("vm")
	if !ok || !res.Valid {
		if err := s.ComputeVm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vm")
		if !ok {
			return nil, errors.New("\"azurerm.network.interface\" calculated \"vm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermComputeVm)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.interface\" failed to cast field \"vm\" to the right type (AzurermComputeVm): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermNetworkInterface) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.interface].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "vm":
		return s.ComputeVm()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.interface\" resource")
	}
}

// ComputeVm computer autogenerated
func (s *mqlAzurermNetworkInterface) ComputeVm() error {
	var err error
	if _, ok := s.Cache.Load("vm"); ok {
		return nil
	}
	vres, err := s.GetVm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermNetworkSecuritygroup resource interface
type AzurermNetworkSecuritygroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	Interfaces() ([]interface{}, error)
	SecurityRules() ([]interface{}, error)
	DefaultSecurityRules() ([]interface{}, error)
}

// mqlAzurermNetworkSecuritygroup for the azurerm.network.securitygroup resource
type mqlAzurermNetworkSecuritygroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermNetworkSecuritygroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.network.securitygroup resource
func newAzurermNetworkSecuritygroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermNetworkSecuritygroup{runtime.NewResource("azurerm.network.securitygroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "interfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"interfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"securityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"defaultSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securitygroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.network.securitygroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermNetworkSecuritygroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("interfaces"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"interfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityRules"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"securityRules\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecurityRules"); !ok {
		return errors.New("Initialized \"azurerm.network.securitygroup\" resource without a \"defaultSecurityRules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.securitygroup].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.securitygroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.network.securitygroup].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "interfaces":
		return s.Interfaces()
	case "securityRules":
		return s.SecurityRules()
	case "defaultSecurityRules":
		return s.DefaultSecurityRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.network.securitygroup\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Interfaces accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Interfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("interfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"interfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"interfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityRules accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) SecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"securityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"securityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultSecurityRules accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) DefaultSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("defaultSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securitygroup\" failed: no value provided for static field \"defaultSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securitygroup\" failed to cast field \"defaultSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermNetworkSecuritygroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.securitygroup].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "interfaces":
		return nil
	case "securityRules":
		return nil
	case "defaultSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.securitygroup\" resource")
	}
}

// AzurermNetworkSecurityrule resource interface
type AzurermNetworkSecurityrule interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
	DestinationPortRange() ([]interface{}, error)
}

// mqlAzurermNetworkSecurityrule for the azurerm.network.securityrule resource
type mqlAzurermNetworkSecurityrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermNetworkSecurityrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.network.securityrule resource
func newAzurermNetworkSecurityrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermNetworkSecurityrule{runtime.NewResource("azurerm.network.securityrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "destinationPortRange":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"destinationPortRange\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.securityrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.network.securityrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermNetworkSecurityrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.network.securityrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.network.securityrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azurerm.network.securityrule\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.network.securityrule\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationPortRange"); !ok {
		return errors.New("Initialized \"azurerm.network.securityrule\" resource without a \"destinationPortRange\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.securityrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.securityrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.network.securityrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	case "destinationPortRange":
		return s.DestinationPortRange()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.network.securityrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securityrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securityrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securityrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securityrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.securityrule\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.securityrule\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securityrule\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securityrule\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationPortRange accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) DestinationPortRange() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationPortRange")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.securityrule\" failed: no value provided for static field \"destinationPortRange\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.securityrule\" failed to cast field \"destinationPortRange\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermNetworkSecurityrule) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.securityrule].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	case "destinationPortRange":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.securityrule\" resource")
	}
}

// AzurermNetworkWatcher resource interface
type AzurermNetworkWatcher interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzurermNetworkWatcher for the azurerm.network.watcher resource
type mqlAzurermNetworkWatcher struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermNetworkWatcher) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.network.watcher resource
func newAzurermNetworkWatcher(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermNetworkWatcher{runtime.NewResource("azurerm.network.watcher")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.network.watcher\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.network.watcher with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermNetworkWatcher) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.network.watcher\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.watcher].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.watcher\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.network.watcher].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.network.watcher\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.network.watcher\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.network.watcher\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermNetworkWatcher) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.network.watcher].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.network.watcher\" resource")
	}
}

// AzurermStorage resource interface
type AzurermStorage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Accounts() ([]interface{}, error)
}

// mqlAzurermStorage for the azurerm.storage resource
type mqlAzurermStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.storage resource
func newAzurermStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermStorage{runtime.NewResource("azurerm.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "accounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage\", its \"accounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage].Register")
	switch name {
	case "accounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.storage].Field")
	switch name {
	case "accounts":
		return s.Accounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.storage\" resource")
	}
}

// Accounts accessor autogenerated
func (s *mqlAzurermStorage) Accounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("accounts")
	if !ok || !res.Valid {
		if err := s.ComputeAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accounts")
		if !ok {
			return nil, errors.New("\"azurerm.storage\" calculated \"accounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage\" failed to cast field \"accounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermStorage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage].Compute")
	switch name {
	case "accounts":
		return s.ComputeAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage\" resource")
	}
}

// ComputeAccounts computer autogenerated
func (s *mqlAzurermStorage) ComputeAccounts() error {
	var err error
	if _, ok := s.Cache.Load("accounts"); ok {
		return nil
	}
	vres, err := s.GetAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermStorageAccount resource interface
type AzurermStorageAccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Sku() (interface{}, error)
	Kind() (string, error)
	Containers() ([]interface{}, error)
}

// mqlAzurermStorageAccount for the azurerm.storage.account resource
type mqlAzurermStorageAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermStorageAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.storage.account resource
func newAzurermStorageAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermStorageAccount{runtime.NewResource("azurerm.storage.account")}
	var existing AzurermStorageAccount
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "sku":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"sku\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.storage.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermStorageAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"identity\". This field is required.")
	}
	if _, ok := s.Cache.Load("sku"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"sku\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azurerm.storage.account\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermStorageAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage.account].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermStorageAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.storage.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "sku":
		return s.Sku()
	case "kind":
		return s.Kind()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.storage.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermStorageAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermStorageAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermStorageAccount) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermStorageAccount) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermStorageAccount) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermStorageAccount) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzurermStorageAccount) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Sku accessor autogenerated
func (s *mqlAzurermStorageAccount) Sku() (interface{}, error) {
	res, ok := s.Cache.Load("sku")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"sku\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"sku\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzurermStorageAccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.account\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAzurermStorageAccount) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"azurerm.storage.account\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.account\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermStorageAccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage.account].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "sku":
		return nil
	case "kind":
		return nil
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage.account\" resource")
	}
}

// ComputeContainers computer autogenerated
func (s *mqlAzurermStorageAccount) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermStorageContainer resource interface
type AzurermStorageContainer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Etag() (string, error)
	Properties() (interface{}, error)
}

// mqlAzurermStorageContainer for the azurerm.storage.container resource
type mqlAzurermStorageContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermStorageContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.storage.container resource
func newAzurermStorageContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermStorageContainer{runtime.NewResource("azurerm.storage.container")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "etag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"etag\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.storage.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.storage.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermStorageContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.storage.container\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.storage.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.storage.container\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("etag"); !ok {
		return errors.New("Initialized \"azurerm.storage.container\" resource without a \"etag\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.storage.container\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermStorageContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage.container].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermStorageContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.storage.container].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "etag":
		return s.Etag()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.storage.container\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermStorageContainer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.container\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.container\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermStorageContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermStorageContainer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.container\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.container\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Etag accessor autogenerated
func (s *mqlAzurermStorageContainer) Etag() (string, error) {
	res, ok := s.Cache.Load("etag")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.storage.container\" failed: no value provided for static field \"etag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.storage.container\" failed to cast field \"etag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermStorageContainer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.storage.container\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.storage.container\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermStorageContainer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.storage.container].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "etag":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.storage.container\" resource")
	}
}

// AzurermWeb resource interface
type AzurermWeb interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Apps() ([]interface{}, error)
	AvailableRuntimes() ([]interface{}, error)
}

// mqlAzurermWeb for the azurerm.web resource
type mqlAzurermWeb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermWeb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.web resource
func newAzurermWeb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermWeb{runtime.NewResource("azurerm.web")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "apps":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web\", its \"apps\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "availableRuntimes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web\", its \"availableRuntimes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.web with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermWeb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermWeb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web].Register")
	switch name {
	case "apps":
		return nil
	case "availableRuntimes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermWeb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.web].Field")
	switch name {
	case "apps":
		return s.Apps()
	case "availableRuntimes":
		return s.AvailableRuntimes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.web\" resource")
	}
}

// Apps accessor autogenerated
func (s *mqlAzurermWeb) Apps() ([]interface{}, error) {
	res, ok := s.Cache.Load("apps")
	if !ok || !res.Valid {
		if err := s.ComputeApps(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apps")
		if !ok {
			return nil, errors.New("\"azurerm.web\" calculated \"apps\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apps")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web\" failed to cast field \"apps\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AvailableRuntimes accessor autogenerated
func (s *mqlAzurermWeb) AvailableRuntimes() ([]interface{}, error) {
	res, ok := s.Cache.Load("availableRuntimes")
	if !ok || !res.Valid {
		if err := s.ComputeAvailableRuntimes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("availableRuntimes")
		if !ok {
			return nil, errors.New("\"azurerm.web\" calculated \"availableRuntimes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "availableRuntimes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web\" failed to cast field \"availableRuntimes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermWeb) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web].Compute")
	switch name {
	case "apps":
		return s.ComputeApps()
	case "availableRuntimes":
		return s.ComputeAvailableRuntimes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web\" resource")
	}
}

// ComputeApps computer autogenerated
func (s *mqlAzurermWeb) ComputeApps() error {
	var err error
	if _, ok := s.Cache.Load("apps"); ok {
		return nil
	}
	vres, err := s.GetApps()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apps", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAvailableRuntimes computer autogenerated
func (s *mqlAzurermWeb) ComputeAvailableRuntimes() error {
	var err error
	if _, ok := s.Cache.Load("availableRuntimes"); ok {
		return nil
	}
	vres, err := s.GetAvailableRuntimes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("availableRuntimes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermWebAppsite resource interface
type AzurermWebAppsite interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	Identity() (interface{}, error)
	Configuration() (AzurermWebAppsiteconfig, error)
	AuthenticationSettings() (AzurermWebAppsiteauthsettings, error)
	Metadata() (interface{}, error)
	ApplicationSettings() (interface{}, error)
	ConnectionSettings() (interface{}, error)
	Stack() (interface{}, error)
}

// mqlAzurermWebAppsite for the azurerm.web.appsite resource
type mqlAzurermWebAppsite struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermWebAppsite) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.web.appsite resource
func newAzurermWebAppsite(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermWebAppsite{runtime.NewResource("azurerm.web.appsite")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"identity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.(AzurermWebAppsiteconfig); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"configuration\" argument has the wrong type (expected type \"AzurermWebAppsiteconfig\")")
			}
		case "authenticationSettings":
			if _, ok := val.(AzurermWebAppsiteauthsettings); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"authenticationSettings\" argument has the wrong type (expected type \"AzurermWebAppsiteauthsettings\")")
			}
		case "metadata":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"metadata\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "applicationSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"applicationSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"connectionSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stack":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"stack\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsite\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.web.appsite with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermWebAppsite) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("identity"); !ok {
		return errors.New("Initialized \"azurerm.web.appsite\" resource without a \"identity\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermWebAppsite) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsite].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return nil
	case "authenticationSettings":
		return nil
	case "metadata":
		return nil
	case "applicationSettings":
		return nil
	case "connectionSettings":
		return nil
	case "stack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsite\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermWebAppsite) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsite].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "identity":
		return s.Identity()
	case "configuration":
		return s.Configuration()
	case "authenticationSettings":
		return s.AuthenticationSettings()
	case "metadata":
		return s.Metadata()
	case "applicationSettings":
		return s.ApplicationSettings()
	case "connectionSettings":
		return s.ConnectionSettings()
	case "stack":
		return s.Stack()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.web.appsite\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermWebAppsite) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermWebAppsite) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzurermWebAppsite) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermWebAppsite) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermWebAppsite) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermWebAppsite) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermWebAppsite) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Identity accessor autogenerated
func (s *mqlAzurermWebAppsite) Identity() (interface{}, error) {
	res, ok := s.Cache.Load("identity")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.web.appsite\" failed: no value provided for static field \"identity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"identity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzurermWebAppsite) Configuration() (AzurermWebAppsiteconfig, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermWebAppsiteconfig)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"configuration\" to the right type (AzurermWebAppsiteconfig): %#v", res)
	}
	return tres, nil
}

// AuthenticationSettings accessor autogenerated
func (s *mqlAzurermWebAppsite) AuthenticationSettings() (AzurermWebAppsiteauthsettings, error) {
	res, ok := s.Cache.Load("authenticationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeAuthenticationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authenticationSettings")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"authenticationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authenticationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermWebAppsiteauthsettings)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"authenticationSettings\" to the right type (AzurermWebAppsiteauthsettings): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlAzurermWebAppsite) Metadata() (interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"metadata\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ApplicationSettings accessor autogenerated
func (s *mqlAzurermWebAppsite) ApplicationSettings() (interface{}, error) {
	res, ok := s.Cache.Load("applicationSettings")
	if !ok || !res.Valid {
		if err := s.ComputeApplicationSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applicationSettings")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"applicationSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applicationSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"applicationSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionSettings accessor autogenerated
func (s *mqlAzurermWebAppsite) ConnectionSettings() (interface{}, error) {
	res, ok := s.Cache.Load("connectionSettings")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionSettings")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"connectionSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"connectionSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Stack accessor autogenerated
func (s *mqlAzurermWebAppsite) Stack() (interface{}, error) {
	res, ok := s.Cache.Load("stack")
	if !ok || !res.Valid {
		if err := s.ComputeStack(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("stack")
		if !ok {
			return nil, errors.New("\"azurerm.web.appsite\" calculated \"stack\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "stack")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsite\" failed to cast field \"stack\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermWebAppsite) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsite].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "identity":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "authenticationSettings":
		return s.ComputeAuthenticationSettings()
	case "metadata":
		return s.ComputeMetadata()
	case "applicationSettings":
		return s.ComputeApplicationSettings()
	case "connectionSettings":
		return s.ComputeConnectionSettings()
	case "stack":
		return s.ComputeStack()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsite\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthenticationSettings computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeAuthenticationSettings() error {
	var err error
	if _, ok := s.Cache.Load("authenticationSettings"); ok {
		return nil
	}
	vres, err := s.GetAuthenticationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authenticationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetadata computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplicationSettings computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeApplicationSettings() error {
	var err error
	if _, ok := s.Cache.Load("applicationSettings"); ok {
		return nil
	}
	vres, err := s.GetApplicationSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applicationSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionSettings computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeConnectionSettings() error {
	var err error
	if _, ok := s.Cache.Load("connectionSettings"); ok {
		return nil
	}
	vres, err := s.GetConnectionSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStack computer autogenerated
func (s *mqlAzurermWebAppsite) ComputeStack() error {
	var err error
	if _, ok := s.Cache.Load("stack"); ok {
		return nil
	}
	vres, err := s.GetStack()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("stack", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermWebAppsiteauthsettings resource interface
type AzurermWebAppsiteauthsettings interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzurermWebAppsiteauthsettings for the azurerm.web.appsiteauthsettings resource
type mqlAzurermWebAppsiteauthsettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermWebAppsiteauthsettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.web.appsiteauthsettings resource
func newAzurermWebAppsiteauthsettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermWebAppsiteauthsettings{runtime.NewResource("azurerm.web.appsiteauthsettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteauthsettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.web.appsiteauthsettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermWebAppsiteauthsettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteauthsettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteauthsettings\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteauthsettings\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteauthsettings\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteauthsettings\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteauthsettings].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsiteauthsettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteauthsettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.web.appsiteauthsettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteauthsettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteauthsettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteauthsettings\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteauthsettings\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteauthsettings\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteauthsettings\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteauthsettings\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteauthsettings\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.web.appsiteauthsettings\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsiteauthsettings\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermWebAppsiteauthsettings) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteauthsettings].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsiteauthsettings\" resource")
	}
}

// AzurermWebAppsiteconfig resource interface
type AzurermWebAppsiteconfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Kind() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
}

// mqlAzurermWebAppsiteconfig for the azurerm.web.appsiteconfig resource
type mqlAzurermWebAppsiteconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermWebAppsiteconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.web.appsiteconfig resource
func newAzurermWebAppsiteconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermWebAppsiteconfig{runtime.NewResource("azurerm.web.appsiteconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.web.appsiteconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.web.appsiteconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermWebAppsiteconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteconfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteconfig\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteconfig\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteconfig\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.web.appsiteconfig\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteconfig].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsiteconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteconfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.web.appsiteconfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteconfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteconfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteconfig\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteconfig\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteconfig\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteconfig\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.web.appsiteconfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.web.appsiteconfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.web.appsiteconfig\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.web.appsiteconfig\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermWebAppsiteconfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.web.appsiteconfig].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.web.appsiteconfig\" resource")
	}
}

// AzurermSql resource interface
type AzurermSql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzurermSql for the azurerm.sql resource
type mqlAzurermSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql resource
func newAzurermSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSql{runtime.NewResource("azurerm.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzurermSql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azurerm.sql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzurermSql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermSqlServer resource interface
type AzurermSqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
	AzureAdAdministrators() ([]interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	SecurityAlertPolicy() (interface{}, error)
	EncryptionProtector() (interface{}, error)
}

// mqlAzurermSqlServer for the azurerm.sql.server resource
type mqlAzurermSqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.server resource
func newAzurermSqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlServer{runtime.NewResource("azurerm.sql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "azureAdAdministrators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"azureAdAdministrators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securityAlertPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"securityAlertPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "encryptionProtector":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"encryptionProtector\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.sql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	case "azureAdAdministrators":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "securityAlertPolicy":
		return nil
	case "encryptionProtector":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	case "azureAdAdministrators":
		return s.AzureAdAdministrators()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "securityAlertPolicy":
		return s.SecurityAlertPolicy()
	case "encryptionProtector":
		return s.EncryptionProtector()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermSqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermSqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermSqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermSqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzurermSqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzurermSqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AzureAdAdministrators accessor autogenerated
func (s *mqlAzurermSqlServer) AzureAdAdministrators() ([]interface{}, error) {
	res, ok := s.Cache.Load("azureAdAdministrators")
	if !ok || !res.Valid {
		if err := s.ComputeAzureAdAdministrators(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("azureAdAdministrators")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"azureAdAdministrators\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "azureAdAdministrators")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"azureAdAdministrators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzurermSqlServer) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzurermSqlServer) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityAlertPolicy accessor autogenerated
func (s *mqlAzurermSqlServer) SecurityAlertPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("securityAlertPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityAlertPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityAlertPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"securityAlertPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityAlertPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"securityAlertPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptionProtector accessor autogenerated
func (s *mqlAzurermSqlServer) EncryptionProtector() (interface{}, error) {
	res, ok := s.Cache.Load("encryptionProtector")
	if !ok || !res.Valid {
		if err := s.ComputeEncryptionProtector(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("encryptionProtector")
		if !ok {
			return nil, errors.New("\"azurerm.sql.server\" calculated \"encryptionProtector\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "encryptionProtector")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.server\" failed to cast field \"encryptionProtector\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	case "azureAdAdministrators":
		return s.ComputeAzureAdAdministrators()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "securityAlertPolicy":
		return s.ComputeSecurityAlertPolicy()
	case "encryptionProtector":
		return s.ComputeEncryptionProtector()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.server\" resource")
	}
}

// ComputeDatabases computer autogenerated
func (s *mqlAzurermSqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzurermSqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAzureAdAdministrators computer autogenerated
func (s *mqlAzurermSqlServer) ComputeAzureAdAdministrators() error {
	var err error
	if _, ok := s.Cache.Load("azureAdAdministrators"); ok {
		return nil
	}
	vres, err := s.GetAzureAdAdministrators()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("azureAdAdministrators", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzurermSqlServer) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzurermSqlServer) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityAlertPolicy computer autogenerated
func (s *mqlAzurermSqlServer) ComputeSecurityAlertPolicy() error {
	var err error
	if _, ok := s.Cache.Load("securityAlertPolicy"); ok {
		return nil
	}
	vres, err := s.GetSecurityAlertPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityAlertPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEncryptionProtector computer autogenerated
func (s *mqlAzurermSqlServer) ComputeEncryptionProtector() error {
	var err error
	if _, ok := s.Cache.Load("encryptionProtector"); ok {
		return nil
	}
	vres, err := s.GetEncryptionProtector()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("encryptionProtector", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermSqlServerAdministrator resource interface
type AzurermSqlServerAdministrator interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	AdministratorType() (string, error)
	Login() (string, error)
	Sid() (string, error)
	TenantId() (string, error)
}

// mqlAzurermSqlServerAdministrator for the azurerm.sql.server.administrator resource
type mqlAzurermSqlServerAdministrator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlServerAdministrator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.server.administrator resource
func newAzurermSqlServerAdministrator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlServerAdministrator{runtime.NewResource("azurerm.sql.server.administrator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "administratorType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"administratorType\" argument has the wrong type (expected type \"string\")")
			}
		case "login":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"login\" argument has the wrong type (expected type \"string\")")
			}
		case "sid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"sid\" argument has the wrong type (expected type \"string\")")
			}
		case "tenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"tenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.server.administrator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.server.administrator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlServerAdministrator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("administratorType"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"administratorType\". This field is required.")
	}
	if _, ok := s.Cache.Load("login"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"login\". This field is required.")
	}
	if _, ok := s.Cache.Load("sid"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"sid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tenantId"); !ok {
		return errors.New("Initialized \"azurerm.sql.server.administrator\" resource without a \"tenantId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server.administrator].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.server.administrator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server.administrator].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "administratorType":
		return s.AdministratorType()
	case "login":
		return s.Login()
	case "sid":
		return s.Sid()
	case "tenantId":
		return s.TenantId()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.server.administrator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AdministratorType accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) AdministratorType() (string, error) {
	res, ok := s.Cache.Load("administratorType")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"administratorType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"administratorType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Login accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Login() (string, error) {
	res, ok := s.Cache.Load("login")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"login\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"login\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sid accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Sid() (string, error) {
	res, ok := s.Cache.Load("sid")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"sid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"sid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TenantId accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) TenantId() (string, error) {
	res, ok := s.Cache.Load("tenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.server.administrator\" failed: no value provided for static field \"tenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.server.administrator\" failed to cast field \"tenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlServerAdministrator) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.server.administrator].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "administratorType":
		return nil
	case "login":
		return nil
	case "sid":
		return nil
	case "tenantId":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.server.administrator\" resource")
	}
}

// AzurermSqlDatabase resource interface
type AzurermSqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Collation() (string, error)
	CreationDate() (*time.Time, error)
	ContainmentState() (int64, error)
	CurrentServiceObjectiveId() (string, error)
	DatabaseId() (string, error)
	EarliestRestoreDate() (*time.Time, error)
	CreateMode() (string, error)
	SourceDatabaseId() (string, error)
	SourceDatabaseDeletionDate() (*time.Time, error)
	RestorePointInTime() (*time.Time, error)
	RecoveryServicesRecoveryPointResourceId() (string, error)
	Edition() (string, error)
	MaxSizeBytes() (int64, error)
	RequestedServiceObjectiveId() (string, error)
	RequestedServiceObjectiveName() (string, error)
	ServiceLevelObjective() (string, error)
	Status() (string, error)
	ElasticPoolName() (string, error)
	DefaultSecondaryLocation() (string, error)
	ServiceTierAdvisors() (interface{}, error)
	RecommendedIndex() (interface{}, error)
	FailoverGroupId() (string, error)
	ReadScale() (string, error)
	SampleName() (string, error)
	ZoneRedundant() (bool, error)
	TransparentDataEncryption() (interface{}, error)
	Advisor() ([]interface{}, error)
	ThreatDetectionPolicy() (interface{}, error)
	ConnectionPolicy() (interface{}, error)
	AuditingPolicy() (interface{}, error)
	Usage() ([]interface{}, error)
}

// mqlAzurermSqlDatabase for the azurerm.sql.database resource
type mqlAzurermSqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.database resource
func newAzurermSqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlDatabase{runtime.NewResource("azurerm.sql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "containmentState":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"containmentState\" argument has the wrong type (expected type \"int64\")")
			}
		case "currentServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"currentServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"databaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "earliestRestoreDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"earliestRestoreDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"createMode\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"sourceDatabaseId\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceDatabaseDeletionDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"sourceDatabaseDeletionDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "restorePointInTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"restorePointInTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryServicesRecoveryPointResourceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"recoveryServicesRecoveryPointResourceId\" argument has the wrong type (expected type \"string\")")
			}
		case "edition":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"edition\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"maxSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "requestedServiceObjectiveId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"requestedServiceObjectiveId\" argument has the wrong type (expected type \"string\")")
			}
		case "requestedServiceObjectiveName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"requestedServiceObjectiveName\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceLevelObjective":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"serviceLevelObjective\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "elasticPoolName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"elasticPoolName\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultSecondaryLocation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"defaultSecondaryLocation\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceTierAdvisors":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"serviceTierAdvisors\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "recommendedIndex":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"recommendedIndex\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "failoverGroupId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"failoverGroupId\" argument has the wrong type (expected type \"string\")")
			}
		case "readScale":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"readScale\" argument has the wrong type (expected type \"string\")")
			}
		case "sampleName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"sampleName\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneRedundant":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"zoneRedundant\" argument has the wrong type (expected type \"bool\")")
			}
		case "transparentDataEncryption":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"transparentDataEncryption\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "advisor":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"advisor\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "threatDetectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"threatDetectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "connectionPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"connectionPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "auditingPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"auditingPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "usage":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"usage\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseId"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"databaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("earliestRestoreDate"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"earliestRestoreDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("createMode"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"createMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseId"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"sourceDatabaseId\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceDatabaseDeletionDate"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"sourceDatabaseDeletionDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("restorePointInTime"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"restorePointInTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"recoveryServicesRecoveryPointResourceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("edition"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"edition\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSizeBytes"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"maxSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("requestedServiceObjectiveName"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"requestedServiceObjectiveName\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceLevelObjective"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"serviceLevelObjective\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("elasticPoolName"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"elasticPoolName\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultSecondaryLocation"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"defaultSecondaryLocation\". This field is required.")
	}
	if _, ok := s.Cache.Load("failoverGroupId"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"failoverGroupId\". This field is required.")
	}
	if _, ok := s.Cache.Load("readScale"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"readScale\". This field is required.")
	}
	if _, ok := s.Cache.Load("sampleName"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"sampleName\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneRedundant"); !ok {
		return errors.New("Initialized \"azurerm.sql.database\" resource without a \"zoneRedundant\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return nil
	case "currentServiceObjectiveId":
		return nil
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return nil
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return nil
	case "recommendedIndex":
		return nil
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return nil
	case "advisor":
		return nil
	case "threatDetectionPolicy":
		return nil
	case "connectionPolicy":
		return nil
	case "auditingPolicy":
		return nil
	case "usage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "collation":
		return s.Collation()
	case "creationDate":
		return s.CreationDate()
	case "containmentState":
		return s.ContainmentState()
	case "currentServiceObjectiveId":
		return s.CurrentServiceObjectiveId()
	case "databaseId":
		return s.DatabaseId()
	case "earliestRestoreDate":
		return s.EarliestRestoreDate()
	case "createMode":
		return s.CreateMode()
	case "sourceDatabaseId":
		return s.SourceDatabaseId()
	case "sourceDatabaseDeletionDate":
		return s.SourceDatabaseDeletionDate()
	case "restorePointInTime":
		return s.RestorePointInTime()
	case "recoveryServicesRecoveryPointResourceId":
		return s.RecoveryServicesRecoveryPointResourceId()
	case "edition":
		return s.Edition()
	case "maxSizeBytes":
		return s.MaxSizeBytes()
	case "requestedServiceObjectiveId":
		return s.RequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return s.RequestedServiceObjectiveName()
	case "serviceLevelObjective":
		return s.ServiceLevelObjective()
	case "status":
		return s.Status()
	case "elasticPoolName":
		return s.ElasticPoolName()
	case "defaultSecondaryLocation":
		return s.DefaultSecondaryLocation()
	case "serviceTierAdvisors":
		return s.ServiceTierAdvisors()
	case "recommendedIndex":
		return s.RecommendedIndex()
	case "failoverGroupId":
		return s.FailoverGroupId()
	case "readScale":
		return s.ReadScale()
	case "sampleName":
		return s.SampleName()
	case "zoneRedundant":
		return s.ZoneRedundant()
	case "transparentDataEncryption":
		return s.TransparentDataEncryption()
	case "advisor":
		return s.Advisor()
	case "threatDetectionPolicy":
		return s.ThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ConnectionPolicy()
	case "auditingPolicy":
		return s.AuditingPolicy()
	case "usage":
		return s.Usage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermSqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzurermSqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlAzurermSqlDatabase) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ContainmentState accessor autogenerated
func (s *mqlAzurermSqlDatabase) ContainmentState() (int64, error) {
	res, ok := s.Cache.Load("containmentState")
	if !ok || !res.Valid {
		if err := s.ComputeContainmentState(); err != nil {
			return 0, err
		}
		res, ok = s.Cache.Load("containmentState")
		if !ok {
			return 0, errors.New("\"azurerm.sql.database\" calculated \"containmentState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containmentState")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"containmentState\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CurrentServiceObjectiveId accessor autogenerated
func (s *mqlAzurermSqlDatabase) CurrentServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("currentServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeCurrentServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("currentServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azurerm.sql.database\" calculated \"currentServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "currentServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"currentServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseId accessor autogenerated
func (s *mqlAzurermSqlDatabase) DatabaseId() (string, error) {
	res, ok := s.Cache.Load("databaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"databaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"databaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EarliestRestoreDate accessor autogenerated
func (s *mqlAzurermSqlDatabase) EarliestRestoreDate() (*time.Time, error) {
	res, ok := s.Cache.Load("earliestRestoreDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"earliestRestoreDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"earliestRestoreDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreateMode accessor autogenerated
func (s *mqlAzurermSqlDatabase) CreateMode() (string, error) {
	res, ok := s.Cache.Load("createMode")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"createMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"createMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseId accessor autogenerated
func (s *mqlAzurermSqlDatabase) SourceDatabaseId() (string, error) {
	res, ok := s.Cache.Load("sourceDatabaseId")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"sourceDatabaseId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"sourceDatabaseId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceDatabaseDeletionDate accessor autogenerated
func (s *mqlAzurermSqlDatabase) SourceDatabaseDeletionDate() (*time.Time, error) {
	res, ok := s.Cache.Load("sourceDatabaseDeletionDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"sourceDatabaseDeletionDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"sourceDatabaseDeletionDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RestorePointInTime accessor autogenerated
func (s *mqlAzurermSqlDatabase) RestorePointInTime() (*time.Time, error) {
	res, ok := s.Cache.Load("restorePointInTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"restorePointInTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"restorePointInTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryServicesRecoveryPointResourceId accessor autogenerated
func (s *mqlAzurermSqlDatabase) RecoveryServicesRecoveryPointResourceId() (string, error) {
	res, ok := s.Cache.Load("recoveryServicesRecoveryPointResourceId")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"recoveryServicesRecoveryPointResourceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"recoveryServicesRecoveryPointResourceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Edition accessor autogenerated
func (s *mqlAzurermSqlDatabase) Edition() (string, error) {
	res, ok := s.Cache.Load("edition")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"edition\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"edition\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSizeBytes accessor autogenerated
func (s *mqlAzurermSqlDatabase) MaxSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("maxSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"maxSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"maxSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveId accessor autogenerated
func (s *mqlAzurermSqlDatabase) RequestedServiceObjectiveId() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveId")
	if !ok || !res.Valid {
		if err := s.ComputeRequestedServiceObjectiveId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("requestedServiceObjectiveId")
		if !ok {
			return "", errors.New("\"azurerm.sql.database\" calculated \"requestedServiceObjectiveId\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "requestedServiceObjectiveId")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"requestedServiceObjectiveId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RequestedServiceObjectiveName accessor autogenerated
func (s *mqlAzurermSqlDatabase) RequestedServiceObjectiveName() (string, error) {
	res, ok := s.Cache.Load("requestedServiceObjectiveName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"requestedServiceObjectiveName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"requestedServiceObjectiveName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceLevelObjective accessor autogenerated
func (s *mqlAzurermSqlDatabase) ServiceLevelObjective() (string, error) {
	res, ok := s.Cache.Load("serviceLevelObjective")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"serviceLevelObjective\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"serviceLevelObjective\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAzurermSqlDatabase) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ElasticPoolName accessor autogenerated
func (s *mqlAzurermSqlDatabase) ElasticPoolName() (string, error) {
	res, ok := s.Cache.Load("elasticPoolName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"elasticPoolName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"elasticPoolName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultSecondaryLocation accessor autogenerated
func (s *mqlAzurermSqlDatabase) DefaultSecondaryLocation() (string, error) {
	res, ok := s.Cache.Load("defaultSecondaryLocation")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"defaultSecondaryLocation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"defaultSecondaryLocation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceTierAdvisors accessor autogenerated
func (s *mqlAzurermSqlDatabase) ServiceTierAdvisors() (interface{}, error) {
	res, ok := s.Cache.Load("serviceTierAdvisors")
	if !ok || !res.Valid {
		if err := s.ComputeServiceTierAdvisors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceTierAdvisors")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"serviceTierAdvisors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceTierAdvisors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"serviceTierAdvisors\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RecommendedIndex accessor autogenerated
func (s *mqlAzurermSqlDatabase) RecommendedIndex() (interface{}, error) {
	res, ok := s.Cache.Load("recommendedIndex")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendedIndex(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendedIndex")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"recommendedIndex\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendedIndex")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"recommendedIndex\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FailoverGroupId accessor autogenerated
func (s *mqlAzurermSqlDatabase) FailoverGroupId() (string, error) {
	res, ok := s.Cache.Load("failoverGroupId")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"failoverGroupId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"failoverGroupId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReadScale accessor autogenerated
func (s *mqlAzurermSqlDatabase) ReadScale() (string, error) {
	res, ok := s.Cache.Load("readScale")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"readScale\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"readScale\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SampleName accessor autogenerated
func (s *mqlAzurermSqlDatabase) SampleName() (string, error) {
	res, ok := s.Cache.Load("sampleName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"sampleName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"sampleName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneRedundant accessor autogenerated
func (s *mqlAzurermSqlDatabase) ZoneRedundant() (bool, error) {
	res, ok := s.Cache.Load("zoneRedundant")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.sql.database\" failed: no value provided for static field \"zoneRedundant\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"zoneRedundant\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// TransparentDataEncryption accessor autogenerated
func (s *mqlAzurermSqlDatabase) TransparentDataEncryption() (interface{}, error) {
	res, ok := s.Cache.Load("transparentDataEncryption")
	if !ok || !res.Valid {
		if err := s.ComputeTransparentDataEncryption(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("transparentDataEncryption")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"transparentDataEncryption\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "transparentDataEncryption")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"transparentDataEncryption\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Advisor accessor autogenerated
func (s *mqlAzurermSqlDatabase) Advisor() ([]interface{}, error) {
	res, ok := s.Cache.Load("advisor")
	if !ok || !res.Valid {
		if err := s.ComputeAdvisor(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("advisor")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"advisor\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "advisor")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"advisor\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ThreatDetectionPolicy accessor autogenerated
func (s *mqlAzurermSqlDatabase) ThreatDetectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("threatDetectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeThreatDetectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("threatDetectionPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"threatDetectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "threatDetectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"threatDetectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ConnectionPolicy accessor autogenerated
func (s *mqlAzurermSqlDatabase) ConnectionPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("connectionPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeConnectionPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("connectionPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"connectionPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "connectionPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"connectionPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuditingPolicy accessor autogenerated
func (s *mqlAzurermSqlDatabase) AuditingPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("auditingPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuditingPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("auditingPolicy")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"auditingPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "auditingPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"auditingPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Usage accessor autogenerated
func (s *mqlAzurermSqlDatabase) Usage() ([]interface{}, error) {
	res, ok := s.Cache.Load("usage")
	if !ok || !res.Valid {
		if err := s.ComputeUsage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("usage")
		if !ok {
			return nil, errors.New("\"azurerm.sql.database\" calculated \"usage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "usage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.database\" failed to cast field \"usage\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "collation":
		return nil
	case "creationDate":
		return nil
	case "containmentState":
		return s.ComputeContainmentState()
	case "currentServiceObjectiveId":
		return s.ComputeCurrentServiceObjectiveId()
	case "databaseId":
		return nil
	case "earliestRestoreDate":
		return nil
	case "createMode":
		return nil
	case "sourceDatabaseId":
		return nil
	case "sourceDatabaseDeletionDate":
		return nil
	case "restorePointInTime":
		return nil
	case "recoveryServicesRecoveryPointResourceId":
		return nil
	case "edition":
		return nil
	case "maxSizeBytes":
		return nil
	case "requestedServiceObjectiveId":
		return s.ComputeRequestedServiceObjectiveId()
	case "requestedServiceObjectiveName":
		return nil
	case "serviceLevelObjective":
		return nil
	case "status":
		return nil
	case "elasticPoolName":
		return nil
	case "defaultSecondaryLocation":
		return nil
	case "serviceTierAdvisors":
		return s.ComputeServiceTierAdvisors()
	case "recommendedIndex":
		return s.ComputeRecommendedIndex()
	case "failoverGroupId":
		return nil
	case "readScale":
		return nil
	case "sampleName":
		return nil
	case "zoneRedundant":
		return nil
	case "transparentDataEncryption":
		return s.ComputeTransparentDataEncryption()
	case "advisor":
		return s.ComputeAdvisor()
	case "threatDetectionPolicy":
		return s.ComputeThreatDetectionPolicy()
	case "connectionPolicy":
		return s.ComputeConnectionPolicy()
	case "auditingPolicy":
		return s.ComputeAuditingPolicy()
	case "usage":
		return s.ComputeUsage()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.database\" resource")
	}
}

// ComputeContainmentState computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeContainmentState() error {
	var err error
	if _, ok := s.Cache.Load("containmentState"); ok {
		return nil
	}
	vres, err := s.GetContainmentState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containmentState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCurrentServiceObjectiveId computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeCurrentServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("currentServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetCurrentServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("currentServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRequestedServiceObjectiveId computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeRequestedServiceObjectiveId() error {
	var err error
	if _, ok := s.Cache.Load("requestedServiceObjectiveId"); ok {
		return nil
	}
	vres, err := s.GetRequestedServiceObjectiveId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("requestedServiceObjectiveId", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServiceTierAdvisors computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeServiceTierAdvisors() error {
	var err error
	if _, ok := s.Cache.Load("serviceTierAdvisors"); ok {
		return nil
	}
	vres, err := s.GetServiceTierAdvisors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceTierAdvisors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendedIndex computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeRecommendedIndex() error {
	var err error
	if _, ok := s.Cache.Load("recommendedIndex"); ok {
		return nil
	}
	vres, err := s.GetRecommendedIndex()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendedIndex", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTransparentDataEncryption computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeTransparentDataEncryption() error {
	var err error
	if _, ok := s.Cache.Load("transparentDataEncryption"); ok {
		return nil
	}
	vres, err := s.GetTransparentDataEncryption()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("transparentDataEncryption", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdvisor computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeAdvisor() error {
	var err error
	if _, ok := s.Cache.Load("advisor"); ok {
		return nil
	}
	vres, err := s.GetAdvisor()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("advisor", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeThreatDetectionPolicy computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeThreatDetectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("threatDetectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetThreatDetectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("threatDetectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConnectionPolicy computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeConnectionPolicy() error {
	var err error
	if _, ok := s.Cache.Load("connectionPolicy"); ok {
		return nil
	}
	vres, err := s.GetConnectionPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("connectionPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuditingPolicy computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeAuditingPolicy() error {
	var err error
	if _, ok := s.Cache.Load("auditingPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuditingPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("auditingPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsage computer autogenerated
func (s *mqlAzurermSqlDatabase) ComputeUsage() error {
	var err error
	if _, ok := s.Cache.Load("usage"); ok {
		return nil
	}
	vres, err := s.GetUsage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("usage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermSqlDatabaseusage resource interface
type AzurermSqlDatabaseusage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	ResourceName() (string, error)
	DisplayName() (string, error)
	CurrentValue() (float64, error)
	Limit() (float64, error)
	Unit() (string, error)
	NextResetTime() (*time.Time, error)
}

// mqlAzurermSqlDatabaseusage for the azurerm.sql.databaseusage resource
type mqlAzurermSqlDatabaseusage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlDatabaseusage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.databaseusage resource
func newAzurermSqlDatabaseusage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlDatabaseusage{runtime.NewResource("azurerm.sql.databaseusage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"resourceName\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "currentValue":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"currentValue\" argument has the wrong type (expected type \"float64\")")
			}
		case "limit":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"limit\" argument has the wrong type (expected type \"float64\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "nextResetTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"nextResetTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.databaseusage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.databaseusage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlDatabaseusage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceName"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"resourceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentValue"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"currentValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("limit"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"limit\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"azurerm.sql.databaseusage\" resource without a \"unit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.databaseusage].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.databaseusage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.databaseusage].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "resourceName":
		return s.ResourceName()
	case "displayName":
		return s.DisplayName()
	case "currentValue":
		return s.CurrentValue()
	case "limit":
		return s.Limit()
	case "unit":
		return s.Unit()
	case "nextResetTime":
		return s.NextResetTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.databaseusage\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceName accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) ResourceName() (string, error) {
	res, ok := s.Cache.Load("resourceName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"resourceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"resourceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentValue accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) CurrentValue() (float64, error) {
	res, ok := s.Cache.Load("currentValue")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"currentValue\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"currentValue\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Limit accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Limit() (float64, error) {
	res, ok := s.Cache.Load("limit")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"limit\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"limit\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.databaseusage\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NextResetTime accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) NextResetTime() (*time.Time, error) {
	res, ok := s.Cache.Load("nextResetTime")
	if !ok || !res.Valid {
		if err := s.ComputeNextResetTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("nextResetTime")
		if !ok {
			return nil, errors.New("\"azurerm.sql.databaseusage\" calculated \"nextResetTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "nextResetTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.sql.databaseusage\" failed to cast field \"nextResetTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlDatabaseusage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.databaseusage].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "resourceName":
		return nil
	case "displayName":
		return nil
	case "currentValue":
		return nil
	case "limit":
		return nil
	case "unit":
		return nil
	case "nextResetTime":
		return s.ComputeNextResetTime()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.databaseusage\" resource")
	}
}

// ComputeNextResetTime computer autogenerated
func (s *mqlAzurermSqlDatabaseusage) ComputeNextResetTime() error {
	var err error
	if _, ok := s.Cache.Load("nextResetTime"); ok {
		return nil
	}
	vres, err := s.GetNextResetTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("nextResetTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermPostgresql resource interface
type AzurermPostgresql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzurermPostgresql for the azurerm.postgresql resource
type mqlAzurermPostgresql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermPostgresql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.postgresql resource
func newAzurermPostgresql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermPostgresql{runtime.NewResource("azurerm.postgresql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.postgresql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermPostgresql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermPostgresql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermPostgresql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.postgresql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzurermPostgresql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azurerm.postgresql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermPostgresql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzurermPostgresql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermPostgresqlServer resource interface
type AzurermPostgresqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzurermPostgresqlServer for the azurerm.postgresql.server resource
type mqlAzurermPostgresqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermPostgresqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.postgresql.server resource
func newAzurermPostgresqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermPostgresqlServer{runtime.NewResource("azurerm.postgresql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.postgresql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermPostgresqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.postgresql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.postgresql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azurerm.postgresql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azurerm.postgresql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzurermPostgresqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azurerm.postgresql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.postgresql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermPostgresqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzurermPostgresqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzurermPostgresqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzurermPostgresqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermPostgresqlDatabase resource interface
type AzurermPostgresqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzurermPostgresqlDatabase for the azurerm.postgresql.database resource
type mqlAzurermPostgresqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermPostgresqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.postgresql.database resource
func newAzurermPostgresqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermPostgresqlDatabase{runtime.NewResource("azurerm.postgresql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.postgresql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.postgresql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermPostgresqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azurerm.postgresql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.postgresql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.postgresql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.postgresql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermPostgresqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.postgresql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.postgresql.database\" resource")
	}
}

// AzurermMysql resource interface
type AzurermMysql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzurermMysql for the azurerm.mysql resource
type mqlAzurermMysql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMysql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mysql resource
func newAzurermMysql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMysql{runtime.NewResource("azurerm.mysql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mysql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMysql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMysql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMysql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mysql].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mysql\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzurermMysql) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azurerm.mysql\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMysql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzurermMysql) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMysqlServer resource interface
type AzurermMysqlServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzurermMysqlServer for the azurerm.mysql.server resource
type mqlAzurermMysqlServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMysqlServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mysql.server resource
func newAzurermMysqlServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMysqlServer{runtime.NewResource("azurerm.mysql.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mysql.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMysqlServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.mysql.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMysqlServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMysqlServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mysql.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMysqlServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMysqlServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermMysqlServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermMysqlServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMysqlServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermMysqlServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.mysql.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzurermMysqlServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azurerm.mysql.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzurermMysqlServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azurerm.mysql.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzurermMysqlServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azurerm.mysql.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mysql.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMysqlServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzurermMysqlServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzurermMysqlServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzurermMysqlServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMysqlDatabase resource interface
type AzurermMysqlDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzurermMysqlDatabase for the azurerm.mysql.database resource
type mqlAzurermMysqlDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMysqlDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mysql.database resource
func newAzurermMysqlDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMysqlDatabase{runtime.NewResource("azurerm.mysql.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mysql.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mysql.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMysqlDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.mysql.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.mysql.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.mysql.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azurerm.mysql.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azurerm.mysql.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mysql.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mysql.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mysql.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMysqlDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mysql.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mysql.database\" resource")
	}
}

// AzurermMariadb resource interface
type AzurermMariadb interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Servers() ([]interface{}, error)
}

// mqlAzurermMariadb for the azurerm.mariadb resource
type mqlAzurermMariadb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMariadb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mariadb resource
func newAzurermMariadb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMariadb{runtime.NewResource("azurerm.mariadb")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "servers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb\", its \"servers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mariadb with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMariadb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMariadb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb].Register")
	switch name {
	case "servers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMariadb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb].Field")
	switch name {
	case "servers":
		return s.Servers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mariadb\" resource")
	}
}

// Servers accessor autogenerated
func (s *mqlAzurermMariadb) Servers() ([]interface{}, error) {
	res, ok := s.Cache.Load("servers")
	if !ok || !res.Valid {
		if err := s.ComputeServers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("servers")
		if !ok {
			return nil, errors.New("\"azurerm.mariadb\" calculated \"servers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "servers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb\" failed to cast field \"servers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMariadb) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb].Compute")
	switch name {
	case "servers":
		return s.ComputeServers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb\" resource")
	}
}

// ComputeServers computer autogenerated
func (s *mqlAzurermMariadb) ComputeServers() error {
	var err error
	if _, ok := s.Cache.Load("servers"); ok {
		return nil
	}
	vres, err := s.GetServers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("servers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMariadbServer resource interface
type AzurermMariadbServer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	Type() (string, error)
	Properties() (interface{}, error)
	Configuration() ([]interface{}, error)
	Databases() ([]interface{}, error)
	FirewallRules() ([]interface{}, error)
}

// mqlAzurermMariadbServer for the azurerm.mariadb.server resource
type mqlAzurermMariadbServer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMariadbServer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mariadb.server resource
func newAzurermMariadbServer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMariadbServer{runtime.NewResource("azurerm.mariadb.server")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "configuration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"configuration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewallRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"firewallRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.server\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mariadb.server with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMariadbServer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.server\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMariadbServer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.server].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return nil
	case "databases":
		return nil
	case "firewallRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb.server\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMariadbServer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.server].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "configuration":
		return s.Configuration()
	case "databases":
		return s.Databases()
	case "firewallRules":
		return s.FirewallRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mariadb.server\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMariadbServer) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMariadbServer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermMariadbServer) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermMariadbServer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMariadbServer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermMariadbServer) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.mariadb.server\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAzurermMariadbServer) Configuration() ([]interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"azurerm.mariadb.server\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"configuration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlAzurermMariadbServer) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"azurerm.mariadb.server\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// FirewallRules accessor autogenerated
func (s *mqlAzurermMariadbServer) FirewallRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewallRules")
	if !ok || !res.Valid {
		if err := s.ComputeFirewallRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewallRules")
		if !ok {
			return nil, errors.New("\"azurerm.mariadb.server\" calculated \"firewallRules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewallRules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.mariadb.server\" failed to cast field \"firewallRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMariadbServer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.server].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "configuration":
		return s.ComputeConfiguration()
	case "databases":
		return s.ComputeDatabases()
	case "firewallRules":
		return s.ComputeFirewallRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb.server\" resource")
	}
}

// ComputeConfiguration computer autogenerated
func (s *mqlAzurermMariadbServer) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDatabases computer autogenerated
func (s *mqlAzurermMariadbServer) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewallRules computer autogenerated
func (s *mqlAzurermMariadbServer) ComputeFirewallRules() error {
	var err error
	if _, ok := s.Cache.Load("firewallRules"); ok {
		return nil
	}
	vres, err := s.GetFirewallRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewallRules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMariadbDatabase resource interface
type AzurermMariadbDatabase interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Charset() (string, error)
	Collation() (string, error)
}

// mqlAzurermMariadbDatabase for the azurerm.mariadb.database resource
type mqlAzurermMariadbDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMariadbDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.mariadb.database resource
func newAzurermMariadbDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMariadbDatabase{runtime.NewResource("azurerm.mariadb.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.mariadb.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.mariadb.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMariadbDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.database\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.database\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"azurerm.mariadb.database\" resource without a \"collation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.database].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.database].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.mariadb.database\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.database\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.database\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.database\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.database\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.mariadb.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.mariadb.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMariadbDatabase) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.mariadb.database].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.mariadb.database\" resource")
	}
}

// AzurermSqlConfiguration resource interface
type AzurermSqlConfiguration interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Value() (string, error)
	Description() (string, error)
	DefaultValue() (string, error)
	DataType() (string, error)
	AllowedValues() (string, error)
	Source() (string, error)
}

// mqlAzurermSqlConfiguration for the azurerm.sql.configuration resource
type mqlAzurermSqlConfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlConfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.configuration resource
func newAzurermSqlConfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlConfiguration{runtime.NewResource("azurerm.sql.configuration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "defaultValue":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"defaultValue\" argument has the wrong type (expected type \"string\")")
			}
		case "dataType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"dataType\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedValues":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"allowedValues\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"source\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.configuration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.configuration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlConfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultValue"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"defaultValue\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataType"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"dataType\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedValues"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"allowedValues\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"azurerm.sql.configuration\" resource without a \"source\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.configuration].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.configuration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.configuration].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "value":
		return s.Value()
	case "description":
		return s.Description()
	case "defaultValue":
		return s.DefaultValue()
	case "dataType":
		return s.DataType()
	case "allowedValues":
		return s.AllowedValues()
	case "source":
		return s.Source()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.configuration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DefaultValue accessor autogenerated
func (s *mqlAzurermSqlConfiguration) DefaultValue() (string, error) {
	res, ok := s.Cache.Load("defaultValue")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"defaultValue\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"defaultValue\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DataType accessor autogenerated
func (s *mqlAzurermSqlConfiguration) DataType() (string, error) {
	res, ok := s.Cache.Load("dataType")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"dataType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"dataType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedValues accessor autogenerated
func (s *mqlAzurermSqlConfiguration) AllowedValues() (string, error) {
	res, ok := s.Cache.Load("allowedValues")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"allowedValues\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"allowedValues\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Source() (string, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.configuration\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.configuration\" failed to cast field \"source\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlConfiguration) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.configuration].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "value":
		return nil
	case "description":
		return nil
	case "defaultValue":
		return nil
	case "dataType":
		return nil
	case "allowedValues":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.configuration\" resource")
	}
}

// AzurermSqlFirewallrule resource interface
type AzurermSqlFirewallrule interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	StartIpAddress() (string, error)
	EndIpAddress() (string, error)
}

// mqlAzurermSqlFirewallrule for the azurerm.sql.firewallrule resource
type mqlAzurermSqlFirewallrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermSqlFirewallrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.sql.firewallrule resource
func newAzurermSqlFirewallrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermSqlFirewallrule{runtime.NewResource("azurerm.sql.firewallrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "startIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"startIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "endIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"endIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.sql.firewallrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.sql.firewallrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermSqlFirewallrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.sql.firewallrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.sql.firewallrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.sql.firewallrule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("startIpAddress"); !ok {
		return errors.New("Initialized \"azurerm.sql.firewallrule\" resource without a \"startIpAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("endIpAddress"); !ok {
		return errors.New("Initialized \"azurerm.sql.firewallrule\" resource without a \"endIpAddress\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.firewallrule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.firewallrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.sql.firewallrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "startIpAddress":
		return s.StartIpAddress()
	case "endIpAddress":
		return s.EndIpAddress()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.sql.firewallrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.firewallrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.firewallrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.firewallrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.firewallrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.firewallrule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.firewallrule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartIpAddress accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) StartIpAddress() (string, error) {
	res, ok := s.Cache.Load("startIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.firewallrule\" failed: no value provided for static field \"startIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.firewallrule\" failed to cast field \"startIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndIpAddress accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) EndIpAddress() (string, error) {
	res, ok := s.Cache.Load("endIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.sql.firewallrule\" failed: no value provided for static field \"endIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.sql.firewallrule\" failed to cast field \"endIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermSqlFirewallrule) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.sql.firewallrule].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "startIpAddress":
		return nil
	case "endIpAddress":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.sql.firewallrule\" resource")
	}
}

// AzurermKeyvault resource interface
type AzurermKeyvault interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vaults() ([]interface{}, error)
}

// mqlAzurermKeyvault for the azurerm.keyvault resource
type mqlAzurermKeyvault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermKeyvault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.keyvault resource
func newAzurermKeyvault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermKeyvault{runtime.NewResource("azurerm.keyvault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vaults":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault\", its \"vaults\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.keyvault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermKeyvault) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermKeyvault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault].Register")
	switch name {
	case "vaults":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermKeyvault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault].Field")
	switch name {
	case "vaults":
		return s.Vaults()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.keyvault\" resource")
	}
}

// Vaults accessor autogenerated
func (s *mqlAzurermKeyvault) Vaults() ([]interface{}, error) {
	res, ok := s.Cache.Load("vaults")
	if !ok || !res.Valid {
		if err := s.ComputeVaults(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vaults")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault\" calculated \"vaults\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaults")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault\" failed to cast field \"vaults\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermKeyvault) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault].Compute")
	switch name {
	case "vaults":
		return s.ComputeVaults()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault\" resource")
	}
}

// ComputeVaults computer autogenerated
func (s *mqlAzurermKeyvault) ComputeVaults() error {
	var err error
	if _, ok := s.Cache.Load("vaults"); ok {
		return nil
	}
	vres, err := s.GetVaults()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaults", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermKeyvaultVault resource interface
type AzurermKeyvaultVault interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	VaultName() (string, error)
	Type() (string, error)
	Location() (string, error)
	Tags() (map[string]interface{}, error)
	VaultUri() (string, error)
	Properties() (interface{}, error)
	Keys() ([]interface{}, error)
	Certificates() ([]interface{}, error)
	Secrets() ([]interface{}, error)
	DiagnosticSettings() ([]interface{}, error)
}

// mqlAzurermKeyvaultVault for the azurerm.keyvault.vault resource
type mqlAzurermKeyvaultVault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermKeyvaultVault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.keyvault.vault resource
func newAzurermKeyvaultVault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermKeyvaultVault{runtime.NewResource("azurerm.keyvault.vault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "vaultName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"vaultName\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "vaultUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"vaultUri\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diagnosticSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"diagnosticSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.vault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.keyvault.vault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermKeyvaultVault) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.vault\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("vaultName"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.vault\" resource without a \"vaultName\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.vault\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.vault\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.vault\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.vault].Register")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return nil
	case "properties":
		return nil
	case "keys":
		return nil
	case "certificates":
		return nil
	case "secrets":
		return nil
	case "diagnosticSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.vault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.vault].Field")
	switch name {
	case "id":
		return s.Id()
	case "vaultName":
		return s.VaultName()
	case "type":
		return s.Type()
	case "location":
		return s.Location()
	case "tags":
		return s.Tags()
	case "vaultUri":
		return s.VaultUri()
	case "properties":
		return s.Properties()
	case "keys":
		return s.Keys()
	case "certificates":
		return s.Certificates()
	case "secrets":
		return s.Secrets()
	case "diagnosticSettings":
		return s.DiagnosticSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.keyvault.vault\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.vault\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VaultName accessor autogenerated
func (s *mqlAzurermKeyvaultVault) VaultName() (string, error) {
	res, ok := s.Cache.Load("vaultName")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.vault\" failed: no value provided for static field \"vaultName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"vaultName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.vault\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.vault\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.vault\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// VaultUri accessor autogenerated
func (s *mqlAzurermKeyvaultVault) VaultUri() (string, error) {
	res, ok := s.Cache.Load("vaultUri")
	if !ok || !res.Valid {
		if err := s.ComputeVaultUri(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("vaultUri")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.vault\" calculated \"vaultUri\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaultUri")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"vaultUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.vault\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Keys accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.vault\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.vault\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.vault\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiagnosticSettings accessor autogenerated
func (s *mqlAzurermKeyvaultVault) DiagnosticSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("diagnosticSettings")
	if !ok || !res.Valid {
		if err := s.ComputeDiagnosticSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("diagnosticSettings")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.vault\" calculated \"diagnosticSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "diagnosticSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.vault\" failed to cast field \"diagnosticSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermKeyvaultVault) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.vault].Compute")
	switch name {
	case "id":
		return nil
	case "vaultName":
		return nil
	case "type":
		return nil
	case "location":
		return nil
	case "tags":
		return nil
	case "vaultUri":
		return s.ComputeVaultUri()
	case "properties":
		return s.ComputeProperties()
	case "keys":
		return s.ComputeKeys()
	case "certificates":
		return s.ComputeCertificates()
	case "secrets":
		return s.ComputeSecrets()
	case "diagnosticSettings":
		return s.ComputeDiagnosticSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.vault\" resource")
	}
}

// ComputeVaultUri computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeVaultUri() error {
	var err error
	if _, ok := s.Cache.Load("vaultUri"); ok {
		return nil
	}
	vres, err := s.GetVaultUri()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaultUri", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProperties computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeys computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCertificates computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecrets computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDiagnosticSettings computer autogenerated
func (s *mqlAzurermKeyvaultVault) ComputeDiagnosticSettings() error {
	var err error
	if _, ok := s.Cache.Load("diagnosticSettings"); ok {
		return nil
	}
	vres, err := s.GetDiagnosticSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("diagnosticSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermKeyvaultKey resource interface
type AzurermKeyvaultKey interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Kid() (string, error)
	Tags() (map[string]interface{}, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	KeyName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzurermKeyvaultKey for the azurerm.keyvault.key resource
type mqlAzurermKeyvaultKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermKeyvaultKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.keyvault.key resource
func newAzurermKeyvaultKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermKeyvaultKey{runtime.NewResource("azurerm.keyvault.key")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "kid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"kid\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "keyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"keyName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.keyvault.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermKeyvaultKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("kid"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"kid\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.key\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.key].Register")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.key].Field")
	switch name {
	case "kid":
		return s.Kid()
	case "tags":
		return s.Tags()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "keyName":
		return s.KeyName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.keyvault.key\" resource")
	}
}

// Kid accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Kid() (string, error) {
	res, ok := s.Cache.Load("kid")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"kid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"kid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzurermKeyvaultKey) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzurermKeyvaultKey) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.key\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyName accessor autogenerated
func (s *mqlAzurermKeyvaultKey) KeyName() (string, error) {
	res, ok := s.Cache.Load("keyName")
	if !ok || !res.Valid {
		if err := s.ComputeKeyName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("keyName")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.key\" calculated \"keyName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"keyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.key\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.key\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.key\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermKeyvaultKey) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.key].Compute")
	switch name {
	case "kid":
		return nil
	case "tags":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "keyName":
		return s.ComputeKeyName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.key\" resource")
	}
}

// ComputeKeyName computer autogenerated
func (s *mqlAzurermKeyvaultKey) ComputeKeyName() error {
	var err error
	if _, ok := s.Cache.Load("keyName"); ok {
		return nil
	}
	vres, err := s.GetKeyName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzurermKeyvaultKey) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzurermKeyvaultKey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermKeyvaultCertificate resource interface
type AzurermKeyvaultCertificate interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	X5t() (string, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	RecoveryLevel() (string, error)
	CertName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzurermKeyvaultCertificate for the azurerm.keyvault.certificate resource
type mqlAzurermKeyvaultCertificate struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermKeyvaultCertificate) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.keyvault.certificate resource
func newAzurermKeyvaultCertificate(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermKeyvaultCertificate{runtime.NewResource("azurerm.keyvault.certificate")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "x5t":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"x5t\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recoveryLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"recoveryLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "certName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"certName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.certificate\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.keyvault.certificate with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermKeyvaultCertificate) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("x5t"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"x5t\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryLevel"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.certificate\" resource without a \"recoveryLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.certificate].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.certificate\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.certificate].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "x5t":
		return s.X5t()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "recoveryLevel":
		return s.RecoveryLevel()
	case "certName":
		return s.CertName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.keyvault.certificate\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// X5t accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) X5t() (string, error) {
	res, ok := s.Cache.Load("x5t")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"x5t\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"x5t\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecoveryLevel accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) RecoveryLevel() (string, error) {
	res, ok := s.Cache.Load("recoveryLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.certificate\" failed: no value provided for static field \"recoveryLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"recoveryLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertName accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) CertName() (string, error) {
	res, ok := s.Cache.Load("certName")
	if !ok || !res.Valid {
		if err := s.ComputeCertName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("certName")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.certificate\" calculated \"certName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"certName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.certificate\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.certificate\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.certificate\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermKeyvaultCertificate) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.certificate].Compute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "x5t":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "recoveryLevel":
		return nil
	case "certName":
		return s.ComputeCertName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.certificate\" resource")
	}
}

// ComputeCertName computer autogenerated
func (s *mqlAzurermKeyvaultCertificate) ComputeCertName() error {
	var err error
	if _, ok := s.Cache.Load("certName"); ok {
		return nil
	}
	vres, err := s.GetCertName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzurermKeyvaultCertificate) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzurermKeyvaultCertificate) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermKeyvaultSecret resource interface
type AzurermKeyvaultSecret interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Tags() (map[string]interface{}, error)
	ContentType() (string, error)
	Managed() (bool, error)
	Enabled() (bool, error)
	NotBefore() (*time.Time, error)
	Expires() (*time.Time, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	SecretName() (string, error)
	Version() (string, error)
	Versions() ([]interface{}, error)
}

// mqlAzurermKeyvaultSecret for the azurerm.keyvault.secret resource
type mqlAzurermKeyvaultSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermKeyvaultSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.keyvault.secret resource
func newAzurermKeyvaultSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermKeyvaultSecret{runtime.NewResource("azurerm.keyvault.secret")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "contentType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"contentType\" argument has the wrong type (expected type \"string\")")
			}
		case "managed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"managed\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "secretName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"secretName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.keyvault.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.keyvault.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermKeyvaultSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("contentType"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"contentType\". This field is required.")
	}
	if _, ok := s.Cache.Load("managed"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"managed\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"azurerm.keyvault.secret\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.secret].Register")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return nil
	case "version":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.secret].Field")
	switch name {
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	case "contentType":
		return s.ContentType()
	case "managed":
		return s.Managed()
	case "enabled":
		return s.Enabled()
	case "notBefore":
		return s.NotBefore()
	case "expires":
		return s.Expires()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "secretName":
		return s.SecretName()
	case "version":
		return s.Version()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.keyvault.secret\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ContentType accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) ContentType() (string, error) {
	res, ok := s.Cache.Load("contentType")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"contentType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"contentType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Managed accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Managed() (bool, error) {
	res, ok := s.Cache.Load("managed")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"managed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"managed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.keyvault.secret\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// SecretName accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) SecretName() (string, error) {
	res, ok := s.Cache.Load("secretName")
	if !ok || !res.Valid {
		if err := s.ComputeSecretName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("secretName")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.secret\" calculated \"secretName\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secretName")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"secretName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"azurerm.keyvault.secret\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"azurerm.keyvault.secret\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.keyvault.secret\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermKeyvaultSecret) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.keyvault.secret].Compute")
	switch name {
	case "id":
		return nil
	case "tags":
		return nil
	case "contentType":
		return nil
	case "managed":
		return nil
	case "enabled":
		return nil
	case "notBefore":
		return nil
	case "expires":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "secretName":
		return s.ComputeSecretName()
	case "version":
		return s.ComputeVersion()
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.keyvault.secret\" resource")
	}
}

// ComputeSecretName computer autogenerated
func (s *mqlAzurermKeyvaultSecret) ComputeSecretName() error {
	var err error
	if _, ok := s.Cache.Load("secretName"); ok {
		return nil
	}
	vres, err := s.GetSecretName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secretName", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersion computer autogenerated
func (s *mqlAzurermKeyvaultSecret) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAzurermKeyvaultSecret) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMonitor resource interface
type AzurermMonitor interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	LogProfiles() ([]interface{}, error)
}

// mqlAzurermMonitor for the azurerm.monitor resource
type mqlAzurermMonitor struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMonitor) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.monitor resource
func newAzurermMonitor(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMonitor{runtime.NewResource("azurerm.monitor")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "logProfiles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor\", its \"logProfiles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.monitor with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMonitor) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMonitor) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor].Register")
	switch name {
	case "logProfiles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMonitor) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.monitor].Field")
	switch name {
	case "logProfiles":
		return s.LogProfiles()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.monitor\" resource")
	}
}

// LogProfiles accessor autogenerated
func (s *mqlAzurermMonitor) LogProfiles() ([]interface{}, error) {
	res, ok := s.Cache.Load("logProfiles")
	if !ok || !res.Valid {
		if err := s.ComputeLogProfiles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logProfiles")
		if !ok {
			return nil, errors.New("\"azurerm.monitor\" calculated \"logProfiles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logProfiles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor\" failed to cast field \"logProfiles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMonitor) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor].Compute")
	switch name {
	case "logProfiles":
		return s.ComputeLogProfiles()
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor\" resource")
	}
}

// ComputeLogProfiles computer autogenerated
func (s *mqlAzurermMonitor) ComputeLogProfiles() error {
	var err error
	if _, ok := s.Cache.Load("logProfiles"); ok {
		return nil
	}
	vres, err := s.GetLogProfiles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logProfiles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AzurermMonitorLogprofile resource interface
type AzurermMonitorLogprofile interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Location() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Properties() (interface{}, error)
	StorageAccount() (AzurermStorageAccount, error)
}

// mqlAzurermMonitorLogprofile for the azurerm.monitor.logprofile resource
type mqlAzurermMonitorLogprofile struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMonitorLogprofile) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.monitor.logprofile resource
func newAzurermMonitorLogprofile(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMonitorLogprofile{runtime.NewResource("azurerm.monitor.logprofile")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzurermStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"storageAccount\" argument has the wrong type (expected type \"AzurermStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.logprofile\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.monitor.logprofile with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMonitorLogprofile) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azurerm.monitor.logprofile\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.logprofile].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor.logprofile\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.logprofile].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.monitor.logprofile\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) StorageAccount() (AzurermStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.monitor.logprofile\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor.logprofile\" failed to cast field \"storageAccount\" to the right type (AzurermStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMonitorLogprofile) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.logprofile].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor.logprofile\" resource")
	}
}

// AzurermMonitorDiagnosticsetting resource interface
type AzurermMonitorDiagnosticsetting interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Type() (string, error)
	Properties() (interface{}, error)
	StorageAccount() (AzurermStorageAccount, error)
}

// mqlAzurermMonitorDiagnosticsetting for the azurerm.monitor.diagnosticsetting resource
type mqlAzurermMonitorDiagnosticsetting struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAzurermMonitorDiagnosticsetting) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the azurerm.monitor.diagnosticsetting resource
func newAzurermMonitorDiagnosticsetting(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAzurermMonitorDiagnosticsetting{runtime.NewResource("azurerm.monitor.diagnosticsetting")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAccount":
			if _, ok := val.(AzurermStorageAccount); !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"storageAccount\" argument has the wrong type (expected type \"AzurermStorageAccount\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"azurerm.monitor.diagnosticsetting\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized azurerm.monitor.diagnosticsetting with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAzurermMonitorDiagnosticsetting) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"azurerm.monitor.diagnosticsetting\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"azurerm.monitor.diagnosticsetting\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"azurerm.monitor.diagnosticsetting\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"azurerm.monitor.diagnosticsetting\" resource without a \"properties\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAccount"); !ok {
		return errors.New("Initialized \"azurerm.monitor.diagnosticsetting\" resource without a \"storageAccount\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Register(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.diagnosticsetting].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor.diagnosticsetting\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.diagnosticsetting].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "properties":
		return s.Properties()
	case "storageAccount":
		return s.StorageAccount()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"azurerm.monitor.diagnosticsetting\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.diagnosticsetting\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.diagnosticsetting\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.diagnosticsetting\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.diagnosticsetting\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"azurerm.monitor.diagnosticsetting\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"azurerm.monitor.diagnosticsetting\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.monitor.diagnosticsetting\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor.diagnosticsetting\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAccount accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) StorageAccount() (AzurermStorageAccount, error) {
	res, ok := s.Cache.Load("storageAccount")
	if !ok || !res.Valid {
		return nil, errors.New("\"azurerm.monitor.diagnosticsetting\" failed: no value provided for static field \"storageAccount\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AzurermStorageAccount)
	if !ok {
		return nil, fmt.Errorf("\"azurerm.monitor.diagnosticsetting\" failed to cast field \"storageAccount\" to the right type (AzurermStorageAccount): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAzurermMonitorDiagnosticsetting) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[azurerm.monitor.diagnosticsetting].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "properties":
		return nil
	case "storageAccount":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"azurerm.monitor.diagnosticsetting\" resource")
	}
}

