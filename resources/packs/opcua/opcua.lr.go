// Code generated by resources. DO NOT EDIT.
package opcua

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("opcua", newOpcua)
	registry.AddFactory("opcua.namespace", newOpcuaNamespace)
	registry.AddFactory("opcua.node", newOpcuaNode)
}

// Opcua resource interface
type Opcua interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespaces() ([]interface{}, error)
	Root() (OpcuaNode, error)
}

// mqlOpcua for the opcua resource
type mqlOpcua struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOpcua) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the opcua resource
func newOpcua(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOpcua{runtime.NewResource("opcua")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"opcua\", its \"namespaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "root":
			if _, ok := val.(OpcuaNode); !ok {
				return nil, errors.New("Failed to initialize \"opcua\", its \"root\" argument has the wrong type (expected type \"OpcuaNode\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"opcua\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized opcua with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOpcua) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOpcua) Register(name string) error {
	log.Trace().Str("field", name).Msg("[opcua].Register")
	switch name {
	case "namespaces":
		return nil
	case "root":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOpcua) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[opcua].Field")
	switch name {
	case "namespaces":
		return s.Namespaces()
	case "root":
		return s.Root()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"opcua\" resource")
	}
}

// Namespaces accessor autogenerated
func (s *mqlOpcua) Namespaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("namespaces")
	if !ok || !res.Valid {
		if err := s.ComputeNamespaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("namespaces")
		if !ok {
			return nil, errors.New("\"opcua\" calculated \"namespaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "namespaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"opcua\" failed to cast field \"namespaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Root accessor autogenerated
func (s *mqlOpcua) Root() (OpcuaNode, error) {
	res, ok := s.Cache.Load("root")
	if !ok || !res.Valid {
		if err := s.ComputeRoot(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("root")
		if !ok {
			return nil, errors.New("\"opcua\" calculated \"root\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "root")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(OpcuaNode)
	if !ok {
		return nil, fmt.Errorf("\"opcua\" failed to cast field \"root\" to the right type (OpcuaNode): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOpcua) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[opcua].MqlCompute")
	switch name {
	case "namespaces":
		return s.ComputeNamespaces()
	case "root":
		return s.ComputeRoot()
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua\" resource")
	}
}

// ComputeNamespaces computer autogenerated
func (s *mqlOpcua) ComputeNamespaces() error {
	var err error
	if _, ok := s.Cache.Load("namespaces"); ok {
		return nil
	}
	vres, err := s.GetNamespaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("namespaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoot computer autogenerated
func (s *mqlOpcua) ComputeRoot() error {
	var err error
	if _, ok := s.Cache.Load("root"); ok {
		return nil
	}
	vres, err := s.GetRoot()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("root", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OpcuaNamespace resource interface
type OpcuaNamespace interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (int64, error)
	Name() (string, error)
}

// mqlOpcuaNamespace for the opcua.namespace resource
type mqlOpcuaNamespace struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOpcuaNamespace) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the opcua.namespace resource
func newOpcuaNamespace(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOpcuaNamespace{runtime.NewResource("opcua.namespace")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"opcua.namespace\", its \"id\" argument has the wrong type (expected type \"int64\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.namespace\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"opcua.namespace\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized opcua.namespace with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOpcuaNamespace) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"opcua.namespace\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"opcua.namespace\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOpcuaNamespace) Register(name string) error {
	log.Trace().Str("field", name).Msg("[opcua.namespace].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua.namespace\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOpcuaNamespace) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[opcua.namespace].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"opcua.namespace\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOpcuaNamespace) Id() (int64, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return 0, errors.New("\"opcua.namespace\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"opcua.namespace\" failed to cast field \"id\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOpcuaNamespace) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.namespace\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.namespace\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOpcuaNamespace) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[opcua.namespace].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua.namespace\" resource")
	}
}

// OpcuaNode resource interface
type OpcuaNode interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Class() (string, error)
	Description() (string, error)
	Writeable() (bool, error)
	DataType() (string, error)
	Min() (string, error)
	Max() (string, error)
	Unit() (string, error)
	AccessLevel() (string, error)
	Properties() ([]interface{}, error)
	Components() ([]interface{}, error)
	Organizes() ([]interface{}, error)
}

// mqlOpcuaNode for the opcua.node resource
type mqlOpcuaNode struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOpcuaNode) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the opcua.node resource
func newOpcuaNode(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOpcuaNode{runtime.NewResource("opcua.node")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "class":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"class\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "writeable":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"writeable\" argument has the wrong type (expected type \"bool\")")
			}
		case "dataType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"dataType\" argument has the wrong type (expected type \"string\")")
			}
		case "min":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"min\" argument has the wrong type (expected type \"string\")")
			}
		case "max":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"max\" argument has the wrong type (expected type \"string\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "accessLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"accessLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "properties":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"properties\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "components":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"components\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "organizes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"organizes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"opcua.node\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized opcua.node with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOpcuaNode) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("class"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"class\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("writeable"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"writeable\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataType"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"dataType\". This field is required.")
	}
	if _, ok := s.Cache.Load("min"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"min\". This field is required.")
	}
	if _, ok := s.Cache.Load("max"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"max\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"unit\". This field is required.")
	}
	if _, ok := s.Cache.Load("accessLevel"); !ok {
		return errors.New("Initialized \"opcua.node\" resource without a \"accessLevel\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOpcuaNode) Register(name string) error {
	log.Trace().Str("field", name).Msg("[opcua.node].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "class":
		return nil
	case "description":
		return nil
	case "writeable":
		return nil
	case "dataType":
		return nil
	case "min":
		return nil
	case "max":
		return nil
	case "unit":
		return nil
	case "accessLevel":
		return nil
	case "properties":
		return nil
	case "components":
		return nil
	case "organizes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua.node\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOpcuaNode) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[opcua.node].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "class":
		return s.Class()
	case "description":
		return s.Description()
	case "writeable":
		return s.Writeable()
	case "dataType":
		return s.DataType()
	case "min":
		return s.Min()
	case "max":
		return s.Max()
	case "unit":
		return s.Unit()
	case "accessLevel":
		return s.AccessLevel()
	case "properties":
		return s.Properties()
	case "components":
		return s.Components()
	case "organizes":
		return s.Organizes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"opcua.node\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOpcuaNode) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOpcuaNode) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Class accessor autogenerated
func (s *mqlOpcuaNode) Class() (string, error) {
	res, ok := s.Cache.Load("class")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"class\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"class\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOpcuaNode) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Writeable accessor autogenerated
func (s *mqlOpcuaNode) Writeable() (bool, error) {
	res, ok := s.Cache.Load("writeable")
	if !ok || !res.Valid {
		return false, errors.New("\"opcua.node\" failed: no value provided for static field \"writeable\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"opcua.node\" failed to cast field \"writeable\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DataType accessor autogenerated
func (s *mqlOpcuaNode) DataType() (string, error) {
	res, ok := s.Cache.Load("dataType")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"dataType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"dataType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Min accessor autogenerated
func (s *mqlOpcuaNode) Min() (string, error) {
	res, ok := s.Cache.Load("min")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"min\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"min\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Max accessor autogenerated
func (s *mqlOpcuaNode) Max() (string, error) {
	res, ok := s.Cache.Load("max")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"max\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"max\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlOpcuaNode) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccessLevel accessor autogenerated
func (s *mqlOpcuaNode) AccessLevel() (string, error) {
	res, ok := s.Cache.Load("accessLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"opcua.node\" failed: no value provided for static field \"accessLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"opcua.node\" failed to cast field \"accessLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlOpcuaNode) Properties() ([]interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		if err := s.ComputeProperties(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("properties")
		if !ok {
			return nil, errors.New("\"opcua.node\" calculated \"properties\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "properties")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"opcua.node\" failed to cast field \"properties\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Components accessor autogenerated
func (s *mqlOpcuaNode) Components() ([]interface{}, error) {
	res, ok := s.Cache.Load("components")
	if !ok || !res.Valid {
		if err := s.ComputeComponents(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("components")
		if !ok {
			return nil, errors.New("\"opcua.node\" calculated \"components\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "components")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"opcua.node\" failed to cast field \"components\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Organizes accessor autogenerated
func (s *mqlOpcuaNode) Organizes() ([]interface{}, error) {
	res, ok := s.Cache.Load("organizes")
	if !ok || !res.Valid {
		if err := s.ComputeOrganizes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("organizes")
		if !ok {
			return nil, errors.New("\"opcua.node\" calculated \"organizes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "organizes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"opcua.node\" failed to cast field \"organizes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOpcuaNode) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[opcua.node].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "class":
		return nil
	case "description":
		return nil
	case "writeable":
		return nil
	case "dataType":
		return nil
	case "min":
		return nil
	case "max":
		return nil
	case "unit":
		return nil
	case "accessLevel":
		return nil
	case "properties":
		return s.ComputeProperties()
	case "components":
		return s.ComputeComponents()
	case "organizes":
		return s.ComputeOrganizes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"opcua.node\" resource")
	}
}

// ComputeProperties computer autogenerated
func (s *mqlOpcuaNode) ComputeProperties() error {
	var err error
	if _, ok := s.Cache.Load("properties"); ok {
		return nil
	}
	vres, err := s.GetProperties()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("properties", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeComponents computer autogenerated
func (s *mqlOpcuaNode) ComputeComponents() error {
	var err error
	if _, ok := s.Cache.Load("components"); ok {
		return nil
	}
	vres, err := s.GetComponents()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("components", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOrganizes computer autogenerated
func (s *mqlOpcuaNode) ComputeOrganizes() error {
	var err error
	if _, ok := s.Cache.Load("organizes"); ok {
		return nil
	}
	vres, err := s.GetOrganizes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("organizes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

