// Code generated by resources. DO NOT EDIT.
package aws

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
	"go.mondoo.com/cnquery/resources/packs/core"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("aws", newAws)
	registry.AddFactory("aws.accessAnalyzer", newAwsAccessAnalyzer)
	registry.AddFactory("aws.accessanalyzer.analyzer", newAwsAccessanalyzerAnalyzer)
	registry.AddFactory("aws.account", newAwsAccount)
	registry.AddFactory("aws.organization", newAwsOrganization)
	registry.AddFactory("aws.efs", newAwsEfs)
	registry.AddFactory("aws.efs.filesystem", newAwsEfsFilesystem)
	registry.AddFactory("aws.iam", newAwsIam)
	registry.AddFactory("aws.iam.usercredentialreportentry", newAwsIamUsercredentialreportentry)
	registry.AddFactory("aws.iam.user", newAwsIamUser)
	registry.AddFactory("aws.iam.policy", newAwsIamPolicy)
	registry.AddFactory("aws.iam.policyversion", newAwsIamPolicyversion)
	registry.AddFactory("aws.iam.role", newAwsIamRole)
	registry.AddFactory("aws.iam.group", newAwsIamGroup)
	registry.AddFactory("aws.iam.virtualmfadevice", newAwsIamVirtualmfadevice)
	registry.AddFactory("aws.sagemaker", newAwsSagemaker)
	registry.AddFactory("aws.sagemaker.notebookinstance", newAwsSagemakerNotebookinstance)
	registry.AddFactory("aws.sagemaker.notebookinstance.details", newAwsSagemakerNotebookinstanceDetails)
	registry.AddFactory("aws.sagemaker.endpoint", newAwsSagemakerEndpoint)
	registry.AddFactory("aws.sns", newAwsSns)
	registry.AddFactory("aws.sns.topic", newAwsSnsTopic)
	registry.AddFactory("aws.sns.subscription", newAwsSnsSubscription)
	registry.AddFactory("aws.es", newAwsEs)
	registry.AddFactory("aws.es.domain", newAwsEsDomain)
	registry.AddFactory("aws.acm", newAwsAcm)
	registry.AddFactory("aws.acm.certificate", newAwsAcmCertificate)
	registry.AddFactory("aws.autoscaling", newAwsAutoscaling)
	registry.AddFactory("aws.autoscaling.group", newAwsAutoscalingGroup)
	registry.AddFactory("aws.elb", newAwsElb)
	registry.AddFactory("aws.elb.loadbalancer", newAwsElbLoadbalancer)
	registry.AddFactory("aws.codebuild", newAwsCodebuild)
	registry.AddFactory("aws.codebuild.project", newAwsCodebuildProject)
	registry.AddFactory("aws.guardduty", newAwsGuardduty)
	registry.AddFactory("aws.guardduty.detector", newAwsGuarddutyDetector)
	registry.AddFactory("aws.securityhub", newAwsSecurityhub)
	registry.AddFactory("aws.securityhub.hub", newAwsSecurityhubHub)
	registry.AddFactory("aws.secretsmanager", newAwsSecretsmanager)
	registry.AddFactory("aws.secretsmanager.secret", newAwsSecretsmanagerSecret)
	registry.AddFactory("aws.ecs", newAwsEcs)
	registry.AddFactory("aws.ecs.cluster", newAwsEcsCluster)
	registry.AddFactory("aws.ecs.task", newAwsEcsTask)
	registry.AddFactory("aws.ecs.container", newAwsEcsContainer)
	registry.AddFactory("aws.emr", newAwsEmr)
	registry.AddFactory("aws.emr.cluster", newAwsEmrCluster)
	registry.AddFactory("aws.cloudwatch", newAwsCloudwatch)
	registry.AddFactory("aws.cloudwatch.metricsalarm", newAwsCloudwatchMetricsalarm)
	registry.AddFactory("aws.cloudwatch.metric", newAwsCloudwatchMetric)
	registry.AddFactory("aws.cloudwatch.metricdimension", newAwsCloudwatchMetricdimension)
	registry.AddFactory("aws.cloudwatch.metricstatistics", newAwsCloudwatchMetricstatistics)
	registry.AddFactory("aws.cloudwatch.metric.datapoint", newAwsCloudwatchMetricDatapoint)
	registry.AddFactory("aws.cloudwatch.loggroup", newAwsCloudwatchLoggroup)
	registry.AddFactory("aws.cloudwatch.loggroup.metricsfilter", newAwsCloudwatchLoggroupMetricsfilter)
	registry.AddFactory("aws.cloudtrail", newAwsCloudtrail)
	registry.AddFactory("aws.cloudfront", newAwsCloudfront)
	registry.AddFactory("aws.cloudfront.distribution", newAwsCloudfrontDistribution)
	registry.AddFactory("aws.cloudfront.distribution.origin", newAwsCloudfrontDistributionOrigin)
	registry.AddFactory("aws.cloudfront.function", newAwsCloudfrontFunction)
	registry.AddFactory("aws.cloudtrail.trail", newAwsCloudtrailTrail)
	registry.AddFactory("aws.kms", newAwsKms)
	registry.AddFactory("aws.kms.key", newAwsKmsKey)
	registry.AddFactory("aws.s3", newAwsS3)
	registry.AddFactory("aws.s3control", newAwsS3control)
	registry.AddFactory("aws.s3.bucket", newAwsS3Bucket)
	registry.AddFactory("aws.s3.bucket.grant", newAwsS3BucketGrant)
	registry.AddFactory("aws.s3.bucket.corsrule", newAwsS3BucketCorsrule)
	registry.AddFactory("aws.s3.bucket.policy", newAwsS3BucketPolicy)
	registry.AddFactory("aws.applicationAutoscaling", newAwsApplicationAutoscaling)
	registry.AddFactory("aws.applicationautoscaling.target", newAwsApplicationautoscalingTarget)
	registry.AddFactory("aws.backup", newAwsBackup)
	registry.AddFactory("aws.backup.vault", newAwsBackupVault)
	registry.AddFactory("aws.backup.vaultRecoveryPoint", newAwsBackupVaultRecoveryPoint)
	registry.AddFactory("aws.dynamodb", newAwsDynamodb)
	registry.AddFactory("aws.dynamodb.limit", newAwsDynamodbLimit)
	registry.AddFactory("aws.dynamodb.globaltable", newAwsDynamodbGlobaltable)
	registry.AddFactory("aws.dynamodb.table", newAwsDynamodbTable)
	registry.AddFactory("aws.rds", newAwsRds)
	registry.AddFactory("aws.rds.dbcluster", newAwsRdsDbcluster)
	registry.AddFactory("aws.rds.snapshot", newAwsRdsSnapshot)
	registry.AddFactory("aws.rds.dbinstance", newAwsRdsDbinstance)
	registry.AddFactory("aws.elasticache", newAwsElasticache)
	registry.AddFactory("aws.redshift", newAwsRedshift)
	registry.AddFactory("aws.redshift.cluster", newAwsRedshiftCluster)
	registry.AddFactory("aws.ecr", newAwsEcr)
	registry.AddFactory("aws.ecr.repository", newAwsEcrRepository)
	registry.AddFactory("aws.ecr.image", newAwsEcrImage)
	registry.AddFactory("aws.dms", newAwsDms)
	registry.AddFactory("aws.apigateway", newAwsApigateway)
	registry.AddFactory("aws.apigateway.restapi", newAwsApigatewayRestapi)
	registry.AddFactory("aws.apigateway.stage", newAwsApigatewayStage)
	registry.AddFactory("aws.lambda", newAwsLambda)
	registry.AddFactory("aws.lambda.function", newAwsLambdaFunction)
	registry.AddFactory("aws.ssm", newAwsSsm)
	registry.AddFactory("aws.ssm.instance", newAwsSsmInstance)
	registry.AddFactory("aws.ec2", newAwsEc2)
	registry.AddFactory("aws.ec2.networkacl", newAwsEc2Networkacl)
	registry.AddFactory("aws.ec2.networkacl.entry", newAwsEc2NetworkaclEntry)
	registry.AddFactory("aws.ec2.networkacl.entry.portrange", newAwsEc2NetworkaclEntryPortrange)
	registry.AddFactory("aws.ec2.vpnconnection", newAwsEc2Vpnconnection)
	registry.AddFactory("aws.ec2.vgwtelemetry", newAwsEc2Vgwtelemetry)
	registry.AddFactory("aws.ec2.internetgateway", newAwsEc2Internetgateway)
	registry.AddFactory("aws.ec2.snapshot", newAwsEc2Snapshot)
	registry.AddFactory("aws.ec2.volume", newAwsEc2Volume)
	registry.AddFactory("aws.ec2.instance", newAwsEc2Instance)
	registry.AddFactory("aws.ec2.keypair", newAwsEc2Keypair)
	registry.AddFactory("aws.ec2.image", newAwsEc2Image)
	registry.AddFactory("aws.ec2.instance.device", newAwsEc2InstanceDevice)
	registry.AddFactory("aws.vpc", newAwsVpc)
	registry.AddFactory("aws.vpc.flowlog", newAwsVpcFlowlog)
	registry.AddFactory("aws.vpc.routetable", newAwsVpcRoutetable)
	registry.AddFactory("aws.ec2.securitygroup", newAwsEc2Securitygroup)
	registry.AddFactory("aws.ec2.securitygroup.ippermission", newAwsEc2SecuritygroupIppermission)
	registry.AddFactory("aws.config", newAwsConfig)
	registry.AddFactory("aws.config.rule", newAwsConfigRule)
	registry.AddFactory("aws.config.recorder", newAwsConfigRecorder)
	registry.AddFactory("aws.eks", newAwsEks)
	registry.AddFactory("aws.eks.cluster", newAwsEksCluster)
}

// Aws resource interface
type Aws interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vpcs() ([]interface{}, error)
	Regions() ([]interface{}, error)
}

// mqlAws for the aws resource
type mqlAws struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAws) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws resource
func newAws(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAws{runtime.NewResource("aws")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vpcs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws\", its \"vpcs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "regions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws\", its \"regions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAws) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAws) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws].Register")
	switch name {
	case "vpcs":
		return nil
	case "regions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAws) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws].Field")
	switch name {
	case "vpcs":
		return s.Vpcs()
	case "regions":
		return s.Regions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws\" resource")
	}
}

// Vpcs accessor autogenerated
func (s *mqlAws) Vpcs() ([]interface{}, error) {
	res, ok := s.Cache.Load("vpcs")
	if !ok || !res.Valid {
		if err := s.ComputeVpcs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vpcs")
		if !ok {
			return nil, errors.New("\"aws\" calculated \"vpcs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vpcs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws\" failed to cast field \"vpcs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Regions accessor autogenerated
func (s *mqlAws) Regions() ([]interface{}, error) {
	res, ok := s.Cache.Load("regions")
	if !ok || !res.Valid {
		if err := s.ComputeRegions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("regions")
		if !ok {
			return nil, errors.New("\"aws\" calculated \"regions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "regions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws\" failed to cast field \"regions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAws) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws].MqlCompute")
	switch name {
	case "vpcs":
		return s.ComputeVpcs()
	case "regions":
		return s.ComputeRegions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws\" resource")
	}
}

// ComputeVpcs computer autogenerated
func (s *mqlAws) ComputeVpcs() error {
	var err error
	if _, ok := s.Cache.Load("vpcs"); ok {
		return nil
	}
	vres, err := s.GetVpcs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vpcs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRegions computer autogenerated
func (s *mqlAws) ComputeRegions() error {
	var err error
	if _, ok := s.Cache.Load("regions"); ok {
		return nil
	}
	vres, err := s.GetRegions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("regions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsAccessAnalyzer resource interface
type AwsAccessAnalyzer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Analyzers() ([]interface{}, error)
}

// mqlAwsAccessAnalyzer for the aws.accessAnalyzer resource
type mqlAwsAccessAnalyzer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAccessAnalyzer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.accessAnalyzer resource
func newAwsAccessAnalyzer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAccessAnalyzer{runtime.NewResource("aws.accessAnalyzer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "analyzers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessAnalyzer\", its \"analyzers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.accessAnalyzer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.accessAnalyzer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAccessAnalyzer) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAccessAnalyzer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.accessAnalyzer].Register")
	switch name {
	case "analyzers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.accessAnalyzer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAccessAnalyzer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.accessAnalyzer].Field")
	switch name {
	case "analyzers":
		return s.Analyzers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.accessAnalyzer\" resource")
	}
}

// Analyzers accessor autogenerated
func (s *mqlAwsAccessAnalyzer) Analyzers() ([]interface{}, error) {
	res, ok := s.Cache.Load("analyzers")
	if !ok || !res.Valid {
		if err := s.ComputeAnalyzers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("analyzers")
		if !ok {
			return nil, errors.New("\"aws.accessAnalyzer\" calculated \"analyzers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "analyzers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.accessAnalyzer\" failed to cast field \"analyzers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAccessAnalyzer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.accessAnalyzer].MqlCompute")
	switch name {
	case "analyzers":
		return s.ComputeAnalyzers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.accessAnalyzer\" resource")
	}
}

// ComputeAnalyzers computer autogenerated
func (s *mqlAwsAccessAnalyzer) ComputeAnalyzers() error {
	var err error
	if _, ok := s.Cache.Load("analyzers"); ok {
		return nil
	}
	vres, err := s.GetAnalyzers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("analyzers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsAccessanalyzerAnalyzer resource interface
type AwsAccessanalyzerAnalyzer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Status() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsAccessanalyzerAnalyzer for the aws.accessanalyzer.analyzer resource
type mqlAwsAccessanalyzerAnalyzer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAccessanalyzerAnalyzer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.accessanalyzer.analyzer resource
func newAwsAccessanalyzerAnalyzer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAccessanalyzerAnalyzer{runtime.NewResource("aws.accessanalyzer.analyzer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.accessanalyzer.analyzer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.accessanalyzer.analyzer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAccessanalyzerAnalyzer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.accessanalyzer.analyzer\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.accessanalyzer.analyzer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.accessanalyzer.analyzer\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"aws.accessanalyzer.analyzer\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.accessanalyzer.analyzer\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.accessanalyzer.analyzer].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.accessanalyzer.analyzer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.accessanalyzer.analyzer].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "status":
		return s.Status()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.accessanalyzer.analyzer\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.accessanalyzer.analyzer\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.accessanalyzer.analyzer\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.accessanalyzer.analyzer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.accessanalyzer.analyzer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.accessanalyzer.analyzer\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.accessanalyzer.analyzer\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.accessanalyzer.analyzer\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.accessanalyzer.analyzer\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.accessanalyzer.analyzer\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.accessanalyzer.analyzer\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAccessanalyzerAnalyzer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.accessanalyzer.analyzer].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.accessanalyzer.analyzer\" resource")
	}
}

// AwsAccount resource interface
type AwsAccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Aliases() ([]interface{}, error)
	Organization() (AwsOrganization, error)
}

// mqlAwsAccount for the aws.account resource
type mqlAwsAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.account resource
func newAwsAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAccount{runtime.NewResource("aws.account")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.account\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "aliases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.account\", its \"aliases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "organization":
			if _, ok := val.(AwsOrganization); !ok {
				return nil, errors.New("Failed to initialize \"aws.account\", its \"organization\" argument has the wrong type (expected type \"AwsOrganization\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.account\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.account with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAccount) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.account].Register")
	switch name {
	case "id":
		return nil
	case "aliases":
		return nil
	case "organization":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.account\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.account].Field")
	switch name {
	case "id":
		return s.Id()
	case "aliases":
		return s.Aliases()
	case "organization":
		return s.Organization()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.account\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsAccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"aws.account\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.account\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Aliases accessor autogenerated
func (s *mqlAwsAccount) Aliases() ([]interface{}, error) {
	res, ok := s.Cache.Load("aliases")
	if !ok || !res.Valid {
		if err := s.ComputeAliases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("aliases")
		if !ok {
			return nil, errors.New("\"aws.account\" calculated \"aliases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "aliases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.account\" failed to cast field \"aliases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Organization accessor autogenerated
func (s *mqlAwsAccount) Organization() (AwsOrganization, error) {
	res, ok := s.Cache.Load("organization")
	if !ok || !res.Valid {
		if err := s.ComputeOrganization(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("organization")
		if !ok {
			return nil, errors.New("\"aws.account\" calculated \"organization\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "organization")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsOrganization)
	if !ok {
		return nil, fmt.Errorf("\"aws.account\" failed to cast field \"organization\" to the right type (AwsOrganization): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.account].MqlCompute")
	switch name {
	case "id":
		return s.ComputeId()
	case "aliases":
		return s.ComputeAliases()
	case "organization":
		return s.ComputeOrganization()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.account\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlAwsAccount) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAliases computer autogenerated
func (s *mqlAwsAccount) ComputeAliases() error {
	var err error
	if _, ok := s.Cache.Load("aliases"); ok {
		return nil
	}
	vres, err := s.GetAliases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("aliases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOrganization computer autogenerated
func (s *mqlAwsAccount) ComputeOrganization() error {
	var err error
	if _, ok := s.Cache.Load("organization"); ok {
		return nil
	}
	vres, err := s.GetOrganization()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("organization", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsOrganization resource interface
type AwsOrganization interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	FeatureSet() (string, error)
	MasterAccountId() (string, error)
	MasterAccountEmail() (string, error)
}

// mqlAwsOrganization for the aws.organization resource
type mqlAwsOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.organization resource
func newAwsOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsOrganization{runtime.NewResource("aws.organization")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.organization\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "featureSet":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.organization\", its \"featureSet\" argument has the wrong type (expected type \"string\")")
			}
		case "masterAccountId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.organization\", its \"masterAccountId\" argument has the wrong type (expected type \"string\")")
			}
		case "masterAccountEmail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.organization\", its \"masterAccountEmail\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.organization\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("featureSet"); !ok {
		return errors.New("Initialized \"aws.organization\" resource without a \"featureSet\". This field is required.")
	}
	if _, ok := s.Cache.Load("masterAccountId"); !ok {
		return errors.New("Initialized \"aws.organization\" resource without a \"masterAccountId\". This field is required.")
	}
	if _, ok := s.Cache.Load("masterAccountEmail"); !ok {
		return errors.New("Initialized \"aws.organization\" resource without a \"masterAccountEmail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.organization].Register")
	switch name {
	case "arn":
		return nil
	case "featureSet":
		return nil
	case "masterAccountId":
		return nil
	case "masterAccountEmail":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.organization].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "featureSet":
		return s.FeatureSet()
	case "masterAccountId":
		return s.MasterAccountId()
	case "masterAccountEmail":
		return s.MasterAccountEmail()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.organization\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsOrganization) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.organization\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.organization\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FeatureSet accessor autogenerated
func (s *mqlAwsOrganization) FeatureSet() (string, error) {
	res, ok := s.Cache.Load("featureSet")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.organization\" failed: no value provided for static field \"featureSet\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.organization\" failed to cast field \"featureSet\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MasterAccountId accessor autogenerated
func (s *mqlAwsOrganization) MasterAccountId() (string, error) {
	res, ok := s.Cache.Load("masterAccountId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.organization\" failed: no value provided for static field \"masterAccountId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.organization\" failed to cast field \"masterAccountId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MasterAccountEmail accessor autogenerated
func (s *mqlAwsOrganization) MasterAccountEmail() (string, error) {
	res, ok := s.Cache.Load("masterAccountEmail")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.organization\" failed: no value provided for static field \"masterAccountEmail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.organization\" failed to cast field \"masterAccountEmail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsOrganization) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.organization].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "featureSet":
		return nil
	case "masterAccountId":
		return nil
	case "masterAccountEmail":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.organization\" resource")
	}
}

// AwsEfs resource interface
type AwsEfs interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Filesystems() ([]interface{}, error)
}

// mqlAwsEfs for the aws.efs resource
type mqlAwsEfs struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEfs) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.efs resource
func newAwsEfs(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEfs{runtime.NewResource("aws.efs")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "filesystems":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs\", its \"filesystems\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.efs\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.efs with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEfs) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEfs) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.efs].Register")
	switch name {
	case "filesystems":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.efs\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEfs) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.efs].Field")
	switch name {
	case "filesystems":
		return s.Filesystems()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.efs\" resource")
	}
}

// Filesystems accessor autogenerated
func (s *mqlAwsEfs) Filesystems() ([]interface{}, error) {
	res, ok := s.Cache.Load("filesystems")
	if !ok || !res.Valid {
		if err := s.ComputeFilesystems(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("filesystems")
		if !ok {
			return nil, errors.New("\"aws.efs\" calculated \"filesystems\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "filesystems")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.efs\" failed to cast field \"filesystems\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEfs) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.efs].MqlCompute")
	switch name {
	case "filesystems":
		return s.ComputeFilesystems()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.efs\" resource")
	}
}

// ComputeFilesystems computer autogenerated
func (s *mqlAwsEfs) ComputeFilesystems() error {
	var err error
	if _, ok := s.Cache.Load("filesystems"); ok {
		return nil
	}
	vres, err := s.GetFilesystems()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("filesystems", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEfsFilesystem resource interface
type AwsEfsFilesystem interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Id() (string, error)
	Arn() (string, error)
	Encrypted() (bool, error)
	KmsKey() (AwsKmsKey, error)
	BackupPolicy() (interface{}, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsEfsFilesystem for the aws.efs.filesystem resource
type mqlAwsEfsFilesystem struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEfsFilesystem) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.efs.filesystem resource
func newAwsEfsFilesystem(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEfsFilesystem{runtime.NewResource("aws.efs.filesystem")}
	var existing AwsEfsFilesystem
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "encrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"encrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "kmsKey":
			if _, ok := val.(AwsKmsKey); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"kmsKey\" argument has the wrong type (expected type \"AwsKmsKey\")")
			}
		case "backupPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"backupPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.efs.filesystem\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.efs.filesystem with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEfsFilesystem) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("encrypted"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"encrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.efs.filesystem\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEfsFilesystem) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.efs.filesystem].Register")
	switch name {
	case "name":
		return nil
	case "id":
		return nil
	case "arn":
		return nil
	case "encrypted":
		return nil
	case "kmsKey":
		return nil
	case "backupPolicy":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.efs.filesystem\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEfsFilesystem) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.efs.filesystem].Field")
	switch name {
	case "name":
		return s.Name()
	case "id":
		return s.Id()
	case "arn":
		return s.Arn()
	case "encrypted":
		return s.Encrypted()
	case "kmsKey":
		return s.KmsKey()
	case "backupPolicy":
		return s.BackupPolicy()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.efs.filesystem\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsEfsFilesystem) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEfsFilesystem) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsEfsFilesystem) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Encrypted accessor autogenerated
func (s *mqlAwsEfsFilesystem) Encrypted() (bool, error) {
	res, ok := s.Cache.Load("encrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"encrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"encrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// KmsKey accessor autogenerated
func (s *mqlAwsEfsFilesystem) KmsKey() (AwsKmsKey, error) {
	res, ok := s.Cache.Load("kmsKey")
	if !ok || !res.Valid {
		if err := s.ComputeKmsKey(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kmsKey")
		if !ok {
			return nil, errors.New("\"aws.efs.filesystem\" calculated \"kmsKey\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kmsKey")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsKmsKey)
	if !ok {
		return nil, fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"kmsKey\" to the right type (AwsKmsKey): %#v", res)
	}
	return tres, nil
}

// BackupPolicy accessor autogenerated
func (s *mqlAwsEfsFilesystem) BackupPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("backupPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeBackupPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("backupPolicy")
		if !ok {
			return nil, errors.New("\"aws.efs.filesystem\" calculated \"backupPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "backupPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"backupPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEfsFilesystem) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEfsFilesystem) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.efs.filesystem\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.efs.filesystem\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEfsFilesystem) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.efs.filesystem].MqlCompute")
	switch name {
	case "name":
		return nil
	case "id":
		return nil
	case "arn":
		return nil
	case "encrypted":
		return nil
	case "kmsKey":
		return s.ComputeKmsKey()
	case "backupPolicy":
		return s.ComputeBackupPolicy()
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.efs.filesystem\" resource")
	}
}

// ComputeKmsKey computer autogenerated
func (s *mqlAwsEfsFilesystem) ComputeKmsKey() error {
	var err error
	if _, ok := s.Cache.Load("kmsKey"); ok {
		return nil
	}
	vres, err := s.GetKmsKey()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kmsKey", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBackupPolicy computer autogenerated
func (s *mqlAwsEfsFilesystem) ComputeBackupPolicy() error {
	var err error
	if _, ok := s.Cache.Load("backupPolicy"); ok {
		return nil
	}
	vres, err := s.GetBackupPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("backupPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIam resource interface
type AwsIam interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Roles() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Policies() ([]interface{}, error)
	AttachedPolicies() ([]interface{}, error)
	CredentialReport() ([]interface{}, error)
	AccountPasswordPolicy() (interface{}, error)
	AccountSummary() (map[string]interface{}, error)
	VirtualMfaDevices() ([]interface{}, error)
	ServerCertificates() ([]interface{}, error)
}

// mqlAwsIam for the aws.iam resource
type mqlAwsIam struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIam) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam resource
func newAwsIam(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIam{runtime.NewResource("aws.iam")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "policies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"policies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "attachedPolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"attachedPolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "credentialReport":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"credentialReport\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "accountPasswordPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"accountPasswordPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "accountSummary":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"accountSummary\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "virtualMfaDevices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"virtualMfaDevices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serverCertificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"serverCertificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIam) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIam) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam].Register")
	switch name {
	case "users":
		return nil
	case "roles":
		return nil
	case "groups":
		return nil
	case "policies":
		return nil
	case "attachedPolicies":
		return nil
	case "credentialReport":
		return nil
	case "accountPasswordPolicy":
		return nil
	case "accountSummary":
		return nil
	case "virtualMfaDevices":
		return nil
	case "serverCertificates":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIam) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam].Field")
	switch name {
	case "users":
		return s.Users()
	case "roles":
		return s.Roles()
	case "groups":
		return s.Groups()
	case "policies":
		return s.Policies()
	case "attachedPolicies":
		return s.AttachedPolicies()
	case "credentialReport":
		return s.CredentialReport()
	case "accountPasswordPolicy":
		return s.AccountPasswordPolicy()
	case "accountSummary":
		return s.AccountSummary()
	case "virtualMfaDevices":
		return s.VirtualMfaDevices()
	case "serverCertificates":
		return s.ServerCertificates()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlAwsIam) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlAwsIam) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAwsIam) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Policies accessor autogenerated
func (s *mqlAwsIam) Policies() ([]interface{}, error) {
	res, ok := s.Cache.Load("policies")
	if !ok || !res.Valid {
		if err := s.ComputePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policies")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"policies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"policies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AttachedPolicies accessor autogenerated
func (s *mqlAwsIam) AttachedPolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachedPolicies")
	if !ok || !res.Valid {
		if err := s.ComputeAttachedPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attachedPolicies")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"attachedPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachedPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"attachedPolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// CredentialReport accessor autogenerated
func (s *mqlAwsIam) CredentialReport() ([]interface{}, error) {
	res, ok := s.Cache.Load("credentialReport")
	if !ok || !res.Valid {
		if err := s.ComputeCredentialReport(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("credentialReport")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"credentialReport\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "credentialReport")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"credentialReport\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AccountPasswordPolicy accessor autogenerated
func (s *mqlAwsIam) AccountPasswordPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("accountPasswordPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAccountPasswordPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accountPasswordPolicy")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"accountPasswordPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accountPasswordPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"accountPasswordPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AccountSummary accessor autogenerated
func (s *mqlAwsIam) AccountSummary() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("accountSummary")
	if !ok || !res.Valid {
		if err := s.ComputeAccountSummary(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accountSummary")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"accountSummary\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accountSummary")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"accountSummary\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// VirtualMfaDevices accessor autogenerated
func (s *mqlAwsIam) VirtualMfaDevices() ([]interface{}, error) {
	res, ok := s.Cache.Load("virtualMfaDevices")
	if !ok || !res.Valid {
		if err := s.ComputeVirtualMfaDevices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("virtualMfaDevices")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"virtualMfaDevices\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "virtualMfaDevices")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"virtualMfaDevices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServerCertificates accessor autogenerated
func (s *mqlAwsIam) ServerCertificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("serverCertificates")
	if !ok || !res.Valid {
		if err := s.ComputeServerCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serverCertificates")
		if !ok {
			return nil, errors.New("\"aws.iam\" calculated \"serverCertificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serverCertificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam\" failed to cast field \"serverCertificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIam) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam].MqlCompute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "roles":
		return s.ComputeRoles()
	case "groups":
		return s.ComputeGroups()
	case "policies":
		return s.ComputePolicies()
	case "attachedPolicies":
		return s.ComputeAttachedPolicies()
	case "credentialReport":
		return s.ComputeCredentialReport()
	case "accountPasswordPolicy":
		return s.ComputeAccountPasswordPolicy()
	case "accountSummary":
		return s.ComputeAccountSummary()
	case "virtualMfaDevices":
		return s.ComputeVirtualMfaDevices()
	case "serverCertificates":
		return s.ComputeServerCertificates()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlAwsIam) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoles computer autogenerated
func (s *mqlAwsIam) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAwsIam) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePolicies computer autogenerated
func (s *mqlAwsIam) ComputePolicies() error {
	var err error
	if _, ok := s.Cache.Load("policies"); ok {
		return nil
	}
	vres, err := s.GetPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachedPolicies computer autogenerated
func (s *mqlAwsIam) ComputeAttachedPolicies() error {
	var err error
	if _, ok := s.Cache.Load("attachedPolicies"); ok {
		return nil
	}
	vres, err := s.GetAttachedPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachedPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCredentialReport computer autogenerated
func (s *mqlAwsIam) ComputeCredentialReport() error {
	var err error
	if _, ok := s.Cache.Load("credentialReport"); ok {
		return nil
	}
	vres, err := s.GetCredentialReport()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("credentialReport", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccountPasswordPolicy computer autogenerated
func (s *mqlAwsIam) ComputeAccountPasswordPolicy() error {
	var err error
	if _, ok := s.Cache.Load("accountPasswordPolicy"); ok {
		return nil
	}
	vres, err := s.GetAccountPasswordPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accountPasswordPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccountSummary computer autogenerated
func (s *mqlAwsIam) ComputeAccountSummary() error {
	var err error
	if _, ok := s.Cache.Load("accountSummary"); ok {
		return nil
	}
	vres, err := s.GetAccountSummary()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accountSummary", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVirtualMfaDevices computer autogenerated
func (s *mqlAwsIam) ComputeVirtualMfaDevices() error {
	var err error
	if _, ok := s.Cache.Load("virtualMfaDevices"); ok {
		return nil
	}
	vres, err := s.GetVirtualMfaDevices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("virtualMfaDevices", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServerCertificates computer autogenerated
func (s *mqlAwsIam) ComputeServerCertificates() error {
	var err error
	if _, ok := s.Cache.Load("serverCertificates"); ok {
		return nil
	}
	vres, err := s.GetServerCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serverCertificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIamUsercredentialreportentry resource interface
type AwsIamUsercredentialreportentry interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Properties() (map[string]interface{}, error)
	Arn() (string, error)
	AccessKey1Active() (bool, error)
	AccessKey1LastRotated() (*time.Time, error)
	AccessKey1LastUsedDate() (*time.Time, error)
	AccessKey1LastUsedRegion() (string, error)
	AccessKey1LastUsedService() (string, error)
	AccessKey2Active() (bool, error)
	AccessKey2LastRotated() (*time.Time, error)
	AccessKey2LastUsedDate() (*time.Time, error)
	AccessKey2LastUsedRegion() (string, error)
	AccessKey2LastUsedService() (string, error)
	Cert1Active() (bool, error)
	Cert1LastRotated() (*time.Time, error)
	Cert2Active() (bool, error)
	Cert2LastRotated() (*time.Time, error)
	MfaActive() (bool, error)
	PasswordEnabled() (bool, error)
	PasswordLastChanged() (*time.Time, error)
	PasswordLastUsed() (*time.Time, error)
	PasswordNextRotation() (*time.Time, error)
	User() (AwsIamUser, error)
	UserCreationTime() (*time.Time, error)
}

// mqlAwsIamUsercredentialreportentry for the aws.iam.usercredentialreportentry resource
type mqlAwsIamUsercredentialreportentry struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamUsercredentialreportentry) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.usercredentialreportentry resource
func newAwsIamUsercredentialreportentry(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamUsercredentialreportentry{runtime.NewResource("aws.iam.usercredentialreportentry")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "properties":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"properties\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "accessKey1Active":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey1Active\" argument has the wrong type (expected type \"bool\")")
			}
		case "accessKey1LastRotated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey1LastRotated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "accessKey1LastUsedDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey1LastUsedDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "accessKey1LastUsedRegion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey1LastUsedRegion\" argument has the wrong type (expected type \"string\")")
			}
		case "accessKey1LastUsedService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey1LastUsedService\" argument has the wrong type (expected type \"string\")")
			}
		case "accessKey2Active":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey2Active\" argument has the wrong type (expected type \"bool\")")
			}
		case "accessKey2LastRotated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey2LastRotated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "accessKey2LastUsedDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey2LastUsedDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "accessKey2LastUsedRegion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey2LastUsedRegion\" argument has the wrong type (expected type \"string\")")
			}
		case "accessKey2LastUsedService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"accessKey2LastUsedService\" argument has the wrong type (expected type \"string\")")
			}
		case "cert1Active":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"cert1Active\" argument has the wrong type (expected type \"bool\")")
			}
		case "cert1LastRotated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"cert1LastRotated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "cert2Active":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"cert2Active\" argument has the wrong type (expected type \"bool\")")
			}
		case "cert2LastRotated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"cert2LastRotated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "mfaActive":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"mfaActive\" argument has the wrong type (expected type \"bool\")")
			}
		case "passwordEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"passwordEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "passwordLastChanged":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"passwordLastChanged\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "passwordLastUsed":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"passwordLastUsed\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "passwordNextRotation":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"passwordNextRotation\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "user":
			if _, ok := val.(AwsIamUser); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"user\" argument has the wrong type (expected type \"AwsIamUser\")")
			}
		case "userCreationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"userCreationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.usercredentialreportentry\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.usercredentialreportentry with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamUsercredentialreportentry) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"aws.iam.usercredentialreportentry\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.usercredentialreportentry].Register")
	switch name {
	case "properties":
		return nil
	case "arn":
		return nil
	case "accessKey1Active":
		return nil
	case "accessKey1LastRotated":
		return nil
	case "accessKey1LastUsedDate":
		return nil
	case "accessKey1LastUsedRegion":
		return nil
	case "accessKey1LastUsedService":
		return nil
	case "accessKey2Active":
		return nil
	case "accessKey2LastRotated":
		return nil
	case "accessKey2LastUsedDate":
		return nil
	case "accessKey2LastUsedRegion":
		return nil
	case "accessKey2LastUsedService":
		return nil
	case "cert1Active":
		return nil
	case "cert1LastRotated":
		return nil
	case "cert2Active":
		return nil
	case "cert2LastRotated":
		return nil
	case "mfaActive":
		return nil
	case "passwordEnabled":
		return nil
	case "passwordLastChanged":
		return nil
	case "passwordLastUsed":
		return nil
	case "passwordNextRotation":
		return nil
	case "user":
		return nil
	case "userCreationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.usercredentialreportentry\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.usercredentialreportentry].Field")
	switch name {
	case "properties":
		return s.Properties()
	case "arn":
		return s.Arn()
	case "accessKey1Active":
		return s.AccessKey1Active()
	case "accessKey1LastRotated":
		return s.AccessKey1LastRotated()
	case "accessKey1LastUsedDate":
		return s.AccessKey1LastUsedDate()
	case "accessKey1LastUsedRegion":
		return s.AccessKey1LastUsedRegion()
	case "accessKey1LastUsedService":
		return s.AccessKey1LastUsedService()
	case "accessKey2Active":
		return s.AccessKey2Active()
	case "accessKey2LastRotated":
		return s.AccessKey2LastRotated()
	case "accessKey2LastUsedDate":
		return s.AccessKey2LastUsedDate()
	case "accessKey2LastUsedRegion":
		return s.AccessKey2LastUsedRegion()
	case "accessKey2LastUsedService":
		return s.AccessKey2LastUsedService()
	case "cert1Active":
		return s.Cert1Active()
	case "cert1LastRotated":
		return s.Cert1LastRotated()
	case "cert2Active":
		return s.Cert2Active()
	case "cert2LastRotated":
		return s.Cert2LastRotated()
	case "mfaActive":
		return s.MfaActive()
	case "passwordEnabled":
		return s.PasswordEnabled()
	case "passwordLastChanged":
		return s.PasswordLastChanged()
	case "passwordLastUsed":
		return s.PasswordLastUsed()
	case "passwordNextRotation":
		return s.PasswordNextRotation()
	case "user":
		return s.User()
	case "userCreationTime":
		return s.UserCreationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.usercredentialreportentry\" resource")
	}
}

// Properties accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Properties() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.usercredentialreportentry\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"properties\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		if err := s.ComputeArn(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("arn")
		if !ok {
			return "", errors.New("\"aws.iam.usercredentialreportentry\" calculated \"arn\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "arn")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccessKey1Active accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey1Active() (bool, error) {
	res, ok := s.Cache.Load("accessKey1Active")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey1Active(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("accessKey1Active")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey1Active\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey1Active")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey1Active\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AccessKey1LastRotated accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey1LastRotated() (*time.Time, error) {
	res, ok := s.Cache.Load("accessKey1LastRotated")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey1LastRotated(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessKey1LastRotated")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey1LastRotated\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey1LastRotated")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey1LastRotated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// AccessKey1LastUsedDate accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey1LastUsedDate() (*time.Time, error) {
	res, ok := s.Cache.Load("accessKey1LastUsedDate")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey1LastUsedDate(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessKey1LastUsedDate")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey1LastUsedDate\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey1LastUsedDate")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey1LastUsedDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// AccessKey1LastUsedRegion accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey1LastUsedRegion() (string, error) {
	res, ok := s.Cache.Load("accessKey1LastUsedRegion")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey1LastUsedRegion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("accessKey1LastUsedRegion")
		if !ok {
			return "", errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey1LastUsedRegion\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey1LastUsedRegion")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey1LastUsedRegion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccessKey1LastUsedService accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey1LastUsedService() (string, error) {
	res, ok := s.Cache.Load("accessKey1LastUsedService")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey1LastUsedService(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("accessKey1LastUsedService")
		if !ok {
			return "", errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey1LastUsedService\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey1LastUsedService")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey1LastUsedService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccessKey2Active accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey2Active() (bool, error) {
	res, ok := s.Cache.Load("accessKey2Active")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey2Active(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("accessKey2Active")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey2Active\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey2Active")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey2Active\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AccessKey2LastRotated accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey2LastRotated() (*time.Time, error) {
	res, ok := s.Cache.Load("accessKey2LastRotated")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey2LastRotated(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessKey2LastRotated")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey2LastRotated\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey2LastRotated")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey2LastRotated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// AccessKey2LastUsedDate accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey2LastUsedDate() (*time.Time, error) {
	res, ok := s.Cache.Load("accessKey2LastUsedDate")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey2LastUsedDate(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessKey2LastUsedDate")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey2LastUsedDate\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey2LastUsedDate")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey2LastUsedDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// AccessKey2LastUsedRegion accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey2LastUsedRegion() (string, error) {
	res, ok := s.Cache.Load("accessKey2LastUsedRegion")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey2LastUsedRegion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("accessKey2LastUsedRegion")
		if !ok {
			return "", errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey2LastUsedRegion\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey2LastUsedRegion")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey2LastUsedRegion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccessKey2LastUsedService accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) AccessKey2LastUsedService() (string, error) {
	res, ok := s.Cache.Load("accessKey2LastUsedService")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKey2LastUsedService(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("accessKey2LastUsedService")
		if !ok {
			return "", errors.New("\"aws.iam.usercredentialreportentry\" calculated \"accessKey2LastUsedService\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKey2LastUsedService")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"accessKey2LastUsedService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Cert1Active accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Cert1Active() (bool, error) {
	res, ok := s.Cache.Load("cert1Active")
	if !ok || !res.Valid {
		if err := s.ComputeCert1Active(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("cert1Active")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"cert1Active\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cert1Active")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"cert1Active\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Cert1LastRotated accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Cert1LastRotated() (*time.Time, error) {
	res, ok := s.Cache.Load("cert1LastRotated")
	if !ok || !res.Valid {
		if err := s.ComputeCert1LastRotated(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cert1LastRotated")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"cert1LastRotated\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cert1LastRotated")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"cert1LastRotated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Cert2Active accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Cert2Active() (bool, error) {
	res, ok := s.Cache.Load("cert2Active")
	if !ok || !res.Valid {
		if err := s.ComputeCert2Active(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("cert2Active")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"cert2Active\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cert2Active")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"cert2Active\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Cert2LastRotated accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) Cert2LastRotated() (*time.Time, error) {
	res, ok := s.Cache.Load("cert2LastRotated")
	if !ok || !res.Valid {
		if err := s.ComputeCert2LastRotated(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cert2LastRotated")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"cert2LastRotated\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cert2LastRotated")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"cert2LastRotated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// MfaActive accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) MfaActive() (bool, error) {
	res, ok := s.Cache.Load("mfaActive")
	if !ok || !res.Valid {
		if err := s.ComputeMfaActive(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("mfaActive")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"mfaActive\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mfaActive")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"mfaActive\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PasswordEnabled accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) PasswordEnabled() (bool, error) {
	res, ok := s.Cache.Load("passwordEnabled")
	if !ok || !res.Valid {
		if err := s.ComputePasswordEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("passwordEnabled")
		if !ok {
			return false, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"passwordEnabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "passwordEnabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"passwordEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PasswordLastChanged accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) PasswordLastChanged() (*time.Time, error) {
	res, ok := s.Cache.Load("passwordLastChanged")
	if !ok || !res.Valid {
		if err := s.ComputePasswordLastChanged(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("passwordLastChanged")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"passwordLastChanged\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "passwordLastChanged")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"passwordLastChanged\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PasswordLastUsed accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) PasswordLastUsed() (*time.Time, error) {
	res, ok := s.Cache.Load("passwordLastUsed")
	if !ok || !res.Valid {
		if err := s.ComputePasswordLastUsed(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("passwordLastUsed")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"passwordLastUsed\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "passwordLastUsed")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"passwordLastUsed\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PasswordNextRotation accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) PasswordNextRotation() (*time.Time, error) {
	res, ok := s.Cache.Load("passwordNextRotation")
	if !ok || !res.Valid {
		if err := s.ComputePasswordNextRotation(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("passwordNextRotation")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"passwordNextRotation\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "passwordNextRotation")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"passwordNextRotation\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// User accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) User() (AwsIamUser, error) {
	res, ok := s.Cache.Load("user")
	if !ok || !res.Valid {
		if err := s.ComputeUser(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("user")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"user\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "user")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsIamUser)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"user\" to the right type (AwsIamUser): %#v", res)
	}
	return tres, nil
}

// UserCreationTime accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) UserCreationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("userCreationTime")
	if !ok || !res.Valid {
		if err := s.ComputeUserCreationTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("userCreationTime")
		if !ok {
			return nil, errors.New("\"aws.iam.usercredentialreportentry\" calculated \"userCreationTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "userCreationTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.usercredentialreportentry\" failed to cast field \"userCreationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamUsercredentialreportentry) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.usercredentialreportentry].MqlCompute")
	switch name {
	case "properties":
		return nil
	case "arn":
		return s.ComputeArn()
	case "accessKey1Active":
		return s.ComputeAccessKey1Active()
	case "accessKey1LastRotated":
		return s.ComputeAccessKey1LastRotated()
	case "accessKey1LastUsedDate":
		return s.ComputeAccessKey1LastUsedDate()
	case "accessKey1LastUsedRegion":
		return s.ComputeAccessKey1LastUsedRegion()
	case "accessKey1LastUsedService":
		return s.ComputeAccessKey1LastUsedService()
	case "accessKey2Active":
		return s.ComputeAccessKey2Active()
	case "accessKey2LastRotated":
		return s.ComputeAccessKey2LastRotated()
	case "accessKey2LastUsedDate":
		return s.ComputeAccessKey2LastUsedDate()
	case "accessKey2LastUsedRegion":
		return s.ComputeAccessKey2LastUsedRegion()
	case "accessKey2LastUsedService":
		return s.ComputeAccessKey2LastUsedService()
	case "cert1Active":
		return s.ComputeCert1Active()
	case "cert1LastRotated":
		return s.ComputeCert1LastRotated()
	case "cert2Active":
		return s.ComputeCert2Active()
	case "cert2LastRotated":
		return s.ComputeCert2LastRotated()
	case "mfaActive":
		return s.ComputeMfaActive()
	case "passwordEnabled":
		return s.ComputePasswordEnabled()
	case "passwordLastChanged":
		return s.ComputePasswordLastChanged()
	case "passwordLastUsed":
		return s.ComputePasswordLastUsed()
	case "passwordNextRotation":
		return s.ComputePasswordNextRotation()
	case "user":
		return s.ComputeUser()
	case "userCreationTime":
		return s.ComputeUserCreationTime()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.usercredentialreportentry\" resource")
	}
}

// ComputeArn computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeArn() error {
	var err error
	if _, ok := s.Cache.Load("arn"); ok {
		return nil
	}
	vres, err := s.GetArn()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("arn", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey1Active computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey1Active() error {
	var err error
	if _, ok := s.Cache.Load("accessKey1Active"); ok {
		return nil
	}
	vres, err := s.GetAccessKey1Active()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey1Active", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey1LastRotated computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey1LastRotated() error {
	var err error
	if _, ok := s.Cache.Load("accessKey1LastRotated"); ok {
		return nil
	}
	vres, err := s.GetAccessKey1LastRotated()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey1LastRotated", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey1LastUsedDate computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey1LastUsedDate() error {
	var err error
	if _, ok := s.Cache.Load("accessKey1LastUsedDate"); ok {
		return nil
	}
	vres, err := s.GetAccessKey1LastUsedDate()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey1LastUsedDate", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey1LastUsedRegion computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey1LastUsedRegion() error {
	var err error
	if _, ok := s.Cache.Load("accessKey1LastUsedRegion"); ok {
		return nil
	}
	vres, err := s.GetAccessKey1LastUsedRegion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey1LastUsedRegion", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey1LastUsedService computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey1LastUsedService() error {
	var err error
	if _, ok := s.Cache.Load("accessKey1LastUsedService"); ok {
		return nil
	}
	vres, err := s.GetAccessKey1LastUsedService()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey1LastUsedService", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey2Active computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey2Active() error {
	var err error
	if _, ok := s.Cache.Load("accessKey2Active"); ok {
		return nil
	}
	vres, err := s.GetAccessKey2Active()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey2Active", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey2LastRotated computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey2LastRotated() error {
	var err error
	if _, ok := s.Cache.Load("accessKey2LastRotated"); ok {
		return nil
	}
	vres, err := s.GetAccessKey2LastRotated()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey2LastRotated", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey2LastUsedDate computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey2LastUsedDate() error {
	var err error
	if _, ok := s.Cache.Load("accessKey2LastUsedDate"); ok {
		return nil
	}
	vres, err := s.GetAccessKey2LastUsedDate()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey2LastUsedDate", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey2LastUsedRegion computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey2LastUsedRegion() error {
	var err error
	if _, ok := s.Cache.Load("accessKey2LastUsedRegion"); ok {
		return nil
	}
	vres, err := s.GetAccessKey2LastUsedRegion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey2LastUsedRegion", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKey2LastUsedService computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeAccessKey2LastUsedService() error {
	var err error
	if _, ok := s.Cache.Load("accessKey2LastUsedService"); ok {
		return nil
	}
	vres, err := s.GetAccessKey2LastUsedService()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKey2LastUsedService", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCert1Active computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeCert1Active() error {
	var err error
	if _, ok := s.Cache.Load("cert1Active"); ok {
		return nil
	}
	vres, err := s.GetCert1Active()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cert1Active", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCert1LastRotated computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeCert1LastRotated() error {
	var err error
	if _, ok := s.Cache.Load("cert1LastRotated"); ok {
		return nil
	}
	vres, err := s.GetCert1LastRotated()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cert1LastRotated", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCert2Active computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeCert2Active() error {
	var err error
	if _, ok := s.Cache.Load("cert2Active"); ok {
		return nil
	}
	vres, err := s.GetCert2Active()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cert2Active", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCert2LastRotated computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeCert2LastRotated() error {
	var err error
	if _, ok := s.Cache.Load("cert2LastRotated"); ok {
		return nil
	}
	vres, err := s.GetCert2LastRotated()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cert2LastRotated", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMfaActive computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeMfaActive() error {
	var err error
	if _, ok := s.Cache.Load("mfaActive"); ok {
		return nil
	}
	vres, err := s.GetMfaActive()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mfaActive", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePasswordEnabled computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputePasswordEnabled() error {
	var err error
	if _, ok := s.Cache.Load("passwordEnabled"); ok {
		return nil
	}
	vres, err := s.GetPasswordEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("passwordEnabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePasswordLastChanged computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputePasswordLastChanged() error {
	var err error
	if _, ok := s.Cache.Load("passwordLastChanged"); ok {
		return nil
	}
	vres, err := s.GetPasswordLastChanged()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("passwordLastChanged", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePasswordLastUsed computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputePasswordLastUsed() error {
	var err error
	if _, ok := s.Cache.Load("passwordLastUsed"); ok {
		return nil
	}
	vres, err := s.GetPasswordLastUsed()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("passwordLastUsed", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePasswordNextRotation computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputePasswordNextRotation() error {
	var err error
	if _, ok := s.Cache.Load("passwordNextRotation"); ok {
		return nil
	}
	vres, err := s.GetPasswordNextRotation()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("passwordNextRotation", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUser computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeUser() error {
	var err error
	if _, ok := s.Cache.Load("user"); ok {
		return nil
	}
	vres, err := s.GetUser()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("user", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUserCreationTime computer autogenerated
func (s *mqlAwsIamUsercredentialreportentry) ComputeUserCreationTime() error {
	var err error
	if _, ok := s.Cache.Load("userCreationTime"); ok {
		return nil
	}
	vres, err := s.GetUserCreationTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("userCreationTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIamUser resource interface
type AwsIamUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	CreateDate() (*time.Time, error)
	PasswordLastUsed() (*time.Time, error)
	Tags() (map[string]interface{}, error)
	Policies() ([]interface{}, error)
	AttachedPolicies() ([]interface{}, error)
	Groups() ([]interface{}, error)
	AccessKeys() ([]interface{}, error)
}

// mqlAwsIamUser for the aws.iam.user resource
type mqlAwsIamUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.user resource
func newAwsIamUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamUser{runtime.NewResource("aws.iam.user")}
	var existing AwsIamUser
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "createDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"createDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "passwordLastUsed":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"passwordLastUsed\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "policies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"policies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "attachedPolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"attachedPolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "accessKeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"accessKeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("createDate"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"createDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordLastUsed"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"passwordLastUsed\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.iam.user\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.user].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createDate":
		return nil
	case "passwordLastUsed":
		return nil
	case "tags":
		return nil
	case "policies":
		return nil
	case "attachedPolicies":
		return nil
	case "groups":
		return nil
	case "accessKeys":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.user].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "createDate":
		return s.CreateDate()
	case "passwordLastUsed":
		return s.PasswordLastUsed()
	case "tags":
		return s.Tags()
	case "policies":
		return s.Policies()
	case "attachedPolicies":
		return s.AttachedPolicies()
	case "groups":
		return s.Groups()
	case "accessKeys":
		return s.AccessKeys()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.user\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsIamUser) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.user\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.user\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsIamUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsIamUser) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.user\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.user\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateDate accessor autogenerated
func (s *mqlAwsIamUser) CreateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.user\" failed: no value provided for static field \"createDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"createDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PasswordLastUsed accessor autogenerated
func (s *mqlAwsIamUser) PasswordLastUsed() (*time.Time, error) {
	res, ok := s.Cache.Load("passwordLastUsed")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.user\" failed: no value provided for static field \"passwordLastUsed\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"passwordLastUsed\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsIamUser) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.user\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Policies accessor autogenerated
func (s *mqlAwsIamUser) Policies() ([]interface{}, error) {
	res, ok := s.Cache.Load("policies")
	if !ok || !res.Valid {
		if err := s.ComputePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policies")
		if !ok {
			return nil, errors.New("\"aws.iam.user\" calculated \"policies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"policies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AttachedPolicies accessor autogenerated
func (s *mqlAwsIamUser) AttachedPolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachedPolicies")
	if !ok || !res.Valid {
		if err := s.ComputeAttachedPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attachedPolicies")
		if !ok {
			return nil, errors.New("\"aws.iam.user\" calculated \"attachedPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachedPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"attachedPolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlAwsIamUser) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"aws.iam.user\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AccessKeys accessor autogenerated
func (s *mqlAwsIamUser) AccessKeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("accessKeys")
	if !ok || !res.Valid {
		if err := s.ComputeAccessKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessKeys")
		if !ok {
			return nil, errors.New("\"aws.iam.user\" calculated \"accessKeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessKeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.user\" failed to cast field \"accessKeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.user].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createDate":
		return nil
	case "passwordLastUsed":
		return nil
	case "tags":
		return nil
	case "policies":
		return s.ComputePolicies()
	case "attachedPolicies":
		return s.ComputeAttachedPolicies()
	case "groups":
		return s.ComputeGroups()
	case "accessKeys":
		return s.ComputeAccessKeys()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.user\" resource")
	}
}

// ComputePolicies computer autogenerated
func (s *mqlAwsIamUser) ComputePolicies() error {
	var err error
	if _, ok := s.Cache.Load("policies"); ok {
		return nil
	}
	vres, err := s.GetPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachedPolicies computer autogenerated
func (s *mqlAwsIamUser) ComputeAttachedPolicies() error {
	var err error
	if _, ok := s.Cache.Load("attachedPolicies"); ok {
		return nil
	}
	vres, err := s.GetAttachedPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachedPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlAwsIamUser) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessKeys computer autogenerated
func (s *mqlAwsIamUser) ComputeAccessKeys() error {
	var err error
	if _, ok := s.Cache.Load("accessKeys"); ok {
		return nil
	}
	vres, err := s.GetAccessKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessKeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIamPolicy resource interface
type AwsIamPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	IsAttachable() (bool, error)
	AttachmentCount() (int64, error)
	CreateDate() (*time.Time, error)
	UpdateDate() (*time.Time, error)
	Scope() (string, error)
	Versions() ([]interface{}, error)
	DefaultVersion() (AwsIamPolicyversion, error)
	AttachedUsers() ([]interface{}, error)
	AttachedRoles() ([]interface{}, error)
	AttachedGroups() ([]interface{}, error)
}

// mqlAwsIamPolicy for the aws.iam.policy resource
type mqlAwsIamPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.policy resource
func newAwsIamPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamPolicy{runtime.NewResource("aws.iam.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "isAttachable":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"isAttachable\" argument has the wrong type (expected type \"bool\")")
			}
		case "attachmentCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"attachmentCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "createDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"createDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updateDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"updateDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "scope":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"scope\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultVersion":
			if _, ok := val.(AwsIamPolicyversion); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"defaultVersion\" argument has the wrong type (expected type \"AwsIamPolicyversion\")")
			}
		case "attachedUsers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"attachedUsers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "attachedRoles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"attachedRoles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "attachedGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"attachedGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.iam.policy\" resource without a \"arn\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.policy].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "isAttachable":
		return nil
	case "attachmentCount":
		return nil
	case "createDate":
		return nil
	case "updateDate":
		return nil
	case "scope":
		return nil
	case "versions":
		return nil
	case "defaultVersion":
		return nil
	case "attachedUsers":
		return nil
	case "attachedRoles":
		return nil
	case "attachedGroups":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.policy].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "isAttachable":
		return s.IsAttachable()
	case "attachmentCount":
		return s.AttachmentCount()
	case "createDate":
		return s.CreateDate()
	case "updateDate":
		return s.UpdateDate()
	case "scope":
		return s.Scope()
	case "versions":
		return s.Versions()
	case "defaultVersion":
		return s.DefaultVersion()
	case "attachedUsers":
		return s.AttachedUsers()
	case "attachedRoles":
		return s.AttachedRoles()
	case "attachedGroups":
		return s.AttachedGroups()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.policy\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsIamPolicy) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.policy\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policy\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsIamPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"aws.iam.policy\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsIamPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"aws.iam.policy\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsIamPolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		if err := s.ComputeDescription(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("description")
		if !ok {
			return "", errors.New("\"aws.iam.policy\" calculated \"description\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "description")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsAttachable accessor autogenerated
func (s *mqlAwsIamPolicy) IsAttachable() (bool, error) {
	res, ok := s.Cache.Load("isAttachable")
	if !ok || !res.Valid {
		if err := s.ComputeIsAttachable(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("isAttachable")
		if !ok {
			return false, errors.New("\"aws.iam.policy\" calculated \"isAttachable\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "isAttachable")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"isAttachable\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AttachmentCount accessor autogenerated
func (s *mqlAwsIamPolicy) AttachmentCount() (int64, error) {
	res, ok := s.Cache.Load("attachmentCount")
	if !ok || !res.Valid {
		if err := s.ComputeAttachmentCount(); err != nil {
			return 0, err
		}
		res, ok = s.Cache.Load("attachmentCount")
		if !ok {
			return 0, errors.New("\"aws.iam.policy\" calculated \"attachmentCount\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachmentCount")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"attachmentCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CreateDate accessor autogenerated
func (s *mqlAwsIamPolicy) CreateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createDate")
	if !ok || !res.Valid {
		if err := s.ComputeCreateDate(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createDate")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"createDate\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createDate")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"createDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// UpdateDate accessor autogenerated
func (s *mqlAwsIamPolicy) UpdateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("updateDate")
	if !ok || !res.Valid {
		if err := s.ComputeUpdateDate(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("updateDate")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"updateDate\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "updateDate")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"updateDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Scope accessor autogenerated
func (s *mqlAwsIamPolicy) Scope() (string, error) {
	res, ok := s.Cache.Load("scope")
	if !ok || !res.Valid {
		if err := s.ComputeScope(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("scope")
		if !ok {
			return "", errors.New("\"aws.iam.policy\" calculated \"scope\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "scope")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policy\" failed to cast field \"scope\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlAwsIamPolicy) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultVersion accessor autogenerated
func (s *mqlAwsIamPolicy) DefaultVersion() (AwsIamPolicyversion, error) {
	res, ok := s.Cache.Load("defaultVersion")
	if !ok || !res.Valid {
		if err := s.ComputeDefaultVersion(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("defaultVersion")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"defaultVersion\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defaultVersion")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsIamPolicyversion)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"defaultVersion\" to the right type (AwsIamPolicyversion): %#v", res)
	}
	return tres, nil
}

// AttachedUsers accessor autogenerated
func (s *mqlAwsIamPolicy) AttachedUsers() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachedUsers")
	if !ok || !res.Valid {
		if err := s.ComputeAttachedUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attachedUsers")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"attachedUsers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachedUsers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"attachedUsers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AttachedRoles accessor autogenerated
func (s *mqlAwsIamPolicy) AttachedRoles() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachedRoles")
	if !ok || !res.Valid {
		if err := s.ComputeAttachedRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attachedRoles")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"attachedRoles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachedRoles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"attachedRoles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AttachedGroups accessor autogenerated
func (s *mqlAwsIamPolicy) AttachedGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachedGroups")
	if !ok || !res.Valid {
		if err := s.ComputeAttachedGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attachedGroups")
		if !ok {
			return nil, errors.New("\"aws.iam.policy\" calculated \"attachedGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attachedGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policy\" failed to cast field \"attachedGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.policy].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "description":
		return s.ComputeDescription()
	case "isAttachable":
		return s.ComputeIsAttachable()
	case "attachmentCount":
		return s.ComputeAttachmentCount()
	case "createDate":
		return s.ComputeCreateDate()
	case "updateDate":
		return s.ComputeUpdateDate()
	case "scope":
		return s.ComputeScope()
	case "versions":
		return s.ComputeVersions()
	case "defaultVersion":
		return s.ComputeDefaultVersion()
	case "attachedUsers":
		return s.ComputeAttachedUsers()
	case "attachedRoles":
		return s.ComputeAttachedRoles()
	case "attachedGroups":
		return s.ComputeAttachedGroups()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.policy\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlAwsIamPolicy) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlAwsIamPolicy) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDescription computer autogenerated
func (s *mqlAwsIamPolicy) ComputeDescription() error {
	var err error
	if _, ok := s.Cache.Load("description"); ok {
		return nil
	}
	vres, err := s.GetDescription()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("description", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIsAttachable computer autogenerated
func (s *mqlAwsIamPolicy) ComputeIsAttachable() error {
	var err error
	if _, ok := s.Cache.Load("isAttachable"); ok {
		return nil
	}
	vres, err := s.GetIsAttachable()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("isAttachable", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachmentCount computer autogenerated
func (s *mqlAwsIamPolicy) ComputeAttachmentCount() error {
	var err error
	if _, ok := s.Cache.Load("attachmentCount"); ok {
		return nil
	}
	vres, err := s.GetAttachmentCount()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachmentCount", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCreateDate computer autogenerated
func (s *mqlAwsIamPolicy) ComputeCreateDate() error {
	var err error
	if _, ok := s.Cache.Load("createDate"); ok {
		return nil
	}
	vres, err := s.GetCreateDate()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createDate", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUpdateDate computer autogenerated
func (s *mqlAwsIamPolicy) ComputeUpdateDate() error {
	var err error
	if _, ok := s.Cache.Load("updateDate"); ok {
		return nil
	}
	vres, err := s.GetUpdateDate()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("updateDate", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeScope computer autogenerated
func (s *mqlAwsIamPolicy) ComputeScope() error {
	var err error
	if _, ok := s.Cache.Load("scope"); ok {
		return nil
	}
	vres, err := s.GetScope()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("scope", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersions computer autogenerated
func (s *mqlAwsIamPolicy) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefaultVersion computer autogenerated
func (s *mqlAwsIamPolicy) ComputeDefaultVersion() error {
	var err error
	if _, ok := s.Cache.Load("defaultVersion"); ok {
		return nil
	}
	vres, err := s.GetDefaultVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defaultVersion", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachedUsers computer autogenerated
func (s *mqlAwsIamPolicy) ComputeAttachedUsers() error {
	var err error
	if _, ok := s.Cache.Load("attachedUsers"); ok {
		return nil
	}
	vres, err := s.GetAttachedUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachedUsers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachedRoles computer autogenerated
func (s *mqlAwsIamPolicy) ComputeAttachedRoles() error {
	var err error
	if _, ok := s.Cache.Load("attachedRoles"); ok {
		return nil
	}
	vres, err := s.GetAttachedRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachedRoles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttachedGroups computer autogenerated
func (s *mqlAwsIamPolicy) ComputeAttachedGroups() error {
	var err error
	if _, ok := s.Cache.Load("attachedGroups"); ok {
		return nil
	}
	vres, err := s.GetAttachedGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attachedGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIamPolicyversion resource interface
type AwsIamPolicyversion interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	VersionId() (string, error)
	IsDefaultVersion() (bool, error)
	Document() (interface{}, error)
	CreateDate() (*time.Time, error)
}

// mqlAwsIamPolicyversion for the aws.iam.policyversion resource
type mqlAwsIamPolicyversion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamPolicyversion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.policyversion resource
func newAwsIamPolicyversion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamPolicyversion{runtime.NewResource("aws.iam.policyversion")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "versionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"versionId\" argument has the wrong type (expected type \"string\")")
			}
		case "isDefaultVersion":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"isDefaultVersion\" argument has the wrong type (expected type \"bool\")")
			}
		case "document":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"document\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "createDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"createDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.policyversion\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.policyversion with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamPolicyversion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.iam.policyversion\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("versionId"); !ok {
		return errors.New("Initialized \"aws.iam.policyversion\" resource without a \"versionId\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefaultVersion"); !ok {
		return errors.New("Initialized \"aws.iam.policyversion\" resource without a \"isDefaultVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("createDate"); !ok {
		return errors.New("Initialized \"aws.iam.policyversion\" resource without a \"createDate\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamPolicyversion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.policyversion].Register")
	switch name {
	case "arn":
		return nil
	case "versionId":
		return nil
	case "isDefaultVersion":
		return nil
	case "document":
		return nil
	case "createDate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.policyversion\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamPolicyversion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.policyversion].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "versionId":
		return s.VersionId()
	case "isDefaultVersion":
		return s.IsDefaultVersion()
	case "document":
		return s.Document()
	case "createDate":
		return s.CreateDate()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.policyversion\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsIamPolicyversion) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.policyversion\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policyversion\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VersionId accessor autogenerated
func (s *mqlAwsIamPolicyversion) VersionId() (string, error) {
	res, ok := s.Cache.Load("versionId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.policyversion\" failed: no value provided for static field \"versionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.policyversion\" failed to cast field \"versionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsDefaultVersion accessor autogenerated
func (s *mqlAwsIamPolicyversion) IsDefaultVersion() (bool, error) {
	res, ok := s.Cache.Load("isDefaultVersion")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.iam.policyversion\" failed: no value provided for static field \"isDefaultVersion\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.iam.policyversion\" failed to cast field \"isDefaultVersion\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Document accessor autogenerated
func (s *mqlAwsIamPolicyversion) Document() (interface{}, error) {
	res, ok := s.Cache.Load("document")
	if !ok || !res.Valid {
		if err := s.ComputeDocument(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("document")
		if !ok {
			return nil, errors.New("\"aws.iam.policyversion\" calculated \"document\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "document")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policyversion\" failed to cast field \"document\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// CreateDate accessor autogenerated
func (s *mqlAwsIamPolicyversion) CreateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.policyversion\" failed: no value provided for static field \"createDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.policyversion\" failed to cast field \"createDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamPolicyversion) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.policyversion].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "versionId":
		return nil
	case "isDefaultVersion":
		return nil
	case "document":
		return s.ComputeDocument()
	case "createDate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.policyversion\" resource")
	}
}

// ComputeDocument computer autogenerated
func (s *mqlAwsIamPolicyversion) ComputeDocument() error {
	var err error
	if _, ok := s.Cache.Load("document"); ok {
		return nil
	}
	vres, err := s.GetDocument()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("document", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsIamRole resource interface
type AwsIamRole interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Tags() (map[string]interface{}, error)
	CreateDate() (*time.Time, error)
}

// mqlAwsIamRole for the aws.iam.role resource
type mqlAwsIamRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.role resource
func newAwsIamRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamRole{runtime.NewResource("aws.iam.role")}
	var existing AwsIamRole
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "createDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"createDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("createDate"); !ok {
		return errors.New("Initialized \"aws.iam.role\" resource without a \"createDate\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.role].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "tags":
		return nil
	case "createDate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.role].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "tags":
		return s.Tags()
	case "createDate":
		return s.CreateDate()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.role\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsIamRole) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.role\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.role\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsIamRole) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.role\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.role\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsIamRole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.role\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.role\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsIamRole) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.role\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.role\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsIamRole) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.role\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.role\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// CreateDate accessor autogenerated
func (s *mqlAwsIamRole) CreateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.role\" failed: no value provided for static field \"createDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.role\" failed to cast field \"createDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamRole) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.role].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "tags":
		return nil
	case "createDate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.role\" resource")
	}
}

// AwsIamGroup resource interface
type AwsIamGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	CreateDate() (*time.Time, error)
	Usernames() ([]interface{}, error)
}

// mqlAwsIamGroup for the aws.iam.group resource
type mqlAwsIamGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.group resource
func newAwsIamGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamGroup{runtime.NewResource("aws.iam.group")}
	var existing AwsIamGroup
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "createDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"createDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "usernames":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"usernames\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.iam.group\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.iam.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.iam.group\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("createDate"); !ok {
		return errors.New("Initialized \"aws.iam.group\" resource without a \"createDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("usernames"); !ok {
		return errors.New("Initialized \"aws.iam.group\" resource without a \"usernames\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.group].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createDate":
		return nil
	case "usernames":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.group].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "createDate":
		return s.CreateDate()
	case "usernames":
		return s.Usernames()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.group\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsIamGroup) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.group\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.group\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsIamGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsIamGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.group\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.group\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateDate accessor autogenerated
func (s *mqlAwsIamGroup) CreateDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.group\" failed: no value provided for static field \"createDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.group\" failed to cast field \"createDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Usernames accessor autogenerated
func (s *mqlAwsIamGroup) Usernames() ([]interface{}, error) {
	res, ok := s.Cache.Load("usernames")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.group\" failed: no value provided for static field \"usernames\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.group\" failed to cast field \"usernames\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.group].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createDate":
		return nil
	case "usernames":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.group\" resource")
	}
}

// AwsIamVirtualmfadevice resource interface
type AwsIamVirtualmfadevice interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SerialNumber() (string, error)
	EnableDate() (*time.Time, error)
	User() (AwsIamUser, error)
}

// mqlAwsIamVirtualmfadevice for the aws.iam.virtualmfadevice resource
type mqlAwsIamVirtualmfadevice struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsIamVirtualmfadevice) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.iam.virtualmfadevice resource
func newAwsIamVirtualmfadevice(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsIamVirtualmfadevice{runtime.NewResource("aws.iam.virtualmfadevice")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "serialNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.virtualmfadevice\", its \"serialNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "enableDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.virtualmfadevice\", its \"enableDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "user":
			if _, ok := val.(AwsIamUser); !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.virtualmfadevice\", its \"user\" argument has the wrong type (expected type \"AwsIamUser\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.iam.virtualmfadevice\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.iam.virtualmfadevice with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsIamVirtualmfadevice) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("serialNumber"); !ok {
		return errors.New("Initialized \"aws.iam.virtualmfadevice\" resource without a \"serialNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableDate"); !ok {
		return errors.New("Initialized \"aws.iam.virtualmfadevice\" resource without a \"enableDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("user"); !ok {
		return errors.New("Initialized \"aws.iam.virtualmfadevice\" resource without a \"user\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.virtualmfadevice].Register")
	switch name {
	case "serialNumber":
		return nil
	case "enableDate":
		return nil
	case "user":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.virtualmfadevice\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.iam.virtualmfadevice].Field")
	switch name {
	case "serialNumber":
		return s.SerialNumber()
	case "enableDate":
		return s.EnableDate()
	case "user":
		return s.User()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.iam.virtualmfadevice\" resource")
	}
}

// SerialNumber accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) SerialNumber() (string, error) {
	res, ok := s.Cache.Load("serialNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.iam.virtualmfadevice\" failed: no value provided for static field \"serialNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.iam.virtualmfadevice\" failed to cast field \"serialNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableDate accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) EnableDate() (*time.Time, error) {
	res, ok := s.Cache.Load("enableDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.virtualmfadevice\" failed: no value provided for static field \"enableDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.virtualmfadevice\" failed to cast field \"enableDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// User accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) User() (AwsIamUser, error) {
	res, ok := s.Cache.Load("user")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.iam.virtualmfadevice\" failed: no value provided for static field \"user\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsIamUser)
	if !ok {
		return nil, fmt.Errorf("\"aws.iam.virtualmfadevice\" failed to cast field \"user\" to the right type (AwsIamUser): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsIamVirtualmfadevice) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.iam.virtualmfadevice].MqlCompute")
	switch name {
	case "serialNumber":
		return nil
	case "enableDate":
		return nil
	case "user":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.iam.virtualmfadevice\" resource")
	}
}

// AwsSagemaker resource interface
type AwsSagemaker interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Endpoints() ([]interface{}, error)
	NotebookInstances() ([]interface{}, error)
}

// mqlAwsSagemaker for the aws.sagemaker resource
type mqlAwsSagemaker struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSagemaker) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sagemaker resource
func newAwsSagemaker(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSagemaker{runtime.NewResource("aws.sagemaker")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "endpoints":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker\", its \"endpoints\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "notebookInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker\", its \"notebookInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sagemaker with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSagemaker) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSagemaker) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker].Register")
	switch name {
	case "endpoints":
		return nil
	case "notebookInstances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSagemaker) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sagemaker].Field")
	switch name {
	case "endpoints":
		return s.Endpoints()
	case "notebookInstances":
		return s.NotebookInstances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sagemaker\" resource")
	}
}

// Endpoints accessor autogenerated
func (s *mqlAwsSagemaker) Endpoints() ([]interface{}, error) {
	res, ok := s.Cache.Load("endpoints")
	if !ok || !res.Valid {
		if err := s.ComputeEndpoints(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("endpoints")
		if !ok {
			return nil, errors.New("\"aws.sagemaker\" calculated \"endpoints\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "endpoints")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker\" failed to cast field \"endpoints\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NotebookInstances accessor autogenerated
func (s *mqlAwsSagemaker) NotebookInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("notebookInstances")
	if !ok || !res.Valid {
		if err := s.ComputeNotebookInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("notebookInstances")
		if !ok {
			return nil, errors.New("\"aws.sagemaker\" calculated \"notebookInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "notebookInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker\" failed to cast field \"notebookInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSagemaker) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker].MqlCompute")
	switch name {
	case "endpoints":
		return s.ComputeEndpoints()
	case "notebookInstances":
		return s.ComputeNotebookInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker\" resource")
	}
}

// ComputeEndpoints computer autogenerated
func (s *mqlAwsSagemaker) ComputeEndpoints() error {
	var err error
	if _, ok := s.Cache.Load("endpoints"); ok {
		return nil
	}
	vres, err := s.GetEndpoints()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("endpoints", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNotebookInstances computer autogenerated
func (s *mqlAwsSagemaker) ComputeNotebookInstances() error {
	var err error
	if _, ok := s.Cache.Load("notebookInstances"); ok {
		return nil
	}
	vres, err := s.GetNotebookInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("notebookInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSagemakerNotebookinstance resource interface
type AwsSagemakerNotebookinstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Details() (AwsSagemakerNotebookinstanceDetails, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsSagemakerNotebookinstance for the aws.sagemaker.notebookinstance resource
type mqlAwsSagemakerNotebookinstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSagemakerNotebookinstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sagemaker.notebookinstance resource
func newAwsSagemakerNotebookinstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSagemakerNotebookinstance{runtime.NewResource("aws.sagemaker.notebookinstance")}
	var existing AwsSagemakerNotebookinstance
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "details":
			if _, ok := val.(AwsSagemakerNotebookinstanceDetails); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"details\" argument has the wrong type (expected type \"AwsSagemakerNotebookinstanceDetails\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sagemaker.notebookinstance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSagemakerNotebookinstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "details":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "details":
		return s.Details()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.notebookinstance\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.notebookinstance\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.notebookinstance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.notebookinstance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Details accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Details() (AwsSagemakerNotebookinstanceDetails, error) {
	res, ok := s.Cache.Load("details")
	if !ok || !res.Valid {
		if err := s.ComputeDetails(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("details")
		if !ok {
			return nil, errors.New("\"aws.sagemaker.notebookinstance\" calculated \"details\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "details")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsSagemakerNotebookinstanceDetails)
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker.notebookinstance\" failed to cast field \"details\" to the right type (AwsSagemakerNotebookinstanceDetails): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.notebookinstance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.notebookinstance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.sagemaker.notebookinstance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker.notebookinstance\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "details":
		return s.ComputeDetails()
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance\" resource")
	}
}

// ComputeDetails computer autogenerated
func (s *mqlAwsSagemakerNotebookinstance) ComputeDetails() error {
	var err error
	if _, ok := s.Cache.Load("details"); ok {
		return nil
	}
	vres, err := s.GetDetails()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("details", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSagemakerNotebookinstanceDetails resource interface
type AwsSagemakerNotebookinstanceDetails interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	KmsKey() (AwsKmsKey, error)
	DirectInternetAccess() (string, error)
}

// mqlAwsSagemakerNotebookinstanceDetails for the aws.sagemaker.notebookinstance.details resource
type mqlAwsSagemakerNotebookinstanceDetails struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSagemakerNotebookinstanceDetails) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sagemaker.notebookinstance.details resource
func newAwsSagemakerNotebookinstanceDetails(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSagemakerNotebookinstanceDetails{runtime.NewResource("aws.sagemaker.notebookinstance.details")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance.details\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "kmsKey":
			if _, ok := val.(AwsKmsKey); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance.details\", its \"kmsKey\" argument has the wrong type (expected type \"AwsKmsKey\")")
			}
		case "directInternetAccess":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance.details\", its \"directInternetAccess\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.notebookinstance.details\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sagemaker.notebookinstance.details with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSagemakerNotebookinstanceDetails) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance.details\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsKey"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance.details\" resource without a \"kmsKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("directInternetAccess"); !ok {
		return errors.New("Initialized \"aws.sagemaker.notebookinstance.details\" resource without a \"directInternetAccess\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance.details].Register")
	switch name {
	case "arn":
		return nil
	case "kmsKey":
		return nil
	case "directInternetAccess":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance.details\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance.details].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "kmsKey":
		return s.KmsKey()
	case "directInternetAccess":
		return s.DirectInternetAccess()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance.details\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.notebookinstance.details\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.notebookinstance.details\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KmsKey accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) KmsKey() (AwsKmsKey, error) {
	res, ok := s.Cache.Load("kmsKey")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.sagemaker.notebookinstance.details\" failed: no value provided for static field \"kmsKey\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsKmsKey)
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker.notebookinstance.details\" failed to cast field \"kmsKey\" to the right type (AwsKmsKey): %#v", res)
	}
	return tres, nil
}

// DirectInternetAccess accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) DirectInternetAccess() (string, error) {
	res, ok := s.Cache.Load("directInternetAccess")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.notebookinstance.details\" failed: no value provided for static field \"directInternetAccess\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.notebookinstance.details\" failed to cast field \"directInternetAccess\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSagemakerNotebookinstanceDetails) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.notebookinstance.details].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "kmsKey":
		return nil
	case "directInternetAccess":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.notebookinstance.details\" resource")
	}
}

// AwsSagemakerEndpoint resource interface
type AwsSagemakerEndpoint interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Config() (interface{}, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsSagemakerEndpoint for the aws.sagemaker.endpoint resource
type mqlAwsSagemakerEndpoint struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSagemakerEndpoint) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sagemaker.endpoint resource
func newAwsSagemakerEndpoint(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSagemakerEndpoint{runtime.NewResource("aws.sagemaker.endpoint")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"config\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sagemaker.endpoint\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sagemaker.endpoint with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSagemakerEndpoint) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.sagemaker.endpoint\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.sagemaker.endpoint\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.sagemaker.endpoint\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.sagemaker.endpoint\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.endpoint].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.endpoint\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.endpoint].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sagemaker.endpoint\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.endpoint\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.endpoint\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.endpoint\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.endpoint\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Config() (interface{}, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		if err := s.ComputeConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("config")
		if !ok {
			return nil, errors.New("\"aws.sagemaker.endpoint\" calculated \"config\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "config")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker.endpoint\" failed to cast field \"config\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sagemaker.endpoint\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sagemaker.endpoint\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.sagemaker.endpoint\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sagemaker.endpoint\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSagemakerEndpoint) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sagemaker.endpoint].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "config":
		return s.ComputeConfig()
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sagemaker.endpoint\" resource")
	}
}

// ComputeConfig computer autogenerated
func (s *mqlAwsSagemakerEndpoint) ComputeConfig() error {
	var err error
	if _, ok := s.Cache.Load("config"); ok {
		return nil
	}
	vres, err := s.GetConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("config", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSns resource interface
type AwsSns interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Topics() ([]interface{}, error)
}

// mqlAwsSns for the aws.sns resource
type mqlAwsSns struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSns) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sns resource
func newAwsSns(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSns{runtime.NewResource("aws.sns")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "topics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns\", its \"topics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sns\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sns with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSns) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSns) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns].Register")
	switch name {
	case "topics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSns) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sns].Field")
	switch name {
	case "topics":
		return s.Topics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sns\" resource")
	}
}

// Topics accessor autogenerated
func (s *mqlAwsSns) Topics() ([]interface{}, error) {
	res, ok := s.Cache.Load("topics")
	if !ok || !res.Valid {
		if err := s.ComputeTopics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("topics")
		if !ok {
			return nil, errors.New("\"aws.sns\" calculated \"topics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "topics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sns\" failed to cast field \"topics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSns) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns].MqlCompute")
	switch name {
	case "topics":
		return s.ComputeTopics()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns\" resource")
	}
}

// ComputeTopics computer autogenerated
func (s *mqlAwsSns) ComputeTopics() error {
	var err error
	if _, ok := s.Cache.Load("topics"); ok {
		return nil
	}
	vres, err := s.GetTopics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("topics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSnsTopic resource interface
type AwsSnsTopic interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Region() (string, error)
	Subscriptions() ([]interface{}, error)
	Attributes() (interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsSnsTopic for the aws.sns.topic resource
type mqlAwsSnsTopic struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSnsTopic) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sns.topic resource
func newAwsSnsTopic(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSnsTopic{runtime.NewResource("aws.sns.topic")}
	var existing AwsSnsTopic
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"subscriptions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "attributes":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"attributes\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.topic\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sns.topic with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSnsTopic) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.sns.topic\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.sns.topic\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.sns.topic\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSnsTopic) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns.topic].Register")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "subscriptions":
		return nil
	case "attributes":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns.topic\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSnsTopic) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sns.topic].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "region":
		return s.Region()
	case "subscriptions":
		return s.Subscriptions()
	case "attributes":
		return s.Attributes()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sns.topic\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSnsTopic) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sns.topic\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sns.topic\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsSnsTopic) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sns.topic\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sns.topic\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Subscriptions accessor autogenerated
func (s *mqlAwsSnsTopic) Subscriptions() ([]interface{}, error) {
	res, ok := s.Cache.Load("subscriptions")
	if !ok || !res.Valid {
		if err := s.ComputeSubscriptions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subscriptions")
		if !ok {
			return nil, errors.New("\"aws.sns.topic\" calculated \"subscriptions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscriptions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sns.topic\" failed to cast field \"subscriptions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Attributes accessor autogenerated
func (s *mqlAwsSnsTopic) Attributes() (interface{}, error) {
	res, ok := s.Cache.Load("attributes")
	if !ok || !res.Valid {
		if err := s.ComputeAttributes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attributes")
		if !ok {
			return nil, errors.New("\"aws.sns.topic\" calculated \"attributes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attributes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sns.topic\" failed to cast field \"attributes\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsSnsTopic) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.sns.topic\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.sns.topic\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSnsTopic) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns.topic].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "subscriptions":
		return s.ComputeSubscriptions()
	case "attributes":
		return s.ComputeAttributes()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns.topic\" resource")
	}
}

// ComputeSubscriptions computer autogenerated
func (s *mqlAwsSnsTopic) ComputeSubscriptions() error {
	var err error
	if _, ok := s.Cache.Load("subscriptions"); ok {
		return nil
	}
	vres, err := s.GetSubscriptions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscriptions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttributes computer autogenerated
func (s *mqlAwsSnsTopic) ComputeAttributes() error {
	var err error
	if _, ok := s.Cache.Load("attributes"); ok {
		return nil
	}
	vres, err := s.GetAttributes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attributes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSnsSubscription resource interface
type AwsSnsSubscription interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Protocol() (string, error)
}

// mqlAwsSnsSubscription for the aws.sns.subscription resource
type mqlAwsSnsSubscription struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSnsSubscription) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.sns.subscription resource
func newAwsSnsSubscription(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSnsSubscription{runtime.NewResource("aws.sns.subscription")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.subscription\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "protocol":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.subscription\", its \"protocol\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.sns.subscription\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.sns.subscription with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSnsSubscription) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.sns.subscription\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("protocol"); !ok {
		return errors.New("Initialized \"aws.sns.subscription\" resource without a \"protocol\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSnsSubscription) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns.subscription].Register")
	switch name {
	case "arn":
		return nil
	case "protocol":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns.subscription\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSnsSubscription) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.sns.subscription].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "protocol":
		return s.Protocol()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.sns.subscription\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSnsSubscription) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sns.subscription\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sns.subscription\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Protocol accessor autogenerated
func (s *mqlAwsSnsSubscription) Protocol() (string, error) {
	res, ok := s.Cache.Load("protocol")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.sns.subscription\" failed: no value provided for static field \"protocol\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.sns.subscription\" failed to cast field \"protocol\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSnsSubscription) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.sns.subscription].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "protocol":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.sns.subscription\" resource")
	}
}

// AwsEs resource interface
type AwsEs interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Domains() ([]interface{}, error)
}

// mqlAwsEs for the aws.es resource
type mqlAwsEs struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEs) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.es resource
func newAwsEs(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEs{runtime.NewResource("aws.es")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.es\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.es\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.es with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEs) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEs) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.es].Register")
	switch name {
	case "domains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.es\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEs) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.es].Field")
	switch name {
	case "domains":
		return s.Domains()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.es\" resource")
	}
}

// Domains accessor autogenerated
func (s *mqlAwsEs) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"aws.es\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.es\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEs) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.es].MqlCompute")
	switch name {
	case "domains":
		return s.ComputeDomains()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.es\" resource")
	}
}

// ComputeDomains computer autogenerated
func (s *mqlAwsEs) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEsDomain resource interface
type AwsEsDomain interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	EncryptionAtRestEnabled() (bool, error)
	NodeToNodeEncryptionEnabled() (bool, error)
	Name() (string, error)
	Endpoint() (string, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsEsDomain for the aws.es.domain resource
type mqlAwsEsDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEsDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.es.domain resource
func newAwsEsDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEsDomain{runtime.NewResource("aws.es.domain")}
	var existing AwsEsDomain
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "encryptionAtRestEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"encryptionAtRestEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "nodeToNodeEncryptionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"nodeToNodeEncryptionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.es.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.es.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEsDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("encryptionAtRestEnabled"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"encryptionAtRestEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("nodeToNodeEncryptionEnabled"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"nodeToNodeEncryptionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.es.domain\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEsDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.es.domain].Register")
	switch name {
	case "arn":
		return nil
	case "encryptionAtRestEnabled":
		return nil
	case "nodeToNodeEncryptionEnabled":
		return nil
	case "name":
		return nil
	case "endpoint":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.es.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEsDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.es.domain].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "encryptionAtRestEnabled":
		return s.EncryptionAtRestEnabled()
	case "nodeToNodeEncryptionEnabled":
		return s.NodeToNodeEncryptionEnabled()
	case "name":
		return s.Name()
	case "endpoint":
		return s.Endpoint()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.es.domain\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEsDomain) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.es.domain\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.es.domain\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EncryptionAtRestEnabled accessor autogenerated
func (s *mqlAwsEsDomain) EncryptionAtRestEnabled() (bool, error) {
	res, ok := s.Cache.Load("encryptionAtRestEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.es.domain\" failed: no value provided for static field \"encryptionAtRestEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.es.domain\" failed to cast field \"encryptionAtRestEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NodeToNodeEncryptionEnabled accessor autogenerated
func (s *mqlAwsEsDomain) NodeToNodeEncryptionEnabled() (bool, error) {
	res, ok := s.Cache.Load("nodeToNodeEncryptionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.es.domain\" failed: no value provided for static field \"nodeToNodeEncryptionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.es.domain\" failed to cast field \"nodeToNodeEncryptionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEsDomain) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.es.domain\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.es.domain\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlAwsEsDomain) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.es.domain\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.es.domain\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEsDomain) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.es.domain\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.es.domain\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEsDomain) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.es.domain\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.es.domain\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEsDomain) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.es.domain].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "encryptionAtRestEnabled":
		return nil
	case "nodeToNodeEncryptionEnabled":
		return nil
	case "name":
		return nil
	case "endpoint":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.es.domain\" resource")
	}
}

// AwsAcm resource interface
type AwsAcm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Certificates() ([]interface{}, error)
}

// mqlAwsAcm for the aws.acm resource
type mqlAwsAcm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAcm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.acm resource
func newAwsAcm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAcm{runtime.NewResource("aws.acm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.acm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.acm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAcm) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAcm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.acm].Register")
	switch name {
	case "certificates":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.acm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAcm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.acm].Field")
	switch name {
	case "certificates":
		return s.Certificates()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.acm\" resource")
	}
}

// Certificates accessor autogenerated
func (s *mqlAwsAcm) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"aws.acm\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.acm\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAcm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.acm].MqlCompute")
	switch name {
	case "certificates":
		return s.ComputeCertificates()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.acm\" resource")
	}
}

// ComputeCertificates computer autogenerated
func (s *mqlAwsAcm) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsAcmCertificate resource interface
type AwsAcmCertificate interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	NotBefore() (*time.Time, error)
	NotAfter() (*time.Time, error)
	CreatedAt() (*time.Time, error)
	DomainName() (string, error)
	Status() (string, error)
	Subject() (string, error)
	Certificate() (core.Certificate, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsAcmCertificate for the aws.acm.certificate resource
type mqlAwsAcmCertificate struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAcmCertificate) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.acm.certificate resource
func newAwsAcmCertificate(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAcmCertificate{runtime.NewResource("aws.acm.certificate")}
	var existing AwsAcmCertificate
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "notBefore":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"notBefore\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "notAfter":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"notAfter\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createdAt":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"createdAt\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "domainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"domainName\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "subject":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"subject\" argument has the wrong type (expected type \"string\")")
			}
		case "certificate":
			if _, ok := val.(core.Certificate); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"certificate\" argument has the wrong type (expected type \"core.Certificate\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.acm.certificate\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.acm.certificate with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAcmCertificate) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("notBefore"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"notBefore\". This field is required.")
	}
	if _, ok := s.Cache.Load("notAfter"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"notAfter\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdAt"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"createdAt\". This field is required.")
	}
	if _, ok := s.Cache.Load("domainName"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"domainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("subject"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"subject\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.acm.certificate\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAcmCertificate) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.acm.certificate].Register")
	switch name {
	case "arn":
		return nil
	case "notBefore":
		return nil
	case "notAfter":
		return nil
	case "createdAt":
		return nil
	case "domainName":
		return nil
	case "status":
		return nil
	case "subject":
		return nil
	case "certificate":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.acm.certificate\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAcmCertificate) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.acm.certificate].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "notBefore":
		return s.NotBefore()
	case "notAfter":
		return s.NotAfter()
	case "createdAt":
		return s.CreatedAt()
	case "domainName":
		return s.DomainName()
	case "status":
		return s.Status()
	case "subject":
		return s.Subject()
	case "certificate":
		return s.Certificate()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.acm.certificate\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsAcmCertificate) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NotBefore accessor autogenerated
func (s *mqlAwsAcmCertificate) NotBefore() (*time.Time, error) {
	res, ok := s.Cache.Load("notBefore")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"notBefore\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"notBefore\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// NotAfter accessor autogenerated
func (s *mqlAwsAcmCertificate) NotAfter() (*time.Time, error) {
	res, ok := s.Cache.Load("notAfter")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"notAfter\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"notAfter\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreatedAt accessor autogenerated
func (s *mqlAwsAcmCertificate) CreatedAt() (*time.Time, error) {
	res, ok := s.Cache.Load("createdAt")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"createdAt\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"createdAt\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DomainName accessor autogenerated
func (s *mqlAwsAcmCertificate) DomainName() (string, error) {
	res, ok := s.Cache.Load("domainName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"domainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"domainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsAcmCertificate) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Subject accessor autogenerated
func (s *mqlAwsAcmCertificate) Subject() (string, error) {
	res, ok := s.Cache.Load("subject")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"subject\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"subject\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Certificate accessor autogenerated
func (s *mqlAwsAcmCertificate) Certificate() (core.Certificate, error) {
	res, ok := s.Cache.Load("certificate")
	if !ok || !res.Valid {
		if err := s.ComputeCertificate(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificate")
		if !ok {
			return nil, errors.New("\"aws.acm.certificate\" calculated \"certificate\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificate")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(core.Certificate)
	if !ok {
		return nil, fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"certificate\" to the right type (core.Certificate): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsAcmCertificate) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.acm.certificate\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.acm.certificate\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAcmCertificate) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.acm.certificate].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "notBefore":
		return nil
	case "notAfter":
		return nil
	case "createdAt":
		return nil
	case "domainName":
		return nil
	case "status":
		return nil
	case "subject":
		return nil
	case "certificate":
		return s.ComputeCertificate()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.acm.certificate\" resource")
	}
}

// ComputeCertificate computer autogenerated
func (s *mqlAwsAcmCertificate) ComputeCertificate() error {
	var err error
	if _, ok := s.Cache.Load("certificate"); ok {
		return nil
	}
	vres, err := s.GetCertificate()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificate", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsAutoscaling resource interface
type AwsAutoscaling interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Groups() ([]interface{}, error)
}

// mqlAwsAutoscaling for the aws.autoscaling resource
type mqlAwsAutoscaling struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAutoscaling) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.autoscaling resource
func newAwsAutoscaling(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAutoscaling{runtime.NewResource("aws.autoscaling")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.autoscaling with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAutoscaling) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAutoscaling) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.autoscaling].Register")
	switch name {
	case "groups":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.autoscaling\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAutoscaling) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.autoscaling].Field")
	switch name {
	case "groups":
		return s.Groups()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.autoscaling\" resource")
	}
}

// Groups accessor autogenerated
func (s *mqlAwsAutoscaling) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"aws.autoscaling\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.autoscaling\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAutoscaling) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.autoscaling].MqlCompute")
	switch name {
	case "groups":
		return s.ComputeGroups()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.autoscaling\" resource")
	}
}

// ComputeGroups computer autogenerated
func (s *mqlAwsAutoscaling) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsAutoscalingGroup resource interface
type AwsAutoscalingGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	LoadBalancerNames() ([]interface{}, error)
	HealthCheckType() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsAutoscalingGroup for the aws.autoscaling.group resource
type mqlAwsAutoscalingGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsAutoscalingGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.autoscaling.group resource
func newAwsAutoscalingGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsAutoscalingGroup{runtime.NewResource("aws.autoscaling.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "loadBalancerNames":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"loadBalancerNames\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "healthCheckType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"healthCheckType\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.autoscaling.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.autoscaling.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsAutoscalingGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.autoscaling.group\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.autoscaling.group\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("loadBalancerNames"); !ok {
		return errors.New("Initialized \"aws.autoscaling.group\" resource without a \"loadBalancerNames\". This field is required.")
	}
	if _, ok := s.Cache.Load("healthCheckType"); !ok {
		return errors.New("Initialized \"aws.autoscaling.group\" resource without a \"healthCheckType\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.autoscaling.group\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsAutoscalingGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.autoscaling.group].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "loadBalancerNames":
		return nil
	case "healthCheckType":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.autoscaling.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsAutoscalingGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.autoscaling.group].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "loadBalancerNames":
		return s.LoadBalancerNames()
	case "healthCheckType":
		return s.HealthCheckType()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.autoscaling.group\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsAutoscalingGroup) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.autoscaling.group\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.autoscaling.group\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsAutoscalingGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.autoscaling.group\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.autoscaling.group\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LoadBalancerNames accessor autogenerated
func (s *mqlAwsAutoscalingGroup) LoadBalancerNames() ([]interface{}, error) {
	res, ok := s.Cache.Load("loadBalancerNames")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.autoscaling.group\" failed: no value provided for static field \"loadBalancerNames\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.autoscaling.group\" failed to cast field \"loadBalancerNames\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// HealthCheckType accessor autogenerated
func (s *mqlAwsAutoscalingGroup) HealthCheckType() (string, error) {
	res, ok := s.Cache.Load("healthCheckType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.autoscaling.group\" failed: no value provided for static field \"healthCheckType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.autoscaling.group\" failed to cast field \"healthCheckType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsAutoscalingGroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.autoscaling.group\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.autoscaling.group\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsAutoscalingGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.autoscaling.group].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "loadBalancerNames":
		return nil
	case "healthCheckType":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.autoscaling.group\" resource")
	}
}

// AwsElb resource interface
type AwsElb interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ClassicLoadBalancers() ([]interface{}, error)
	LoadBalancers() ([]interface{}, error)
}

// mqlAwsElb for the aws.elb resource
type mqlAwsElb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsElb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.elb resource
func newAwsElb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsElb{runtime.NewResource("aws.elb")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "classicLoadBalancers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb\", its \"classicLoadBalancers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "loadBalancers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb\", its \"loadBalancers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.elb\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.elb with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsElb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsElb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elb].Register")
	switch name {
	case "classicLoadBalancers":
		return nil
	case "loadBalancers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elb\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsElb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.elb].Field")
	switch name {
	case "classicLoadBalancers":
		return s.ClassicLoadBalancers()
	case "loadBalancers":
		return s.LoadBalancers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.elb\" resource")
	}
}

// ClassicLoadBalancers accessor autogenerated
func (s *mqlAwsElb) ClassicLoadBalancers() ([]interface{}, error) {
	res, ok := s.Cache.Load("classicLoadBalancers")
	if !ok || !res.Valid {
		if err := s.ComputeClassicLoadBalancers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("classicLoadBalancers")
		if !ok {
			return nil, errors.New("\"aws.elb\" calculated \"classicLoadBalancers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "classicLoadBalancers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.elb\" failed to cast field \"classicLoadBalancers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LoadBalancers accessor autogenerated
func (s *mqlAwsElb) LoadBalancers() ([]interface{}, error) {
	res, ok := s.Cache.Load("loadBalancers")
	if !ok || !res.Valid {
		if err := s.ComputeLoadBalancers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("loadBalancers")
		if !ok {
			return nil, errors.New("\"aws.elb\" calculated \"loadBalancers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "loadBalancers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.elb\" failed to cast field \"loadBalancers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsElb) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elb].MqlCompute")
	switch name {
	case "classicLoadBalancers":
		return s.ComputeClassicLoadBalancers()
	case "loadBalancers":
		return s.ComputeLoadBalancers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elb\" resource")
	}
}

// ComputeClassicLoadBalancers computer autogenerated
func (s *mqlAwsElb) ComputeClassicLoadBalancers() error {
	var err error
	if _, ok := s.Cache.Load("classicLoadBalancers"); ok {
		return nil
	}
	vres, err := s.GetClassicLoadBalancers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("classicLoadBalancers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLoadBalancers computer autogenerated
func (s *mqlAwsElb) ComputeLoadBalancers() error {
	var err error
	if _, ok := s.Cache.Load("loadBalancers"); ok {
		return nil
	}
	vres, err := s.GetLoadBalancers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("loadBalancers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsElbLoadbalancer resource interface
type AwsElbLoadbalancer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	DnsName() (string, error)
	ListenerDescriptions() ([]interface{}, error)
	Name() (string, error)
	Scheme() (string, error)
	Attributes() ([]interface{}, error)
}

// mqlAwsElbLoadbalancer for the aws.elb.loadbalancer resource
type mqlAwsElbLoadbalancer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsElbLoadbalancer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.elb.loadbalancer resource
func newAwsElbLoadbalancer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsElbLoadbalancer{runtime.NewResource("aws.elb.loadbalancer")}
	var existing AwsElbLoadbalancer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "dnsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"dnsName\" argument has the wrong type (expected type \"string\")")
			}
		case "listenerDescriptions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"listenerDescriptions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "scheme":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"scheme\" argument has the wrong type (expected type \"string\")")
			}
		case "attributes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"attributes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.elb.loadbalancer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.elb.loadbalancer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsElbLoadbalancer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.elb.loadbalancer\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("dnsName"); !ok {
		return errors.New("Initialized \"aws.elb.loadbalancer\" resource without a \"dnsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.elb.loadbalancer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("scheme"); !ok {
		return errors.New("Initialized \"aws.elb.loadbalancer\" resource without a \"scheme\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elb.loadbalancer].Register")
	switch name {
	case "arn":
		return nil
	case "dnsName":
		return nil
	case "listenerDescriptions":
		return nil
	case "name":
		return nil
	case "scheme":
		return nil
	case "attributes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elb.loadbalancer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.elb.loadbalancer].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "dnsName":
		return s.DnsName()
	case "listenerDescriptions":
		return s.ListenerDescriptions()
	case "name":
		return s.Name()
	case "scheme":
		return s.Scheme()
	case "attributes":
		return s.Attributes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.elb.loadbalancer\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.elb.loadbalancer\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DnsName accessor autogenerated
func (s *mqlAwsElbLoadbalancer) DnsName() (string, error) {
	res, ok := s.Cache.Load("dnsName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.elb.loadbalancer\" failed: no value provided for static field \"dnsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"dnsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ListenerDescriptions accessor autogenerated
func (s *mqlAwsElbLoadbalancer) ListenerDescriptions() ([]interface{}, error) {
	res, ok := s.Cache.Load("listenerDescriptions")
	if !ok || !res.Valid {
		if err := s.ComputeListenerDescriptions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("listenerDescriptions")
		if !ok {
			return nil, errors.New("\"aws.elb.loadbalancer\" calculated \"listenerDescriptions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "listenerDescriptions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"listenerDescriptions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.elb.loadbalancer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scheme accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Scheme() (string, error) {
	res, ok := s.Cache.Load("scheme")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.elb.loadbalancer\" failed: no value provided for static field \"scheme\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"scheme\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attributes accessor autogenerated
func (s *mqlAwsElbLoadbalancer) Attributes() ([]interface{}, error) {
	res, ok := s.Cache.Load("attributes")
	if !ok || !res.Valid {
		if err := s.ComputeAttributes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attributes")
		if !ok {
			return nil, errors.New("\"aws.elb.loadbalancer\" calculated \"attributes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attributes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.elb.loadbalancer\" failed to cast field \"attributes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsElbLoadbalancer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elb.loadbalancer].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "dnsName":
		return nil
	case "listenerDescriptions":
		return s.ComputeListenerDescriptions()
	case "name":
		return nil
	case "scheme":
		return nil
	case "attributes":
		return s.ComputeAttributes()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elb.loadbalancer\" resource")
	}
}

// ComputeListenerDescriptions computer autogenerated
func (s *mqlAwsElbLoadbalancer) ComputeListenerDescriptions() error {
	var err error
	if _, ok := s.Cache.Load("listenerDescriptions"); ok {
		return nil
	}
	vres, err := s.GetListenerDescriptions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("listenerDescriptions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAttributes computer autogenerated
func (s *mqlAwsElbLoadbalancer) ComputeAttributes() error {
	var err error
	if _, ok := s.Cache.Load("attributes"); ok {
		return nil
	}
	vres, err := s.GetAttributes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attributes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCodebuild resource interface
type AwsCodebuild interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Projects() ([]interface{}, error)
}

// mqlAwsCodebuild for the aws.codebuild resource
type mqlAwsCodebuild struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCodebuild) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.codebuild resource
func newAwsCodebuild(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCodebuild{runtime.NewResource("aws.codebuild")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projects":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild\", its \"projects\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.codebuild with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCodebuild) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCodebuild) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.codebuild].Register")
	switch name {
	case "projects":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.codebuild\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCodebuild) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.codebuild].Field")
	switch name {
	case "projects":
		return s.Projects()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.codebuild\" resource")
	}
}

// Projects accessor autogenerated
func (s *mqlAwsCodebuild) Projects() ([]interface{}, error) {
	res, ok := s.Cache.Load("projects")
	if !ok || !res.Valid {
		if err := s.ComputeProjects(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("projects")
		if !ok {
			return nil, errors.New("\"aws.codebuild\" calculated \"projects\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "projects")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.codebuild\" failed to cast field \"projects\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCodebuild) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.codebuild].MqlCompute")
	switch name {
	case "projects":
		return s.ComputeProjects()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.codebuild\" resource")
	}
}

// ComputeProjects computer autogenerated
func (s *mqlAwsCodebuild) ComputeProjects() error {
	var err error
	if _, ok := s.Cache.Load("projects"); ok {
		return nil
	}
	vres, err := s.GetProjects()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("projects", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCodebuildProject resource interface
type AwsCodebuildProject interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Description() (string, error)
	Name() (string, error)
	Environment() (interface{}, error)
	Region() (string, error)
	Source() (interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsCodebuildProject for the aws.codebuild.project resource
type mqlAwsCodebuildProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCodebuildProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.codebuild.project resource
func newAwsCodebuildProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCodebuildProject{runtime.NewResource("aws.codebuild.project")}
	var existing AwsCodebuildProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "environment":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"environment\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"source\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.codebuild.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.codebuild.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCodebuildProject) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("environment"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"environment\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"source\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.codebuild.project\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCodebuildProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.codebuild.project].Register")
	switch name {
	case "arn":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "environment":
		return nil
	case "region":
		return nil
	case "source":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.codebuild.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCodebuildProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.codebuild.project].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "description":
		return s.Description()
	case "name":
		return s.Name()
	case "environment":
		return s.Environment()
	case "region":
		return s.Region()
	case "source":
		return s.Source()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.codebuild.project\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsCodebuildProject) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsCodebuildProject) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsCodebuildProject) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Environment accessor autogenerated
func (s *mqlAwsCodebuildProject) Environment() (interface{}, error) {
	res, ok := s.Cache.Load("environment")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"environment\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"environment\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCodebuildProject) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAwsCodebuildProject) Source() (interface{}, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"source\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsCodebuildProject) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.codebuild.project\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.codebuild.project\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCodebuildProject) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.codebuild.project].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "description":
		return nil
	case "name":
		return nil
	case "environment":
		return nil
	case "region":
		return nil
	case "source":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.codebuild.project\" resource")
	}
}

// AwsGuardduty resource interface
type AwsGuardduty interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Detectors() ([]interface{}, error)
}

// mqlAwsGuardduty for the aws.guardduty resource
type mqlAwsGuardduty struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsGuardduty) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.guardduty resource
func newAwsGuardduty(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsGuardduty{runtime.NewResource("aws.guardduty")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "detectors":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty\", its \"detectors\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.guardduty with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsGuardduty) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsGuardduty) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.guardduty].Register")
	switch name {
	case "detectors":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.guardduty\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsGuardduty) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.guardduty].Field")
	switch name {
	case "detectors":
		return s.Detectors()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.guardduty\" resource")
	}
}

// Detectors accessor autogenerated
func (s *mqlAwsGuardduty) Detectors() ([]interface{}, error) {
	res, ok := s.Cache.Load("detectors")
	if !ok || !res.Valid {
		if err := s.ComputeDetectors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("detectors")
		if !ok {
			return nil, errors.New("\"aws.guardduty\" calculated \"detectors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "detectors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.guardduty\" failed to cast field \"detectors\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsGuardduty) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.guardduty].MqlCompute")
	switch name {
	case "detectors":
		return s.ComputeDetectors()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.guardduty\" resource")
	}
}

// ComputeDetectors computer autogenerated
func (s *mqlAwsGuardduty) ComputeDetectors() error {
	var err error
	if _, ok := s.Cache.Load("detectors"); ok {
		return nil
	}
	vres, err := s.GetDetectors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("detectors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsGuarddutyDetector resource interface
type AwsGuarddutyDetector interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Region() (string, error)
	Status() (string, error)
	FindingPublishingFrequency() (string, error)
	UnarchivedFindings() ([]interface{}, error)
}

// mqlAwsGuarddutyDetector for the aws.guardduty.detector resource
type mqlAwsGuarddutyDetector struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsGuarddutyDetector) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.guardduty.detector resource
func newAwsGuarddutyDetector(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsGuarddutyDetector{runtime.NewResource("aws.guardduty.detector")}
	var existing AwsGuarddutyDetector
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "findingPublishingFrequency":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"findingPublishingFrequency\" argument has the wrong type (expected type \"string\")")
			}
		case "unarchivedFindings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"unarchivedFindings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.guardduty.detector\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.guardduty.detector with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsGuarddutyDetector) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.guardduty.detector\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.guardduty.detector\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.guardduty.detector\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("findingPublishingFrequency"); !ok {
		return errors.New("Initialized \"aws.guardduty.detector\" resource without a \"findingPublishingFrequency\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsGuarddutyDetector) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.guardduty.detector].Register")
	switch name {
	case "id":
		return nil
	case "region":
		return nil
	case "status":
		return nil
	case "findingPublishingFrequency":
		return nil
	case "unarchivedFindings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.guardduty.detector\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsGuarddutyDetector) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.guardduty.detector].Field")
	switch name {
	case "id":
		return s.Id()
	case "region":
		return s.Region()
	case "status":
		return s.Status()
	case "findingPublishingFrequency":
		return s.FindingPublishingFrequency()
	case "unarchivedFindings":
		return s.UnarchivedFindings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.guardduty.detector\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsGuarddutyDetector) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.guardduty.detector\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.guardduty.detector\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsGuarddutyDetector) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.guardduty.detector\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.guardduty.detector\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsGuarddutyDetector) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.guardduty.detector\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.guardduty.detector\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FindingPublishingFrequency accessor autogenerated
func (s *mqlAwsGuarddutyDetector) FindingPublishingFrequency() (string, error) {
	res, ok := s.Cache.Load("findingPublishingFrequency")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.guardduty.detector\" failed: no value provided for static field \"findingPublishingFrequency\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.guardduty.detector\" failed to cast field \"findingPublishingFrequency\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UnarchivedFindings accessor autogenerated
func (s *mqlAwsGuarddutyDetector) UnarchivedFindings() ([]interface{}, error) {
	res, ok := s.Cache.Load("unarchivedFindings")
	if !ok || !res.Valid {
		if err := s.ComputeUnarchivedFindings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("unarchivedFindings")
		if !ok {
			return nil, errors.New("\"aws.guardduty.detector\" calculated \"unarchivedFindings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "unarchivedFindings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.guardduty.detector\" failed to cast field \"unarchivedFindings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsGuarddutyDetector) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.guardduty.detector].MqlCompute")
	switch name {
	case "id":
		return nil
	case "region":
		return nil
	case "status":
		return nil
	case "findingPublishingFrequency":
		return nil
	case "unarchivedFindings":
		return s.ComputeUnarchivedFindings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.guardduty.detector\" resource")
	}
}

// ComputeUnarchivedFindings computer autogenerated
func (s *mqlAwsGuarddutyDetector) ComputeUnarchivedFindings() error {
	var err error
	if _, ok := s.Cache.Load("unarchivedFindings"); ok {
		return nil
	}
	vres, err := s.GetUnarchivedFindings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("unarchivedFindings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSecurityhub resource interface
type AwsSecurityhub interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Hubs() ([]interface{}, error)
}

// mqlAwsSecurityhub for the aws.securityhub resource
type mqlAwsSecurityhub struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSecurityhub) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.securityhub resource
func newAwsSecurityhub(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSecurityhub{runtime.NewResource("aws.securityhub")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "hubs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.securityhub\", its \"hubs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.securityhub\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.securityhub with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSecurityhub) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSecurityhub) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.securityhub].Register")
	switch name {
	case "hubs":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.securityhub\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSecurityhub) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.securityhub].Field")
	switch name {
	case "hubs":
		return s.Hubs()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.securityhub\" resource")
	}
}

// Hubs accessor autogenerated
func (s *mqlAwsSecurityhub) Hubs() ([]interface{}, error) {
	res, ok := s.Cache.Load("hubs")
	if !ok || !res.Valid {
		if err := s.ComputeHubs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("hubs")
		if !ok {
			return nil, errors.New("\"aws.securityhub\" calculated \"hubs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "hubs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.securityhub\" failed to cast field \"hubs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSecurityhub) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.securityhub].MqlCompute")
	switch name {
	case "hubs":
		return s.ComputeHubs()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.securityhub\" resource")
	}
}

// ComputeHubs computer autogenerated
func (s *mqlAwsSecurityhub) ComputeHubs() error {
	var err error
	if _, ok := s.Cache.Load("hubs"); ok {
		return nil
	}
	vres, err := s.GetHubs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("hubs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSecurityhubHub resource interface
type AwsSecurityhubHub interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	SubscribedAt() (string, error)
}

// mqlAwsSecurityhubHub for the aws.securityhub.hub resource
type mqlAwsSecurityhubHub struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSecurityhubHub) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.securityhub.hub resource
func newAwsSecurityhubHub(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSecurityhubHub{runtime.NewResource("aws.securityhub.hub")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.securityhub.hub\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "subscribedAt":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.securityhub.hub\", its \"subscribedAt\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.securityhub.hub\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.securityhub.hub with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSecurityhubHub) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.securityhub.hub\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("subscribedAt"); !ok {
		return errors.New("Initialized \"aws.securityhub.hub\" resource without a \"subscribedAt\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSecurityhubHub) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.securityhub.hub].Register")
	switch name {
	case "arn":
		return nil
	case "subscribedAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.securityhub.hub\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSecurityhubHub) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.securityhub.hub].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "subscribedAt":
		return s.SubscribedAt()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.securityhub.hub\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSecurityhubHub) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.securityhub.hub\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.securityhub.hub\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscribedAt accessor autogenerated
func (s *mqlAwsSecurityhubHub) SubscribedAt() (string, error) {
	res, ok := s.Cache.Load("subscribedAt")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.securityhub.hub\" failed: no value provided for static field \"subscribedAt\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.securityhub.hub\" failed to cast field \"subscribedAt\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSecurityhubHub) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.securityhub.hub].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "subscribedAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.securityhub.hub\" resource")
	}
}

// AwsSecretsmanager resource interface
type AwsSecretsmanager interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Secrets() ([]interface{}, error)
}

// mqlAwsSecretsmanager for the aws.secretsmanager resource
type mqlAwsSecretsmanager struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSecretsmanager) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.secretsmanager resource
func newAwsSecretsmanager(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSecretsmanager{runtime.NewResource("aws.secretsmanager")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.secretsmanager with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSecretsmanager) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSecretsmanager) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager].Register")
	switch name {
	case "secrets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.secretsmanager\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSecretsmanager) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager].Field")
	switch name {
	case "secrets":
		return s.Secrets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.secretsmanager\" resource")
	}
}

// Secrets accessor autogenerated
func (s *mqlAwsSecretsmanager) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"aws.secretsmanager\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.secretsmanager\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSecretsmanager) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager].MqlCompute")
	switch name {
	case "secrets":
		return s.ComputeSecrets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.secretsmanager\" resource")
	}
}

// ComputeSecrets computer autogenerated
func (s *mqlAwsSecretsmanager) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSecretsmanagerSecret resource interface
type AwsSecretsmanagerSecret interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	RotationEnabled() (bool, error)
	Name() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsSecretsmanagerSecret for the aws.secretsmanager.secret resource
type mqlAwsSecretsmanagerSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSecretsmanagerSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.secretsmanager.secret resource
func newAwsSecretsmanagerSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSecretsmanagerSecret{runtime.NewResource("aws.secretsmanager.secret")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager.secret\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "rotationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager.secret\", its \"rotationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager.secret\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager.secret\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.secretsmanager.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.secretsmanager.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSecretsmanagerSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.secretsmanager.secret\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("rotationEnabled"); !ok {
		return errors.New("Initialized \"aws.secretsmanager.secret\" resource without a \"rotationEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.secretsmanager.secret\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.secretsmanager.secret\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager.secret].Register")
	switch name {
	case "arn":
		return nil
	case "rotationEnabled":
		return nil
	case "name":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.secretsmanager.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager.secret].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "rotationEnabled":
		return s.RotationEnabled()
	case "name":
		return s.Name()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.secretsmanager.secret\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.secretsmanager.secret\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.secretsmanager.secret\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RotationEnabled accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) RotationEnabled() (bool, error) {
	res, ok := s.Cache.Load("rotationEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.secretsmanager.secret\" failed: no value provided for static field \"rotationEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.secretsmanager.secret\" failed to cast field \"rotationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.secretsmanager.secret\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.secretsmanager.secret\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.secretsmanager.secret\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.secretsmanager.secret\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSecretsmanagerSecret) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.secretsmanager.secret].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "rotationEnabled":
		return nil
	case "name":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.secretsmanager.secret\" resource")
	}
}

// AwsEcs resource interface
type AwsEcs interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Clusters() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlAwsEcs for the aws.ecs resource
type mqlAwsEcs struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcs) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecs resource
func newAwsEcs(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcs{runtime.NewResource("aws.ecs")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecs with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcs) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcs) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs].Register")
	switch name {
	case "clusters":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcs) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecs].Field")
	switch name {
	case "clusters":
		return s.Clusters()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecs\" resource")
	}
}

// Clusters accessor autogenerated
func (s *mqlAwsEcs) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"aws.ecs\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAwsEcs) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"aws.ecs\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcs) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs].MqlCompute")
	switch name {
	case "clusters":
		return s.ComputeClusters()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAwsEcs) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlAwsEcs) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEcsCluster resource interface
type AwsEcsCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Tags() (map[string]interface{}, error)
	RunningTasksCount() (int64, error)
	PendingTasksCount() (int64, error)
	RegisteredContainerInstancesCount() (int64, error)
	Configuration() (interface{}, error)
	Status() (string, error)
	Tasks() ([]interface{}, error)
}

// mqlAwsEcsCluster for the aws.ecs.cluster resource
type mqlAwsEcsCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcsCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecs.cluster resource
func newAwsEcsCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcsCluster{runtime.NewResource("aws.ecs.cluster")}
	var existing AwsEcsCluster
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "runningTasksCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"runningTasksCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "pendingTasksCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"pendingTasksCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "registeredContainerInstancesCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"registeredContainerInstancesCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "configuration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"configuration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "tasks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"tasks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecs.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcsCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("runningTasksCount"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"runningTasksCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("pendingTasksCount"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"pendingTasksCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("registeredContainerInstancesCount"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"registeredContainerInstancesCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("configuration"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"configuration\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.ecs.cluster\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcsCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.cluster].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "tags":
		return nil
	case "runningTasksCount":
		return nil
	case "pendingTasksCount":
		return nil
	case "registeredContainerInstancesCount":
		return nil
	case "configuration":
		return nil
	case "status":
		return nil
	case "tasks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcsCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecs.cluster].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "tags":
		return s.Tags()
	case "runningTasksCount":
		return s.RunningTasksCount()
	case "pendingTasksCount":
		return s.PendingTasksCount()
	case "registeredContainerInstancesCount":
		return s.RegisteredContainerInstancesCount()
	case "configuration":
		return s.Configuration()
	case "status":
		return s.Status()
	case "tasks":
		return s.Tasks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecs.cluster\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEcsCluster) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEcsCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEcsCluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// RunningTasksCount accessor autogenerated
func (s *mqlAwsEcsCluster) RunningTasksCount() (int64, error) {
	res, ok := s.Cache.Load("runningTasksCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"runningTasksCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"runningTasksCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// PendingTasksCount accessor autogenerated
func (s *mqlAwsEcsCluster) PendingTasksCount() (int64, error) {
	res, ok := s.Cache.Load("pendingTasksCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"pendingTasksCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"pendingTasksCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// RegisteredContainerInstancesCount accessor autogenerated
func (s *mqlAwsEcsCluster) RegisteredContainerInstancesCount() (int64, error) {
	res, ok := s.Cache.Load("registeredContainerInstancesCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"registeredContainerInstancesCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"registeredContainerInstancesCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlAwsEcsCluster) Configuration() (interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"configuration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"configuration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEcsCluster) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.cluster\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tasks accessor autogenerated
func (s *mqlAwsEcsCluster) Tasks() ([]interface{}, error) {
	res, ok := s.Cache.Load("tasks")
	if !ok || !res.Valid {
		if err := s.ComputeTasks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tasks")
		if !ok {
			return nil, errors.New("\"aws.ecs.cluster\" calculated \"tasks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tasks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.cluster\" failed to cast field \"tasks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcsCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.cluster].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "tags":
		return nil
	case "runningTasksCount":
		return nil
	case "pendingTasksCount":
		return nil
	case "registeredContainerInstancesCount":
		return nil
	case "configuration":
		return nil
	case "status":
		return nil
	case "tasks":
		return s.ComputeTasks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.cluster\" resource")
	}
}

// ComputeTasks computer autogenerated
func (s *mqlAwsEcsCluster) ComputeTasks() error {
	var err error
	if _, ok := s.Cache.Load("tasks"); ok {
		return nil
	}
	vres, err := s.GetTasks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tasks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEcsTask resource interface
type AwsEcsTask interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	ClusterName() (string, error)
	Connectivity() (interface{}, error)
	LastStatus() (string, error)
	PlatformFamily() (string, error)
	Tags() (map[string]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlAwsEcsTask for the aws.ecs.task resource
type mqlAwsEcsTask struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcsTask) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecs.task resource
func newAwsEcsTask(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcsTask{runtime.NewResource("aws.ecs.task")}
	var existing AwsEcsTask
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "clusterName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"clusterName\" argument has the wrong type (expected type \"string\")")
			}
		case "connectivity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"connectivity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "lastStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"lastStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "platformFamily":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"platformFamily\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.task\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecs.task with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcsTask) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusterName"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"clusterName\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectivity"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"connectivity\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStatus"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"lastStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("platformFamily"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"platformFamily\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("containers"); !ok {
		return errors.New("Initialized \"aws.ecs.task\" resource without a \"containers\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcsTask) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.task].Register")
	switch name {
	case "arn":
		return nil
	case "clusterName":
		return nil
	case "connectivity":
		return nil
	case "lastStatus":
		return nil
	case "platformFamily":
		return nil
	case "tags":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.task\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcsTask) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecs.task].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "clusterName":
		return s.ClusterName()
	case "connectivity":
		return s.Connectivity()
	case "lastStatus":
		return s.LastStatus()
	case "platformFamily":
		return s.PlatformFamily()
	case "tags":
		return s.Tags()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecs.task\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEcsTask) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.task\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.task\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusterName accessor autogenerated
func (s *mqlAwsEcsTask) ClusterName() (string, error) {
	res, ok := s.Cache.Load("clusterName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.task\" failed: no value provided for static field \"clusterName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.task\" failed to cast field \"clusterName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Connectivity accessor autogenerated
func (s *mqlAwsEcsTask) Connectivity() (interface{}, error) {
	res, ok := s.Cache.Load("connectivity")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.task\" failed: no value provided for static field \"connectivity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.task\" failed to cast field \"connectivity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// LastStatus accessor autogenerated
func (s *mqlAwsEcsTask) LastStatus() (string, error) {
	res, ok := s.Cache.Load("lastStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.task\" failed: no value provided for static field \"lastStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.task\" failed to cast field \"lastStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PlatformFamily accessor autogenerated
func (s *mqlAwsEcsTask) PlatformFamily() (string, error) {
	res, ok := s.Cache.Load("platformFamily")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.task\" failed: no value provided for static field \"platformFamily\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.task\" failed to cast field \"platformFamily\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEcsTask) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.task\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.task\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlAwsEcsTask) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.task\" failed: no value provided for static field \"containers\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.task\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcsTask) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.task].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "clusterName":
		return nil
	case "connectivity":
		return nil
	case "lastStatus":
		return nil
	case "platformFamily":
		return nil
	case "tags":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.task\" resource")
	}
}

// AwsEcsContainer resource interface
type AwsEcsContainer interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Arn() (string, error)
	PublicIp() (string, error)
	Image() (string, error)
	ClusterName() (string, error)
	TaskDefinitionArn() (string, error)
	LogDriver() (string, error)
	PlatformFamily() (string, error)
	Status() (string, error)
	Region() (string, error)
	Command() ([]interface{}, error)
	TaskArn() (string, error)
}

// mqlAwsEcsContainer for the aws.ecs.container resource
type mqlAwsEcsContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcsContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecs.container resource
func newAwsEcsContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcsContainer{runtime.NewResource("aws.ecs.container")}
	var existing AwsEcsContainer
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "publicIp":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"publicIp\" argument has the wrong type (expected type \"string\")")
			}
		case "image":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"image\" argument has the wrong type (expected type \"string\")")
			}
		case "clusterName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"clusterName\" argument has the wrong type (expected type \"string\")")
			}
		case "taskDefinitionArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"taskDefinitionArn\" argument has the wrong type (expected type \"string\")")
			}
		case "logDriver":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"logDriver\" argument has the wrong type (expected type \"string\")")
			}
		case "platformFamily":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"platformFamily\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "command":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"command\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "taskArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"taskArn\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecs.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecs.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcsContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("publicIp"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"publicIp\". This field is required.")
	}
	if _, ok := s.Cache.Load("image"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"image\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusterName"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"clusterName\". This field is required.")
	}
	if _, ok := s.Cache.Load("taskDefinitionArn"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"taskDefinitionArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("logDriver"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"logDriver\". This field is required.")
	}
	if _, ok := s.Cache.Load("platformFamily"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"platformFamily\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("command"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"command\". This field is required.")
	}
	if _, ok := s.Cache.Load("taskArn"); !ok {
		return errors.New("Initialized \"aws.ecs.container\" resource without a \"taskArn\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcsContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.container].Register")
	switch name {
	case "name":
		return nil
	case "arn":
		return nil
	case "publicIp":
		return nil
	case "image":
		return nil
	case "clusterName":
		return nil
	case "taskDefinitionArn":
		return nil
	case "logDriver":
		return nil
	case "platformFamily":
		return nil
	case "status":
		return nil
	case "region":
		return nil
	case "command":
		return nil
	case "taskArn":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcsContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecs.container].Field")
	switch name {
	case "name":
		return s.Name()
	case "arn":
		return s.Arn()
	case "publicIp":
		return s.PublicIp()
	case "image":
		return s.Image()
	case "clusterName":
		return s.ClusterName()
	case "taskDefinitionArn":
		return s.TaskDefinitionArn()
	case "logDriver":
		return s.LogDriver()
	case "platformFamily":
		return s.PlatformFamily()
	case "status":
		return s.Status()
	case "region":
		return s.Region()
	case "command":
		return s.Command()
	case "taskArn":
		return s.TaskArn()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecs.container\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsEcsContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsEcsContainer) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PublicIp accessor autogenerated
func (s *mqlAwsEcsContainer) PublicIp() (string, error) {
	res, ok := s.Cache.Load("publicIp")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"publicIp\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"publicIp\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Image accessor autogenerated
func (s *mqlAwsEcsContainer) Image() (string, error) {
	res, ok := s.Cache.Load("image")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"image\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"image\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusterName accessor autogenerated
func (s *mqlAwsEcsContainer) ClusterName() (string, error) {
	res, ok := s.Cache.Load("clusterName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"clusterName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"clusterName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TaskDefinitionArn accessor autogenerated
func (s *mqlAwsEcsContainer) TaskDefinitionArn() (string, error) {
	res, ok := s.Cache.Load("taskDefinitionArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"taskDefinitionArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"taskDefinitionArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LogDriver accessor autogenerated
func (s *mqlAwsEcsContainer) LogDriver() (string, error) {
	res, ok := s.Cache.Load("logDriver")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"logDriver\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"logDriver\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PlatformFamily accessor autogenerated
func (s *mqlAwsEcsContainer) PlatformFamily() (string, error) {
	res, ok := s.Cache.Load("platformFamily")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"platformFamily\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"platformFamily\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEcsContainer) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEcsContainer) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Command accessor autogenerated
func (s *mqlAwsEcsContainer) Command() ([]interface{}, error) {
	res, ok := s.Cache.Load("command")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecs.container\" failed: no value provided for static field \"command\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecs.container\" failed to cast field \"command\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TaskArn accessor autogenerated
func (s *mqlAwsEcsContainer) TaskArn() (string, error) {
	res, ok := s.Cache.Load("taskArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecs.container\" failed: no value provided for static field \"taskArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecs.container\" failed to cast field \"taskArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcsContainer) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecs.container].MqlCompute")
	switch name {
	case "name":
		return nil
	case "arn":
		return nil
	case "publicIp":
		return nil
	case "image":
		return nil
	case "clusterName":
		return nil
	case "taskDefinitionArn":
		return nil
	case "logDriver":
		return nil
	case "platformFamily":
		return nil
	case "status":
		return nil
	case "region":
		return nil
	case "command":
		return nil
	case "taskArn":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecs.container\" resource")
	}
}

// AwsEmr resource interface
type AwsEmr interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Clusters() ([]interface{}, error)
}

// mqlAwsEmr for the aws.emr resource
type mqlAwsEmr struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEmr) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.emr resource
func newAwsEmr(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEmr{runtime.NewResource("aws.emr")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.emr\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.emr with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEmr) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEmr) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.emr].Register")
	switch name {
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.emr\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEmr) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.emr].Field")
	switch name {
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.emr\" resource")
	}
}

// Clusters accessor autogenerated
func (s *mqlAwsEmr) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"aws.emr\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.emr\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEmr) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.emr].MqlCompute")
	switch name {
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.emr\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAwsEmr) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEmrCluster resource interface
type AwsEmrCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	NormalizedInstanceHours() (int64, error)
	OutpostArn() (string, error)
	Status() (interface{}, error)
	MasterInstances() ([]interface{}, error)
	Id() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsEmrCluster for the aws.emr.cluster resource
type mqlAwsEmrCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEmrCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.emr.cluster resource
func newAwsEmrCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEmrCluster{runtime.NewResource("aws.emr.cluster")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "normalizedInstanceHours":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"normalizedInstanceHours\" argument has the wrong type (expected type \"int64\")")
			}
		case "outpostArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"outpostArn\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"status\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "masterInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"masterInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.emr.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.emr.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEmrCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("normalizedInstanceHours"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"normalizedInstanceHours\". This field is required.")
	}
	if _, ok := s.Cache.Load("outpostArn"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"outpostArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.emr.cluster\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEmrCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.emr.cluster].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "normalizedInstanceHours":
		return nil
	case "outpostArn":
		return nil
	case "status":
		return nil
	case "masterInstances":
		return nil
	case "id":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.emr.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEmrCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.emr.cluster].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "normalizedInstanceHours":
		return s.NormalizedInstanceHours()
	case "outpostArn":
		return s.OutpostArn()
	case "status":
		return s.Status()
	case "masterInstances":
		return s.MasterInstances()
	case "id":
		return s.Id()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.emr.cluster\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEmrCluster) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEmrCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NormalizedInstanceHours accessor autogenerated
func (s *mqlAwsEmrCluster) NormalizedInstanceHours() (int64, error) {
	res, ok := s.Cache.Load("normalizedInstanceHours")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"normalizedInstanceHours\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"normalizedInstanceHours\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// OutpostArn accessor autogenerated
func (s *mqlAwsEmrCluster) OutpostArn() (string, error) {
	res, ok := s.Cache.Load("outpostArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"outpostArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"outpostArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEmrCluster) Status() (interface{}, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"status\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// MasterInstances accessor autogenerated
func (s *mqlAwsEmrCluster) MasterInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("masterInstances")
	if !ok || !res.Valid {
		if err := s.ComputeMasterInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("masterInstances")
		if !ok {
			return nil, errors.New("\"aws.emr.cluster\" calculated \"masterInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "masterInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"masterInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEmrCluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEmrCluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.emr.cluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.emr.cluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEmrCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.emr.cluster].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "normalizedInstanceHours":
		return nil
	case "outpostArn":
		return nil
	case "status":
		return nil
	case "masterInstances":
		return s.ComputeMasterInstances()
	case "id":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.emr.cluster\" resource")
	}
}

// ComputeMasterInstances computer autogenerated
func (s *mqlAwsEmrCluster) ComputeMasterInstances() error {
	var err error
	if _, ok := s.Cache.Load("masterInstances"); ok {
		return nil
	}
	vres, err := s.GetMasterInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("masterInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudwatch resource interface
type AwsCloudwatch interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	LogGroups() ([]interface{}, error)
	Alarms() ([]interface{}, error)
	Metrics() ([]interface{}, error)
}

// mqlAwsCloudwatch for the aws.cloudwatch resource
type mqlAwsCloudwatch struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatch) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch resource
func newAwsCloudwatch(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatch{runtime.NewResource("aws.cloudwatch")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "logGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch\", its \"logGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "alarms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch\", its \"alarms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "metrics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch\", its \"metrics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatch) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatch) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch].Register")
	switch name {
	case "logGroups":
		return nil
	case "alarms":
		return nil
	case "metrics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatch) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch].Field")
	switch name {
	case "logGroups":
		return s.LogGroups()
	case "alarms":
		return s.Alarms()
	case "metrics":
		return s.Metrics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch\" resource")
	}
}

// LogGroups accessor autogenerated
func (s *mqlAwsCloudwatch) LogGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("logGroups")
	if !ok || !res.Valid {
		if err := s.ComputeLogGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logGroups")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch\" calculated \"logGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch\" failed to cast field \"logGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Alarms accessor autogenerated
func (s *mqlAwsCloudwatch) Alarms() ([]interface{}, error) {
	res, ok := s.Cache.Load("alarms")
	if !ok || !res.Valid {
		if err := s.ComputeAlarms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("alarms")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch\" calculated \"alarms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "alarms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch\" failed to cast field \"alarms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Metrics accessor autogenerated
func (s *mqlAwsCloudwatch) Metrics() ([]interface{}, error) {
	res, ok := s.Cache.Load("metrics")
	if !ok || !res.Valid {
		if err := s.ComputeMetrics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metrics")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch\" calculated \"metrics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metrics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch\" failed to cast field \"metrics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatch) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch].MqlCompute")
	switch name {
	case "logGroups":
		return s.ComputeLogGroups()
	case "alarms":
		return s.ComputeAlarms()
	case "metrics":
		return s.ComputeMetrics()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch\" resource")
	}
}

// ComputeLogGroups computer autogenerated
func (s *mqlAwsCloudwatch) ComputeLogGroups() error {
	var err error
	if _, ok := s.Cache.Load("logGroups"); ok {
		return nil
	}
	vres, err := s.GetLogGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAlarms computer autogenerated
func (s *mqlAwsCloudwatch) ComputeAlarms() error {
	var err error
	if _, ok := s.Cache.Load("alarms"); ok {
		return nil
	}
	vres, err := s.GetAlarms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("alarms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetrics computer autogenerated
func (s *mqlAwsCloudwatch) ComputeMetrics() error {
	var err error
	if _, ok := s.Cache.Load("metrics"); ok {
		return nil
	}
	vres, err := s.GetMetrics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metrics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudwatchMetricsalarm resource interface
type AwsCloudwatchMetricsalarm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	MetricName() (string, error)
	MetricNamespace() (string, error)
	Region() (string, error)
	Actions() ([]interface{}, error)
	State() (string, error)
	StateReason() (string, error)
	InsufficientDataActions() ([]interface{}, error)
	OkActions() ([]interface{}, error)
	Name() (string, error)
}

// mqlAwsCloudwatchMetricsalarm for the aws.cloudwatch.metricsalarm resource
type mqlAwsCloudwatchMetricsalarm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchMetricsalarm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.metricsalarm resource
func newAwsCloudwatchMetricsalarm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchMetricsalarm{runtime.NewResource("aws.cloudwatch.metricsalarm")}
	var existing AwsCloudwatchMetricsalarm
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "metricName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"metricName\" argument has the wrong type (expected type \"string\")")
			}
		case "metricNamespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"metricNamespace\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "actions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"actions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "stateReason":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"stateReason\" argument has the wrong type (expected type \"string\")")
			}
		case "insufficientDataActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"insufficientDataActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "okActions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"okActions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricsalarm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.metricsalarm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchMetricsalarm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("metricName"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"metricName\". This field is required.")
	}
	if _, ok := s.Cache.Load("metricNamespace"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"metricNamespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("actions"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"actions\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("stateReason"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"stateReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("insufficientDataActions"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"insufficientDataActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("okActions"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"okActions\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricsalarm\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricsalarm].Register")
	switch name {
	case "arn":
		return nil
	case "metricName":
		return nil
	case "metricNamespace":
		return nil
	case "region":
		return nil
	case "actions":
		return nil
	case "state":
		return nil
	case "stateReason":
		return nil
	case "insufficientDataActions":
		return nil
	case "okActions":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricsalarm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricsalarm].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "metricName":
		return s.MetricName()
	case "metricNamespace":
		return s.MetricNamespace()
	case "region":
		return s.Region()
	case "actions":
		return s.Actions()
	case "state":
		return s.State()
	case "stateReason":
		return s.StateReason()
	case "insufficientDataActions":
		return s.InsufficientDataActions()
	case "okActions":
		return s.OkActions()
	case "name":
		return s.Name()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.metricsalarm\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MetricName accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) MetricName() (string, error) {
	res, ok := s.Cache.Load("metricName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"metricName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"metricName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MetricNamespace accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) MetricNamespace() (string, error) {
	res, ok := s.Cache.Load("metricNamespace")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"metricNamespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"metricNamespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Actions accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Actions() ([]interface{}, error) {
	res, ok := s.Cache.Load("actions")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"actions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"actions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StateReason accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) StateReason() (string, error) {
	res, ok := s.Cache.Load("stateReason")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"stateReason\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"stateReason\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InsufficientDataActions accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) InsufficientDataActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("insufficientDataActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"insufficientDataActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"insufficientDataActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OkActions accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) OkActions() ([]interface{}, error) {
	res, ok := s.Cache.Load("okActions")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"okActions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"okActions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricsalarm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricsalarm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchMetricsalarm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricsalarm].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "metricName":
		return nil
	case "metricNamespace":
		return nil
	case "region":
		return nil
	case "actions":
		return nil
	case "state":
		return nil
	case "stateReason":
		return nil
	case "insufficientDataActions":
		return nil
	case "okActions":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricsalarm\" resource")
	}
}

// AwsCloudwatchMetric resource interface
type AwsCloudwatchMetric interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Namespace() (string, error)
	Region() (string, error)
	Alarms() ([]interface{}, error)
	Dimensions() ([]interface{}, error)
	Statistics() (AwsCloudwatchMetricstatistics, error)
}

// mqlAwsCloudwatchMetric for the aws.cloudwatch.metric resource
type mqlAwsCloudwatchMetric struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchMetric) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.metric resource
func newAwsCloudwatchMetric(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchMetric{runtime.NewResource("aws.cloudwatch.metric")}
	var existing AwsCloudwatchMetric
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "alarms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"alarms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "dimensions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"dimensions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "statistics":
			if _, ok := val.(AwsCloudwatchMetricstatistics); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"statistics\" argument has the wrong type (expected type \"AwsCloudwatchMetricstatistics\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.metric with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchMetric) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric].Register")
	switch name {
	case "name":
		return nil
	case "namespace":
		return nil
	case "region":
		return nil
	case "alarms":
		return nil
	case "dimensions":
		return nil
	case "statistics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metric\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric].Field")
	switch name {
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "region":
		return s.Region()
	case "alarms":
		return s.Alarms()
	case "dimensions":
		return s.Dimensions()
	case "statistics":
		return s.Statistics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.metric\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metric\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metric\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metric\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Alarms accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Alarms() ([]interface{}, error) {
	res, ok := s.Cache.Load("alarms")
	if !ok || !res.Valid {
		if err := s.ComputeAlarms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("alarms")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch.metric\" calculated \"alarms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "alarms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"alarms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Dimensions accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Dimensions() ([]interface{}, error) {
	res, ok := s.Cache.Load("dimensions")
	if !ok || !res.Valid {
		if err := s.ComputeDimensions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dimensions")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch.metric\" calculated \"dimensions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dimensions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"dimensions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Statistics accessor autogenerated
func (s *mqlAwsCloudwatchMetric) Statistics() (AwsCloudwatchMetricstatistics, error) {
	res, ok := s.Cache.Load("statistics")
	if !ok || !res.Valid {
		if err := s.ComputeStatistics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("statistics")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch.metric\" calculated \"statistics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "statistics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsCloudwatchMetricstatistics)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metric\" failed to cast field \"statistics\" to the right type (AwsCloudwatchMetricstatistics): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchMetric) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric].MqlCompute")
	switch name {
	case "name":
		return nil
	case "namespace":
		return nil
	case "region":
		return nil
	case "alarms":
		return s.ComputeAlarms()
	case "dimensions":
		return s.ComputeDimensions()
	case "statistics":
		return s.ComputeStatistics()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metric\" resource")
	}
}

// ComputeAlarms computer autogenerated
func (s *mqlAwsCloudwatchMetric) ComputeAlarms() error {
	var err error
	if _, ok := s.Cache.Load("alarms"); ok {
		return nil
	}
	vres, err := s.GetAlarms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("alarms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDimensions computer autogenerated
func (s *mqlAwsCloudwatchMetric) ComputeDimensions() error {
	var err error
	if _, ok := s.Cache.Load("dimensions"); ok {
		return nil
	}
	vres, err := s.GetDimensions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dimensions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStatistics computer autogenerated
func (s *mqlAwsCloudwatchMetric) ComputeStatistics() error {
	var err error
	if _, ok := s.Cache.Load("statistics"); ok {
		return nil
	}
	vres, err := s.GetStatistics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("statistics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudwatchMetricdimension resource interface
type AwsCloudwatchMetricdimension interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Value() (string, error)
}

// mqlAwsCloudwatchMetricdimension for the aws.cloudwatch.metricdimension resource
type mqlAwsCloudwatchMetricdimension struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchMetricdimension) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.metricdimension resource
func newAwsCloudwatchMetricdimension(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchMetricdimension{runtime.NewResource("aws.cloudwatch.metricdimension")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricdimension\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricdimension\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricdimension\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.metricdimension with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchMetricdimension) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricdimension\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricdimension\" resource without a \"value\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchMetricdimension) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricdimension].Register")
	switch name {
	case "name":
		return nil
	case "value":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricdimension\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchMetricdimension) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricdimension].Field")
	switch name {
	case "name":
		return s.Name()
	case "value":
		return s.Value()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.metricdimension\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsCloudwatchMetricdimension) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricdimension\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricdimension\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlAwsCloudwatchMetricdimension) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricdimension\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricdimension\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchMetricdimension) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricdimension].MqlCompute")
	switch name {
	case "name":
		return nil
	case "value":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricdimension\" resource")
	}
}

// AwsCloudwatchMetricstatistics resource interface
type AwsCloudwatchMetricstatistics interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespace() (string, error)
	Name() (string, error)
	Region() (string, error)
	Label() (string, error)
	Datapoints() ([]interface{}, error)
}

// mqlAwsCloudwatchMetricstatistics for the aws.cloudwatch.metricstatistics resource
type mqlAwsCloudwatchMetricstatistics struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchMetricstatistics) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.metricstatistics resource
func newAwsCloudwatchMetricstatistics(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchMetricstatistics{runtime.NewResource("aws.cloudwatch.metricstatistics")}
	var existing AwsCloudwatchMetricstatistics
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "label":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"label\" argument has the wrong type (expected type \"string\")")
			}
		case "datapoints":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"datapoints\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metricstatistics\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.metricstatistics with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchMetricstatistics) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricstatistics\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricstatistics\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricstatistics\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("label"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricstatistics\" resource without a \"label\". This field is required.")
	}
	if _, ok := s.Cache.Load("datapoints"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metricstatistics\" resource without a \"datapoints\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricstatistics].Register")
	switch name {
	case "namespace":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "label":
		return nil
	case "datapoints":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricstatistics\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricstatistics].Field")
	switch name {
	case "namespace":
		return s.Namespace()
	case "name":
		return s.Name()
	case "region":
		return s.Region()
	case "label":
		return s.Label()
	case "datapoints":
		return s.Datapoints()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.metricstatistics\" resource")
	}
}

// Namespace accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricstatistics\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricstatistics\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricstatistics\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricstatistics\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricstatistics\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricstatistics\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Label accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Label() (string, error) {
	res, ok := s.Cache.Load("label")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metricstatistics\" failed: no value provided for static field \"label\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metricstatistics\" failed to cast field \"label\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Datapoints accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) Datapoints() ([]interface{}, error) {
	res, ok := s.Cache.Load("datapoints")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.metricstatistics\" failed: no value provided for static field \"datapoints\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metricstatistics\" failed to cast field \"datapoints\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchMetricstatistics) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metricstatistics].MqlCompute")
	switch name {
	case "namespace":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "label":
		return nil
	case "datapoints":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metricstatistics\" resource")
	}
}

// AwsCloudwatchMetricDatapoint resource interface
type AwsCloudwatchMetricDatapoint interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Timestamp() (*time.Time, error)
	Maximum() (float64, error)
	Minimum() (float64, error)
	Average() (float64, error)
	Sum() (float64, error)
	Unit() (string, error)
}

// mqlAwsCloudwatchMetricDatapoint for the aws.cloudwatch.metric.datapoint resource
type mqlAwsCloudwatchMetricDatapoint struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchMetricDatapoint) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.metric.datapoint resource
func newAwsCloudwatchMetricDatapoint(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchMetricDatapoint{runtime.NewResource("aws.cloudwatch.metric.datapoint")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "timestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"timestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "maximum":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"maximum\" argument has the wrong type (expected type \"float64\")")
			}
		case "minimum":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"minimum\" argument has the wrong type (expected type \"float64\")")
			}
		case "average":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"average\" argument has the wrong type (expected type \"float64\")")
			}
		case "sum":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"sum\" argument has the wrong type (expected type \"float64\")")
			}
		case "unit":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"unit\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.metric.datapoint\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.metric.datapoint with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchMetricDatapoint) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("timestamp"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"timestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("maximum"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"maximum\". This field is required.")
	}
	if _, ok := s.Cache.Load("minimum"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"minimum\". This field is required.")
	}
	if _, ok := s.Cache.Load("average"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"average\". This field is required.")
	}
	if _, ok := s.Cache.Load("sum"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"sum\". This field is required.")
	}
	if _, ok := s.Cache.Load("unit"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.metric.datapoint\" resource without a \"unit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric.datapoint].Register")
	switch name {
	case "id":
		return nil
	case "timestamp":
		return nil
	case "maximum":
		return nil
	case "minimum":
		return nil
	case "average":
		return nil
	case "sum":
		return nil
	case "unit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metric.datapoint\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric.datapoint].Field")
	switch name {
	case "id":
		return s.Id()
	case "timestamp":
		return s.Timestamp()
	case "maximum":
		return s.Maximum()
	case "minimum":
		return s.Minimum()
	case "average":
		return s.Average()
	case "sum":
		return s.Sum()
	case "unit":
		return s.Unit()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.metric.datapoint\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Timestamp accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Timestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("timestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"timestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"timestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Maximum accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Maximum() (float64, error) {
	res, ok := s.Cache.Load("maximum")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"maximum\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"maximum\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Minimum accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Minimum() (float64, error) {
	res, ok := s.Cache.Load("minimum")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"minimum\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"minimum\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Average accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Average() (float64, error) {
	res, ok := s.Cache.Load("average")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"average\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"average\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Sum accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Sum() (float64, error) {
	res, ok := s.Cache.Load("sum")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"sum\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"sum\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// Unit accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) Unit() (string, error) {
	res, ok := s.Cache.Load("unit")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.metric.datapoint\" failed: no value provided for static field \"unit\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.metric.datapoint\" failed to cast field \"unit\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchMetricDatapoint) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.metric.datapoint].MqlCompute")
	switch name {
	case "id":
		return nil
	case "timestamp":
		return nil
	case "maximum":
		return nil
	case "minimum":
		return nil
	case "average":
		return nil
	case "sum":
		return nil
	case "unit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.metric.datapoint\" resource")
	}
}

// AwsCloudwatchLoggroup resource interface
type AwsCloudwatchLoggroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	MetricsFilters() ([]interface{}, error)
	KmsKey() (AwsKmsKey, error)
	Region() (string, error)
}

// mqlAwsCloudwatchLoggroup for the aws.cloudwatch.loggroup resource
type mqlAwsCloudwatchLoggroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchLoggroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.loggroup resource
func newAwsCloudwatchLoggroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchLoggroup{runtime.NewResource("aws.cloudwatch.loggroup")}
	var existing AwsCloudwatchLoggroup
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "metricsFilters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"metricsFilters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "kmsKey":
			if _, ok := val.(AwsKmsKey); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"kmsKey\" argument has the wrong type (expected type \"AwsKmsKey\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.loggroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchLoggroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "metricsFilters":
		return nil
	case "kmsKey":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "metricsFilters":
		return s.MetricsFilters()
	case "kmsKey":
		return s.KmsKey()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MetricsFilters accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) MetricsFilters() ([]interface{}, error) {
	res, ok := s.Cache.Load("metricsFilters")
	if !ok || !res.Valid {
		if err := s.ComputeMetricsFilters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metricsFilters")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch.loggroup\" calculated \"metricsFilters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metricsFilters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.loggroup\" failed to cast field \"metricsFilters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// KmsKey accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) KmsKey() (AwsKmsKey, error) {
	res, ok := s.Cache.Load("kmsKey")
	if !ok || !res.Valid {
		if err := s.ComputeKmsKey(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kmsKey")
		if !ok {
			return nil, errors.New("\"aws.cloudwatch.loggroup\" calculated \"kmsKey\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kmsKey")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsKmsKey)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.loggroup\" failed to cast field \"kmsKey\" to the right type (AwsKmsKey): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchLoggroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "metricsFilters":
		return s.ComputeMetricsFilters()
	case "kmsKey":
		return s.ComputeKmsKey()
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup\" resource")
	}
}

// ComputeMetricsFilters computer autogenerated
func (s *mqlAwsCloudwatchLoggroup) ComputeMetricsFilters() error {
	var err error
	if _, ok := s.Cache.Load("metricsFilters"); ok {
		return nil
	}
	vres, err := s.GetMetricsFilters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metricsFilters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKmsKey computer autogenerated
func (s *mqlAwsCloudwatchLoggroup) ComputeKmsKey() error {
	var err error
	if _, ok := s.Cache.Load("kmsKey"); ok {
		return nil
	}
	vres, err := s.GetKmsKey()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kmsKey", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudwatchLoggroupMetricsfilter resource interface
type AwsCloudwatchLoggroupMetricsfilter interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	FilterName() (string, error)
	FilterPattern() (string, error)
	Metrics() ([]interface{}, error)
}

// mqlAwsCloudwatchLoggroupMetricsfilter for the aws.cloudwatch.loggroup.metricsfilter resource
type mqlAwsCloudwatchLoggroupMetricsfilter struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudwatch.loggroup.metricsfilter resource
func newAwsCloudwatchLoggroupMetricsfilter(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudwatchLoggroupMetricsfilter{runtime.NewResource("aws.cloudwatch.loggroup.metricsfilter")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup.metricsfilter\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "filterName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup.metricsfilter\", its \"filterName\" argument has the wrong type (expected type \"string\")")
			}
		case "filterPattern":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup.metricsfilter\", its \"filterPattern\" argument has the wrong type (expected type \"string\")")
			}
		case "metrics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup.metricsfilter\", its \"metrics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudwatch.loggroup.metricsfilter\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudwatch.loggroup.metricsfilter with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudwatchLoggroupMetricsfilter) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup.metricsfilter\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("filterName"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup.metricsfilter\" resource without a \"filterName\". This field is required.")
	}
	if _, ok := s.Cache.Load("filterPattern"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup.metricsfilter\" resource without a \"filterPattern\". This field is required.")
	}
	if _, ok := s.Cache.Load("metrics"); !ok {
		return errors.New("Initialized \"aws.cloudwatch.loggroup.metricsfilter\" resource without a \"metrics\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup.metricsfilter].Register")
	switch name {
	case "id":
		return nil
	case "filterName":
		return nil
	case "filterPattern":
		return nil
	case "metrics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup.metricsfilter\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup.metricsfilter].Field")
	switch name {
	case "id":
		return s.Id()
	case "filterName":
		return s.FilterName()
	case "filterPattern":
		return s.FilterPattern()
	case "metrics":
		return s.Metrics()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup.metricsfilter\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup.metricsfilter\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup.metricsfilter\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FilterName accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) FilterName() (string, error) {
	res, ok := s.Cache.Load("filterName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup.metricsfilter\" failed: no value provided for static field \"filterName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup.metricsfilter\" failed to cast field \"filterName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FilterPattern accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) FilterPattern() (string, error) {
	res, ok := s.Cache.Load("filterPattern")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudwatch.loggroup.metricsfilter\" failed: no value provided for static field \"filterPattern\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudwatch.loggroup.metricsfilter\" failed to cast field \"filterPattern\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Metrics accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) Metrics() ([]interface{}, error) {
	res, ok := s.Cache.Load("metrics")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudwatch.loggroup.metricsfilter\" failed: no value provided for static field \"metrics\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudwatch.loggroup.metricsfilter\" failed to cast field \"metrics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudwatchLoggroupMetricsfilter) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudwatch.loggroup.metricsfilter].MqlCompute")
	switch name {
	case "id":
		return nil
	case "filterName":
		return nil
	case "filterPattern":
		return nil
	case "metrics":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudwatch.loggroup.metricsfilter\" resource")
	}
}

// AwsCloudtrail resource interface
type AwsCloudtrail interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Trails() ([]interface{}, error)
}

// mqlAwsCloudtrail for the aws.cloudtrail resource
type mqlAwsCloudtrail struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudtrail) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudtrail resource
func newAwsCloudtrail(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudtrail{runtime.NewResource("aws.cloudtrail")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "trails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail\", its \"trails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudtrail with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudtrail) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudtrail) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail].Register")
	switch name {
	case "trails":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudtrail\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudtrail) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail].Field")
	switch name {
	case "trails":
		return s.Trails()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudtrail\" resource")
	}
}

// Trails accessor autogenerated
func (s *mqlAwsCloudtrail) Trails() ([]interface{}, error) {
	res, ok := s.Cache.Load("trails")
	if !ok || !res.Valid {
		if err := s.ComputeTrails(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("trails")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail\" calculated \"trails\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "trails")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail\" failed to cast field \"trails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudtrail) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail].MqlCompute")
	switch name {
	case "trails":
		return s.ComputeTrails()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudtrail\" resource")
	}
}

// ComputeTrails computer autogenerated
func (s *mqlAwsCloudtrail) ComputeTrails() error {
	var err error
	if _, ok := s.Cache.Load("trails"); ok {
		return nil
	}
	vres, err := s.GetTrails()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("trails", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudfront resource interface
type AwsCloudfront interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Distributions() ([]interface{}, error)
	Functions() ([]interface{}, error)
}

// mqlAwsCloudfront for the aws.cloudfront resource
type mqlAwsCloudfront struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudfront) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudfront resource
func newAwsCloudfront(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudfront{runtime.NewResource("aws.cloudfront")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "distributions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront\", its \"distributions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "functions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront\", its \"functions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudfront with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudfront) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudfront) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront].Register")
	switch name {
	case "distributions":
		return nil
	case "functions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudfront) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudfront].Field")
	switch name {
	case "distributions":
		return s.Distributions()
	case "functions":
		return s.Functions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudfront\" resource")
	}
}

// Distributions accessor autogenerated
func (s *mqlAwsCloudfront) Distributions() ([]interface{}, error) {
	res, ok := s.Cache.Load("distributions")
	if !ok || !res.Valid {
		if err := s.ComputeDistributions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("distributions")
		if !ok {
			return nil, errors.New("\"aws.cloudfront\" calculated \"distributions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "distributions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront\" failed to cast field \"distributions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Functions accessor autogenerated
func (s *mqlAwsCloudfront) Functions() ([]interface{}, error) {
	res, ok := s.Cache.Load("functions")
	if !ok || !res.Valid {
		if err := s.ComputeFunctions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("functions")
		if !ok {
			return nil, errors.New("\"aws.cloudfront\" calculated \"functions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "functions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront\" failed to cast field \"functions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudfront) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront].MqlCompute")
	switch name {
	case "distributions":
		return s.ComputeDistributions()
	case "functions":
		return s.ComputeFunctions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront\" resource")
	}
}

// ComputeDistributions computer autogenerated
func (s *mqlAwsCloudfront) ComputeDistributions() error {
	var err error
	if _, ok := s.Cache.Load("distributions"); ok {
		return nil
	}
	vres, err := s.GetDistributions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("distributions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFunctions computer autogenerated
func (s *mqlAwsCloudfront) ComputeFunctions() error {
	var err error
	if _, ok := s.Cache.Load("functions"); ok {
		return nil
	}
	vres, err := s.GetFunctions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("functions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsCloudfrontDistribution resource interface
type AwsCloudfrontDistribution interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Status() (string, error)
	DomainName() (string, error)
	Origins() ([]interface{}, error)
	DefaultCacheBehavior() (interface{}, error)
	CacheBehaviors() ([]interface{}, error)
}

// mqlAwsCloudfrontDistribution for the aws.cloudfront.distribution resource
type mqlAwsCloudfrontDistribution struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudfrontDistribution) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudfront.distribution resource
func newAwsCloudfrontDistribution(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudfrontDistribution{runtime.NewResource("aws.cloudfront.distribution")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "domainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"domainName\" argument has the wrong type (expected type \"string\")")
			}
		case "origins":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"origins\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "defaultCacheBehavior":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"defaultCacheBehavior\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "cacheBehaviors":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"cacheBehaviors\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudfront.distribution with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudfrontDistribution) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("domainName"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"domainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("origins"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"origins\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultCacheBehavior"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"defaultCacheBehavior\". This field is required.")
	}
	if _, ok := s.Cache.Load("cacheBehaviors"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution\" resource without a \"cacheBehaviors\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution].Register")
	switch name {
	case "arn":
		return nil
	case "status":
		return nil
	case "domainName":
		return nil
	case "origins":
		return nil
	case "defaultCacheBehavior":
		return nil
	case "cacheBehaviors":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.distribution\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "status":
		return s.Status()
	case "domainName":
		return s.DomainName()
	case "origins":
		return s.Origins()
	case "defaultCacheBehavior":
		return s.DefaultCacheBehavior()
	case "cacheBehaviors":
		return s.CacheBehaviors()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudfront.distribution\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DomainName accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) DomainName() (string, error) {
	res, ok := s.Cache.Load("domainName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"domainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"domainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Origins accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) Origins() ([]interface{}, error) {
	res, ok := s.Cache.Load("origins")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"origins\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"origins\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultCacheBehavior accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) DefaultCacheBehavior() (interface{}, error) {
	res, ok := s.Cache.Load("defaultCacheBehavior")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"defaultCacheBehavior\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"defaultCacheBehavior\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// CacheBehaviors accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) CacheBehaviors() ([]interface{}, error) {
	res, ok := s.Cache.Load("cacheBehaviors")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudfront.distribution\" failed: no value provided for static field \"cacheBehaviors\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront.distribution\" failed to cast field \"cacheBehaviors\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudfrontDistribution) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "status":
		return nil
	case "domainName":
		return nil
	case "origins":
		return nil
	case "defaultCacheBehavior":
		return nil
	case "cacheBehaviors":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.distribution\" resource")
	}
}

// AwsCloudfrontDistributionOrigin resource interface
type AwsCloudfrontDistributionOrigin interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DomainName() (string, error)
	Id() (string, error)
	ConnectionAttempts() (int64, error)
	ConnectionTimeout() (int64, error)
	OriginPath() (string, error)
	Account() (string, error)
}

// mqlAwsCloudfrontDistributionOrigin for the aws.cloudfront.distribution.origin resource
type mqlAwsCloudfrontDistributionOrigin struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudfrontDistributionOrigin) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudfront.distribution.origin resource
func newAwsCloudfrontDistributionOrigin(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudfrontDistributionOrigin{runtime.NewResource("aws.cloudfront.distribution.origin")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "domainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"domainName\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "connectionAttempts":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"connectionAttempts\" argument has the wrong type (expected type \"int64\")")
			}
		case "connectionTimeout":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"connectionTimeout\" argument has the wrong type (expected type \"int64\")")
			}
		case "originPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"originPath\" argument has the wrong type (expected type \"string\")")
			}
		case "account":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"account\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.distribution.origin\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudfront.distribution.origin with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudfrontDistributionOrigin) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("domainName"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"domainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionAttempts"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"connectionAttempts\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionTimeout"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"connectionTimeout\". This field is required.")
	}
	if _, ok := s.Cache.Load("originPath"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"originPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("account"); !ok {
		return errors.New("Initialized \"aws.cloudfront.distribution.origin\" resource without a \"account\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution.origin].Register")
	switch name {
	case "domainName":
		return nil
	case "id":
		return nil
	case "connectionAttempts":
		return nil
	case "connectionTimeout":
		return nil
	case "originPath":
		return nil
	case "account":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.distribution.origin\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution.origin].Field")
	switch name {
	case "domainName":
		return s.DomainName()
	case "id":
		return s.Id()
	case "connectionAttempts":
		return s.ConnectionAttempts()
	case "connectionTimeout":
		return s.ConnectionTimeout()
	case "originPath":
		return s.OriginPath()
	case "account":
		return s.Account()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudfront.distribution.origin\" resource")
	}
}

// DomainName accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) DomainName() (string, error) {
	res, ok := s.Cache.Load("domainName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"domainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"domainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectionAttempts accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) ConnectionAttempts() (int64, error) {
	res, ok := s.Cache.Load("connectionAttempts")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"connectionAttempts\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"connectionAttempts\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ConnectionTimeout accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) ConnectionTimeout() (int64, error) {
	res, ok := s.Cache.Load("connectionTimeout")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"connectionTimeout\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"connectionTimeout\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// OriginPath accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) OriginPath() (string, error) {
	res, ok := s.Cache.Load("originPath")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"originPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"originPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Account accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) Account() (string, error) {
	res, ok := s.Cache.Load("account")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.distribution.origin\" failed: no value provided for static field \"account\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.distribution.origin\" failed to cast field \"account\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudfrontDistributionOrigin) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.distribution.origin].MqlCompute")
	switch name {
	case "domainName":
		return nil
	case "id":
		return nil
	case "connectionAttempts":
		return nil
	case "connectionTimeout":
		return nil
	case "originPath":
		return nil
	case "account":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.distribution.origin\" resource")
	}
}

// AwsCloudfrontFunction resource interface
type AwsCloudfrontFunction interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Status() (string, error)
	Arn() (string, error)
	LastModifiedTime() (*time.Time, error)
	CreatedTime() (*time.Time, error)
	Stage() (string, error)
	Comment() (string, error)
	Runtime() (string, error)
}

// mqlAwsCloudfrontFunction for the aws.cloudfront.function resource
type mqlAwsCloudfrontFunction struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudfrontFunction) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudfront.function resource
func newAwsCloudfrontFunction(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudfrontFunction{runtime.NewResource("aws.cloudfront.function")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "lastModifiedTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"lastModifiedTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createdTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"createdTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "stage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"stage\" argument has the wrong type (expected type \"string\")")
			}
		case "comment":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"comment\" argument has the wrong type (expected type \"string\")")
			}
		case "runtime":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"runtime\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudfront.function\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudfront.function with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudfrontFunction) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastModifiedTime"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"lastModifiedTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdTime"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"createdTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("stage"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"stage\". This field is required.")
	}
	if _, ok := s.Cache.Load("comment"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"comment\". This field is required.")
	}
	if _, ok := s.Cache.Load("runtime"); !ok {
		return errors.New("Initialized \"aws.cloudfront.function\" resource without a \"runtime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.function].Register")
	switch name {
	case "name":
		return nil
	case "status":
		return nil
	case "arn":
		return nil
	case "lastModifiedTime":
		return nil
	case "createdTime":
		return nil
	case "stage":
		return nil
	case "comment":
		return nil
	case "runtime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.function\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.function].Field")
	switch name {
	case "name":
		return s.Name()
	case "status":
		return s.Status()
	case "arn":
		return s.Arn()
	case "lastModifiedTime":
		return s.LastModifiedTime()
	case "createdTime":
		return s.CreatedTime()
	case "stage":
		return s.Stage()
	case "comment":
		return s.Comment()
	case "runtime":
		return s.Runtime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudfront.function\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastModifiedTime accessor autogenerated
func (s *mqlAwsCloudfrontFunction) LastModifiedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastModifiedTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"lastModifiedTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"lastModifiedTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreatedTime accessor autogenerated
func (s *mqlAwsCloudfrontFunction) CreatedTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"createdTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"createdTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Stage accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Stage() (string, error) {
	res, ok := s.Cache.Load("stage")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"stage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"stage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Comment accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Comment() (string, error) {
	res, ok := s.Cache.Load("comment")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"comment\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"comment\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Runtime accessor autogenerated
func (s *mqlAwsCloudfrontFunction) Runtime() (string, error) {
	res, ok := s.Cache.Load("runtime")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudfront.function\" failed: no value provided for static field \"runtime\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudfront.function\" failed to cast field \"runtime\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudfrontFunction) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudfront.function].MqlCompute")
	switch name {
	case "name":
		return nil
	case "status":
		return nil
	case "arn":
		return nil
	case "lastModifiedTime":
		return nil
	case "createdTime":
		return nil
	case "stage":
		return nil
	case "comment":
		return nil
	case "runtime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudfront.function\" resource")
	}
}

// AwsCloudtrailTrail resource interface
type AwsCloudtrailTrail interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	KmsKey() (AwsKmsKey, error)
	IsMultiRegionTrail() (bool, error)
	IsOrganizationTrail() (bool, error)
	LogFileValidationEnabled() (bool, error)
	IncludeGlobalServiceEvents() (bool, error)
	S3bucket() (AwsS3Bucket, error)
	SnsTopicARN() (string, error)
	Status() (interface{}, error)
	LogGroup() (AwsCloudwatchLoggroup, error)
	CloudWatchLogsRoleArn() (string, error)
	EventSelectors() ([]interface{}, error)
	Region() (string, error)
}

// mqlAwsCloudtrailTrail for the aws.cloudtrail.trail resource
type mqlAwsCloudtrailTrail struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsCloudtrailTrail) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.cloudtrail.trail resource
func newAwsCloudtrailTrail(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsCloudtrailTrail{runtime.NewResource("aws.cloudtrail.trail")}
	var existing AwsCloudtrailTrail
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kmsKey":
			if _, ok := val.(AwsKmsKey); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"kmsKey\" argument has the wrong type (expected type \"AwsKmsKey\")")
			}
		case "isMultiRegionTrail":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"isMultiRegionTrail\" argument has the wrong type (expected type \"bool\")")
			}
		case "isOrganizationTrail":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"isOrganizationTrail\" argument has the wrong type (expected type \"bool\")")
			}
		case "logFileValidationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"logFileValidationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "includeGlobalServiceEvents":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"includeGlobalServiceEvents\" argument has the wrong type (expected type \"bool\")")
			}
		case "s3bucket":
			if _, ok := val.(AwsS3Bucket); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"s3bucket\" argument has the wrong type (expected type \"AwsS3Bucket\")")
			}
		case "snsTopicARN":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"snsTopicARN\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"status\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "logGroup":
			if _, ok := val.(AwsCloudwatchLoggroup); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"logGroup\" argument has the wrong type (expected type \"AwsCloudwatchLoggroup\")")
			}
		case "cloudWatchLogsRoleArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"cloudWatchLogsRoleArn\" argument has the wrong type (expected type \"string\")")
			}
		case "eventSelectors":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"eventSelectors\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.cloudtrail.trail\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.cloudtrail.trail with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsCloudtrailTrail) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isMultiRegionTrail"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"isMultiRegionTrail\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOrganizationTrail"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"isOrganizationTrail\". This field is required.")
	}
	if _, ok := s.Cache.Load("logFileValidationEnabled"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"logFileValidationEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("includeGlobalServiceEvents"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"includeGlobalServiceEvents\". This field is required.")
	}
	if _, ok := s.Cache.Load("snsTopicARN"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"snsTopicARN\". This field is required.")
	}
	if _, ok := s.Cache.Load("cloudWatchLogsRoleArn"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"cloudWatchLogsRoleArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.cloudtrail.trail\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail.trail].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "kmsKey":
		return nil
	case "isMultiRegionTrail":
		return nil
	case "isOrganizationTrail":
		return nil
	case "logFileValidationEnabled":
		return nil
	case "includeGlobalServiceEvents":
		return nil
	case "s3bucket":
		return nil
	case "snsTopicARN":
		return nil
	case "status":
		return nil
	case "logGroup":
		return nil
	case "cloudWatchLogsRoleArn":
		return nil
	case "eventSelectors":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudtrail.trail\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail.trail].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "kmsKey":
		return s.KmsKey()
	case "isMultiRegionTrail":
		return s.IsMultiRegionTrail()
	case "isOrganizationTrail":
		return s.IsOrganizationTrail()
	case "logFileValidationEnabled":
		return s.LogFileValidationEnabled()
	case "includeGlobalServiceEvents":
		return s.IncludeGlobalServiceEvents()
	case "s3bucket":
		return s.S3bucket()
	case "snsTopicARN":
		return s.SnsTopicARN()
	case "status":
		return s.Status()
	case "logGroup":
		return s.LogGroup()
	case "cloudWatchLogsRoleArn":
		return s.CloudWatchLogsRoleArn()
	case "eventSelectors":
		return s.EventSelectors()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.cloudtrail.trail\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KmsKey accessor autogenerated
func (s *mqlAwsCloudtrailTrail) KmsKey() (AwsKmsKey, error) {
	res, ok := s.Cache.Load("kmsKey")
	if !ok || !res.Valid {
		if err := s.ComputeKmsKey(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kmsKey")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail.trail\" calculated \"kmsKey\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kmsKey")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsKmsKey)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"kmsKey\" to the right type (AwsKmsKey): %#v", res)
	}
	return tres, nil
}

// IsMultiRegionTrail accessor autogenerated
func (s *mqlAwsCloudtrailTrail) IsMultiRegionTrail() (bool, error) {
	res, ok := s.Cache.Load("isMultiRegionTrail")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"isMultiRegionTrail\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"isMultiRegionTrail\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsOrganizationTrail accessor autogenerated
func (s *mqlAwsCloudtrailTrail) IsOrganizationTrail() (bool, error) {
	res, ok := s.Cache.Load("isOrganizationTrail")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"isOrganizationTrail\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"isOrganizationTrail\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// LogFileValidationEnabled accessor autogenerated
func (s *mqlAwsCloudtrailTrail) LogFileValidationEnabled() (bool, error) {
	res, ok := s.Cache.Load("logFileValidationEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"logFileValidationEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"logFileValidationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IncludeGlobalServiceEvents accessor autogenerated
func (s *mqlAwsCloudtrailTrail) IncludeGlobalServiceEvents() (bool, error) {
	res, ok := s.Cache.Load("includeGlobalServiceEvents")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"includeGlobalServiceEvents\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"includeGlobalServiceEvents\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// S3bucket accessor autogenerated
func (s *mqlAwsCloudtrailTrail) S3bucket() (AwsS3Bucket, error) {
	res, ok := s.Cache.Load("s3bucket")
	if !ok || !res.Valid {
		if err := s.ComputeS3bucket(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("s3bucket")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail.trail\" calculated \"s3bucket\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "s3bucket")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsS3Bucket)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"s3bucket\" to the right type (AwsS3Bucket): %#v", res)
	}
	return tres, nil
}

// SnsTopicARN accessor autogenerated
func (s *mqlAwsCloudtrailTrail) SnsTopicARN() (string, error) {
	res, ok := s.Cache.Load("snsTopicARN")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"snsTopicARN\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"snsTopicARN\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Status() (interface{}, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		if err := s.ComputeStatus(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("status")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail.trail\" calculated \"status\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "status")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"status\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// LogGroup accessor autogenerated
func (s *mqlAwsCloudtrailTrail) LogGroup() (AwsCloudwatchLoggroup, error) {
	res, ok := s.Cache.Load("logGroup")
	if !ok || !res.Valid {
		if err := s.ComputeLogGroup(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logGroup")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail.trail\" calculated \"logGroup\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logGroup")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsCloudwatchLoggroup)
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"logGroup\" to the right type (AwsCloudwatchLoggroup): %#v", res)
	}
	return tres, nil
}

// CloudWatchLogsRoleArn accessor autogenerated
func (s *mqlAwsCloudtrailTrail) CloudWatchLogsRoleArn() (string, error) {
	res, ok := s.Cache.Load("cloudWatchLogsRoleArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"cloudWatchLogsRoleArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"cloudWatchLogsRoleArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EventSelectors accessor autogenerated
func (s *mqlAwsCloudtrailTrail) EventSelectors() ([]interface{}, error) {
	res, ok := s.Cache.Load("eventSelectors")
	if !ok || !res.Valid {
		if err := s.ComputeEventSelectors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("eventSelectors")
		if !ok {
			return nil, errors.New("\"aws.cloudtrail.trail\" calculated \"eventSelectors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "eventSelectors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"eventSelectors\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsCloudtrailTrail) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.cloudtrail.trail\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.cloudtrail.trail\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsCloudtrailTrail) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.cloudtrail.trail].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "kmsKey":
		return s.ComputeKmsKey()
	case "isMultiRegionTrail":
		return nil
	case "isOrganizationTrail":
		return nil
	case "logFileValidationEnabled":
		return nil
	case "includeGlobalServiceEvents":
		return nil
	case "s3bucket":
		return s.ComputeS3bucket()
	case "snsTopicARN":
		return nil
	case "status":
		return s.ComputeStatus()
	case "logGroup":
		return s.ComputeLogGroup()
	case "cloudWatchLogsRoleArn":
		return nil
	case "eventSelectors":
		return s.ComputeEventSelectors()
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.cloudtrail.trail\" resource")
	}
}

// ComputeKmsKey computer autogenerated
func (s *mqlAwsCloudtrailTrail) ComputeKmsKey() error {
	var err error
	if _, ok := s.Cache.Load("kmsKey"); ok {
		return nil
	}
	vres, err := s.GetKmsKey()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kmsKey", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeS3bucket computer autogenerated
func (s *mqlAwsCloudtrailTrail) ComputeS3bucket() error {
	var err error
	if _, ok := s.Cache.Load("s3bucket"); ok {
		return nil
	}
	vres, err := s.GetS3bucket()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("s3bucket", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStatus computer autogenerated
func (s *mqlAwsCloudtrailTrail) ComputeStatus() error {
	var err error
	if _, ok := s.Cache.Load("status"); ok {
		return nil
	}
	vres, err := s.GetStatus()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("status", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLogGroup computer autogenerated
func (s *mqlAwsCloudtrailTrail) ComputeLogGroup() error {
	var err error
	if _, ok := s.Cache.Load("logGroup"); ok {
		return nil
	}
	vres, err := s.GetLogGroup()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logGroup", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEventSelectors computer autogenerated
func (s *mqlAwsCloudtrailTrail) ComputeEventSelectors() error {
	var err error
	if _, ok := s.Cache.Load("eventSelectors"); ok {
		return nil
	}
	vres, err := s.GetEventSelectors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("eventSelectors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsKms resource interface
type AwsKms interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Keys() ([]interface{}, error)
}

// mqlAwsKms for the aws.kms resource
type mqlAwsKms struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsKms) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.kms resource
func newAwsKms(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsKms{runtime.NewResource("aws.kms")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.kms\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.kms with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsKms) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsKms) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.kms].Register")
	switch name {
	case "keys":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.kms\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsKms) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.kms].Field")
	switch name {
	case "keys":
		return s.Keys()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.kms\" resource")
	}
}

// Keys accessor autogenerated
func (s *mqlAwsKms) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"aws.kms\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.kms\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsKms) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.kms].MqlCompute")
	switch name {
	case "keys":
		return s.ComputeKeys()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.kms\" resource")
	}
}

// ComputeKeys computer autogenerated
func (s *mqlAwsKms) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsKmsKey resource interface
type AwsKmsKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Arn() (string, error)
	Region() (string, error)
	KeyRotationEnabled() (bool, error)
	Metadata() (interface{}, error)
}

// mqlAwsKmsKey for the aws.kms.key resource
type mqlAwsKmsKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsKmsKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.kms.key resource
func newAwsKmsKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsKmsKey{runtime.NewResource("aws.kms.key")}
	var existing AwsKmsKey
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "keyRotationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"keyRotationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "metadata":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"metadata\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.kms.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.kms.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsKmsKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.kms.key\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.kms.key\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.kms.key\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsKmsKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.kms.key].Register")
	switch name {
	case "id":
		return nil
	case "arn":
		return nil
	case "region":
		return nil
	case "keyRotationEnabled":
		return nil
	case "metadata":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.kms.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsKmsKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.kms.key].Field")
	switch name {
	case "id":
		return s.Id()
	case "arn":
		return s.Arn()
	case "region":
		return s.Region()
	case "keyRotationEnabled":
		return s.KeyRotationEnabled()
	case "metadata":
		return s.Metadata()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.kms.key\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsKmsKey) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.kms.key\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.kms.key\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsKmsKey) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.kms.key\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.kms.key\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsKmsKey) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.kms.key\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.kms.key\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyRotationEnabled accessor autogenerated
func (s *mqlAwsKmsKey) KeyRotationEnabled() (bool, error) {
	res, ok := s.Cache.Load("keyRotationEnabled")
	if !ok || !res.Valid {
		if err := s.ComputeKeyRotationEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("keyRotationEnabled")
		if !ok {
			return false, errors.New("\"aws.kms.key\" calculated \"keyRotationEnabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyRotationEnabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.kms.key\" failed to cast field \"keyRotationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlAwsKmsKey) Metadata() (interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"aws.kms.key\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.kms.key\" failed to cast field \"metadata\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsKmsKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.kms.key].MqlCompute")
	switch name {
	case "id":
		return nil
	case "arn":
		return nil
	case "region":
		return nil
	case "keyRotationEnabled":
		return s.ComputeKeyRotationEnabled()
	case "metadata":
		return s.ComputeMetadata()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.kms.key\" resource")
	}
}

// ComputeKeyRotationEnabled computer autogenerated
func (s *mqlAwsKmsKey) ComputeKeyRotationEnabled() error {
	var err error
	if _, ok := s.Cache.Load("keyRotationEnabled"); ok {
		return nil
	}
	vres, err := s.GetKeyRotationEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyRotationEnabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMetadata computer autogenerated
func (s *mqlAwsKmsKey) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsS3 resource interface
type AwsS3 interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Buckets() ([]interface{}, error)
}

// mqlAwsS3 for the aws.s3 resource
type mqlAwsS3 struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3 resource
func newAwsS3(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3{runtime.NewResource("aws.s3")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3 with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3].Register")
	switch name {
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3].Field")
	switch name {
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3\" resource")
	}
}

// Buckets accessor autogenerated
func (s *mqlAwsS3) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"aws.s3\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3].MqlCompute")
	switch name {
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlAwsS3) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsS3control resource interface
type AwsS3control interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	AccountPublicAccessBlock() (interface{}, error)
}

// mqlAwsS3control for the aws.s3control resource
type mqlAwsS3control struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3control) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3control resource
func newAwsS3control(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3control{runtime.NewResource("aws.s3control")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "accountPublicAccessBlock":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3control\", its \"accountPublicAccessBlock\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3control\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3control with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3control) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3control) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3control].Register")
	switch name {
	case "accountPublicAccessBlock":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3control\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3control) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3control].Field")
	switch name {
	case "accountPublicAccessBlock":
		return s.AccountPublicAccessBlock()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3control\" resource")
	}
}

// AccountPublicAccessBlock accessor autogenerated
func (s *mqlAwsS3control) AccountPublicAccessBlock() (interface{}, error) {
	res, ok := s.Cache.Load("accountPublicAccessBlock")
	if !ok || !res.Valid {
		if err := s.ComputeAccountPublicAccessBlock(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accountPublicAccessBlock")
		if !ok {
			return nil, errors.New("\"aws.s3control\" calculated \"accountPublicAccessBlock\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accountPublicAccessBlock")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3control\" failed to cast field \"accountPublicAccessBlock\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3control) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3control].MqlCompute")
	switch name {
	case "accountPublicAccessBlock":
		return s.ComputeAccountPublicAccessBlock()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3control\" resource")
	}
}

// ComputeAccountPublicAccessBlock computer autogenerated
func (s *mqlAwsS3control) ComputeAccountPublicAccessBlock() error {
	var err error
	if _, ok := s.Cache.Load("accountPublicAccessBlock"); ok {
		return nil
	}
	vres, err := s.GetAccountPublicAccessBlock()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accountPublicAccessBlock", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsS3Bucket resource interface
type AwsS3Bucket interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Policy() (AwsS3BucketPolicy, error)
	Tags() (map[string]interface{}, error)
	Acl() ([]interface{}, error)
	Owner() (map[string]interface{}, error)
	Public() (bool, error)
	Cors() ([]interface{}, error)
	Location() (string, error)
	Versioning() (map[string]interface{}, error)
	Logging() (map[string]interface{}, error)
	StaticWebsiteHosting() (map[string]interface{}, error)
	DefaultLock() (string, error)
	Replication() (interface{}, error)
	Encryption() (interface{}, error)
	PublicAccessBlock() (interface{}, error)
	Exists() (bool, error)
}

// mqlAwsS3Bucket for the aws.s3.bucket resource
type mqlAwsS3Bucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3Bucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3.bucket resource
func newAwsS3Bucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3Bucket{runtime.NewResource("aws.s3.bucket")}
	var existing AwsS3Bucket
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "policy":
			if _, ok := val.(AwsS3BucketPolicy); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"policy\" argument has the wrong type (expected type \"AwsS3BucketPolicy\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "acl":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"acl\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "owner":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"owner\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "public":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"public\" argument has the wrong type (expected type \"bool\")")
			}
		case "cors":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"cors\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "versioning":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"versioning\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "logging":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"logging\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "staticWebsiteHosting":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"staticWebsiteHosting\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "defaultLock":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"defaultLock\" argument has the wrong type (expected type \"string\")")
			}
		case "replication":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"replication\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "encryption":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"encryption\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "publicAccessBlock":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"publicAccessBlock\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "exists":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"exists\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3Bucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.s3.bucket\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.s3.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("exists"); !ok {
		return errors.New("Initialized \"aws.s3.bucket\" resource without a \"exists\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3Bucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "policy":
		return nil
	case "tags":
		return nil
	case "acl":
		return nil
	case "owner":
		return nil
	case "public":
		return nil
	case "cors":
		return nil
	case "location":
		return nil
	case "versioning":
		return nil
	case "logging":
		return nil
	case "staticWebsiteHosting":
		return nil
	case "defaultLock":
		return nil
	case "replication":
		return nil
	case "encryption":
		return nil
	case "publicAccessBlock":
		return nil
	case "exists":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3Bucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "policy":
		return s.Policy()
	case "tags":
		return s.Tags()
	case "acl":
		return s.Acl()
	case "owner":
		return s.Owner()
	case "public":
		return s.Public()
	case "cors":
		return s.Cors()
	case "location":
		return s.Location()
	case "versioning":
		return s.Versioning()
	case "logging":
		return s.Logging()
	case "staticWebsiteHosting":
		return s.StaticWebsiteHosting()
	case "defaultLock":
		return s.DefaultLock()
	case "replication":
		return s.Replication()
	case "encryption":
		return s.Encryption()
	case "publicAccessBlock":
		return s.PublicAccessBlock()
	case "exists":
		return s.Exists()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3.bucket\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsS3Bucket) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsS3Bucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Policy accessor autogenerated
func (s *mqlAwsS3Bucket) Policy() (AwsS3BucketPolicy, error) {
	res, ok := s.Cache.Load("policy")
	if !ok || !res.Valid {
		if err := s.ComputePolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policy")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"policy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsS3BucketPolicy)
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"policy\" to the right type (AwsS3BucketPolicy): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsS3Bucket) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		if err := s.ComputeTags(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tags")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"tags\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tags")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Acl accessor autogenerated
func (s *mqlAwsS3Bucket) Acl() ([]interface{}, error) {
	res, ok := s.Cache.Load("acl")
	if !ok || !res.Valid {
		if err := s.ComputeAcl(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("acl")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"acl\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "acl")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"acl\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Owner accessor autogenerated
func (s *mqlAwsS3Bucket) Owner() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("owner")
	if !ok || !res.Valid {
		if err := s.ComputeOwner(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("owner")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"owner\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "owner")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"owner\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Public accessor autogenerated
func (s *mqlAwsS3Bucket) Public() (bool, error) {
	res, ok := s.Cache.Load("public")
	if !ok || !res.Valid {
		if err := s.ComputePublic(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("public")
		if !ok {
			return false, errors.New("\"aws.s3.bucket\" calculated \"public\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "public")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"public\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Cors accessor autogenerated
func (s *mqlAwsS3Bucket) Cors() ([]interface{}, error) {
	res, ok := s.Cache.Load("cors")
	if !ok || !res.Valid {
		if err := s.ComputeCors(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cors")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"cors\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cors")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"cors\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlAwsS3Bucket) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		if err := s.ComputeLocation(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("location")
		if !ok {
			return "", errors.New("\"aws.s3.bucket\" calculated \"location\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "location")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versioning accessor autogenerated
func (s *mqlAwsS3Bucket) Versioning() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("versioning")
	if !ok || !res.Valid {
		if err := s.ComputeVersioning(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versioning")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"versioning\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versioning")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"versioning\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAwsS3Bucket) Logging() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		if err := s.ComputeLogging(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logging")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"logging\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logging")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"logging\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// StaticWebsiteHosting accessor autogenerated
func (s *mqlAwsS3Bucket) StaticWebsiteHosting() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("staticWebsiteHosting")
	if !ok || !res.Valid {
		if err := s.ComputeStaticWebsiteHosting(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("staticWebsiteHosting")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"staticWebsiteHosting\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "staticWebsiteHosting")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"staticWebsiteHosting\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultLock accessor autogenerated
func (s *mqlAwsS3Bucket) DefaultLock() (string, error) {
	res, ok := s.Cache.Load("defaultLock")
	if !ok || !res.Valid {
		if err := s.ComputeDefaultLock(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("defaultLock")
		if !ok {
			return "", errors.New("\"aws.s3.bucket\" calculated \"defaultLock\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "defaultLock")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"defaultLock\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Replication accessor autogenerated
func (s *mqlAwsS3Bucket) Replication() (interface{}, error) {
	res, ok := s.Cache.Load("replication")
	if !ok || !res.Valid {
		if err := s.ComputeReplication(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("replication")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"replication\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "replication")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"replication\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Encryption accessor autogenerated
func (s *mqlAwsS3Bucket) Encryption() (interface{}, error) {
	res, ok := s.Cache.Load("encryption")
	if !ok || !res.Valid {
		if err := s.ComputeEncryption(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("encryption")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"encryption\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "encryption")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"encryption\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PublicAccessBlock accessor autogenerated
func (s *mqlAwsS3Bucket) PublicAccessBlock() (interface{}, error) {
	res, ok := s.Cache.Load("publicAccessBlock")
	if !ok || !res.Valid {
		if err := s.ComputePublicAccessBlock(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("publicAccessBlock")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket\" calculated \"publicAccessBlock\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "publicAccessBlock")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"publicAccessBlock\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Exists accessor autogenerated
func (s *mqlAwsS3Bucket) Exists() (bool, error) {
	res, ok := s.Cache.Load("exists")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.s3.bucket\" failed: no value provided for static field \"exists\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.s3.bucket\" failed to cast field \"exists\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3Bucket) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "policy":
		return s.ComputePolicy()
	case "tags":
		return s.ComputeTags()
	case "acl":
		return s.ComputeAcl()
	case "owner":
		return s.ComputeOwner()
	case "public":
		return s.ComputePublic()
	case "cors":
		return s.ComputeCors()
	case "location":
		return s.ComputeLocation()
	case "versioning":
		return s.ComputeVersioning()
	case "logging":
		return s.ComputeLogging()
	case "staticWebsiteHosting":
		return s.ComputeStaticWebsiteHosting()
	case "defaultLock":
		return s.ComputeDefaultLock()
	case "replication":
		return s.ComputeReplication()
	case "encryption":
		return s.ComputeEncryption()
	case "publicAccessBlock":
		return s.ComputePublicAccessBlock()
	case "exists":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket\" resource")
	}
}

// ComputePolicy computer autogenerated
func (s *mqlAwsS3Bucket) ComputePolicy() error {
	var err error
	if _, ok := s.Cache.Load("policy"); ok {
		return nil
	}
	vres, err := s.GetPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTags computer autogenerated
func (s *mqlAwsS3Bucket) ComputeTags() error {
	var err error
	if _, ok := s.Cache.Load("tags"); ok {
		return nil
	}
	vres, err := s.GetTags()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tags", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAcl computer autogenerated
func (s *mqlAwsS3Bucket) ComputeAcl() error {
	var err error
	if _, ok := s.Cache.Load("acl"); ok {
		return nil
	}
	vres, err := s.GetAcl()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("acl", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOwner computer autogenerated
func (s *mqlAwsS3Bucket) ComputeOwner() error {
	var err error
	if _, ok := s.Cache.Load("owner"); ok {
		return nil
	}
	vres, err := s.GetOwner()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("owner", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePublic computer autogenerated
func (s *mqlAwsS3Bucket) ComputePublic() error {
	var err error
	if _, ok := s.Cache.Load("public"); ok {
		return nil
	}
	vres, err := s.GetPublic()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("public", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCors computer autogenerated
func (s *mqlAwsS3Bucket) ComputeCors() error {
	var err error
	if _, ok := s.Cache.Load("cors"); ok {
		return nil
	}
	vres, err := s.GetCors()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cors", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLocation computer autogenerated
func (s *mqlAwsS3Bucket) ComputeLocation() error {
	var err error
	if _, ok := s.Cache.Load("location"); ok {
		return nil
	}
	vres, err := s.GetLocation()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("location", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersioning computer autogenerated
func (s *mqlAwsS3Bucket) ComputeVersioning() error {
	var err error
	if _, ok := s.Cache.Load("versioning"); ok {
		return nil
	}
	vres, err := s.GetVersioning()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versioning", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLogging computer autogenerated
func (s *mqlAwsS3Bucket) ComputeLogging() error {
	var err error
	if _, ok := s.Cache.Load("logging"); ok {
		return nil
	}
	vres, err := s.GetLogging()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logging", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStaticWebsiteHosting computer autogenerated
func (s *mqlAwsS3Bucket) ComputeStaticWebsiteHosting() error {
	var err error
	if _, ok := s.Cache.Load("staticWebsiteHosting"); ok {
		return nil
	}
	vres, err := s.GetStaticWebsiteHosting()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("staticWebsiteHosting", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDefaultLock computer autogenerated
func (s *mqlAwsS3Bucket) ComputeDefaultLock() error {
	var err error
	if _, ok := s.Cache.Load("defaultLock"); ok {
		return nil
	}
	vres, err := s.GetDefaultLock()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("defaultLock", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeReplication computer autogenerated
func (s *mqlAwsS3Bucket) ComputeReplication() error {
	var err error
	if _, ok := s.Cache.Load("replication"); ok {
		return nil
	}
	vres, err := s.GetReplication()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("replication", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEncryption computer autogenerated
func (s *mqlAwsS3Bucket) ComputeEncryption() error {
	var err error
	if _, ok := s.Cache.Load("encryption"); ok {
		return nil
	}
	vres, err := s.GetEncryption()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("encryption", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePublicAccessBlock computer autogenerated
func (s *mqlAwsS3Bucket) ComputePublicAccessBlock() error {
	var err error
	if _, ok := s.Cache.Load("publicAccessBlock"); ok {
		return nil
	}
	vres, err := s.GetPublicAccessBlock()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("publicAccessBlock", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsS3BucketGrant resource interface
type AwsS3BucketGrant interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Permission() (string, error)
	Grantee() (map[string]interface{}, error)
}

// mqlAwsS3BucketGrant for the aws.s3.bucket.grant resource
type mqlAwsS3BucketGrant struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3BucketGrant) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3.bucket.grant resource
func newAwsS3BucketGrant(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3BucketGrant{runtime.NewResource("aws.s3.bucket.grant")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.grant\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.grant\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "permission":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.grant\", its \"permission\" argument has the wrong type (expected type \"string\")")
			}
		case "grantee":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.grant\", its \"grantee\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.grant\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3.bucket.grant with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3BucketGrant) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.grant\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.grant\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("permission"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.grant\" resource without a \"permission\". This field is required.")
	}
	if _, ok := s.Cache.Load("grantee"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.grant\" resource without a \"grantee\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3BucketGrant) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.grant].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "permission":
		return nil
	case "grantee":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.grant\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3BucketGrant) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.grant].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "permission":
		return s.Permission()
	case "grantee":
		return s.Grantee()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3.bucket.grant\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsS3BucketGrant) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.grant\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.grant\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsS3BucketGrant) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.grant\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.grant\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Permission accessor autogenerated
func (s *mqlAwsS3BucketGrant) Permission() (string, error) {
	res, ok := s.Cache.Load("permission")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.grant\" failed: no value provided for static field \"permission\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.grant\" failed to cast field \"permission\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Grantee accessor autogenerated
func (s *mqlAwsS3BucketGrant) Grantee() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("grantee")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.s3.bucket.grant\" failed: no value provided for static field \"grantee\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.grant\" failed to cast field \"grantee\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3BucketGrant) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.grant].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "permission":
		return nil
	case "grantee":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.grant\" resource")
	}
}

// AwsS3BucketCorsrule resource interface
type AwsS3BucketCorsrule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	AllowedHeaders() ([]interface{}, error)
	AllowedMethods() ([]interface{}, error)
	AllowedOrigins() ([]interface{}, error)
	ExposeHeaders() ([]interface{}, error)
	MaxAgeSeconds() (int64, error)
}

// mqlAwsS3BucketCorsrule for the aws.s3.bucket.corsrule resource
type mqlAwsS3BucketCorsrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3BucketCorsrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3.bucket.corsrule resource
func newAwsS3BucketCorsrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3BucketCorsrule{runtime.NewResource("aws.s3.bucket.corsrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedHeaders":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"allowedHeaders\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "allowedMethods":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"allowedMethods\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "allowedOrigins":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"allowedOrigins\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "exposeHeaders":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"exposeHeaders\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "maxAgeSeconds":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"maxAgeSeconds\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.corsrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3.bucket.corsrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3BucketCorsrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedHeaders"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"allowedHeaders\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedMethods"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"allowedMethods\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedOrigins"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"allowedOrigins\". This field is required.")
	}
	if _, ok := s.Cache.Load("exposeHeaders"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"exposeHeaders\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxAgeSeconds"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.corsrule\" resource without a \"maxAgeSeconds\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.corsrule].Register")
	switch name {
	case "name":
		return nil
	case "allowedHeaders":
		return nil
	case "allowedMethods":
		return nil
	case "allowedOrigins":
		return nil
	case "exposeHeaders":
		return nil
	case "maxAgeSeconds":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.corsrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.corsrule].Field")
	switch name {
	case "name":
		return s.Name()
	case "allowedHeaders":
		return s.AllowedHeaders()
	case "allowedMethods":
		return s.AllowedMethods()
	case "allowedOrigins":
		return s.AllowedOrigins()
	case "exposeHeaders":
		return s.ExposeHeaders()
	case "maxAgeSeconds":
		return s.MaxAgeSeconds()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3.bucket.corsrule\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedHeaders accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) AllowedHeaders() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedHeaders")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"allowedHeaders\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"allowedHeaders\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AllowedMethods accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) AllowedMethods() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedMethods")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"allowedMethods\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"allowedMethods\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AllowedOrigins accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) AllowedOrigins() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedOrigins")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"allowedOrigins\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"allowedOrigins\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ExposeHeaders accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) ExposeHeaders() ([]interface{}, error) {
	res, ok := s.Cache.Load("exposeHeaders")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"exposeHeaders\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"exposeHeaders\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MaxAgeSeconds accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) MaxAgeSeconds() (int64, error) {
	res, ok := s.Cache.Load("maxAgeSeconds")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.s3.bucket.corsrule\" failed: no value provided for static field \"maxAgeSeconds\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.s3.bucket.corsrule\" failed to cast field \"maxAgeSeconds\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3BucketCorsrule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.corsrule].MqlCompute")
	switch name {
	case "name":
		return nil
	case "allowedHeaders":
		return nil
	case "allowedMethods":
		return nil
	case "allowedOrigins":
		return nil
	case "exposeHeaders":
		return nil
	case "maxAgeSeconds":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.corsrule\" resource")
	}
}

// AwsS3BucketPolicy resource interface
type AwsS3BucketPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Document() (string, error)
	Version() (string, error)
	Id() (string, error)
	Statements() ([]interface{}, error)
}

// mqlAwsS3BucketPolicy for the aws.s3.bucket.policy resource
type mqlAwsS3BucketPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsS3BucketPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.s3.bucket.policy resource
func newAwsS3BucketPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsS3BucketPolicy{runtime.NewResource("aws.s3.bucket.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "document":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"document\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "statements":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"statements\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.s3.bucket.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.s3.bucket.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsS3BucketPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.policy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("document"); !ok {
		return errors.New("Initialized \"aws.s3.bucket.policy\" resource without a \"document\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.policy].Register")
	switch name {
	case "name":
		return nil
	case "document":
		return nil
	case "version":
		return nil
	case "id":
		return nil
	case "statements":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.policy].Field")
	switch name {
	case "name":
		return s.Name()
	case "document":
		return s.Document()
	case "version":
		return s.Version()
	case "id":
		return s.Id()
	case "statements":
		return s.Statements()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.s3.bucket.policy\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.policy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Document accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Document() (string, error) {
	res, ok := s.Cache.Load("document")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.s3.bucket.policy\" failed: no value provided for static field \"document\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.policy\" failed to cast field \"document\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		if err := s.ComputeVersion(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("version")
		if !ok {
			return "", errors.New("\"aws.s3.bucket.policy\" calculated \"version\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "version")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.policy\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"aws.s3.bucket.policy\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.s3.bucket.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Statements accessor autogenerated
func (s *mqlAwsS3BucketPolicy) Statements() ([]interface{}, error) {
	res, ok := s.Cache.Load("statements")
	if !ok || !res.Valid {
		if err := s.ComputeStatements(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("statements")
		if !ok {
			return nil, errors.New("\"aws.s3.bucket.policy\" calculated \"statements\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "statements")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.s3.bucket.policy\" failed to cast field \"statements\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsS3BucketPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.s3.bucket.policy].MqlCompute")
	switch name {
	case "name":
		return nil
	case "document":
		return nil
	case "version":
		return s.ComputeVersion()
	case "id":
		return s.ComputeId()
	case "statements":
		return s.ComputeStatements()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.s3.bucket.policy\" resource")
	}
}

// ComputeVersion computer autogenerated
func (s *mqlAwsS3BucketPolicy) ComputeVersion() error {
	var err error
	if _, ok := s.Cache.Load("version"); ok {
		return nil
	}
	vres, err := s.GetVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("version", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeId computer autogenerated
func (s *mqlAwsS3BucketPolicy) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStatements computer autogenerated
func (s *mqlAwsS3BucketPolicy) ComputeStatements() error {
	var err error
	if _, ok := s.Cache.Load("statements"); ok {
		return nil
	}
	vres, err := s.GetStatements()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("statements", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsApplicationAutoscaling resource interface
type AwsApplicationAutoscaling interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespace() (string, error)
	ScalableTargets() ([]interface{}, error)
}

// mqlAwsApplicationAutoscaling for the aws.applicationAutoscaling resource
type mqlAwsApplicationAutoscaling struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsApplicationAutoscaling) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.applicationAutoscaling resource
func newAwsApplicationAutoscaling(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsApplicationAutoscaling{runtime.NewResource("aws.applicationAutoscaling")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationAutoscaling\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "scalableTargets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationAutoscaling\", its \"scalableTargets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationAutoscaling\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.applicationAutoscaling with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsApplicationAutoscaling) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"aws.applicationAutoscaling\" resource without a \"namespace\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsApplicationAutoscaling) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.applicationAutoscaling].Register")
	switch name {
	case "namespace":
		return nil
	case "scalableTargets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.applicationAutoscaling\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsApplicationAutoscaling) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.applicationAutoscaling].Field")
	switch name {
	case "namespace":
		return s.Namespace()
	case "scalableTargets":
		return s.ScalableTargets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.applicationAutoscaling\" resource")
	}
}

// Namespace accessor autogenerated
func (s *mqlAwsApplicationAutoscaling) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.applicationAutoscaling\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.applicationAutoscaling\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ScalableTargets accessor autogenerated
func (s *mqlAwsApplicationAutoscaling) ScalableTargets() ([]interface{}, error) {
	res, ok := s.Cache.Load("scalableTargets")
	if !ok || !res.Valid {
		if err := s.ComputeScalableTargets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("scalableTargets")
		if !ok {
			return nil, errors.New("\"aws.applicationAutoscaling\" calculated \"scalableTargets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "scalableTargets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.applicationAutoscaling\" failed to cast field \"scalableTargets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsApplicationAutoscaling) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.applicationAutoscaling].MqlCompute")
	switch name {
	case "namespace":
		return nil
	case "scalableTargets":
		return s.ComputeScalableTargets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.applicationAutoscaling\" resource")
	}
}

// ComputeScalableTargets computer autogenerated
func (s *mqlAwsApplicationAutoscaling) ComputeScalableTargets() error {
	var err error
	if _, ok := s.Cache.Load("scalableTargets"); ok {
		return nil
	}
	vres, err := s.GetScalableTargets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("scalableTargets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsApplicationautoscalingTarget resource interface
type AwsApplicationautoscalingTarget interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespace() (string, error)
	Arn() (string, error)
	ScalableDimension() (string, error)
	MinCapacity() (int64, error)
	MaxCapacity() (int64, error)
	SuspendedState() (interface{}, error)
}

// mqlAwsApplicationautoscalingTarget for the aws.applicationautoscaling.target resource
type mqlAwsApplicationautoscalingTarget struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsApplicationautoscalingTarget) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.applicationautoscaling.target resource
func newAwsApplicationautoscalingTarget(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsApplicationautoscalingTarget{runtime.NewResource("aws.applicationautoscaling.target")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "scalableDimension":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"scalableDimension\" argument has the wrong type (expected type \"string\")")
			}
		case "minCapacity":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"minCapacity\" argument has the wrong type (expected type \"int64\")")
			}
		case "maxCapacity":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"maxCapacity\" argument has the wrong type (expected type \"int64\")")
			}
		case "suspendedState":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"suspendedState\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.applicationautoscaling.target\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.applicationautoscaling.target with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsApplicationautoscalingTarget) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("scalableDimension"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"scalableDimension\". This field is required.")
	}
	if _, ok := s.Cache.Load("minCapacity"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"minCapacity\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxCapacity"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"maxCapacity\". This field is required.")
	}
	if _, ok := s.Cache.Load("suspendedState"); !ok {
		return errors.New("Initialized \"aws.applicationautoscaling.target\" resource without a \"suspendedState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.applicationautoscaling.target].Register")
	switch name {
	case "namespace":
		return nil
	case "arn":
		return nil
	case "scalableDimension":
		return nil
	case "minCapacity":
		return nil
	case "maxCapacity":
		return nil
	case "suspendedState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.applicationautoscaling.target\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.applicationautoscaling.target].Field")
	switch name {
	case "namespace":
		return s.Namespace()
	case "arn":
		return s.Arn()
	case "scalableDimension":
		return s.ScalableDimension()
	case "minCapacity":
		return s.MinCapacity()
	case "maxCapacity":
		return s.MaxCapacity()
	case "suspendedState":
		return s.SuspendedState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.applicationautoscaling.target\" resource")
	}
}

// Namespace accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ScalableDimension accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) ScalableDimension() (string, error) {
	res, ok := s.Cache.Load("scalableDimension")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"scalableDimension\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"scalableDimension\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MinCapacity accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) MinCapacity() (int64, error) {
	res, ok := s.Cache.Load("minCapacity")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"minCapacity\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"minCapacity\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaxCapacity accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) MaxCapacity() (int64, error) {
	res, ok := s.Cache.Load("maxCapacity")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"maxCapacity\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"maxCapacity\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// SuspendedState accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) SuspendedState() (interface{}, error) {
	res, ok := s.Cache.Load("suspendedState")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.applicationautoscaling.target\" failed: no value provided for static field \"suspendedState\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.applicationautoscaling.target\" failed to cast field \"suspendedState\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsApplicationautoscalingTarget) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.applicationautoscaling.target].MqlCompute")
	switch name {
	case "namespace":
		return nil
	case "arn":
		return nil
	case "scalableDimension":
		return nil
	case "minCapacity":
		return nil
	case "maxCapacity":
		return nil
	case "suspendedState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.applicationautoscaling.target\" resource")
	}
}

// AwsBackup resource interface
type AwsBackup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vaults() ([]interface{}, error)
}

// mqlAwsBackup for the aws.backup resource
type mqlAwsBackup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsBackup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.backup resource
func newAwsBackup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsBackup{runtime.NewResource("aws.backup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vaults":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup\", its \"vaults\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.backup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.backup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsBackup) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsBackup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup].Register")
	switch name {
	case "vaults":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsBackup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.backup].Field")
	switch name {
	case "vaults":
		return s.Vaults()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.backup\" resource")
	}
}

// Vaults accessor autogenerated
func (s *mqlAwsBackup) Vaults() ([]interface{}, error) {
	res, ok := s.Cache.Load("vaults")
	if !ok || !res.Valid {
		if err := s.ComputeVaults(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vaults")
		if !ok {
			return nil, errors.New("\"aws.backup\" calculated \"vaults\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vaults")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.backup\" failed to cast field \"vaults\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsBackup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup].MqlCompute")
	switch name {
	case "vaults":
		return s.ComputeVaults()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup\" resource")
	}
}

// ComputeVaults computer autogenerated
func (s *mqlAwsBackup) ComputeVaults() error {
	var err error
	if _, ok := s.Cache.Load("vaults"); ok {
		return nil
	}
	vres, err := s.GetVaults()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vaults", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsBackupVault resource interface
type AwsBackupVault interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	RecoveryPoints() ([]interface{}, error)
}

// mqlAwsBackupVault for the aws.backup.vault resource
type mqlAwsBackupVault struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsBackupVault) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.backup.vault resource
func newAwsBackupVault(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsBackupVault{runtime.NewResource("aws.backup.vault")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vault\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vault\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "recoveryPoints":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vault\", its \"recoveryPoints\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vault\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.backup.vault with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsBackupVault) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.backup.vault\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.backup.vault\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsBackupVault) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup.vault].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "recoveryPoints":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup.vault\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsBackupVault) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.backup.vault].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "recoveryPoints":
		return s.RecoveryPoints()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.backup.vault\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsBackupVault) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vault\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vault\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsBackupVault) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vault\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vault\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecoveryPoints accessor autogenerated
func (s *mqlAwsBackupVault) RecoveryPoints() ([]interface{}, error) {
	res, ok := s.Cache.Load("recoveryPoints")
	if !ok || !res.Valid {
		if err := s.ComputeRecoveryPoints(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recoveryPoints")
		if !ok {
			return nil, errors.New("\"aws.backup.vault\" calculated \"recoveryPoints\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recoveryPoints")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.backup.vault\" failed to cast field \"recoveryPoints\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsBackupVault) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup.vault].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "recoveryPoints":
		return s.ComputeRecoveryPoints()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup.vault\" resource")
	}
}

// ComputeRecoveryPoints computer autogenerated
func (s *mqlAwsBackupVault) ComputeRecoveryPoints() error {
	var err error
	if _, ok := s.Cache.Load("recoveryPoints"); ok {
		return nil
	}
	vres, err := s.GetRecoveryPoints()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recoveryPoints", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsBackupVaultRecoveryPoint resource interface
type AwsBackupVaultRecoveryPoint interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	ResourceType() (string, error)
	CreatedBy() (interface{}, error)
	IamRoleArn() (string, error)
	Status() (string, error)
	CreationDate() (*time.Time, error)
	CompletionDate() (*time.Time, error)
	EncryptionKeyArn() (string, error)
	IsEncrypted() (bool, error)
}

// mqlAwsBackupVaultRecoveryPoint for the aws.backup.vaultRecoveryPoint resource
type mqlAwsBackupVaultRecoveryPoint struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsBackupVaultRecoveryPoint) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.backup.vaultRecoveryPoint resource
func newAwsBackupVaultRecoveryPoint(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsBackupVaultRecoveryPoint{runtime.NewResource("aws.backup.vaultRecoveryPoint")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"resourceType\" argument has the wrong type (expected type \"string\")")
			}
		case "createdBy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"createdBy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "iamRoleArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"iamRoleArn\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "creationDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"creationDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "completionDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"completionDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "encryptionKeyArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"encryptionKeyArn\" argument has the wrong type (expected type \"string\")")
			}
		case "isEncrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"isEncrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.backup.vaultRecoveryPoint\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.backup.vaultRecoveryPoint with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsBackupVaultRecoveryPoint) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceType"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"resourceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdBy"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"createdBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("iamRoleArn"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"iamRoleArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationDate"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"creationDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("completionDate"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"completionDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("encryptionKeyArn"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"encryptionKeyArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEncrypted"); !ok {
		return errors.New("Initialized \"aws.backup.vaultRecoveryPoint\" resource without a \"isEncrypted\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup.vaultRecoveryPoint].Register")
	switch name {
	case "arn":
		return nil
	case "resourceType":
		return nil
	case "createdBy":
		return nil
	case "iamRoleArn":
		return nil
	case "status":
		return nil
	case "creationDate":
		return nil
	case "completionDate":
		return nil
	case "encryptionKeyArn":
		return nil
	case "isEncrypted":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup.vaultRecoveryPoint\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.backup.vaultRecoveryPoint].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "resourceType":
		return s.ResourceType()
	case "createdBy":
		return s.CreatedBy()
	case "iamRoleArn":
		return s.IamRoleArn()
	case "status":
		return s.Status()
	case "creationDate":
		return s.CreationDate()
	case "completionDate":
		return s.CompletionDate()
	case "encryptionKeyArn":
		return s.EncryptionKeyArn()
	case "isEncrypted":
		return s.IsEncrypted()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.backup.vaultRecoveryPoint\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceType accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) ResourceType() (string, error) {
	res, ok := s.Cache.Load("resourceType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"resourceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"resourceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedBy accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) CreatedBy() (interface{}, error) {
	res, ok := s.Cache.Load("createdBy")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"createdBy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"createdBy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// IamRoleArn accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) IamRoleArn() (string, error) {
	res, ok := s.Cache.Load("iamRoleArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"iamRoleArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"iamRoleArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationDate accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) CreationDate() (*time.Time, error) {
	res, ok := s.Cache.Load("creationDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"creationDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"creationDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CompletionDate accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) CompletionDate() (*time.Time, error) {
	res, ok := s.Cache.Load("completionDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"completionDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"completionDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// EncryptionKeyArn accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) EncryptionKeyArn() (string, error) {
	res, ok := s.Cache.Load("encryptionKeyArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"encryptionKeyArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"encryptionKeyArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsEncrypted accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) IsEncrypted() (bool, error) {
	res, ok := s.Cache.Load("isEncrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.backup.vaultRecoveryPoint\" failed: no value provided for static field \"isEncrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.backup.vaultRecoveryPoint\" failed to cast field \"isEncrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsBackupVaultRecoveryPoint) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.backup.vaultRecoveryPoint].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "resourceType":
		return nil
	case "createdBy":
		return nil
	case "iamRoleArn":
		return nil
	case "status":
		return nil
	case "creationDate":
		return nil
	case "completionDate":
		return nil
	case "encryptionKeyArn":
		return nil
	case "isEncrypted":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.backup.vaultRecoveryPoint\" resource")
	}
}

// AwsDynamodb resource interface
type AwsDynamodb interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Backups() ([]interface{}, error)
	GlobalTables() ([]interface{}, error)
	Tables() ([]interface{}, error)
	Limits() ([]interface{}, error)
}

// mqlAwsDynamodb for the aws.dynamodb resource
type mqlAwsDynamodb struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsDynamodb) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.dynamodb resource
func newAwsDynamodb(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsDynamodb{runtime.NewResource("aws.dynamodb")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "backups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb\", its \"backups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "globalTables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb\", its \"globalTables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb\", its \"tables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "limits":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb\", its \"limits\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.dynamodb with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsDynamodb) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsDynamodb) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb].Register")
	switch name {
	case "backups":
		return nil
	case "globalTables":
		return nil
	case "tables":
		return nil
	case "limits":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsDynamodb) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.dynamodb].Field")
	switch name {
	case "backups":
		return s.Backups()
	case "globalTables":
		return s.GlobalTables()
	case "tables":
		return s.Tables()
	case "limits":
		return s.Limits()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.dynamodb\" resource")
	}
}

// Backups accessor autogenerated
func (s *mqlAwsDynamodb) Backups() ([]interface{}, error) {
	res, ok := s.Cache.Load("backups")
	if !ok || !res.Valid {
		if err := s.ComputeBackups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("backups")
		if !ok {
			return nil, errors.New("\"aws.dynamodb\" calculated \"backups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "backups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb\" failed to cast field \"backups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// GlobalTables accessor autogenerated
func (s *mqlAwsDynamodb) GlobalTables() ([]interface{}, error) {
	res, ok := s.Cache.Load("globalTables")
	if !ok || !res.Valid {
		if err := s.ComputeGlobalTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("globalTables")
		if !ok {
			return nil, errors.New("\"aws.dynamodb\" calculated \"globalTables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "globalTables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb\" failed to cast field \"globalTables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tables accessor autogenerated
func (s *mqlAwsDynamodb) Tables() ([]interface{}, error) {
	res, ok := s.Cache.Load("tables")
	if !ok || !res.Valid {
		if err := s.ComputeTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tables")
		if !ok {
			return nil, errors.New("\"aws.dynamodb\" calculated \"tables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb\" failed to cast field \"tables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Limits accessor autogenerated
func (s *mqlAwsDynamodb) Limits() ([]interface{}, error) {
	res, ok := s.Cache.Load("limits")
	if !ok || !res.Valid {
		if err := s.ComputeLimits(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("limits")
		if !ok {
			return nil, errors.New("\"aws.dynamodb\" calculated \"limits\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "limits")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb\" failed to cast field \"limits\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsDynamodb) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb].MqlCompute")
	switch name {
	case "backups":
		return s.ComputeBackups()
	case "globalTables":
		return s.ComputeGlobalTables()
	case "tables":
		return s.ComputeTables()
	case "limits":
		return s.ComputeLimits()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb\" resource")
	}
}

// ComputeBackups computer autogenerated
func (s *mqlAwsDynamodb) ComputeBackups() error {
	var err error
	if _, ok := s.Cache.Load("backups"); ok {
		return nil
	}
	vres, err := s.GetBackups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("backups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGlobalTables computer autogenerated
func (s *mqlAwsDynamodb) ComputeGlobalTables() error {
	var err error
	if _, ok := s.Cache.Load("globalTables"); ok {
		return nil
	}
	vres, err := s.GetGlobalTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("globalTables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTables computer autogenerated
func (s *mqlAwsDynamodb) ComputeTables() error {
	var err error
	if _, ok := s.Cache.Load("tables"); ok {
		return nil
	}
	vres, err := s.GetTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLimits computer autogenerated
func (s *mqlAwsDynamodb) ComputeLimits() error {
	var err error
	if _, ok := s.Cache.Load("limits"); ok {
		return nil
	}
	vres, err := s.GetLimits()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("limits", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsDynamodbLimit resource interface
type AwsDynamodbLimit interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Region() (string, error)
	AccountMaxRead() (int64, error)
	AccountMaxWrite() (int64, error)
	TableMaxRead() (int64, error)
	TableMaxWrite() (int64, error)
}

// mqlAwsDynamodbLimit for the aws.dynamodb.limit resource
type mqlAwsDynamodbLimit struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsDynamodbLimit) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.dynamodb.limit resource
func newAwsDynamodbLimit(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsDynamodbLimit{runtime.NewResource("aws.dynamodb.limit")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "accountMaxRead":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"accountMaxRead\" argument has the wrong type (expected type \"int64\")")
			}
		case "accountMaxWrite":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"accountMaxWrite\" argument has the wrong type (expected type \"int64\")")
			}
		case "tableMaxRead":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"tableMaxRead\" argument has the wrong type (expected type \"int64\")")
			}
		case "tableMaxWrite":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"tableMaxWrite\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.limit\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.dynamodb.limit with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsDynamodbLimit) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountMaxRead"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"accountMaxRead\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountMaxWrite"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"accountMaxWrite\". This field is required.")
	}
	if _, ok := s.Cache.Load("tableMaxRead"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"tableMaxRead\". This field is required.")
	}
	if _, ok := s.Cache.Load("tableMaxWrite"); !ok {
		return errors.New("Initialized \"aws.dynamodb.limit\" resource without a \"tableMaxWrite\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsDynamodbLimit) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.limit].Register")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "accountMaxRead":
		return nil
	case "accountMaxWrite":
		return nil
	case "tableMaxRead":
		return nil
	case "tableMaxWrite":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.limit\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsDynamodbLimit) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.limit].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "region":
		return s.Region()
	case "accountMaxRead":
		return s.AccountMaxRead()
	case "accountMaxWrite":
		return s.AccountMaxWrite()
	case "tableMaxRead":
		return s.TableMaxRead()
	case "tableMaxWrite":
		return s.TableMaxWrite()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.dynamodb.limit\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsDynamodbLimit) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsDynamodbLimit) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountMaxRead accessor autogenerated
func (s *mqlAwsDynamodbLimit) AccountMaxRead() (int64, error) {
	res, ok := s.Cache.Load("accountMaxRead")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"accountMaxRead\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"accountMaxRead\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// AccountMaxWrite accessor autogenerated
func (s *mqlAwsDynamodbLimit) AccountMaxWrite() (int64, error) {
	res, ok := s.Cache.Load("accountMaxWrite")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"accountMaxWrite\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"accountMaxWrite\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// TableMaxRead accessor autogenerated
func (s *mqlAwsDynamodbLimit) TableMaxRead() (int64, error) {
	res, ok := s.Cache.Load("tableMaxRead")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"tableMaxRead\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"tableMaxRead\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// TableMaxWrite accessor autogenerated
func (s *mqlAwsDynamodbLimit) TableMaxWrite() (int64, error) {
	res, ok := s.Cache.Load("tableMaxWrite")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.dynamodb.limit\" failed: no value provided for static field \"tableMaxWrite\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.dynamodb.limit\" failed to cast field \"tableMaxWrite\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsDynamodbLimit) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.limit].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "accountMaxRead":
		return nil
	case "accountMaxWrite":
		return nil
	case "tableMaxRead":
		return nil
	case "tableMaxWrite":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.limit\" resource")
	}
}

// AwsDynamodbGlobaltable resource interface
type AwsDynamodbGlobaltable interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	ReplicaSettings() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsDynamodbGlobaltable for the aws.dynamodb.globaltable resource
type mqlAwsDynamodbGlobaltable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsDynamodbGlobaltable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.dynamodb.globaltable resource
func newAwsDynamodbGlobaltable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsDynamodbGlobaltable{runtime.NewResource("aws.dynamodb.globaltable")}
	var existing AwsDynamodbGlobaltable
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.globaltable\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.globaltable\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "replicaSettings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.globaltable\", its \"replicaSettings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.globaltable\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.globaltable\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.dynamodb.globaltable with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsDynamodbGlobaltable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.dynamodb.globaltable\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.dynamodb.globaltable\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.dynamodb.globaltable\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.globaltable].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "replicaSettings":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.globaltable\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.globaltable].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "replicaSettings":
		return s.ReplicaSettings()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.dynamodb.globaltable\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.globaltable\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.globaltable\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.globaltable\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.globaltable\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReplicaSettings accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) ReplicaSettings() ([]interface{}, error) {
	res, ok := s.Cache.Load("replicaSettings")
	if !ok || !res.Valid {
		if err := s.ComputeReplicaSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("replicaSettings")
		if !ok {
			return nil, errors.New("\"aws.dynamodb.globaltable\" calculated \"replicaSettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "replicaSettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.globaltable\" failed to cast field \"replicaSettings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.dynamodb.globaltable\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.globaltable\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsDynamodbGlobaltable) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.globaltable].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "replicaSettings":
		return s.ComputeReplicaSettings()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.globaltable\" resource")
	}
}

// ComputeReplicaSettings computer autogenerated
func (s *mqlAwsDynamodbGlobaltable) ComputeReplicaSettings() error {
	var err error
	if _, ok := s.Cache.Load("replicaSettings"); ok {
		return nil
	}
	vres, err := s.GetReplicaSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("replicaSettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsDynamodbTable resource interface
type AwsDynamodbTable interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Region() (string, error)
	Backups() ([]interface{}, error)
	SseDescription() (interface{}, error)
	ProvisionedThroughput() (interface{}, error)
	ContinuousBackups() (interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsDynamodbTable for the aws.dynamodb.table resource
type mqlAwsDynamodbTable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsDynamodbTable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.dynamodb.table resource
func newAwsDynamodbTable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsDynamodbTable{runtime.NewResource("aws.dynamodb.table")}
	var existing AwsDynamodbTable
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "backups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"backups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sseDescription":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"sseDescription\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "provisionedThroughput":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"provisionedThroughput\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "continuousBackups":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"continuousBackups\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.dynamodb.table\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.dynamodb.table with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsDynamodbTable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("sseDescription"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"sseDescription\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisionedThroughput"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"provisionedThroughput\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.dynamodb.table\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsDynamodbTable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.table].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "backups":
		return nil
	case "sseDescription":
		return nil
	case "provisionedThroughput":
		return nil
	case "continuousBackups":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.table\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsDynamodbTable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.table].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "region":
		return s.Region()
	case "backups":
		return s.Backups()
	case "sseDescription":
		return s.SseDescription()
	case "provisionedThroughput":
		return s.ProvisionedThroughput()
	case "continuousBackups":
		return s.ContinuousBackups()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.dynamodb.table\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsDynamodbTable) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsDynamodbTable) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsDynamodbTable) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Backups accessor autogenerated
func (s *mqlAwsDynamodbTable) Backups() ([]interface{}, error) {
	res, ok := s.Cache.Load("backups")
	if !ok || !res.Valid {
		if err := s.ComputeBackups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("backups")
		if !ok {
			return nil, errors.New("\"aws.dynamodb.table\" calculated \"backups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "backups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"backups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SseDescription accessor autogenerated
func (s *mqlAwsDynamodbTable) SseDescription() (interface{}, error) {
	res, ok := s.Cache.Load("sseDescription")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"sseDescription\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"sseDescription\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ProvisionedThroughput accessor autogenerated
func (s *mqlAwsDynamodbTable) ProvisionedThroughput() (interface{}, error) {
	res, ok := s.Cache.Load("provisionedThroughput")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"provisionedThroughput\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"provisionedThroughput\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ContinuousBackups accessor autogenerated
func (s *mqlAwsDynamodbTable) ContinuousBackups() (interface{}, error) {
	res, ok := s.Cache.Load("continuousBackups")
	if !ok || !res.Valid {
		if err := s.ComputeContinuousBackups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("continuousBackups")
		if !ok {
			return nil, errors.New("\"aws.dynamodb.table\" calculated \"continuousBackups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "continuousBackups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"continuousBackups\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsDynamodbTable) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.dynamodb.table\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dynamodb.table\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsDynamodbTable) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dynamodb.table].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "backups":
		return s.ComputeBackups()
	case "sseDescription":
		return nil
	case "provisionedThroughput":
		return nil
	case "continuousBackups":
		return s.ComputeContinuousBackups()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dynamodb.table\" resource")
	}
}

// ComputeBackups computer autogenerated
func (s *mqlAwsDynamodbTable) ComputeBackups() error {
	var err error
	if _, ok := s.Cache.Load("backups"); ok {
		return nil
	}
	vres, err := s.GetBackups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("backups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContinuousBackups computer autogenerated
func (s *mqlAwsDynamodbTable) ComputeContinuousBackups() error {
	var err error
	if _, ok := s.Cache.Load("continuousBackups"); ok {
		return nil
	}
	vres, err := s.GetContinuousBackups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("continuousBackups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRds resource interface
type AwsRds interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DbInstances() ([]interface{}, error)
	DbClusters() ([]interface{}, error)
}

// mqlAwsRds for the aws.rds resource
type mqlAwsRds struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRds) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.rds resource
func newAwsRds(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRds{runtime.NewResource("aws.rds")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "dbInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds\", its \"dbInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "dbClusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds\", its \"dbClusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.rds\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.rds with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRds) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRds) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds].Register")
	switch name {
	case "dbInstances":
		return nil
	case "dbClusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRds) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.rds].Field")
	switch name {
	case "dbInstances":
		return s.DbInstances()
	case "dbClusters":
		return s.DbClusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.rds\" resource")
	}
}

// DbInstances accessor autogenerated
func (s *mqlAwsRds) DbInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("dbInstances")
	if !ok || !res.Valid {
		if err := s.ComputeDbInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dbInstances")
		if !ok {
			return nil, errors.New("\"aws.rds\" calculated \"dbInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dbInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds\" failed to cast field \"dbInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DbClusters accessor autogenerated
func (s *mqlAwsRds) DbClusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("dbClusters")
	if !ok || !res.Valid {
		if err := s.ComputeDbClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("dbClusters")
		if !ok {
			return nil, errors.New("\"aws.rds\" calculated \"dbClusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "dbClusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds\" failed to cast field \"dbClusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRds) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds].MqlCompute")
	switch name {
	case "dbInstances":
		return s.ComputeDbInstances()
	case "dbClusters":
		return s.ComputeDbClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds\" resource")
	}
}

// ComputeDbInstances computer autogenerated
func (s *mqlAwsRds) ComputeDbInstances() error {
	var err error
	if _, ok := s.Cache.Load("dbInstances"); ok {
		return nil
	}
	vres, err := s.GetDbInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dbInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDbClusters computer autogenerated
func (s *mqlAwsRds) ComputeDbClusters() error {
	var err error
	if _, ok := s.Cache.Load("dbClusters"); ok {
		return nil
	}
	vres, err := s.GetDbClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("dbClusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRdsDbcluster resource interface
type AwsRdsDbcluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Region() (string, error)
	Id() (string, error)
	Members() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsRdsDbcluster for the aws.rds.dbcluster resource
type mqlAwsRdsDbcluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRdsDbcluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.rds.dbcluster resource
func newAwsRdsDbcluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRdsDbcluster{runtime.NewResource("aws.rds.dbcluster")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbcluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.rds.dbcluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRdsDbcluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.rds.dbcluster\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.rds.dbcluster\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.rds.dbcluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("members"); !ok {
		return errors.New("Initialized \"aws.rds.dbcluster\" resource without a \"members\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.rds.dbcluster\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRdsDbcluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.dbcluster].Register")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "id":
		return nil
	case "members":
		return nil
	case "snapshots":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.dbcluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRdsDbcluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.rds.dbcluster].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "region":
		return s.Region()
	case "id":
		return s.Id()
	case "members":
		return s.Members()
	case "snapshots":
		return s.Snapshots()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.rds.dbcluster\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsRdsDbcluster) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbcluster\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsRdsDbcluster) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbcluster\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsRdsDbcluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbcluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlAwsRdsDbcluster) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.dbcluster\" failed: no value provided for static field \"members\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlAwsRdsDbcluster) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"aws.rds.dbcluster\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsRdsDbcluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.dbcluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbcluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRdsDbcluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.dbcluster].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "region":
		return nil
	case "id":
		return nil
	case "members":
		return nil
	case "snapshots":
		return s.ComputeSnapshots()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.dbcluster\" resource")
	}
}

// ComputeSnapshots computer autogenerated
func (s *mqlAwsRdsDbcluster) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRdsSnapshot resource interface
type AwsRdsSnapshot interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Attributes() ([]interface{}, error)
	Type() (string, error)
	Encrypted() (bool, error)
	Region() (string, error)
	IsClusterSnapshot() (bool, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsRdsSnapshot for the aws.rds.snapshot resource
type mqlAwsRdsSnapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRdsSnapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.rds.snapshot resource
func newAwsRdsSnapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRdsSnapshot{runtime.NewResource("aws.rds.snapshot")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "attributes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"attributes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "encrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"encrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "isClusterSnapshot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"isClusterSnapshot\" argument has the wrong type (expected type \"bool\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.rds.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRdsSnapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("encrypted"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"encrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("isClusterSnapshot"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"isClusterSnapshot\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.rds.snapshot\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRdsSnapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.snapshot].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attributes":
		return nil
	case "type":
		return nil
	case "encrypted":
		return nil
	case "region":
		return nil
	case "isClusterSnapshot":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRdsSnapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.rds.snapshot].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "attributes":
		return s.Attributes()
	case "type":
		return s.Type()
	case "encrypted":
		return s.Encrypted()
	case "region":
		return s.Region()
	case "isClusterSnapshot":
		return s.IsClusterSnapshot()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.rds.snapshot\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsRdsSnapshot) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsRdsSnapshot) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attributes accessor autogenerated
func (s *mqlAwsRdsSnapshot) Attributes() ([]interface{}, error) {
	res, ok := s.Cache.Load("attributes")
	if !ok || !res.Valid {
		if err := s.ComputeAttributes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("attributes")
		if !ok {
			return nil, errors.New("\"aws.rds.snapshot\" calculated \"attributes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "attributes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"attributes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAwsRdsSnapshot) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Encrypted accessor autogenerated
func (s *mqlAwsRdsSnapshot) Encrypted() (bool, error) {
	res, ok := s.Cache.Load("encrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"encrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"encrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsRdsSnapshot) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsClusterSnapshot accessor autogenerated
func (s *mqlAwsRdsSnapshot) IsClusterSnapshot() (bool, error) {
	res, ok := s.Cache.Load("isClusterSnapshot")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"isClusterSnapshot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"isClusterSnapshot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsRdsSnapshot) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.snapshot\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.snapshot\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRdsSnapshot) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.snapshot].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attributes":
		return s.ComputeAttributes()
	case "type":
		return nil
	case "encrypted":
		return nil
	case "region":
		return nil
	case "isClusterSnapshot":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.snapshot\" resource")
	}
}

// ComputeAttributes computer autogenerated
func (s *mqlAwsRdsSnapshot) ComputeAttributes() error {
	var err error
	if _, ok := s.Cache.Load("attributes"); ok {
		return nil
	}
	vres, err := s.GetAttributes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("attributes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRdsDbinstance resource interface
type AwsRdsDbinstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	BackupRetentionPeriod() (int64, error)
	Snapshots() ([]interface{}, error)
	StorageEncrypted() (bool, error)
	Region() (string, error)
	PubliclyAccessible() (bool, error)
	EnabledCloudwatchLogsExports() ([]interface{}, error)
	DeletionProtection() (bool, error)
	MultiAZ() (bool, error)
	Id() (string, error)
	EnhancedMonitoringResourceArn() (string, error)
	Tags() (map[string]interface{}, error)
	DbInstanceClass() (string, error)
	DbInstanceIdentifier() (string, error)
	Engine() (string, error)
	SecurityGroups() ([]interface{}, error)
	Status() (string, error)
}

// mqlAwsRdsDbinstance for the aws.rds.dbinstance resource
type mqlAwsRdsDbinstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRdsDbinstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.rds.dbinstance resource
func newAwsRdsDbinstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRdsDbinstance{runtime.NewResource("aws.rds.dbinstance")}
	var existing AwsRdsDbinstance
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "backupRetentionPeriod":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"backupRetentionPeriod\" argument has the wrong type (expected type \"int64\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "storageEncrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"storageEncrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "publiclyAccessible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"publiclyAccessible\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabledCloudwatchLogsExports":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"enabledCloudwatchLogsExports\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deletionProtection":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"deletionProtection\" argument has the wrong type (expected type \"bool\")")
			}
		case "multiAZ":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"multiAZ\" argument has the wrong type (expected type \"bool\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enhancedMonitoringResourceArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"enhancedMonitoringResourceArn\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "dbInstanceClass":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"dbInstanceClass\" argument has the wrong type (expected type \"string\")")
			}
		case "dbInstanceIdentifier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"dbInstanceIdentifier\" argument has the wrong type (expected type \"string\")")
			}
		case "engine":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"engine\" argument has the wrong type (expected type \"string\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.rds.dbinstance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.rds.dbinstance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRdsDbinstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("backupRetentionPeriod"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"backupRetentionPeriod\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageEncrypted"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"storageEncrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("publiclyAccessible"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"publiclyAccessible\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabledCloudwatchLogsExports"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"enabledCloudwatchLogsExports\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtection"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"deletionProtection\". This field is required.")
	}
	if _, ok := s.Cache.Load("multiAZ"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"multiAZ\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enhancedMonitoringResourceArn"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"enhancedMonitoringResourceArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("dbInstanceClass"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"dbInstanceClass\". This field is required.")
	}
	if _, ok := s.Cache.Load("dbInstanceIdentifier"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"dbInstanceIdentifier\". This field is required.")
	}
	if _, ok := s.Cache.Load("engine"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"engine\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityGroups"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"securityGroups\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.rds.dbinstance\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRdsDbinstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.dbinstance].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "backupRetentionPeriod":
		return nil
	case "snapshots":
		return nil
	case "storageEncrypted":
		return nil
	case "region":
		return nil
	case "publiclyAccessible":
		return nil
	case "enabledCloudwatchLogsExports":
		return nil
	case "deletionProtection":
		return nil
	case "multiAZ":
		return nil
	case "id":
		return nil
	case "enhancedMonitoringResourceArn":
		return nil
	case "tags":
		return nil
	case "dbInstanceClass":
		return nil
	case "dbInstanceIdentifier":
		return nil
	case "engine":
		return nil
	case "securityGroups":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.dbinstance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRdsDbinstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.rds.dbinstance].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "backupRetentionPeriod":
		return s.BackupRetentionPeriod()
	case "snapshots":
		return s.Snapshots()
	case "storageEncrypted":
		return s.StorageEncrypted()
	case "region":
		return s.Region()
	case "publiclyAccessible":
		return s.PubliclyAccessible()
	case "enabledCloudwatchLogsExports":
		return s.EnabledCloudwatchLogsExports()
	case "deletionProtection":
		return s.DeletionProtection()
	case "multiAZ":
		return s.MultiAZ()
	case "id":
		return s.Id()
	case "enhancedMonitoringResourceArn":
		return s.EnhancedMonitoringResourceArn()
	case "tags":
		return s.Tags()
	case "dbInstanceClass":
		return s.DbInstanceClass()
	case "dbInstanceIdentifier":
		return s.DbInstanceIdentifier()
	case "engine":
		return s.Engine()
	case "securityGroups":
		return s.SecurityGroups()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.rds.dbinstance\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsRdsDbinstance) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsRdsDbinstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackupRetentionPeriod accessor autogenerated
func (s *mqlAwsRdsDbinstance) BackupRetentionPeriod() (int64, error) {
	res, ok := s.Cache.Load("backupRetentionPeriod")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"backupRetentionPeriod\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"backupRetentionPeriod\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlAwsRdsDbinstance) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"aws.rds.dbinstance\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// StorageEncrypted accessor autogenerated
func (s *mqlAwsRdsDbinstance) StorageEncrypted() (bool, error) {
	res, ok := s.Cache.Load("storageEncrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"storageEncrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"storageEncrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsRdsDbinstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PubliclyAccessible accessor autogenerated
func (s *mqlAwsRdsDbinstance) PubliclyAccessible() (bool, error) {
	res, ok := s.Cache.Load("publiclyAccessible")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"publiclyAccessible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"publiclyAccessible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnabledCloudwatchLogsExports accessor autogenerated
func (s *mqlAwsRdsDbinstance) EnabledCloudwatchLogsExports() ([]interface{}, error) {
	res, ok := s.Cache.Load("enabledCloudwatchLogsExports")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"enabledCloudwatchLogsExports\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"enabledCloudwatchLogsExports\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeletionProtection accessor autogenerated
func (s *mqlAwsRdsDbinstance) DeletionProtection() (bool, error) {
	res, ok := s.Cache.Load("deletionProtection")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"deletionProtection\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"deletionProtection\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MultiAZ accessor autogenerated
func (s *mqlAwsRdsDbinstance) MultiAZ() (bool, error) {
	res, ok := s.Cache.Load("multiAZ")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"multiAZ\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"multiAZ\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsRdsDbinstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnhancedMonitoringResourceArn accessor autogenerated
func (s *mqlAwsRdsDbinstance) EnhancedMonitoringResourceArn() (string, error) {
	res, ok := s.Cache.Load("enhancedMonitoringResourceArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"enhancedMonitoringResourceArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"enhancedMonitoringResourceArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsRdsDbinstance) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// DbInstanceClass accessor autogenerated
func (s *mqlAwsRdsDbinstance) DbInstanceClass() (string, error) {
	res, ok := s.Cache.Load("dbInstanceClass")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"dbInstanceClass\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"dbInstanceClass\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DbInstanceIdentifier accessor autogenerated
func (s *mqlAwsRdsDbinstance) DbInstanceIdentifier() (string, error) {
	res, ok := s.Cache.Load("dbInstanceIdentifier")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"dbInstanceIdentifier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"dbInstanceIdentifier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Engine accessor autogenerated
func (s *mqlAwsRdsDbinstance) Engine() (string, error) {
	res, ok := s.Cache.Load("engine")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"engine\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"engine\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAwsRdsDbinstance) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"securityGroups\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsRdsDbinstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.rds.dbinstance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.rds.dbinstance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRdsDbinstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.rds.dbinstance].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "backupRetentionPeriod":
		return nil
	case "snapshots":
		return s.ComputeSnapshots()
	case "storageEncrypted":
		return nil
	case "region":
		return nil
	case "publiclyAccessible":
		return nil
	case "enabledCloudwatchLogsExports":
		return nil
	case "deletionProtection":
		return nil
	case "multiAZ":
		return nil
	case "id":
		return nil
	case "enhancedMonitoringResourceArn":
		return nil
	case "tags":
		return nil
	case "dbInstanceClass":
		return nil
	case "dbInstanceIdentifier":
		return nil
	case "engine":
		return nil
	case "securityGroups":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.rds.dbinstance\" resource")
	}
}

// ComputeSnapshots computer autogenerated
func (s *mqlAwsRdsDbinstance) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsElasticache resource interface
type AwsElasticache interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Clusters() ([]interface{}, error)
}

// mqlAwsElasticache for the aws.elasticache resource
type mqlAwsElasticache struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsElasticache) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.elasticache resource
func newAwsElasticache(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsElasticache{runtime.NewResource("aws.elasticache")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.elasticache\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.elasticache\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.elasticache with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsElasticache) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsElasticache) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elasticache].Register")
	switch name {
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elasticache\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsElasticache) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.elasticache].Field")
	switch name {
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.elasticache\" resource")
	}
}

// Clusters accessor autogenerated
func (s *mqlAwsElasticache) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"aws.elasticache\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.elasticache\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsElasticache) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.elasticache].MqlCompute")
	switch name {
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.elasticache\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAwsElasticache) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRedshift resource interface
type AwsRedshift interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Clusters() ([]interface{}, error)
}

// mqlAwsRedshift for the aws.redshift resource
type mqlAwsRedshift struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRedshift) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.redshift resource
func newAwsRedshift(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRedshift{runtime.NewResource("aws.redshift")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.redshift with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRedshift) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRedshift) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.redshift].Register")
	switch name {
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.redshift\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRedshift) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.redshift].Field")
	switch name {
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.redshift\" resource")
	}
}

// Clusters accessor autogenerated
func (s *mqlAwsRedshift) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"aws.redshift\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.redshift\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRedshift) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.redshift].MqlCompute")
	switch name {
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.redshift\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAwsRedshift) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsRedshiftCluster resource interface
type AwsRedshiftCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Encrypted() (bool, error)
	NodeType() (string, error)
	AllowVersionUpgrade() (bool, error)
	PreferredMaintenanceWindow() (string, error)
	AutomatedSnapshotRetentionPeriod() (int64, error)
	PubliclyAccessible() (bool, error)
	Parameters() ([]interface{}, error)
	Logging() (interface{}, error)
	Name() (string, error)
	Region() (string, error)
	ClusterParameterGroupNames() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsRedshiftCluster for the aws.redshift.cluster resource
type mqlAwsRedshiftCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsRedshiftCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.redshift.cluster resource
func newAwsRedshiftCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsRedshiftCluster{runtime.NewResource("aws.redshift.cluster")}
	var existing AwsRedshiftCluster
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "encrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"encrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "nodeType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"nodeType\" argument has the wrong type (expected type \"string\")")
			}
		case "allowVersionUpgrade":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"allowVersionUpgrade\" argument has the wrong type (expected type \"bool\")")
			}
		case "preferredMaintenanceWindow":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"preferredMaintenanceWindow\" argument has the wrong type (expected type \"string\")")
			}
		case "automatedSnapshotRetentionPeriod":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"automatedSnapshotRetentionPeriod\" argument has the wrong type (expected type \"int64\")")
			}
		case "publiclyAccessible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"publiclyAccessible\" argument has the wrong type (expected type \"bool\")")
			}
		case "parameters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"parameters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "logging":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"logging\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "clusterParameterGroupNames":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"clusterParameterGroupNames\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.redshift.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.redshift.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsRedshiftCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("encrypted"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"encrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("nodeType"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"nodeType\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowVersionUpgrade"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"allowVersionUpgrade\". This field is required.")
	}
	if _, ok := s.Cache.Load("preferredMaintenanceWindow"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"preferredMaintenanceWindow\". This field is required.")
	}
	if _, ok := s.Cache.Load("automatedSnapshotRetentionPeriod"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"automatedSnapshotRetentionPeriod\". This field is required.")
	}
	if _, ok := s.Cache.Load("publiclyAccessible"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"publiclyAccessible\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusterParameterGroupNames"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"clusterParameterGroupNames\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.redshift.cluster\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsRedshiftCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.redshift.cluster].Register")
	switch name {
	case "arn":
		return nil
	case "encrypted":
		return nil
	case "nodeType":
		return nil
	case "allowVersionUpgrade":
		return nil
	case "preferredMaintenanceWindow":
		return nil
	case "automatedSnapshotRetentionPeriod":
		return nil
	case "publiclyAccessible":
		return nil
	case "parameters":
		return nil
	case "logging":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "clusterParameterGroupNames":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.redshift.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsRedshiftCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.redshift.cluster].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "encrypted":
		return s.Encrypted()
	case "nodeType":
		return s.NodeType()
	case "allowVersionUpgrade":
		return s.AllowVersionUpgrade()
	case "preferredMaintenanceWindow":
		return s.PreferredMaintenanceWindow()
	case "automatedSnapshotRetentionPeriod":
		return s.AutomatedSnapshotRetentionPeriod()
	case "publiclyAccessible":
		return s.PubliclyAccessible()
	case "parameters":
		return s.Parameters()
	case "logging":
		return s.Logging()
	case "name":
		return s.Name()
	case "region":
		return s.Region()
	case "clusterParameterGroupNames":
		return s.ClusterParameterGroupNames()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.redshift.cluster\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsRedshiftCluster) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Encrypted accessor autogenerated
func (s *mqlAwsRedshiftCluster) Encrypted() (bool, error) {
	res, ok := s.Cache.Load("encrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"encrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"encrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NodeType accessor autogenerated
func (s *mqlAwsRedshiftCluster) NodeType() (string, error) {
	res, ok := s.Cache.Load("nodeType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"nodeType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"nodeType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowVersionUpgrade accessor autogenerated
func (s *mqlAwsRedshiftCluster) AllowVersionUpgrade() (bool, error) {
	res, ok := s.Cache.Load("allowVersionUpgrade")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"allowVersionUpgrade\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"allowVersionUpgrade\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PreferredMaintenanceWindow accessor autogenerated
func (s *mqlAwsRedshiftCluster) PreferredMaintenanceWindow() (string, error) {
	res, ok := s.Cache.Load("preferredMaintenanceWindow")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"preferredMaintenanceWindow\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"preferredMaintenanceWindow\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutomatedSnapshotRetentionPeriod accessor autogenerated
func (s *mqlAwsRedshiftCluster) AutomatedSnapshotRetentionPeriod() (int64, error) {
	res, ok := s.Cache.Load("automatedSnapshotRetentionPeriod")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"automatedSnapshotRetentionPeriod\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"automatedSnapshotRetentionPeriod\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// PubliclyAccessible accessor autogenerated
func (s *mqlAwsRedshiftCluster) PubliclyAccessible() (bool, error) {
	res, ok := s.Cache.Load("publiclyAccessible")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"publiclyAccessible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"publiclyAccessible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Parameters accessor autogenerated
func (s *mqlAwsRedshiftCluster) Parameters() ([]interface{}, error) {
	res, ok := s.Cache.Load("parameters")
	if !ok || !res.Valid {
		if err := s.ComputeParameters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("parameters")
		if !ok {
			return nil, errors.New("\"aws.redshift.cluster\" calculated \"parameters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "parameters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"parameters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAwsRedshiftCluster) Logging() (interface{}, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		if err := s.ComputeLogging(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logging")
		if !ok {
			return nil, errors.New("\"aws.redshift.cluster\" calculated \"logging\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logging")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"logging\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsRedshiftCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsRedshiftCluster) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusterParameterGroupNames accessor autogenerated
func (s *mqlAwsRedshiftCluster) ClusterParameterGroupNames() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusterParameterGroupNames")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"clusterParameterGroupNames\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"clusterParameterGroupNames\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsRedshiftCluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.redshift.cluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.redshift.cluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsRedshiftCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.redshift.cluster].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "encrypted":
		return nil
	case "nodeType":
		return nil
	case "allowVersionUpgrade":
		return nil
	case "preferredMaintenanceWindow":
		return nil
	case "automatedSnapshotRetentionPeriod":
		return nil
	case "publiclyAccessible":
		return nil
	case "parameters":
		return s.ComputeParameters()
	case "logging":
		return s.ComputeLogging()
	case "name":
		return nil
	case "region":
		return nil
	case "clusterParameterGroupNames":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.redshift.cluster\" resource")
	}
}

// ComputeParameters computer autogenerated
func (s *mqlAwsRedshiftCluster) ComputeParameters() error {
	var err error
	if _, ok := s.Cache.Load("parameters"); ok {
		return nil
	}
	vres, err := s.GetParameters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("parameters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLogging computer autogenerated
func (s *mqlAwsRedshiftCluster) ComputeLogging() error {
	var err error
	if _, ok := s.Cache.Load("logging"); ok {
		return nil
	}
	vres, err := s.GetLogging()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logging", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEcr resource interface
type AwsEcr interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	PrivateRepositories() ([]interface{}, error)
	PublicRepositories() ([]interface{}, error)
	Images() ([]interface{}, error)
}

// mqlAwsEcr for the aws.ecr resource
type mqlAwsEcr struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcr) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecr resource
func newAwsEcr(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcr{runtime.NewResource("aws.ecr")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "privateRepositories":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr\", its \"privateRepositories\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "publicRepositories":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr\", its \"publicRepositories\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "images":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr\", its \"images\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecr with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcr) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcr) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr].Register")
	switch name {
	case "privateRepositories":
		return nil
	case "publicRepositories":
		return nil
	case "images":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcr) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecr].Field")
	switch name {
	case "privateRepositories":
		return s.PrivateRepositories()
	case "publicRepositories":
		return s.PublicRepositories()
	case "images":
		return s.Images()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecr\" resource")
	}
}

// PrivateRepositories accessor autogenerated
func (s *mqlAwsEcr) PrivateRepositories() ([]interface{}, error) {
	res, ok := s.Cache.Load("privateRepositories")
	if !ok || !res.Valid {
		if err := s.ComputePrivateRepositories(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("privateRepositories")
		if !ok {
			return nil, errors.New("\"aws.ecr\" calculated \"privateRepositories\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "privateRepositories")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecr\" failed to cast field \"privateRepositories\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PublicRepositories accessor autogenerated
func (s *mqlAwsEcr) PublicRepositories() ([]interface{}, error) {
	res, ok := s.Cache.Load("publicRepositories")
	if !ok || !res.Valid {
		if err := s.ComputePublicRepositories(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("publicRepositories")
		if !ok {
			return nil, errors.New("\"aws.ecr\" calculated \"publicRepositories\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "publicRepositories")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecr\" failed to cast field \"publicRepositories\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Images accessor autogenerated
func (s *mqlAwsEcr) Images() ([]interface{}, error) {
	res, ok := s.Cache.Load("images")
	if !ok || !res.Valid {
		if err := s.ComputeImages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("images")
		if !ok {
			return nil, errors.New("\"aws.ecr\" calculated \"images\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "images")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecr\" failed to cast field \"images\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcr) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr].MqlCompute")
	switch name {
	case "privateRepositories":
		return s.ComputePrivateRepositories()
	case "publicRepositories":
		return s.ComputePublicRepositories()
	case "images":
		return s.ComputeImages()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr\" resource")
	}
}

// ComputePrivateRepositories computer autogenerated
func (s *mqlAwsEcr) ComputePrivateRepositories() error {
	var err error
	if _, ok := s.Cache.Load("privateRepositories"); ok {
		return nil
	}
	vres, err := s.GetPrivateRepositories()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("privateRepositories", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePublicRepositories computer autogenerated
func (s *mqlAwsEcr) ComputePublicRepositories() error {
	var err error
	if _, ok := s.Cache.Load("publicRepositories"); ok {
		return nil
	}
	vres, err := s.GetPublicRepositories()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("publicRepositories", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeImages computer autogenerated
func (s *mqlAwsEcr) ComputeImages() error {
	var err error
	if _, ok := s.Cache.Load("images"); ok {
		return nil
	}
	vres, err := s.GetImages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("images", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEcrRepository resource interface
type AwsEcrRepository interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Uri() (string, error)
	RegistryId() (string, error)
	Public() (bool, error)
	Images() ([]interface{}, error)
	Region() (string, error)
}

// mqlAwsEcrRepository for the aws.ecr.repository resource
type mqlAwsEcrRepository struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcrRepository) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecr.repository resource
func newAwsEcrRepository(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcrRepository{runtime.NewResource("aws.ecr.repository")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "uri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"uri\" argument has the wrong type (expected type \"string\")")
			}
		case "registryId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"registryId\" argument has the wrong type (expected type \"string\")")
			}
		case "public":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"public\" argument has the wrong type (expected type \"bool\")")
			}
		case "images":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"images\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.repository\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecr.repository with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcrRepository) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("uri"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"uri\". This field is required.")
	}
	if _, ok := s.Cache.Load("registryId"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"registryId\". This field is required.")
	}
	if _, ok := s.Cache.Load("public"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"public\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ecr.repository\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcrRepository) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr.repository].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "uri":
		return nil
	case "registryId":
		return nil
	case "public":
		return nil
	case "images":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr.repository\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcrRepository) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecr.repository].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "uri":
		return s.Uri()
	case "registryId":
		return s.RegistryId()
	case "public":
		return s.Public()
	case "images":
		return s.Images()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecr.repository\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEcrRepository) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEcrRepository) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uri accessor autogenerated
func (s *mqlAwsEcrRepository) Uri() (string, error) {
	res, ok := s.Cache.Load("uri")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"uri\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"uri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RegistryId accessor autogenerated
func (s *mqlAwsEcrRepository) RegistryId() (string, error) {
	res, ok := s.Cache.Load("registryId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"registryId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"registryId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Public accessor autogenerated
func (s *mqlAwsEcrRepository) Public() (bool, error) {
	res, ok := s.Cache.Load("public")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"public\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"public\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Images accessor autogenerated
func (s *mqlAwsEcrRepository) Images() ([]interface{}, error) {
	res, ok := s.Cache.Load("images")
	if !ok || !res.Valid {
		if err := s.ComputeImages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("images")
		if !ok {
			return nil, errors.New("\"aws.ecr.repository\" calculated \"images\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "images")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"images\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEcrRepository) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.repository\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.repository\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcrRepository) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr.repository].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "uri":
		return nil
	case "registryId":
		return nil
	case "public":
		return nil
	case "images":
		return s.ComputeImages()
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr.repository\" resource")
	}
}

// ComputeImages computer autogenerated
func (s *mqlAwsEcrRepository) ComputeImages() error {
	var err error
	if _, ok := s.Cache.Load("images"); ok {
		return nil
	}
	vres, err := s.GetImages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("images", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEcrImage resource interface
type AwsEcrImage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Digest() (string, error)
	MediaType() (string, error)
	Tags() ([]interface{}, error)
	RegistryId() (string, error)
	RepoName() (string, error)
	Region() (string, error)
	Arn() (string, error)
}

// mqlAwsEcrImage for the aws.ecr.image resource
type mqlAwsEcrImage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEcrImage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ecr.image resource
func newAwsEcrImage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEcrImage{runtime.NewResource("aws.ecr.image")}
	var existing AwsEcrImage
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "digest":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"digest\" argument has the wrong type (expected type \"string\")")
			}
		case "mediaType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"mediaType\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "registryId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"registryId\" argument has the wrong type (expected type \"string\")")
			}
		case "repoName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"repoName\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ecr.image\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ecr.image with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEcrImage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("digest"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"digest\". This field is required.")
	}
	if _, ok := s.Cache.Load("mediaType"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"mediaType\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("registryId"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"registryId\". This field is required.")
	}
	if _, ok := s.Cache.Load("repoName"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"repoName\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ecr.image\" resource without a \"arn\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEcrImage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr.image].Register")
	switch name {
	case "digest":
		return nil
	case "mediaType":
		return nil
	case "tags":
		return nil
	case "registryId":
		return nil
	case "repoName":
		return nil
	case "region":
		return nil
	case "arn":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr.image\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEcrImage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ecr.image].Field")
	switch name {
	case "digest":
		return s.Digest()
	case "mediaType":
		return s.MediaType()
	case "tags":
		return s.Tags()
	case "registryId":
		return s.RegistryId()
	case "repoName":
		return s.RepoName()
	case "region":
		return s.Region()
	case "arn":
		return s.Arn()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ecr.image\" resource")
	}
}

// Digest accessor autogenerated
func (s *mqlAwsEcrImage) Digest() (string, error) {
	res, ok := s.Cache.Load("digest")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"digest\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"digest\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MediaType accessor autogenerated
func (s *mqlAwsEcrImage) MediaType() (string, error) {
	res, ok := s.Cache.Load("mediaType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"mediaType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"mediaType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEcrImage) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ecr.image\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ecr.image\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RegistryId accessor autogenerated
func (s *mqlAwsEcrImage) RegistryId() (string, error) {
	res, ok := s.Cache.Load("registryId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"registryId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"registryId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RepoName accessor autogenerated
func (s *mqlAwsEcrImage) RepoName() (string, error) {
	res, ok := s.Cache.Load("repoName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"repoName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"repoName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEcrImage) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsEcrImage) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ecr.image\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ecr.image\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEcrImage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ecr.image].MqlCompute")
	switch name {
	case "digest":
		return nil
	case "mediaType":
		return nil
	case "tags":
		return nil
	case "registryId":
		return nil
	case "repoName":
		return nil
	case "region":
		return nil
	case "arn":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ecr.image\" resource")
	}
}

// AwsDms resource interface
type AwsDms interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ReplicationInstances() ([]interface{}, error)
}

// mqlAwsDms for the aws.dms resource
type mqlAwsDms struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsDms) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.dms resource
func newAwsDms(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsDms{runtime.NewResource("aws.dms")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "replicationInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.dms\", its \"replicationInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.dms\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.dms with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsDms) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsDms) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dms].Register")
	switch name {
	case "replicationInstances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dms\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsDms) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.dms].Field")
	switch name {
	case "replicationInstances":
		return s.ReplicationInstances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.dms\" resource")
	}
}

// ReplicationInstances accessor autogenerated
func (s *mqlAwsDms) ReplicationInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("replicationInstances")
	if !ok || !res.Valid {
		if err := s.ComputeReplicationInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("replicationInstances")
		if !ok {
			return nil, errors.New("\"aws.dms\" calculated \"replicationInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "replicationInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.dms\" failed to cast field \"replicationInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsDms) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.dms].MqlCompute")
	switch name {
	case "replicationInstances":
		return s.ComputeReplicationInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.dms\" resource")
	}
}

// ComputeReplicationInstances computer autogenerated
func (s *mqlAwsDms) ComputeReplicationInstances() error {
	var err error
	if _, ok := s.Cache.Load("replicationInstances"); ok {
		return nil
	}
	vres, err := s.GetReplicationInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("replicationInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsApigateway resource interface
type AwsApigateway interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	RestApis() ([]interface{}, error)
}

// mqlAwsApigateway for the aws.apigateway resource
type mqlAwsApigateway struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsApigateway) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.apigateway resource
func newAwsApigateway(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsApigateway{runtime.NewResource("aws.apigateway")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "restApis":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway\", its \"restApis\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.apigateway with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsApigateway) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsApigateway) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway].Register")
	switch name {
	case "restApis":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsApigateway) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.apigateway].Field")
	switch name {
	case "restApis":
		return s.RestApis()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.apigateway\" resource")
	}
}

// RestApis accessor autogenerated
func (s *mqlAwsApigateway) RestApis() ([]interface{}, error) {
	res, ok := s.Cache.Load("restApis")
	if !ok || !res.Valid {
		if err := s.ComputeRestApis(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("restApis")
		if !ok {
			return nil, errors.New("\"aws.apigateway\" calculated \"restApis\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "restApis")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.apigateway\" failed to cast field \"restApis\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsApigateway) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway].MqlCompute")
	switch name {
	case "restApis":
		return s.ComputeRestApis()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway\" resource")
	}
}

// ComputeRestApis computer autogenerated
func (s *mqlAwsApigateway) ComputeRestApis() error {
	var err error
	if _, ok := s.Cache.Load("restApis"); ok {
		return nil
	}
	vres, err := s.GetRestApis()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("restApis", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsApigatewayRestapi resource interface
type AwsApigatewayRestapi interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	CreatedDate() (*time.Time, error)
	Description() (string, error)
	Stages() ([]interface{}, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsApigatewayRestapi for the aws.apigateway.restapi resource
type mqlAwsApigatewayRestapi struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsApigatewayRestapi) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.apigateway.restapi resource
func newAwsApigatewayRestapi(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsApigatewayRestapi{runtime.NewResource("aws.apigateway.restapi")}
	var existing AwsApigatewayRestapi
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "createdDate":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"createdDate\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "stages":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"stages\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.restapi\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.apigateway.restapi with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsApigatewayRestapi) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDate"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"createdDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.apigateway.restapi\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway.restapi].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createdDate":
		return nil
	case "description":
		return nil
	case "stages":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway.restapi\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.apigateway.restapi].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "createdDate":
		return s.CreatedDate()
	case "description":
		return s.Description()
	case "stages":
		return s.Stages()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.apigateway.restapi\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedDate accessor autogenerated
func (s *mqlAwsApigatewayRestapi) CreatedDate() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDate")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"createdDate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"createdDate\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Stages accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Stages() ([]interface{}, error) {
	res, ok := s.Cache.Load("stages")
	if !ok || !res.Valid {
		if err := s.ComputeStages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("stages")
		if !ok {
			return nil, errors.New("\"aws.apigateway.restapi\" calculated \"stages\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "stages")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"stages\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsApigatewayRestapi) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.apigateway.restapi\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.apigateway.restapi\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsApigatewayRestapi) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway.restapi].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "createdDate":
		return nil
	case "description":
		return nil
	case "stages":
		return s.ComputeStages()
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway.restapi\" resource")
	}
}

// ComputeStages computer autogenerated
func (s *mqlAwsApigatewayRestapi) ComputeStages() error {
	var err error
	if _, ok := s.Cache.Load("stages"); ok {
		return nil
	}
	vres, err := s.GetStages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("stages", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsApigatewayStage resource interface
type AwsApigatewayStage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	TracingEnabled() (bool, error)
	Description() (string, error)
	DeploymentId() (string, error)
	MethodSettings() (interface{}, error)
}

// mqlAwsApigatewayStage for the aws.apigateway.stage resource
type mqlAwsApigatewayStage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsApigatewayStage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.apigateway.stage resource
func newAwsApigatewayStage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsApigatewayStage{runtime.NewResource("aws.apigateway.stage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "tracingEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"tracingEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "deploymentId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"deploymentId\" argument has the wrong type (expected type \"string\")")
			}
		case "methodSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"methodSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.apigateway.stage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.apigateway.stage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsApigatewayStage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("tracingEnabled"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"tracingEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("deploymentId"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"deploymentId\". This field is required.")
	}
	if _, ok := s.Cache.Load("methodSettings"); !ok {
		return errors.New("Initialized \"aws.apigateway.stage\" resource without a \"methodSettings\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsApigatewayStage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway.stage].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "tracingEnabled":
		return nil
	case "description":
		return nil
	case "deploymentId":
		return nil
	case "methodSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway.stage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsApigatewayStage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.apigateway.stage].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "tracingEnabled":
		return s.TracingEnabled()
	case "description":
		return s.Description()
	case "deploymentId":
		return s.DeploymentId()
	case "methodSettings":
		return s.MethodSettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.apigateway.stage\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsApigatewayStage) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsApigatewayStage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TracingEnabled accessor autogenerated
func (s *mqlAwsApigatewayStage) TracingEnabled() (bool, error) {
	res, ok := s.Cache.Load("tracingEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"tracingEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"tracingEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsApigatewayStage) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DeploymentId accessor autogenerated
func (s *mqlAwsApigatewayStage) DeploymentId() (string, error) {
	res, ok := s.Cache.Load("deploymentId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"deploymentId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"deploymentId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MethodSettings accessor autogenerated
func (s *mqlAwsApigatewayStage) MethodSettings() (interface{}, error) {
	res, ok := s.Cache.Load("methodSettings")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.apigateway.stage\" failed: no value provided for static field \"methodSettings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.apigateway.stage\" failed to cast field \"methodSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsApigatewayStage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.apigateway.stage].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "tracingEnabled":
		return nil
	case "description":
		return nil
	case "deploymentId":
		return nil
	case "methodSettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.apigateway.stage\" resource")
	}
}

// AwsLambda resource interface
type AwsLambda interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Functions() ([]interface{}, error)
}

// mqlAwsLambda for the aws.lambda resource
type mqlAwsLambda struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsLambda) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.lambda resource
func newAwsLambda(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsLambda{runtime.NewResource("aws.lambda")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "functions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda\", its \"functions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.lambda with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsLambda) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsLambda) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.lambda].Register")
	switch name {
	case "functions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.lambda\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsLambda) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.lambda].Field")
	switch name {
	case "functions":
		return s.Functions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.lambda\" resource")
	}
}

// Functions accessor autogenerated
func (s *mqlAwsLambda) Functions() ([]interface{}, error) {
	res, ok := s.Cache.Load("functions")
	if !ok || !res.Valid {
		if err := s.ComputeFunctions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("functions")
		if !ok {
			return nil, errors.New("\"aws.lambda\" calculated \"functions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "functions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.lambda\" failed to cast field \"functions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsLambda) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.lambda].MqlCompute")
	switch name {
	case "functions":
		return s.ComputeFunctions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.lambda\" resource")
	}
}

// ComputeFunctions computer autogenerated
func (s *mqlAwsLambda) ComputeFunctions() error {
	var err error
	if _, ok := s.Cache.Load("functions"); ok {
		return nil
	}
	vres, err := s.GetFunctions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("functions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsLambdaFunction resource interface
type AwsLambdaFunction interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Name() (string, error)
	Concurrency() (int64, error)
	DlqTargetArn() (string, error)
	Policy() (interface{}, error)
	VpcConfig() (interface{}, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsLambdaFunction for the aws.lambda.function resource
type mqlAwsLambdaFunction struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsLambdaFunction) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.lambda.function resource
func newAwsLambdaFunction(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsLambdaFunction{runtime.NewResource("aws.lambda.function")}
	var existing AwsLambdaFunction
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "concurrency":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"concurrency\" argument has the wrong type (expected type \"int64\")")
			}
		case "dlqTargetArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"dlqTargetArn\" argument has the wrong type (expected type \"string\")")
			}
		case "policy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"policy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vpcConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"vpcConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.lambda.function\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.lambda.function with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsLambdaFunction) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("dlqTargetArn"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"dlqTargetArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("vpcConfig"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"vpcConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.lambda.function\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsLambdaFunction) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.lambda.function].Register")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "concurrency":
		return nil
	case "dlqTargetArn":
		return nil
	case "policy":
		return nil
	case "vpcConfig":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.lambda.function\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsLambdaFunction) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.lambda.function].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "name":
		return s.Name()
	case "concurrency":
		return s.Concurrency()
	case "dlqTargetArn":
		return s.DlqTargetArn()
	case "policy":
		return s.Policy()
	case "vpcConfig":
		return s.VpcConfig()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.lambda.function\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsLambdaFunction) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.lambda.function\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.lambda.function\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsLambdaFunction) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.lambda.function\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.lambda.function\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Concurrency accessor autogenerated
func (s *mqlAwsLambdaFunction) Concurrency() (int64, error) {
	res, ok := s.Cache.Load("concurrency")
	if !ok || !res.Valid {
		if err := s.ComputeConcurrency(); err != nil {
			return 0, err
		}
		res, ok = s.Cache.Load("concurrency")
		if !ok {
			return 0, errors.New("\"aws.lambda.function\" calculated \"concurrency\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "concurrency")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.lambda.function\" failed to cast field \"concurrency\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DlqTargetArn accessor autogenerated
func (s *mqlAwsLambdaFunction) DlqTargetArn() (string, error) {
	res, ok := s.Cache.Load("dlqTargetArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.lambda.function\" failed: no value provided for static field \"dlqTargetArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.lambda.function\" failed to cast field \"dlqTargetArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Policy accessor autogenerated
func (s *mqlAwsLambdaFunction) Policy() (interface{}, error) {
	res, ok := s.Cache.Load("policy")
	if !ok || !res.Valid {
		if err := s.ComputePolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policy")
		if !ok {
			return nil, errors.New("\"aws.lambda.function\" calculated \"policy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.lambda.function\" failed to cast field \"policy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VpcConfig accessor autogenerated
func (s *mqlAwsLambdaFunction) VpcConfig() (interface{}, error) {
	res, ok := s.Cache.Load("vpcConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.lambda.function\" failed: no value provided for static field \"vpcConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.lambda.function\" failed to cast field \"vpcConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsLambdaFunction) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.lambda.function\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.lambda.function\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsLambdaFunction) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.lambda.function\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.lambda.function\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsLambdaFunction) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.lambda.function].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "name":
		return nil
	case "concurrency":
		return s.ComputeConcurrency()
	case "dlqTargetArn":
		return nil
	case "policy":
		return s.ComputePolicy()
	case "vpcConfig":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.lambda.function\" resource")
	}
}

// ComputeConcurrency computer autogenerated
func (s *mqlAwsLambdaFunction) ComputeConcurrency() error {
	var err error
	if _, ok := s.Cache.Load("concurrency"); ok {
		return nil
	}
	vres, err := s.GetConcurrency()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("concurrency", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePolicy computer autogenerated
func (s *mqlAwsLambdaFunction) ComputePolicy() error {
	var err error
	if _, ok := s.Cache.Load("policy"); ok {
		return nil
	}
	vres, err := s.GetPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSsm resource interface
type AwsSsm interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
}

// mqlAwsSsm for the aws.ssm resource
type mqlAwsSsm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSsm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ssm resource
func newAwsSsm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSsm{runtime.NewResource("aws.ssm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ssm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSsm) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSsm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ssm].Register")
	switch name {
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ssm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSsm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ssm].Field")
	switch name {
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ssm\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlAwsSsm) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"aws.ssm\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ssm\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSsm) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ssm].MqlCompute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ssm\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlAwsSsm) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsSsmInstance resource interface
type AwsSsmInstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	InstanceId() (string, error)
	PingStatus() (string, error)
	IpAddress() (string, error)
	PlatformName() (string, error)
	Region() (string, error)
	Arn() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsSsmInstance for the aws.ssm.instance resource
type mqlAwsSsmInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsSsmInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ssm.instance resource
func newAwsSsmInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsSsmInstance{runtime.NewResource("aws.ssm.instance")}
	var existing AwsSsmInstance
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instanceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"instanceId\" argument has the wrong type (expected type \"string\")")
			}
		case "pingStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"pingStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "ipAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"ipAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "platformName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"platformName\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ssm.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ssm.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsSsmInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("instanceId"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"instanceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("pingStatus"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"pingStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddress"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"ipAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("platformName"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"platformName\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ssm.instance\" resource without a \"arn\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsSsmInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ssm.instance].Register")
	switch name {
	case "instanceId":
		return nil
	case "pingStatus":
		return nil
	case "ipAddress":
		return nil
	case "platformName":
		return nil
	case "region":
		return nil
	case "arn":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ssm.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsSsmInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ssm.instance].Field")
	switch name {
	case "instanceId":
		return s.InstanceId()
	case "pingStatus":
		return s.PingStatus()
	case "ipAddress":
		return s.IpAddress()
	case "platformName":
		return s.PlatformName()
	case "region":
		return s.Region()
	case "arn":
		return s.Arn()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ssm.instance\" resource")
	}
}

// InstanceId accessor autogenerated
func (s *mqlAwsSsmInstance) InstanceId() (string, error) {
	res, ok := s.Cache.Load("instanceId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"instanceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"instanceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PingStatus accessor autogenerated
func (s *mqlAwsSsmInstance) PingStatus() (string, error) {
	res, ok := s.Cache.Load("pingStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"pingStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"pingStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpAddress accessor autogenerated
func (s *mqlAwsSsmInstance) IpAddress() (string, error) {
	res, ok := s.Cache.Load("ipAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"ipAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"ipAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PlatformName accessor autogenerated
func (s *mqlAwsSsmInstance) PlatformName() (string, error) {
	res, ok := s.Cache.Load("platformName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"platformName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"platformName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsSsmInstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsSsmInstance) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ssm.instance\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsSsmInstance) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		if err := s.ComputeTags(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tags")
		if !ok {
			return nil, errors.New("\"aws.ssm.instance\" calculated \"tags\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tags")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ssm.instance\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsSsmInstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ssm.instance].MqlCompute")
	switch name {
	case "instanceId":
		return nil
	case "pingStatus":
		return nil
	case "ipAddress":
		return nil
	case "platformName":
		return nil
	case "region":
		return nil
	case "arn":
		return nil
	case "tags":
		return s.ComputeTags()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ssm.instance\" resource")
	}
}

// ComputeTags computer autogenerated
func (s *mqlAwsSsmInstance) ComputeTags() error {
	var err error
	if _, ok := s.Cache.Load("tags"); ok {
		return nil
	}
	vres, err := s.GetTags()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tags", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2 resource interface
type AwsEc2 interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SecurityGroups() ([]interface{}, error)
	Instances() ([]interface{}, error)
	EbsEncryptionByDefault() (map[string]interface{}, error)
	Volumes() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
	InternetGateways() ([]interface{}, error)
	VpnConnections() ([]interface{}, error)
	NetworkAcls() ([]interface{}, error)
	Keypairs() ([]interface{}, error)
}

// mqlAwsEc2 for the aws.ec2 resource
type mqlAwsEc2 struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2 resource
func newAwsEc2(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2{runtime.NewResource("aws.ec2")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ebsEncryptionByDefault":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"ebsEncryptionByDefault\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "volumes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"volumes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "internetGateways":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"internetGateways\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "vpnConnections":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"vpnConnections\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networkAcls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"networkAcls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "keypairs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"keypairs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2 with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2].Register")
	switch name {
	case "securityGroups":
		return nil
	case "instances":
		return nil
	case "ebsEncryptionByDefault":
		return nil
	case "volumes":
		return nil
	case "snapshots":
		return nil
	case "internetGateways":
		return nil
	case "vpnConnections":
		return nil
	case "networkAcls":
		return nil
	case "keypairs":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2].Field")
	switch name {
	case "securityGroups":
		return s.SecurityGroups()
	case "instances":
		return s.Instances()
	case "ebsEncryptionByDefault":
		return s.EbsEncryptionByDefault()
	case "volumes":
		return s.Volumes()
	case "snapshots":
		return s.Snapshots()
	case "internetGateways":
		return s.InternetGateways()
	case "vpnConnections":
		return s.VpnConnections()
	case "networkAcls":
		return s.NetworkAcls()
	case "keypairs":
		return s.Keypairs()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2\" resource")
	}
}

// SecurityGroups accessor autogenerated
func (s *mqlAwsEc2) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityGroups")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"securityGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlAwsEc2) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// EbsEncryptionByDefault accessor autogenerated
func (s *mqlAwsEc2) EbsEncryptionByDefault() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("ebsEncryptionByDefault")
	if !ok || !res.Valid {
		if err := s.ComputeEbsEncryptionByDefault(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ebsEncryptionByDefault")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"ebsEncryptionByDefault\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ebsEncryptionByDefault")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"ebsEncryptionByDefault\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Volumes accessor autogenerated
func (s *mqlAwsEc2) Volumes() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumes")
	if !ok || !res.Valid {
		if err := s.ComputeVolumes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("volumes")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"volumes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "volumes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"volumes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlAwsEc2) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// InternetGateways accessor autogenerated
func (s *mqlAwsEc2) InternetGateways() ([]interface{}, error) {
	res, ok := s.Cache.Load("internetGateways")
	if !ok || !res.Valid {
		if err := s.ComputeInternetGateways(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("internetGateways")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"internetGateways\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "internetGateways")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"internetGateways\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VpnConnections accessor autogenerated
func (s *mqlAwsEc2) VpnConnections() ([]interface{}, error) {
	res, ok := s.Cache.Load("vpnConnections")
	if !ok || !res.Valid {
		if err := s.ComputeVpnConnections(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vpnConnections")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"vpnConnections\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vpnConnections")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"vpnConnections\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkAcls accessor autogenerated
func (s *mqlAwsEc2) NetworkAcls() ([]interface{}, error) {
	res, ok := s.Cache.Load("networkAcls")
	if !ok || !res.Valid {
		if err := s.ComputeNetworkAcls(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("networkAcls")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"networkAcls\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "networkAcls")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"networkAcls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Keypairs accessor autogenerated
func (s *mqlAwsEc2) Keypairs() ([]interface{}, error) {
	res, ok := s.Cache.Load("keypairs")
	if !ok || !res.Valid {
		if err := s.ComputeKeypairs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keypairs")
		if !ok {
			return nil, errors.New("\"aws.ec2\" calculated \"keypairs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keypairs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2\" failed to cast field \"keypairs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2].MqlCompute")
	switch name {
	case "securityGroups":
		return s.ComputeSecurityGroups()
	case "instances":
		return s.ComputeInstances()
	case "ebsEncryptionByDefault":
		return s.ComputeEbsEncryptionByDefault()
	case "volumes":
		return s.ComputeVolumes()
	case "snapshots":
		return s.ComputeSnapshots()
	case "internetGateways":
		return s.ComputeInternetGateways()
	case "vpnConnections":
		return s.ComputeVpnConnections()
	case "networkAcls":
		return s.ComputeNetworkAcls()
	case "keypairs":
		return s.ComputeKeypairs()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2\" resource")
	}
}

// ComputeSecurityGroups computer autogenerated
func (s *mqlAwsEc2) ComputeSecurityGroups() error {
	var err error
	if _, ok := s.Cache.Load("securityGroups"); ok {
		return nil
	}
	vres, err := s.GetSecurityGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInstances computer autogenerated
func (s *mqlAwsEc2) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEbsEncryptionByDefault computer autogenerated
func (s *mqlAwsEc2) ComputeEbsEncryptionByDefault() error {
	var err error
	if _, ok := s.Cache.Load("ebsEncryptionByDefault"); ok {
		return nil
	}
	vres, err := s.GetEbsEncryptionByDefault()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ebsEncryptionByDefault", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVolumes computer autogenerated
func (s *mqlAwsEc2) ComputeVolumes() error {
	var err error
	if _, ok := s.Cache.Load("volumes"); ok {
		return nil
	}
	vres, err := s.GetVolumes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("volumes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnapshots computer autogenerated
func (s *mqlAwsEc2) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInternetGateways computer autogenerated
func (s *mqlAwsEc2) ComputeInternetGateways() error {
	var err error
	if _, ok := s.Cache.Load("internetGateways"); ok {
		return nil
	}
	vres, err := s.GetInternetGateways()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("internetGateways", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVpnConnections computer autogenerated
func (s *mqlAwsEc2) ComputeVpnConnections() error {
	var err error
	if _, ok := s.Cache.Load("vpnConnections"); ok {
		return nil
	}
	vres, err := s.GetVpnConnections()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vpnConnections", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetworkAcls computer autogenerated
func (s *mqlAwsEc2) ComputeNetworkAcls() error {
	var err error
	if _, ok := s.Cache.Load("networkAcls"); ok {
		return nil
	}
	vres, err := s.GetNetworkAcls()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("networkAcls", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeypairs computer autogenerated
func (s *mqlAwsEc2) ComputeKeypairs() error {
	var err error
	if _, ok := s.Cache.Load("keypairs"); ok {
		return nil
	}
	vres, err := s.GetKeypairs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keypairs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2Networkacl resource interface
type AwsEc2Networkacl interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Region() (string, error)
	Entries() ([]interface{}, error)
}

// mqlAwsEc2Networkacl for the aws.ec2.networkacl resource
type mqlAwsEc2Networkacl struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Networkacl) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.networkacl resource
func newAwsEc2Networkacl(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Networkacl{runtime.NewResource("aws.ec2.networkacl")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "entries":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl\", its \"entries\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.networkacl with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Networkacl) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Networkacl) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "region":
		return nil
	case "entries":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Networkacl) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "region":
		return s.Region()
	case "entries":
		return s.Entries()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.networkacl\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Networkacl) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Networkacl) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Networkacl) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Entries accessor autogenerated
func (s *mqlAwsEc2Networkacl) Entries() ([]interface{}, error) {
	res, ok := s.Cache.Load("entries")
	if !ok || !res.Valid {
		if err := s.ComputeEntries(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("entries")
		if !ok {
			return nil, errors.New("\"aws.ec2.networkacl\" calculated \"entries\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "entries")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.networkacl\" failed to cast field \"entries\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Networkacl) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "region":
		return nil
	case "entries":
		return s.ComputeEntries()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl\" resource")
	}
}

// ComputeEntries computer autogenerated
func (s *mqlAwsEc2Networkacl) ComputeEntries() error {
	var err error
	if _, ok := s.Cache.Load("entries"); ok {
		return nil
	}
	vres, err := s.GetEntries()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("entries", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2NetworkaclEntry resource interface
type AwsEc2NetworkaclEntry interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Egress() (bool, error)
	RuleAction() (string, error)
	PortRange() (AwsEc2NetworkaclEntryPortrange, error)
	Id() (string, error)
}

// mqlAwsEc2NetworkaclEntry for the aws.ec2.networkacl.entry resource
type mqlAwsEc2NetworkaclEntry struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2NetworkaclEntry) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.networkacl.entry resource
func newAwsEc2NetworkaclEntry(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2NetworkaclEntry{runtime.NewResource("aws.ec2.networkacl.entry")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "egress":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry\", its \"egress\" argument has the wrong type (expected type \"bool\")")
			}
		case "ruleAction":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry\", its \"ruleAction\" argument has the wrong type (expected type \"string\")")
			}
		case "portRange":
			if _, ok := val.(AwsEc2NetworkaclEntryPortrange); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry\", its \"portRange\" argument has the wrong type (expected type \"AwsEc2NetworkaclEntryPortrange\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.networkacl.entry with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2NetworkaclEntry) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("egress"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry\" resource without a \"egress\". This field is required.")
	}
	if _, ok := s.Cache.Load("ruleAction"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry\" resource without a \"ruleAction\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry].Register")
	switch name {
	case "egress":
		return nil
	case "ruleAction":
		return nil
	case "portRange":
		return nil
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry].Field")
	switch name {
	case "egress":
		return s.Egress()
	case "ruleAction":
		return s.RuleAction()
	case "portRange":
		return s.PortRange()
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry\" resource")
	}
}

// Egress accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) Egress() (bool, error) {
	res, ok := s.Cache.Load("egress")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.ec2.networkacl.entry\" failed: no value provided for static field \"egress\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ec2.networkacl.entry\" failed to cast field \"egress\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RuleAction accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) RuleAction() (string, error) {
	res, ok := s.Cache.Load("ruleAction")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl.entry\" failed: no value provided for static field \"ruleAction\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl.entry\" failed to cast field \"ruleAction\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PortRange accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) PortRange() (AwsEc2NetworkaclEntryPortrange, error) {
	res, ok := s.Cache.Load("portRange")
	if !ok || !res.Valid {
		if err := s.ComputePortRange(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("portRange")
		if !ok {
			return nil, errors.New("\"aws.ec2.networkacl.entry\" calculated \"portRange\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "portRange")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsEc2NetworkaclEntryPortrange)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.networkacl.entry\" failed to cast field \"portRange\" to the right type (AwsEc2NetworkaclEntryPortrange): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl.entry\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl.entry\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntry) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry].MqlCompute")
	switch name {
	case "egress":
		return nil
	case "ruleAction":
		return nil
	case "portRange":
		return s.ComputePortRange()
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry\" resource")
	}
}

// ComputePortRange computer autogenerated
func (s *mqlAwsEc2NetworkaclEntry) ComputePortRange() error {
	var err error
	if _, ok := s.Cache.Load("portRange"); ok {
		return nil
	}
	vres, err := s.GetPortRange()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("portRange", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2NetworkaclEntryPortrange resource interface
type AwsEc2NetworkaclEntryPortrange interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	From() (int64, error)
	To() (int64, error)
	Id() (string, error)
}

// mqlAwsEc2NetworkaclEntryPortrange for the aws.ec2.networkacl.entry.portrange resource
type mqlAwsEc2NetworkaclEntryPortrange struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2NetworkaclEntryPortrange) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.networkacl.entry.portrange resource
func newAwsEc2NetworkaclEntryPortrange(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2NetworkaclEntryPortrange{runtime.NewResource("aws.ec2.networkacl.entry.portrange")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "from":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry.portrange\", its \"from\" argument has the wrong type (expected type \"int64\")")
			}
		case "to":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry.portrange\", its \"to\" argument has the wrong type (expected type \"int64\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry.portrange\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.networkacl.entry.portrange\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.networkacl.entry.portrange with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2NetworkaclEntryPortrange) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("from"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry.portrange\" resource without a \"from\". This field is required.")
	}
	if _, ok := s.Cache.Load("to"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry.portrange\" resource without a \"to\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.networkacl.entry.portrange\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry.portrange].Register")
	switch name {
	case "from":
		return nil
	case "to":
		return nil
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry.portrange\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry.portrange].Field")
	switch name {
	case "from":
		return s.From()
	case "to":
		return s.To()
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry.portrange\" resource")
	}
}

// From accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) From() (int64, error) {
	res, ok := s.Cache.Load("from")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ec2.networkacl.entry.portrange\" failed: no value provided for static field \"from\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ec2.networkacl.entry.portrange\" failed to cast field \"from\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// To accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) To() (int64, error) {
	res, ok := s.Cache.Load("to")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ec2.networkacl.entry.portrange\" failed: no value provided for static field \"to\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ec2.networkacl.entry.portrange\" failed to cast field \"to\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.networkacl.entry.portrange\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.networkacl.entry.portrange\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2NetworkaclEntryPortrange) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.networkacl.entry.portrange].MqlCompute")
	switch name {
	case "from":
		return nil
	case "to":
		return nil
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.networkacl.entry.portrange\" resource")
	}
}

// AwsEc2Vpnconnection resource interface
type AwsEc2Vpnconnection interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	VgwTelemetry() ([]interface{}, error)
}

// mqlAwsEc2Vpnconnection for the aws.ec2.vpnconnection resource
type mqlAwsEc2Vpnconnection struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Vpnconnection) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.vpnconnection resource
func newAwsEc2Vpnconnection(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Vpnconnection{runtime.NewResource("aws.ec2.vpnconnection")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vpnconnection\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "vgwTelemetry":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vpnconnection\", its \"vgwTelemetry\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vpnconnection\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.vpnconnection with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Vpnconnection) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.vpnconnection\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("vgwTelemetry"); !ok {
		return errors.New("Initialized \"aws.ec2.vpnconnection\" resource without a \"vgwTelemetry\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Vpnconnection) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.vpnconnection].Register")
	switch name {
	case "arn":
		return nil
	case "vgwTelemetry":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.vpnconnection\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Vpnconnection) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.vpnconnection].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "vgwTelemetry":
		return s.VgwTelemetry()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.vpnconnection\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Vpnconnection) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.vpnconnection\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.vpnconnection\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VgwTelemetry accessor autogenerated
func (s *mqlAwsEc2Vpnconnection) VgwTelemetry() ([]interface{}, error) {
	res, ok := s.Cache.Load("vgwTelemetry")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.vpnconnection\" failed: no value provided for static field \"vgwTelemetry\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.vpnconnection\" failed to cast field \"vgwTelemetry\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Vpnconnection) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.vpnconnection].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "vgwTelemetry":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.vpnconnection\" resource")
	}
}

// AwsEc2Vgwtelemetry resource interface
type AwsEc2Vgwtelemetry interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	OutsideIpAddress() (string, error)
	Status() (string, error)
	StatusMessage() (string, error)
}

// mqlAwsEc2Vgwtelemetry for the aws.ec2.vgwtelemetry resource
type mqlAwsEc2Vgwtelemetry struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Vgwtelemetry) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.vgwtelemetry resource
func newAwsEc2Vgwtelemetry(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Vgwtelemetry{runtime.NewResource("aws.ec2.vgwtelemetry")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "outsideIpAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vgwtelemetry\", its \"outsideIpAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vgwtelemetry\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusMessage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vgwtelemetry\", its \"statusMessage\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.vgwtelemetry\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.vgwtelemetry with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Vgwtelemetry) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("outsideIpAddress"); !ok {
		return errors.New("Initialized \"aws.ec2.vgwtelemetry\" resource without a \"outsideIpAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.ec2.vgwtelemetry\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusMessage"); !ok {
		return errors.New("Initialized \"aws.ec2.vgwtelemetry\" resource without a \"statusMessage\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.vgwtelemetry].Register")
	switch name {
	case "outsideIpAddress":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.vgwtelemetry\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.vgwtelemetry].Field")
	switch name {
	case "outsideIpAddress":
		return s.OutsideIpAddress()
	case "status":
		return s.Status()
	case "statusMessage":
		return s.StatusMessage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.vgwtelemetry\" resource")
	}
}

// OutsideIpAddress accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) OutsideIpAddress() (string, error) {
	res, ok := s.Cache.Load("outsideIpAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.vgwtelemetry\" failed: no value provided for static field \"outsideIpAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.vgwtelemetry\" failed to cast field \"outsideIpAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.vgwtelemetry\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.vgwtelemetry\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusMessage accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) StatusMessage() (string, error) {
	res, ok := s.Cache.Load("statusMessage")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.vgwtelemetry\" failed: no value provided for static field \"statusMessage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.vgwtelemetry\" failed to cast field \"statusMessage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Vgwtelemetry) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.vgwtelemetry].MqlCompute")
	switch name {
	case "outsideIpAddress":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.vgwtelemetry\" resource")
	}
}

// AwsEc2Internetgateway resource interface
type AwsEc2Internetgateway interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Attachments() ([]interface{}, error)
}

// mqlAwsEc2Internetgateway for the aws.ec2.internetgateway resource
type mqlAwsEc2Internetgateway struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Internetgateway) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.internetgateway resource
func newAwsEc2Internetgateway(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Internetgateway{runtime.NewResource("aws.ec2.internetgateway")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.internetgateway\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.internetgateway\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "attachments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.internetgateway\", its \"attachments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.internetgateway\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.internetgateway with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Internetgateway) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.internetgateway\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.internetgateway\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("attachments"); !ok {
		return errors.New("Initialized \"aws.ec2.internetgateway\" resource without a \"attachments\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Internetgateway) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.internetgateway].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attachments":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.internetgateway\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Internetgateway) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.internetgateway].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "attachments":
		return s.Attachments()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.internetgateway\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Internetgateway) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.internetgateway\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.internetgateway\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Internetgateway) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.internetgateway\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.internetgateway\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attachments accessor autogenerated
func (s *mqlAwsEc2Internetgateway) Attachments() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachments")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.internetgateway\" failed: no value provided for static field \"attachments\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.internetgateway\" failed to cast field \"attachments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Internetgateway) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.internetgateway].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attachments":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.internetgateway\" resource")
	}
}

// AwsEc2Snapshot resource interface
type AwsEc2Snapshot interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Region() (string, error)
	CreateVolumePermission() ([]interface{}, error)
	VolumeId() (string, error)
	StartTime() (*time.Time, error)
	Tags() (map[string]interface{}, error)
	State() (string, error)
}

// mqlAwsEc2Snapshot for the aws.ec2.snapshot resource
type mqlAwsEc2Snapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Snapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.snapshot resource
func newAwsEc2Snapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Snapshot{runtime.NewResource("aws.ec2.snapshot")}
	var existing AwsEc2Snapshot
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "createVolumePermission":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"createVolumePermission\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "volumeId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"volumeId\" argument has the wrong type (expected type \"string\")")
			}
		case "startTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"startTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Snapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeId"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"volumeId\". This field is required.")
	}
	if _, ok := s.Cache.Load("startTime"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"startTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.ec2.snapshot\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Snapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.snapshot].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "region":
		return nil
	case "createVolumePermission":
		return nil
	case "volumeId":
		return nil
	case "startTime":
		return nil
	case "tags":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Snapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.snapshot].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "region":
		return s.Region()
	case "createVolumePermission":
		return s.CreateVolumePermission()
	case "volumeId":
		return s.VolumeId()
	case "startTime":
		return s.StartTime()
	case "tags":
		return s.Tags()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.snapshot\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Snapshot) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Snapshot) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Snapshot) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateVolumePermission accessor autogenerated
func (s *mqlAwsEc2Snapshot) CreateVolumePermission() ([]interface{}, error) {
	res, ok := s.Cache.Load("createVolumePermission")
	if !ok || !res.Valid {
		if err := s.ComputeCreateVolumePermission(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createVolumePermission")
		if !ok {
			return nil, errors.New("\"aws.ec2.snapshot\" calculated \"createVolumePermission\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createVolumePermission")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"createVolumePermission\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeId accessor autogenerated
func (s *mqlAwsEc2Snapshot) VolumeId() (string, error) {
	res, ok := s.Cache.Load("volumeId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"volumeId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"volumeId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartTime accessor autogenerated
func (s *mqlAwsEc2Snapshot) StartTime() (*time.Time, error) {
	res, ok := s.Cache.Load("startTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"startTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"startTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEc2Snapshot) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsEc2Snapshot) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.snapshot\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.snapshot\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Snapshot) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.snapshot].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "region":
		return nil
	case "createVolumePermission":
		return s.ComputeCreateVolumePermission()
	case "volumeId":
		return nil
	case "startTime":
		return nil
	case "tags":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.snapshot\" resource")
	}
}

// ComputeCreateVolumePermission computer autogenerated
func (s *mqlAwsEc2Snapshot) ComputeCreateVolumePermission() error {
	var err error
	if _, ok := s.Cache.Load("createVolumePermission"); ok {
		return nil
	}
	vres, err := s.GetCreateVolumePermission()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createVolumePermission", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2Volume resource interface
type AwsEc2Volume interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Attachments() ([]interface{}, error)
	Encrypted() (bool, error)
	State() (string, error)
	Tags() (map[string]interface{}, error)
	AvailabilityZone() (string, error)
	VolumeType() (string, error)
	CreateTime() (*time.Time, error)
	Region() (string, error)
}

// mqlAwsEc2Volume for the aws.ec2.volume resource
type mqlAwsEc2Volume struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Volume) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.volume resource
func newAwsEc2Volume(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Volume{runtime.NewResource("aws.ec2.volume")}
	var existing AwsEc2Volume
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "attachments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"attachments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "encrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"encrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "availabilityZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"availabilityZone\" argument has the wrong type (expected type \"string\")")
			}
		case "volumeType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"volumeType\" argument has the wrong type (expected type \"string\")")
			}
		case "createTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"createTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.volume\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.volume with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Volume) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("attachments"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"attachments\". This field is required.")
	}
	if _, ok := s.Cache.Load("encrypted"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"encrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("availabilityZone"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"availabilityZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeType"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"volumeType\". This field is required.")
	}
	if _, ok := s.Cache.Load("createTime"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"createTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.volume\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Volume) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.volume].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attachments":
		return nil
	case "encrypted":
		return nil
	case "state":
		return nil
	case "tags":
		return nil
	case "availabilityZone":
		return nil
	case "volumeType":
		return nil
	case "createTime":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.volume\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Volume) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.volume].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "attachments":
		return s.Attachments()
	case "encrypted":
		return s.Encrypted()
	case "state":
		return s.State()
	case "tags":
		return s.Tags()
	case "availabilityZone":
		return s.AvailabilityZone()
	case "volumeType":
		return s.VolumeType()
	case "createTime":
		return s.CreateTime()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.volume\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Volume) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Volume) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attachments accessor autogenerated
func (s *mqlAwsEc2Volume) Attachments() ([]interface{}, error) {
	res, ok := s.Cache.Load("attachments")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"attachments\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"attachments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Encrypted accessor autogenerated
func (s *mqlAwsEc2Volume) Encrypted() (bool, error) {
	res, ok := s.Cache.Load("encrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"encrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"encrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsEc2Volume) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEc2Volume) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// AvailabilityZone accessor autogenerated
func (s *mqlAwsEc2Volume) AvailabilityZone() (string, error) {
	res, ok := s.Cache.Load("availabilityZone")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"availabilityZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"availabilityZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VolumeType accessor autogenerated
func (s *mqlAwsEc2Volume) VolumeType() (string, error) {
	res, ok := s.Cache.Load("volumeType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"volumeType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"volumeType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateTime accessor autogenerated
func (s *mqlAwsEc2Volume) CreateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"createTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"createTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Volume) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.volume\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.volume\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Volume) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.volume].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "attachments":
		return nil
	case "encrypted":
		return nil
	case "state":
		return nil
	case "tags":
		return nil
	case "availabilityZone":
		return nil
	case "volumeType":
		return nil
	case "createTime":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.volume\" resource")
	}
}

// AwsEc2Instance resource interface
type AwsEc2Instance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	InstanceId() (string, error)
	DetailedMonitoring() (string, error)
	Region() (string, error)
	PublicIp() (string, error)
	Ssm() (interface{}, error)
	Vpc() (AwsVpc, error)
	HttpTokens() (string, error)
	PatchState() (interface{}, error)
	State() (string, error)
	DeviceMappings() ([]interface{}, error)
	SecurityGroups() ([]interface{}, error)
	PublicDnsName() (string, error)
	InstanceStatus() (interface{}, error)
	StateReason() (interface{}, error)
	StateTransitionReason() (string, error)
	EbsOptimized() (bool, error)
	InstanceType() (string, error)
	Tags() (map[string]interface{}, error)
	Image() (AwsEc2Image, error)
	LaunchTime() (*time.Time, error)
	PrivateIp() (string, error)
	PrivateDnsName() (string, error)
	Keypair() (AwsEc2Keypair, error)
}

// mqlAwsEc2Instance for the aws.ec2.instance resource
type mqlAwsEc2Instance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Instance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.instance resource
func newAwsEc2Instance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Instance{runtime.NewResource("aws.ec2.instance")}
	var existing AwsEc2Instance
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"instanceId\" argument has the wrong type (expected type \"string\")")
			}
		case "detailedMonitoring":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"detailedMonitoring\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "publicIp":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"publicIp\" argument has the wrong type (expected type \"string\")")
			}
		case "ssm":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"ssm\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "vpc":
			if _, ok := val.(AwsVpc); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"vpc\" argument has the wrong type (expected type \"AwsVpc\")")
			}
		case "httpTokens":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"httpTokens\" argument has the wrong type (expected type \"string\")")
			}
		case "patchState":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"patchState\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "deviceMappings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"deviceMappings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"securityGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "publicDnsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"publicDnsName\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceStatus":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"instanceStatus\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stateReason":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"stateReason\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "stateTransitionReason":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"stateTransitionReason\" argument has the wrong type (expected type \"string\")")
			}
		case "ebsOptimized":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"ebsOptimized\" argument has the wrong type (expected type \"bool\")")
			}
		case "instanceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"instanceType\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "image":
			if _, ok := val.(AwsEc2Image); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"image\" argument has the wrong type (expected type \"AwsEc2Image\")")
			}
		case "launchTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"launchTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "privateIp":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"privateIp\" argument has the wrong type (expected type \"string\")")
			}
		case "privateDnsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"privateDnsName\" argument has the wrong type (expected type \"string\")")
			}
		case "keypair":
			if _, ok := val.(AwsEc2Keypair); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"keypair\" argument has the wrong type (expected type \"AwsEc2Keypair\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Instance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceId"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"instanceId\". This field is required.")
	}
	if _, ok := s.Cache.Load("detailedMonitoring"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"detailedMonitoring\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("publicIp"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"publicIp\". This field is required.")
	}
	if _, ok := s.Cache.Load("httpTokens"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"httpTokens\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("deviceMappings"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"deviceMappings\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityGroups"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"securityGroups\". This field is required.")
	}
	if _, ok := s.Cache.Load("publicDnsName"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"publicDnsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("stateReason"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"stateReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("stateTransitionReason"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"stateTransitionReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("ebsOptimized"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"ebsOptimized\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceType"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"instanceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("image"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"image\". This field is required.")
	}
	if _, ok := s.Cache.Load("launchTime"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"launchTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIp"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"privateIp\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateDnsName"); !ok {
		return errors.New("Initialized \"aws.ec2.instance\" resource without a \"privateDnsName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Instance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance].Register")
	switch name {
	case "arn":
		return nil
	case "instanceId":
		return nil
	case "detailedMonitoring":
		return nil
	case "region":
		return nil
	case "publicIp":
		return nil
	case "ssm":
		return nil
	case "vpc":
		return nil
	case "httpTokens":
		return nil
	case "patchState":
		return nil
	case "state":
		return nil
	case "deviceMappings":
		return nil
	case "securityGroups":
		return nil
	case "publicDnsName":
		return nil
	case "instanceStatus":
		return nil
	case "stateReason":
		return nil
	case "stateTransitionReason":
		return nil
	case "ebsOptimized":
		return nil
	case "instanceType":
		return nil
	case "tags":
		return nil
	case "image":
		return nil
	case "launchTime":
		return nil
	case "privateIp":
		return nil
	case "privateDnsName":
		return nil
	case "keypair":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Instance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "instanceId":
		return s.InstanceId()
	case "detailedMonitoring":
		return s.DetailedMonitoring()
	case "region":
		return s.Region()
	case "publicIp":
		return s.PublicIp()
	case "ssm":
		return s.Ssm()
	case "vpc":
		return s.Vpc()
	case "httpTokens":
		return s.HttpTokens()
	case "patchState":
		return s.PatchState()
	case "state":
		return s.State()
	case "deviceMappings":
		return s.DeviceMappings()
	case "securityGroups":
		return s.SecurityGroups()
	case "publicDnsName":
		return s.PublicDnsName()
	case "instanceStatus":
		return s.InstanceStatus()
	case "stateReason":
		return s.StateReason()
	case "stateTransitionReason":
		return s.StateTransitionReason()
	case "ebsOptimized":
		return s.EbsOptimized()
	case "instanceType":
		return s.InstanceType()
	case "tags":
		return s.Tags()
	case "image":
		return s.Image()
	case "launchTime":
		return s.LaunchTime()
	case "privateIp":
		return s.PrivateIp()
	case "privateDnsName":
		return s.PrivateDnsName()
	case "keypair":
		return s.Keypair()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.instance\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Instance) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceId accessor autogenerated
func (s *mqlAwsEc2Instance) InstanceId() (string, error) {
	res, ok := s.Cache.Load("instanceId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"instanceId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"instanceId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DetailedMonitoring accessor autogenerated
func (s *mqlAwsEc2Instance) DetailedMonitoring() (string, error) {
	res, ok := s.Cache.Load("detailedMonitoring")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"detailedMonitoring\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"detailedMonitoring\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Instance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PublicIp accessor autogenerated
func (s *mqlAwsEc2Instance) PublicIp() (string, error) {
	res, ok := s.Cache.Load("publicIp")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"publicIp\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"publicIp\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ssm accessor autogenerated
func (s *mqlAwsEc2Instance) Ssm() (interface{}, error) {
	res, ok := s.Cache.Load("ssm")
	if !ok || !res.Valid {
		if err := s.ComputeSsm(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ssm")
		if !ok {
			return nil, errors.New("\"aws.ec2.instance\" calculated \"ssm\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ssm")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"ssm\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Vpc accessor autogenerated
func (s *mqlAwsEc2Instance) Vpc() (AwsVpc, error) {
	res, ok := s.Cache.Load("vpc")
	if !ok || !res.Valid {
		if err := s.ComputeVpc(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vpc")
		if !ok {
			return nil, errors.New("\"aws.ec2.instance\" calculated \"vpc\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vpc")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsVpc)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"vpc\" to the right type (AwsVpc): %#v", res)
	}
	return tres, nil
}

// HttpTokens accessor autogenerated
func (s *mqlAwsEc2Instance) HttpTokens() (string, error) {
	res, ok := s.Cache.Load("httpTokens")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"httpTokens\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"httpTokens\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PatchState accessor autogenerated
func (s *mqlAwsEc2Instance) PatchState() (interface{}, error) {
	res, ok := s.Cache.Load("patchState")
	if !ok || !res.Valid {
		if err := s.ComputePatchState(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("patchState")
		if !ok {
			return nil, errors.New("\"aws.ec2.instance\" calculated \"patchState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "patchState")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"patchState\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsEc2Instance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DeviceMappings accessor autogenerated
func (s *mqlAwsEc2Instance) DeviceMappings() ([]interface{}, error) {
	res, ok := s.Cache.Load("deviceMappings")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"deviceMappings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"deviceMappings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityGroups accessor autogenerated
func (s *mqlAwsEc2Instance) SecurityGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityGroups")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"securityGroups\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"securityGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PublicDnsName accessor autogenerated
func (s *mqlAwsEc2Instance) PublicDnsName() (string, error) {
	res, ok := s.Cache.Load("publicDnsName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"publicDnsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"publicDnsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceStatus accessor autogenerated
func (s *mqlAwsEc2Instance) InstanceStatus() (interface{}, error) {
	res, ok := s.Cache.Load("instanceStatus")
	if !ok || !res.Valid {
		if err := s.ComputeInstanceStatus(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instanceStatus")
		if !ok {
			return nil, errors.New("\"aws.ec2.instance\" calculated \"instanceStatus\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instanceStatus")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"instanceStatus\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StateReason accessor autogenerated
func (s *mqlAwsEc2Instance) StateReason() (interface{}, error) {
	res, ok := s.Cache.Load("stateReason")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"stateReason\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"stateReason\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StateTransitionReason accessor autogenerated
func (s *mqlAwsEc2Instance) StateTransitionReason() (string, error) {
	res, ok := s.Cache.Load("stateTransitionReason")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"stateTransitionReason\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"stateTransitionReason\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EbsOptimized accessor autogenerated
func (s *mqlAwsEc2Instance) EbsOptimized() (bool, error) {
	res, ok := s.Cache.Load("ebsOptimized")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"ebsOptimized\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"ebsOptimized\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// InstanceType accessor autogenerated
func (s *mqlAwsEc2Instance) InstanceType() (string, error) {
	res, ok := s.Cache.Load("instanceType")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"instanceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"instanceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEc2Instance) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Image accessor autogenerated
func (s *mqlAwsEc2Instance) Image() (AwsEc2Image, error) {
	res, ok := s.Cache.Load("image")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"image\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsEc2Image)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"image\" to the right type (AwsEc2Image): %#v", res)
	}
	return tres, nil
}

// LaunchTime accessor autogenerated
func (s *mqlAwsEc2Instance) LaunchTime() (*time.Time, error) {
	res, ok := s.Cache.Load("launchTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"launchTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"launchTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PrivateIp accessor autogenerated
func (s *mqlAwsEc2Instance) PrivateIp() (string, error) {
	res, ok := s.Cache.Load("privateIp")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"privateIp\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"privateIp\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrivateDnsName accessor autogenerated
func (s *mqlAwsEc2Instance) PrivateDnsName() (string, error) {
	res, ok := s.Cache.Load("privateDnsName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance\" failed: no value provided for static field \"privateDnsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"privateDnsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Keypair accessor autogenerated
func (s *mqlAwsEc2Instance) Keypair() (AwsEc2Keypair, error) {
	res, ok := s.Cache.Load("keypair")
	if !ok || !res.Valid {
		if err := s.ComputeKeypair(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keypair")
		if !ok {
			return nil, errors.New("\"aws.ec2.instance\" calculated \"keypair\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keypair")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsEc2Keypair)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.instance\" failed to cast field \"keypair\" to the right type (AwsEc2Keypair): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Instance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "instanceId":
		return nil
	case "detailedMonitoring":
		return nil
	case "region":
		return nil
	case "publicIp":
		return nil
	case "ssm":
		return s.ComputeSsm()
	case "vpc":
		return s.ComputeVpc()
	case "httpTokens":
		return nil
	case "patchState":
		return s.ComputePatchState()
	case "state":
		return nil
	case "deviceMappings":
		return nil
	case "securityGroups":
		return nil
	case "publicDnsName":
		return nil
	case "instanceStatus":
		return s.ComputeInstanceStatus()
	case "stateReason":
		return nil
	case "stateTransitionReason":
		return nil
	case "ebsOptimized":
		return nil
	case "instanceType":
		return nil
	case "tags":
		return nil
	case "image":
		return nil
	case "launchTime":
		return nil
	case "privateIp":
		return nil
	case "privateDnsName":
		return nil
	case "keypair":
		return s.ComputeKeypair()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.instance\" resource")
	}
}

// ComputeSsm computer autogenerated
func (s *mqlAwsEc2Instance) ComputeSsm() error {
	var err error
	if _, ok := s.Cache.Load("ssm"); ok {
		return nil
	}
	vres, err := s.GetSsm()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ssm", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVpc computer autogenerated
func (s *mqlAwsEc2Instance) ComputeVpc() error {
	var err error
	if _, ok := s.Cache.Load("vpc"); ok {
		return nil
	}
	vres, err := s.GetVpc()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vpc", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePatchState computer autogenerated
func (s *mqlAwsEc2Instance) ComputePatchState() error {
	var err error
	if _, ok := s.Cache.Load("patchState"); ok {
		return nil
	}
	vres, err := s.GetPatchState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("patchState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInstanceStatus computer autogenerated
func (s *mqlAwsEc2Instance) ComputeInstanceStatus() error {
	var err error
	if _, ok := s.Cache.Load("instanceStatus"); ok {
		return nil
	}
	vres, err := s.GetInstanceStatus()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instanceStatus", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeypair computer autogenerated
func (s *mqlAwsEc2Instance) ComputeKeypair() error {
	var err error
	if _, ok := s.Cache.Load("keypair"); ok {
		return nil
	}
	vres, err := s.GetKeypair()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keypair", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2Keypair resource interface
type AwsEc2Keypair interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Fingerprint() (string, error)
	Name() (string, error)
	Type() (string, error)
	Tags() (map[string]interface{}, error)
	Region() (string, error)
}

// mqlAwsEc2Keypair for the aws.ec2.keypair resource
type mqlAwsEc2Keypair struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Keypair) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.keypair resource
func newAwsEc2Keypair(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Keypair{runtime.NewResource("aws.ec2.keypair")}
	var existing AwsEc2Keypair
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.keypair\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.keypair with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Keypair) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.keypair\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Keypair) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.keypair].Register")
	switch name {
	case "arn":
		return nil
	case "fingerprint":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.keypair\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Keypair) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.keypair].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "fingerprint":
		return s.Fingerprint()
	case "name":
		return s.Name()
	case "type":
		return s.Type()
	case "tags":
		return s.Tags()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.keypair\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Keypair) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlAwsEc2Keypair) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEc2Keypair) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlAwsEc2Keypair) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEc2Keypair) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Keypair) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.keypair\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.keypair\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Keypair) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.keypair].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "fingerprint":
		return nil
	case "name":
		return nil
	case "type":
		return nil
	case "tags":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.keypair\" resource")
	}
}

// AwsEc2Image resource interface
type AwsEc2Image interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	Architecture() (string, error)
	OwnerId() (string, error)
	OwnerAlias() (string, error)
}

// mqlAwsEc2Image for the aws.ec2.image resource
type mqlAwsEc2Image struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Image) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.image resource
func newAwsEc2Image(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Image{runtime.NewResource("aws.ec2.image")}
	var existing AwsEc2Image
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "ownerId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"ownerId\" argument has the wrong type (expected type \"string\")")
			}
		case "ownerAlias":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"ownerAlias\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.image\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.image with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Image) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("ownerId"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"ownerId\". This field is required.")
	}
	if _, ok := s.Cache.Load("ownerAlias"); !ok {
		return errors.New("Initialized \"aws.ec2.image\" resource without a \"ownerAlias\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Image) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.image].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "ownerId":
		return nil
	case "ownerAlias":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.image\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Image) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.image].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "architecture":
		return s.Architecture()
	case "ownerId":
		return s.OwnerId()
	case "ownerAlias":
		return s.OwnerAlias()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.image\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Image) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Image) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEc2Image) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlAwsEc2Image) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OwnerId accessor autogenerated
func (s *mqlAwsEc2Image) OwnerId() (string, error) {
	res, ok := s.Cache.Load("ownerId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"ownerId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"ownerId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OwnerAlias accessor autogenerated
func (s *mqlAwsEc2Image) OwnerAlias() (string, error) {
	res, ok := s.Cache.Load("ownerAlias")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.image\" failed: no value provided for static field \"ownerAlias\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.image\" failed to cast field \"ownerAlias\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Image) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.image].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "ownerId":
		return nil
	case "ownerAlias":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.image\" resource")
	}
}

// AwsEc2InstanceDevice resource interface
type AwsEc2InstanceDevice interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DeleteOnTermination() (bool, error)
	Status() (string, error)
	VolumeId() (string, error)
	DeviceName() (string, error)
}

// mqlAwsEc2InstanceDevice for the aws.ec2.instance.device resource
type mqlAwsEc2InstanceDevice struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2InstanceDevice) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.instance.device resource
func newAwsEc2InstanceDevice(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2InstanceDevice{runtime.NewResource("aws.ec2.instance.device")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "deleteOnTermination":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance.device\", its \"deleteOnTermination\" argument has the wrong type (expected type \"bool\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance.device\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "volumeId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance.device\", its \"volumeId\" argument has the wrong type (expected type \"string\")")
			}
		case "deviceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance.device\", its \"deviceName\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.instance.device\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.instance.device with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2InstanceDevice) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("deleteOnTermination"); !ok {
		return errors.New("Initialized \"aws.ec2.instance.device\" resource without a \"deleteOnTermination\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.ec2.instance.device\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeId"); !ok {
		return errors.New("Initialized \"aws.ec2.instance.device\" resource without a \"volumeId\". This field is required.")
	}
	if _, ok := s.Cache.Load("deviceName"); !ok {
		return errors.New("Initialized \"aws.ec2.instance.device\" resource without a \"deviceName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance.device].Register")
	switch name {
	case "deleteOnTermination":
		return nil
	case "status":
		return nil
	case "volumeId":
		return nil
	case "deviceName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.instance.device\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance.device].Field")
	switch name {
	case "deleteOnTermination":
		return s.DeleteOnTermination()
	case "status":
		return s.Status()
	case "volumeId":
		return s.VolumeId()
	case "deviceName":
		return s.DeviceName()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.instance.device\" resource")
	}
}

// DeleteOnTermination accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) DeleteOnTermination() (bool, error) {
	res, ok := s.Cache.Load("deleteOnTermination")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.ec2.instance.device\" failed: no value provided for static field \"deleteOnTermination\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ec2.instance.device\" failed to cast field \"deleteOnTermination\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance.device\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance.device\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VolumeId accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) VolumeId() (string, error) {
	res, ok := s.Cache.Load("volumeId")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance.device\" failed: no value provided for static field \"volumeId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance.device\" failed to cast field \"volumeId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DeviceName accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) DeviceName() (string, error) {
	res, ok := s.Cache.Load("deviceName")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.instance.device\" failed: no value provided for static field \"deviceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.instance.device\" failed to cast field \"deviceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2InstanceDevice) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.instance.device].MqlCompute")
	switch name {
	case "deleteOnTermination":
		return nil
	case "status":
		return nil
	case "volumeId":
		return nil
	case "deviceName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.instance.device\" resource")
	}
}

// AwsVpc resource interface
type AwsVpc interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	State() (string, error)
	IsDefault() (bool, error)
	Region() (string, error)
	FlowLogs() ([]interface{}, error)
	RouteTables() ([]interface{}, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsVpc for the aws.vpc resource
type mqlAwsVpc struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsVpc) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.vpc resource
func newAwsVpc(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsVpc{runtime.NewResource("aws.vpc")}
	var existing AwsVpc
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "flowLogs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"flowLogs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routeTables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"routeTables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.vpc with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsVpc) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.vpc\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsVpc) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "state":
		return nil
	case "isDefault":
		return nil
	case "region":
		return nil
	case "flowLogs":
		return nil
	case "routeTables":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsVpc) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.vpc].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "state":
		return s.State()
	case "isDefault":
		return s.IsDefault()
	case "region":
		return s.Region()
	case "flowLogs":
		return s.FlowLogs()
	case "routeTables":
		return s.RouteTables()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.vpc\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsVpc) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsVpc) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsVpc) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlAwsVpc) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.vpc\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.vpc\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsVpc) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FlowLogs accessor autogenerated
func (s *mqlAwsVpc) FlowLogs() ([]interface{}, error) {
	res, ok := s.Cache.Load("flowLogs")
	if !ok || !res.Valid {
		if err := s.ComputeFlowLogs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("flowLogs")
		if !ok {
			return nil, errors.New("\"aws.vpc\" calculated \"flowLogs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "flowLogs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.vpc\" failed to cast field \"flowLogs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RouteTables accessor autogenerated
func (s *mqlAwsVpc) RouteTables() ([]interface{}, error) {
	res, ok := s.Cache.Load("routeTables")
	if !ok || !res.Valid {
		if err := s.ComputeRouteTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routeTables")
		if !ok {
			return nil, errors.New("\"aws.vpc\" calculated \"routeTables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routeTables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.vpc\" failed to cast field \"routeTables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsVpc) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.vpc\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.vpc\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsVpc) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "state":
		return nil
	case "isDefault":
		return nil
	case "region":
		return nil
	case "flowLogs":
		return s.ComputeFlowLogs()
	case "routeTables":
		return s.ComputeRouteTables()
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc\" resource")
	}
}

// ComputeFlowLogs computer autogenerated
func (s *mqlAwsVpc) ComputeFlowLogs() error {
	var err error
	if _, ok := s.Cache.Load("flowLogs"); ok {
		return nil
	}
	vres, err := s.GetFlowLogs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("flowLogs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRouteTables computer autogenerated
func (s *mqlAwsVpc) ComputeRouteTables() error {
	var err error
	if _, ok := s.Cache.Load("routeTables"); ok {
		return nil
	}
	vres, err := s.GetRouteTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routeTables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsVpcFlowlog resource interface
type AwsVpcFlowlog interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Vpc() (string, error)
	Region() (string, error)
	Status() (string, error)
	Tags() (map[string]interface{}, error)
}

// mqlAwsVpcFlowlog for the aws.vpc.flowlog resource
type mqlAwsVpcFlowlog struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsVpcFlowlog) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.vpc.flowlog resource
func newAwsVpcFlowlog(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsVpcFlowlog{runtime.NewResource("aws.vpc.flowlog")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "vpc":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"vpc\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.flowlog\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.vpc.flowlog with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsVpcFlowlog) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.vpc.flowlog\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("vpc"); !ok {
		return errors.New("Initialized \"aws.vpc.flowlog\" resource without a \"vpc\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.vpc.flowlog\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.vpc.flowlog\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.vpc.flowlog\" resource without a \"tags\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsVpcFlowlog) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc.flowlog].Register")
	switch name {
	case "id":
		return nil
	case "vpc":
		return nil
	case "region":
		return nil
	case "status":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc.flowlog\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsVpcFlowlog) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.vpc.flowlog].Field")
	switch name {
	case "id":
		return s.Id()
	case "vpc":
		return s.Vpc()
	case "region":
		return s.Region()
	case "status":
		return s.Status()
	case "tags":
		return s.Tags()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.vpc.flowlog\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsVpcFlowlog) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc.flowlog\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc.flowlog\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Vpc accessor autogenerated
func (s *mqlAwsVpcFlowlog) Vpc() (string, error) {
	res, ok := s.Cache.Load("vpc")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc.flowlog\" failed: no value provided for static field \"vpc\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc.flowlog\" failed to cast field \"vpc\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsVpcFlowlog) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc.flowlog\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc.flowlog\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsVpcFlowlog) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc.flowlog\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc.flowlog\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsVpcFlowlog) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.vpc.flowlog\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.vpc.flowlog\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsVpcFlowlog) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc.flowlog].MqlCompute")
	switch name {
	case "id":
		return nil
	case "vpc":
		return nil
	case "region":
		return nil
	case "status":
		return nil
	case "tags":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc.flowlog\" resource")
	}
}

// AwsVpcRoutetable resource interface
type AwsVpcRoutetable interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Routes() ([]interface{}, error)
}

// mqlAwsVpcRoutetable for the aws.vpc.routetable resource
type mqlAwsVpcRoutetable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsVpcRoutetable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.vpc.routetable resource
func newAwsVpcRoutetable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsVpcRoutetable{runtime.NewResource("aws.vpc.routetable")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.routetable\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "routes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.routetable\", its \"routes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.vpc.routetable\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.vpc.routetable with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsVpcRoutetable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.vpc.routetable\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("routes"); !ok {
		return errors.New("Initialized \"aws.vpc.routetable\" resource without a \"routes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsVpcRoutetable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc.routetable].Register")
	switch name {
	case "id":
		return nil
	case "routes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc.routetable\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsVpcRoutetable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.vpc.routetable].Field")
	switch name {
	case "id":
		return s.Id()
	case "routes":
		return s.Routes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.vpc.routetable\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsVpcRoutetable) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.vpc.routetable\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.vpc.routetable\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Routes accessor autogenerated
func (s *mqlAwsVpcRoutetable) Routes() ([]interface{}, error) {
	res, ok := s.Cache.Load("routes")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.vpc.routetable\" failed: no value provided for static field \"routes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.vpc.routetable\" failed to cast field \"routes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsVpcRoutetable) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.vpc.routetable].MqlCompute")
	switch name {
	case "id":
		return nil
	case "routes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.vpc.routetable\" resource")
	}
}

// AwsEc2Securitygroup resource interface
type AwsEc2Securitygroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Tags() (map[string]interface{}, error)
	Vpc() (AwsVpc, error)
	IpPermissions() ([]interface{}, error)
	IpPermissionsEgress() ([]interface{}, error)
	Region() (string, error)
	IsAttachedToNetworkInterface() (bool, error)
}

// mqlAwsEc2Securitygroup for the aws.ec2.securitygroup resource
type mqlAwsEc2Securitygroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2Securitygroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.securitygroup resource
func newAwsEc2Securitygroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2Securitygroup{runtime.NewResource("aws.ec2.securitygroup")}
	var existing AwsEc2Securitygroup
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "vpc":
			if _, ok := val.(AwsVpc); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"vpc\" argument has the wrong type (expected type \"AwsVpc\")")
			}
		case "ipPermissions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"ipPermissions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ipPermissionsEgress":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"ipPermissionsEgress\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "isAttachedToNetworkInterface":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"isAttachedToNetworkInterface\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.securitygroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2Securitygroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("vpc"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"vpc\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipPermissions"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"ipPermissions\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipPermissionsEgress"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"ipPermissionsEgress\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup].Register")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "tags":
		return nil
	case "vpc":
		return nil
	case "ipPermissions":
		return nil
	case "ipPermissionsEgress":
		return nil
	case "region":
		return nil
	case "isAttachedToNetworkInterface":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.securitygroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "tags":
		return s.Tags()
	case "vpc":
		return s.Vpc()
	case "ipPermissions":
		return s.IpPermissions()
	case "ipPermissionsEgress":
		return s.IpPermissionsEgress()
	case "region":
		return s.Region()
	case "isAttachedToNetworkInterface":
		return s.IsAttachedToNetworkInterface()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.securitygroup\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Vpc accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Vpc() (AwsVpc, error) {
	res, ok := s.Cache.Load("vpc")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"vpc\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(AwsVpc)
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"vpc\" to the right type (AwsVpc): %#v", res)
	}
	return tres, nil
}

// IpPermissions accessor autogenerated
func (s *mqlAwsEc2Securitygroup) IpPermissions() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipPermissions")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"ipPermissions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"ipPermissions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IpPermissionsEgress accessor autogenerated
func (s *mqlAwsEc2Securitygroup) IpPermissionsEgress() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipPermissionsEgress")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"ipPermissionsEgress\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"ipPermissionsEgress\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEc2Securitygroup) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsAttachedToNetworkInterface accessor autogenerated
func (s *mqlAwsEc2Securitygroup) IsAttachedToNetworkInterface() (bool, error) {
	res, ok := s.Cache.Load("isAttachedToNetworkInterface")
	if !ok || !res.Valid {
		if err := s.ComputeIsAttachedToNetworkInterface(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("isAttachedToNetworkInterface")
		if !ok {
			return false, errors.New("\"aws.ec2.securitygroup\" calculated \"isAttachedToNetworkInterface\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "isAttachedToNetworkInterface")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.ec2.securitygroup\" failed to cast field \"isAttachedToNetworkInterface\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2Securitygroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "tags":
		return nil
	case "vpc":
		return nil
	case "ipPermissions":
		return nil
	case "ipPermissionsEgress":
		return nil
	case "region":
		return nil
	case "isAttachedToNetworkInterface":
		return s.ComputeIsAttachedToNetworkInterface()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.securitygroup\" resource")
	}
}

// ComputeIsAttachedToNetworkInterface computer autogenerated
func (s *mqlAwsEc2Securitygroup) ComputeIsAttachedToNetworkInterface() error {
	var err error
	if _, ok := s.Cache.Load("isAttachedToNetworkInterface"); ok {
		return nil
	}
	vres, err := s.GetIsAttachedToNetworkInterface()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("isAttachedToNetworkInterface", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEc2SecuritygroupIppermission resource interface
type AwsEc2SecuritygroupIppermission interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	FromPort() (int64, error)
	ToPort() (int64, error)
	IpProtocol() (string, error)
	IpRanges() ([]interface{}, error)
	Ipv6Ranges() ([]interface{}, error)
}

// mqlAwsEc2SecuritygroupIppermission for the aws.ec2.securitygroup.ippermission resource
type mqlAwsEc2SecuritygroupIppermission struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEc2SecuritygroupIppermission) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.ec2.securitygroup.ippermission resource
func newAwsEc2SecuritygroupIppermission(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEc2SecuritygroupIppermission{runtime.NewResource("aws.ec2.securitygroup.ippermission")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "fromPort":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"fromPort\" argument has the wrong type (expected type \"int64\")")
			}
		case "toPort":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"toPort\" argument has the wrong type (expected type \"int64\")")
			}
		case "ipProtocol":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"ipProtocol\" argument has the wrong type (expected type \"string\")")
			}
		case "ipRanges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"ipRanges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ipv6Ranges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"ipv6Ranges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.ec2.securitygroup.ippermission\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.ec2.securitygroup.ippermission with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEc2SecuritygroupIppermission) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("fromPort"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"fromPort\". This field is required.")
	}
	if _, ok := s.Cache.Load("toPort"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"toPort\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipProtocol"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"ipProtocol\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipRanges"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"ipRanges\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6Ranges"); !ok {
		return errors.New("Initialized \"aws.ec2.securitygroup.ippermission\" resource without a \"ipv6Ranges\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup.ippermission].Register")
	switch name {
	case "id":
		return nil
	case "fromPort":
		return nil
	case "toPort":
		return nil
	case "ipProtocol":
		return nil
	case "ipRanges":
		return nil
	case "ipv6Ranges":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.securitygroup.ippermission\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup.ippermission].Field")
	switch name {
	case "id":
		return s.Id()
	case "fromPort":
		return s.FromPort()
	case "toPort":
		return s.ToPort()
	case "ipProtocol":
		return s.IpProtocol()
	case "ipRanges":
		return s.IpRanges()
	case "ipv6Ranges":
		return s.Ipv6Ranges()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.ec2.securitygroup.ippermission\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FromPort accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) FromPort() (int64, error) {
	res, ok := s.Cache.Load("fromPort")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"fromPort\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"fromPort\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ToPort accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) ToPort() (int64, error) {
	res, ok := s.Cache.Load("toPort")
	if !ok || !res.Valid {
		return 0, errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"toPort\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"toPort\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IpProtocol accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) IpProtocol() (string, error) {
	res, ok := s.Cache.Load("ipProtocol")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"ipProtocol\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"ipProtocol\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpRanges accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) IpRanges() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipRanges")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"ipRanges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"ipRanges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ipv6Ranges accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) Ipv6Ranges() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipv6Ranges")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.ec2.securitygroup.ippermission\" failed: no value provided for static field \"ipv6Ranges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.ec2.securitygroup.ippermission\" failed to cast field \"ipv6Ranges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEc2SecuritygroupIppermission) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.ec2.securitygroup.ippermission].MqlCompute")
	switch name {
	case "id":
		return nil
	case "fromPort":
		return nil
	case "toPort":
		return nil
	case "ipProtocol":
		return nil
	case "ipRanges":
		return nil
	case "ipv6Ranges":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.ec2.securitygroup.ippermission\" resource")
	}
}

// AwsConfig resource interface
type AwsConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Recorders() ([]interface{}, error)
	Rules() ([]interface{}, error)
}

// mqlAwsConfig for the aws.config resource
type mqlAwsConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.config resource
func newAwsConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsConfig{runtime.NewResource("aws.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "recorders":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.config\", its \"recorders\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.config\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsConfig) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config].Register")
	switch name {
	case "recorders":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.config].Field")
	switch name {
	case "recorders":
		return s.Recorders()
	case "rules":
		return s.Rules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.config\" resource")
	}
}

// Recorders accessor autogenerated
func (s *mqlAwsConfig) Recorders() ([]interface{}, error) {
	res, ok := s.Cache.Load("recorders")
	if !ok || !res.Valid {
		if err := s.ComputeRecorders(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recorders")
		if !ok {
			return nil, errors.New("\"aws.config\" calculated \"recorders\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recorders")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.config\" failed to cast field \"recorders\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlAwsConfig) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		if err := s.ComputeRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("rules")
		if !ok {
			return nil, errors.New("\"aws.config\" calculated \"rules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "rules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.config\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config].MqlCompute")
	switch name {
	case "recorders":
		return s.ComputeRecorders()
	case "rules":
		return s.ComputeRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config\" resource")
	}
}

// ComputeRecorders computer autogenerated
func (s *mqlAwsConfig) ComputeRecorders() error {
	var err error
	if _, ok := s.Cache.Load("recorders"); ok {
		return nil
	}
	vres, err := s.GetRecorders()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recorders", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRules computer autogenerated
func (s *mqlAwsConfig) ComputeRules() error {
	var err error
	if _, ok := s.Cache.Load("rules"); ok {
		return nil
	}
	vres, err := s.GetRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("rules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsConfigRule resource interface
type AwsConfigRule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Arn() (string, error)
	State() (string, error)
	Source() (interface{}, error)
}

// mqlAwsConfigRule for the aws.config.rule resource
type mqlAwsConfigRule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsConfigRule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.config.rule resource
func newAwsConfigRule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsConfigRule{runtime.NewResource("aws.config.rule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.rule\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.rule\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.rule\", its \"source\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.config.rule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.config.rule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsConfigRule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.config.rule\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"aws.config.rule\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("source"); !ok {
		return errors.New("Initialized \"aws.config.rule\" resource without a \"source\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsConfigRule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config.rule].Register")
	switch name {
	case "arn":
		return nil
	case "state":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config.rule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsConfigRule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.config.rule].Field")
	switch name {
	case "arn":
		return s.Arn()
	case "state":
		return s.State()
	case "source":
		return s.Source()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.config.rule\" resource")
	}
}

// Arn accessor autogenerated
func (s *mqlAwsConfigRule) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.rule\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.rule\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlAwsConfigRule) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.rule\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.rule\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlAwsConfigRule) Source() (interface{}, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.config.rule\" failed: no value provided for static field \"source\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.config.rule\" failed to cast field \"source\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsConfigRule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config.rule].MqlCompute")
	switch name {
	case "arn":
		return nil
	case "state":
		return nil
	case "source":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config.rule\" resource")
	}
}

// AwsConfigRecorder resource interface
type AwsConfigRecorder interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	RoleArn() (string, error)
	AllSupported() (bool, error)
	IncludeGlobalResourceTypes() (bool, error)
	Recording() (bool, error)
	LastStatus() (string, error)
	Region() (string, error)
}

// mqlAwsConfigRecorder for the aws.config.recorder resource
type mqlAwsConfigRecorder struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsConfigRecorder) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.config.recorder resource
func newAwsConfigRecorder(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsConfigRecorder{runtime.NewResource("aws.config.recorder")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "roleArn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"roleArn\" argument has the wrong type (expected type \"string\")")
			}
		case "allSupported":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"allSupported\" argument has the wrong type (expected type \"bool\")")
			}
		case "includeGlobalResourceTypes":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"includeGlobalResourceTypes\" argument has the wrong type (expected type \"bool\")")
			}
		case "recording":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"recording\" argument has the wrong type (expected type \"bool\")")
			}
		case "lastStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"lastStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.config.recorder\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.config.recorder with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsConfigRecorder) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("roleArn"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"roleArn\". This field is required.")
	}
	if _, ok := s.Cache.Load("allSupported"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"allSupported\". This field is required.")
	}
	if _, ok := s.Cache.Load("includeGlobalResourceTypes"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"includeGlobalResourceTypes\". This field is required.")
	}
	if _, ok := s.Cache.Load("recording"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"recording\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStatus"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"lastStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.config.recorder\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsConfigRecorder) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config.recorder].Register")
	switch name {
	case "name":
		return nil
	case "roleArn":
		return nil
	case "allSupported":
		return nil
	case "includeGlobalResourceTypes":
		return nil
	case "recording":
		return nil
	case "lastStatus":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config.recorder\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsConfigRecorder) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.config.recorder].Field")
	switch name {
	case "name":
		return s.Name()
	case "roleArn":
		return s.RoleArn()
	case "allSupported":
		return s.AllSupported()
	case "includeGlobalResourceTypes":
		return s.IncludeGlobalResourceTypes()
	case "recording":
		return s.Recording()
	case "lastStatus":
		return s.LastStatus()
	case "region":
		return s.Region()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.config.recorder\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsConfigRecorder) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.recorder\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.recorder\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RoleArn accessor autogenerated
func (s *mqlAwsConfigRecorder) RoleArn() (string, error) {
	res, ok := s.Cache.Load("roleArn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.recorder\" failed: no value provided for static field \"roleArn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.recorder\" failed to cast field \"roleArn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllSupported accessor autogenerated
func (s *mqlAwsConfigRecorder) AllSupported() (bool, error) {
	res, ok := s.Cache.Load("allSupported")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.config.recorder\" failed: no value provided for static field \"allSupported\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.config.recorder\" failed to cast field \"allSupported\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IncludeGlobalResourceTypes accessor autogenerated
func (s *mqlAwsConfigRecorder) IncludeGlobalResourceTypes() (bool, error) {
	res, ok := s.Cache.Load("includeGlobalResourceTypes")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.config.recorder\" failed: no value provided for static field \"includeGlobalResourceTypes\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.config.recorder\" failed to cast field \"includeGlobalResourceTypes\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Recording accessor autogenerated
func (s *mqlAwsConfigRecorder) Recording() (bool, error) {
	res, ok := s.Cache.Load("recording")
	if !ok || !res.Valid {
		return false, errors.New("\"aws.config.recorder\" failed: no value provided for static field \"recording\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"aws.config.recorder\" failed to cast field \"recording\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// LastStatus accessor autogenerated
func (s *mqlAwsConfigRecorder) LastStatus() (string, error) {
	res, ok := s.Cache.Load("lastStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.recorder\" failed: no value provided for static field \"lastStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.recorder\" failed to cast field \"lastStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsConfigRecorder) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.config.recorder\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.config.recorder\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsConfigRecorder) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.config.recorder].MqlCompute")
	switch name {
	case "name":
		return nil
	case "roleArn":
		return nil
	case "allSupported":
		return nil
	case "includeGlobalResourceTypes":
		return nil
	case "recording":
		return nil
	case "lastStatus":
		return nil
	case "region":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.config.recorder\" resource")
	}
}

// AwsEks resource interface
type AwsEks interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Clusters() ([]interface{}, error)
}

// mqlAwsEks for the aws.eks resource
type mqlAwsEks struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEks) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.eks resource
func newAwsEks(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEks{runtime.NewResource("aws.eks")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.eks\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.eks with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEks) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEks) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.eks].Register")
	switch name {
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.eks\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEks) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.eks].Field")
	switch name {
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.eks\" resource")
	}
}

// Clusters accessor autogenerated
func (s *mqlAwsEks) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"aws.eks\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEks) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.eks].MqlCompute")
	switch name {
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.eks\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlAwsEks) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// AwsEksCluster resource interface
type AwsEksCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Arn() (string, error)
	Region() (string, error)
	Tags() (map[string]interface{}, error)
	Endpoint() (string, error)
	Version() (string, error)
	PlatformVersion() (string, error)
	Status() (string, error)
	EncryptionConfig() ([]interface{}, error)
	Logging() (interface{}, error)
	NetworkConfig() (interface{}, error)
	ResourcesVpcConfig() (interface{}, error)
	CreatedAt() (*time.Time, error)
}

// mqlAwsEksCluster for the aws.eks.cluster resource
type mqlAwsEksCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlAwsEksCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the aws.eks.cluster resource
func newAwsEksCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlAwsEksCluster{runtime.NewResource("aws.eks.cluster")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "arn":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"arn\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "platformVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"platformVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "encryptionConfig":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"encryptionConfig\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "logging":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"logging\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "networkConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"networkConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "resourcesVpcConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"resourcesVpcConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "createdAt":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"createdAt\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"aws.eks.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized aws.eks.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlAwsEksCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("arn"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"arn\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("platformVersion"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"platformVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("encryptionConfig"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"encryptionConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("logging"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"logging\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkConfig"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"networkConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcesVpcConfig"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"resourcesVpcConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdAt"); !ok {
		return errors.New("Initialized \"aws.eks.cluster\" resource without a \"createdAt\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlAwsEksCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[aws.eks.cluster].Register")
	switch name {
	case "name":
		return nil
	case "arn":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	case "endpoint":
		return nil
	case "version":
		return nil
	case "platformVersion":
		return nil
	case "status":
		return nil
	case "encryptionConfig":
		return nil
	case "logging":
		return nil
	case "networkConfig":
		return nil
	case "resourcesVpcConfig":
		return nil
	case "createdAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.eks.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlAwsEksCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[aws.eks.cluster].Field")
	switch name {
	case "name":
		return s.Name()
	case "arn":
		return s.Arn()
	case "region":
		return s.Region()
	case "tags":
		return s.Tags()
	case "endpoint":
		return s.Endpoint()
	case "version":
		return s.Version()
	case "platformVersion":
		return s.PlatformVersion()
	case "status":
		return s.Status()
	case "encryptionConfig":
		return s.EncryptionConfig()
	case "logging":
		return s.Logging()
	case "networkConfig":
		return s.NetworkConfig()
	case "resourcesVpcConfig":
		return s.ResourcesVpcConfig()
	case "createdAt":
		return s.CreatedAt()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"aws.eks.cluster\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlAwsEksCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Arn accessor autogenerated
func (s *mqlAwsEksCluster) Arn() (string, error) {
	res, ok := s.Cache.Load("arn")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"arn\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"arn\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlAwsEksCluster) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlAwsEksCluster) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlAwsEksCluster) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlAwsEksCluster) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PlatformVersion accessor autogenerated
func (s *mqlAwsEksCluster) PlatformVersion() (string, error) {
	res, ok := s.Cache.Load("platformVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"platformVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"platformVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlAwsEksCluster) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EncryptionConfig accessor autogenerated
func (s *mqlAwsEksCluster) EncryptionConfig() ([]interface{}, error) {
	res, ok := s.Cache.Load("encryptionConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"encryptionConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"encryptionConfig\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlAwsEksCluster) Logging() (interface{}, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"logging\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"logging\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkConfig accessor autogenerated
func (s *mqlAwsEksCluster) NetworkConfig() (interface{}, error) {
	res, ok := s.Cache.Load("networkConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"networkConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"networkConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ResourcesVpcConfig accessor autogenerated
func (s *mqlAwsEksCluster) ResourcesVpcConfig() (interface{}, error) {
	res, ok := s.Cache.Load("resourcesVpcConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"resourcesVpcConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"resourcesVpcConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// CreatedAt accessor autogenerated
func (s *mqlAwsEksCluster) CreatedAt() (*time.Time, error) {
	res, ok := s.Cache.Load("createdAt")
	if !ok || !res.Valid {
		return nil, errors.New("\"aws.eks.cluster\" failed: no value provided for static field \"createdAt\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"aws.eks.cluster\" failed to cast field \"createdAt\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlAwsEksCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[aws.eks.cluster].MqlCompute")
	switch name {
	case "name":
		return nil
	case "arn":
		return nil
	case "region":
		return nil
	case "tags":
		return nil
	case "endpoint":
		return nil
	case "version":
		return nil
	case "platformVersion":
		return nil
	case "status":
		return nil
	case "encryptionConfig":
		return nil
	case "logging":
		return nil
	case "networkConfig":
		return nil
	case "resourcesVpcConfig":
		return nil
	case "createdAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"aws.eks.cluster\" resource")
	}
}

