// Code generated by resources. DO NOT EDIT.
package ms365

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("microsoft", newMicrosoft)
	registry.AddFactory("microsoft.organization", newMicrosoftOrganization)
	registry.AddFactory("microsoft.user", newMicrosoftUser)
	registry.AddFactory("microsoft.group", newMicrosoftGroup)
	registry.AddFactory("microsoft.domain", newMicrosoftDomain)
	registry.AddFactory("microsoft.domaindnsrecord", newMicrosoftDomaindnsrecord)
	registry.AddFactory("microsoft.application", newMicrosoftApplication)
	registry.AddFactory("microsoft.serviceprincipal", newMicrosoftServiceprincipal)
	registry.AddFactory("microsoft.security", newMicrosoftSecurity)
	registry.AddFactory("microsoft.security.securityscore", newMicrosoftSecuritySecurityscore)
	registry.AddFactory("microsoft.policies", newMicrosoftPolicies)
	registry.AddFactory("microsoft.rolemanagement", newMicrosoftRolemanagement)
	registry.AddFactory("microsoft.rolemanagement.roledefinition", newMicrosoftRolemanagementRoledefinition)
	registry.AddFactory("microsoft.rolemanagement.roleassignment", newMicrosoftRolemanagementRoleassignment)
	registry.AddFactory("microsoft.devicemanagement", newMicrosoftDevicemanagement)
	registry.AddFactory("microsoft.devicemanagement.deviceconfiguration", newMicrosoftDevicemanagementDeviceconfiguration)
	registry.AddFactory("microsoft.devicemanagement.devicecompliancepolicy", newMicrosoftDevicemanagementDevicecompliancepolicy)
	registry.AddFactory("ms365.exchangeonline", newMs365Exchangeonline)
	registry.AddFactory("ms365.sharepointonline", newMs365Sharepointonline)
	registry.AddFactory("ms365.teams", newMs365Teams)
}

// Microsoft resource interface
type Microsoft interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Organizations() ([]interface{}, error)
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	Serviceprincipals() ([]interface{}, error)
	Settings() (interface{}, error)
}

// mqlMicrosoft for the microsoft resource
type mqlMicrosoft struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoft) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft resource
func newMicrosoft(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoft{runtime.NewResource("microsoft")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "organizations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"organizations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serviceprincipals":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"serviceprincipals\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoft) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoft) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft].Register")
	switch name {
	case "organizations":
		return nil
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "serviceprincipals":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoft) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft].Field")
	switch name {
	case "organizations":
		return s.Organizations()
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "serviceprincipals":
		return s.Serviceprincipals()
	case "settings":
		return s.Settings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft\" resource")
	}
}

// Organizations accessor autogenerated
func (s *mqlMicrosoft) Organizations() ([]interface{}, error) {
	res, ok := s.Cache.Load("organizations")
	if !ok || !res.Valid {
		if err := s.ComputeOrganizations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("organizations")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"organizations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "organizations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"organizations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Users accessor autogenerated
func (s *mqlMicrosoft) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlMicrosoft) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlMicrosoft) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlMicrosoft) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Serviceprincipals accessor autogenerated
func (s *mqlMicrosoft) Serviceprincipals() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceprincipals")
	if !ok || !res.Valid {
		if err := s.ComputeServiceprincipals(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceprincipals")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"serviceprincipals\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceprincipals")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"serviceprincipals\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlMicrosoft) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		if err := s.ComputeSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("settings")
		if !ok {
			return nil, errors.New("\"microsoft\" calculated \"settings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "settings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoft) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft].Compute")
	switch name {
	case "organizations":
		return s.ComputeOrganizations()
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "serviceprincipals":
		return s.ComputeServiceprincipals()
	case "settings":
		return s.ComputeSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft\" resource")
	}
}

// ComputeOrganizations computer autogenerated
func (s *mqlMicrosoft) ComputeOrganizations() error {
	var err error
	if _, ok := s.Cache.Load("organizations"); ok {
		return nil
	}
	vres, err := s.GetOrganizations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("organizations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsers computer autogenerated
func (s *mqlMicrosoft) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlMicrosoft) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlMicrosoft) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlMicrosoft) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServiceprincipals computer autogenerated
func (s *mqlMicrosoft) ComputeServiceprincipals() error {
	var err error
	if _, ok := s.Cache.Load("serviceprincipals"); ok {
		return nil
	}
	vres, err := s.GetServiceprincipals()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceprincipals", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSettings computer autogenerated
func (s *mqlMicrosoft) ComputeSettings() error {
	var err error
	if _, ok := s.Cache.Load("settings"); ok {
		return nil
	}
	vres, err := s.GetSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("settings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftOrganization resource interface
type MicrosoftOrganization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AssignedPlans() ([]interface{}, error)
	CreatedDateTime() (*time.Time, error)
	DisplayName() (string, error)
	VerifiedDomains() ([]interface{}, error)
}

// mqlMicrosoftOrganization for the microsoft.organization resource
type mqlMicrosoftOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.organization resource
func newMicrosoftOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftOrganization{runtime.NewResource("microsoft.organization")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "assignedPlans":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"assignedPlans\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "verifiedDomains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"verifiedDomains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("assignedPlans"); !ok {
		return errors.New("Initialized \"microsoft.organization\" resource without a \"assignedPlans\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.organization\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.organization\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("verifiedDomains"); !ok {
		return errors.New("Initialized \"microsoft.organization\" resource without a \"verifiedDomains\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.organization].Register")
	switch name {
	case "id":
		return nil
	case "assignedPlans":
		return nil
	case "createdDateTime":
		return nil
	case "displayName":
		return nil
	case "verifiedDomains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "assignedPlans":
		return s.AssignedPlans()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "displayName":
		return s.DisplayName()
	case "verifiedDomains":
		return s.VerifiedDomains()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AssignedPlans accessor autogenerated
func (s *mqlMicrosoftOrganization) AssignedPlans() ([]interface{}, error) {
	res, ok := s.Cache.Load("assignedPlans")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.organization\" failed: no value provided for static field \"assignedPlans\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.organization\" failed to cast field \"assignedPlans\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftOrganization) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.organization\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.organization\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftOrganization) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.organization\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.organization\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VerifiedDomains accessor autogenerated
func (s *mqlMicrosoftOrganization) VerifiedDomains() ([]interface{}, error) {
	res, ok := s.Cache.Load("verifiedDomains")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.organization\" failed: no value provided for static field \"verifiedDomains\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.organization\" failed to cast field \"verifiedDomains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftOrganization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.organization].Compute")
	switch name {
	case "id":
		return nil
	case "assignedPlans":
		return nil
	case "createdDateTime":
		return nil
	case "displayName":
		return nil
	case "verifiedDomains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.organization\" resource")
	}
}

// MicrosoftUser resource interface
type MicrosoftUser interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AccountEnabled() (bool, error)
	City() (string, error)
	CompanyName() (string, error)
	Country() (string, error)
	CreatedDateTime() (*time.Time, error)
	Department() (string, error)
	DisplayName() (string, error)
	EmployeeId() (string, error)
	GivenName() (string, error)
	JobTitle() (string, error)
	Mail() (string, error)
	MobilePhone() (string, error)
	OtherMails() ([]interface{}, error)
	OfficeLocation() (string, error)
	PostalCode() (string, error)
	State() (string, error)
	StreetAddress() (string, error)
	Surname() (string, error)
	UserPrincipalName() (string, error)
	UserType() (string, error)
	Settings() (interface{}, error)
}

// mqlMicrosoftUser for the microsoft.user resource
type mqlMicrosoftUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.user resource
func newMicrosoftUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftUser{runtime.NewResource("microsoft.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "accountEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"accountEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "city":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"city\" argument has the wrong type (expected type \"string\")")
			}
		case "companyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"companyName\" argument has the wrong type (expected type \"string\")")
			}
		case "country":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"country\" argument has the wrong type (expected type \"string\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "department":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"department\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "employeeId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"employeeId\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "jobTitle":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"jobTitle\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "mobilePhone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"mobilePhone\" argument has the wrong type (expected type \"string\")")
			}
		case "otherMails":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"otherMails\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "officeLocation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"officeLocation\" argument has the wrong type (expected type \"string\")")
			}
		case "postalCode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"postalCode\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "streetAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"streetAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "surname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"surname\" argument has the wrong type (expected type \"string\")")
			}
		case "userPrincipalName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"userPrincipalName\" argument has the wrong type (expected type \"string\")")
			}
		case "userType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"userType\" argument has the wrong type (expected type \"string\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("accountEnabled"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"accountEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("city"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"city\". This field is required.")
	}
	if _, ok := s.Cache.Load("companyName"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"companyName\". This field is required.")
	}
	if _, ok := s.Cache.Load("country"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"country\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("department"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"department\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("employeeId"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"employeeId\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("jobTitle"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"jobTitle\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"mail\". This field is required.")
	}
	if _, ok := s.Cache.Load("mobilePhone"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"mobilePhone\". This field is required.")
	}
	if _, ok := s.Cache.Load("otherMails"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"otherMails\". This field is required.")
	}
	if _, ok := s.Cache.Load("officeLocation"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"officeLocation\". This field is required.")
	}
	if _, ok := s.Cache.Load("postalCode"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"postalCode\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("streetAddress"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"streetAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("surname"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"surname\". This field is required.")
	}
	if _, ok := s.Cache.Load("userPrincipalName"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"userPrincipalName\". This field is required.")
	}
	if _, ok := s.Cache.Load("userType"); !ok {
		return errors.New("Initialized \"microsoft.user\" resource without a \"userType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.user].Register")
	switch name {
	case "id":
		return nil
	case "accountEnabled":
		return nil
	case "city":
		return nil
	case "companyName":
		return nil
	case "country":
		return nil
	case "createdDateTime":
		return nil
	case "department":
		return nil
	case "displayName":
		return nil
	case "employeeId":
		return nil
	case "givenName":
		return nil
	case "jobTitle":
		return nil
	case "mail":
		return nil
	case "mobilePhone":
		return nil
	case "otherMails":
		return nil
	case "officeLocation":
		return nil
	case "postalCode":
		return nil
	case "state":
		return nil
	case "streetAddress":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "userType":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "accountEnabled":
		return s.AccountEnabled()
	case "city":
		return s.City()
	case "companyName":
		return s.CompanyName()
	case "country":
		return s.Country()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "department":
		return s.Department()
	case "displayName":
		return s.DisplayName()
	case "employeeId":
		return s.EmployeeId()
	case "givenName":
		return s.GivenName()
	case "jobTitle":
		return s.JobTitle()
	case "mail":
		return s.Mail()
	case "mobilePhone":
		return s.MobilePhone()
	case "otherMails":
		return s.OtherMails()
	case "officeLocation":
		return s.OfficeLocation()
	case "postalCode":
		return s.PostalCode()
	case "state":
		return s.State()
	case "streetAddress":
		return s.StreetAddress()
	case "surname":
		return s.Surname()
	case "userPrincipalName":
		return s.UserPrincipalName()
	case "userType":
		return s.UserType()
	case "settings":
		return s.Settings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AccountEnabled accessor autogenerated
func (s *mqlMicrosoftUser) AccountEnabled() (bool, error) {
	res, ok := s.Cache.Load("accountEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.user\" failed: no value provided for static field \"accountEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.user\" failed to cast field \"accountEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// City accessor autogenerated
func (s *mqlMicrosoftUser) City() (string, error) {
	res, ok := s.Cache.Load("city")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"city\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"city\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompanyName accessor autogenerated
func (s *mqlMicrosoftUser) CompanyName() (string, error) {
	res, ok := s.Cache.Load("companyName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"companyName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"companyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Country accessor autogenerated
func (s *mqlMicrosoftUser) Country() (string, error) {
	res, ok := s.Cache.Load("country")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"country\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"country\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftUser) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.user\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.user\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Department accessor autogenerated
func (s *mqlMicrosoftUser) Department() (string, error) {
	res, ok := s.Cache.Load("department")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"department\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"department\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftUser) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EmployeeId accessor autogenerated
func (s *mqlMicrosoftUser) EmployeeId() (string, error) {
	res, ok := s.Cache.Load("employeeId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"employeeId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"employeeId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlMicrosoftUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// JobTitle accessor autogenerated
func (s *mqlMicrosoftUser) JobTitle() (string, error) {
	res, ok := s.Cache.Load("jobTitle")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"jobTitle\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"jobTitle\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlMicrosoftUser) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MobilePhone accessor autogenerated
func (s *mqlMicrosoftUser) MobilePhone() (string, error) {
	res, ok := s.Cache.Load("mobilePhone")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"mobilePhone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"mobilePhone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OtherMails accessor autogenerated
func (s *mqlMicrosoftUser) OtherMails() ([]interface{}, error) {
	res, ok := s.Cache.Load("otherMails")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.user\" failed: no value provided for static field \"otherMails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.user\" failed to cast field \"otherMails\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OfficeLocation accessor autogenerated
func (s *mqlMicrosoftUser) OfficeLocation() (string, error) {
	res, ok := s.Cache.Load("officeLocation")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"officeLocation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"officeLocation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PostalCode accessor autogenerated
func (s *mqlMicrosoftUser) PostalCode() (string, error) {
	res, ok := s.Cache.Load("postalCode")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"postalCode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"postalCode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlMicrosoftUser) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StreetAddress accessor autogenerated
func (s *mqlMicrosoftUser) StreetAddress() (string, error) {
	res, ok := s.Cache.Load("streetAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"streetAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"streetAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Surname accessor autogenerated
func (s *mqlMicrosoftUser) Surname() (string, error) {
	res, ok := s.Cache.Load("surname")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"surname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"surname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserPrincipalName accessor autogenerated
func (s *mqlMicrosoftUser) UserPrincipalName() (string, error) {
	res, ok := s.Cache.Load("userPrincipalName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"userPrincipalName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"userPrincipalName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserType accessor autogenerated
func (s *mqlMicrosoftUser) UserType() (string, error) {
	res, ok := s.Cache.Load("userType")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.user\" failed: no value provided for static field \"userType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.user\" failed to cast field \"userType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlMicrosoftUser) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		if err := s.ComputeSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("settings")
		if !ok {
			return nil, errors.New("\"microsoft.user\" calculated \"settings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "settings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.user\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftUser) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.user].Compute")
	switch name {
	case "id":
		return nil
	case "accountEnabled":
		return nil
	case "city":
		return nil
	case "companyName":
		return nil
	case "country":
		return nil
	case "createdDateTime":
		return nil
	case "department":
		return nil
	case "displayName":
		return nil
	case "employeeId":
		return nil
	case "givenName":
		return nil
	case "jobTitle":
		return nil
	case "mail":
		return nil
	case "mobilePhone":
		return nil
	case "otherMails":
		return nil
	case "officeLocation":
		return nil
	case "postalCode":
		return nil
	case "state":
		return nil
	case "streetAddress":
		return nil
	case "surname":
		return nil
	case "userPrincipalName":
		return nil
	case "userType":
		return nil
	case "settings":
		return s.ComputeSettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.user\" resource")
	}
}

// ComputeSettings computer autogenerated
func (s *mqlMicrosoftUser) ComputeSettings() error {
	var err error
	if _, ok := s.Cache.Load("settings"); ok {
		return nil
	}
	vres, err := s.GetSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("settings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftGroup resource interface
type MicrosoftGroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DisplayName() (string, error)
	SecurityEnabled() (bool, error)
	MailEnabled() (bool, error)
	MailNickname() (string, error)
	Mail() (string, error)
	Members() ([]interface{}, error)
}

// mqlMicrosoftGroup for the microsoft.group resource
type mqlMicrosoftGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.group resource
func newMicrosoftGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftGroup{runtime.NewResource("microsoft.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "securityEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"securityEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"mailEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "mailNickname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"mailNickname\" argument has the wrong type (expected type \"string\")")
			}
		case "mail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"mail\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityEnabled"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"securityEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailEnabled"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"mailEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailNickname"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"mailNickname\". This field is required.")
	}
	if _, ok := s.Cache.Load("mail"); !ok {
		return errors.New("Initialized \"microsoft.group\" resource without a \"mail\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.group].Register")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "members":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "displayName":
		return s.DisplayName()
	case "securityEnabled":
		return s.SecurityEnabled()
	case "mailEnabled":
		return s.MailEnabled()
	case "mailNickname":
		return s.MailNickname()
	case "mail":
		return s.Mail()
	case "members":
		return s.Members()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftGroup) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.group\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.group\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityEnabled accessor autogenerated
func (s *mqlMicrosoftGroup) SecurityEnabled() (bool, error) {
	res, ok := s.Cache.Load("securityEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.group\" failed: no value provided for static field \"securityEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.group\" failed to cast field \"securityEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailEnabled accessor autogenerated
func (s *mqlMicrosoftGroup) MailEnabled() (bool, error) {
	res, ok := s.Cache.Load("mailEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.group\" failed: no value provided for static field \"mailEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.group\" failed to cast field \"mailEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MailNickname accessor autogenerated
func (s *mqlMicrosoftGroup) MailNickname() (string, error) {
	res, ok := s.Cache.Load("mailNickname")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.group\" failed: no value provided for static field \"mailNickname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.group\" failed to cast field \"mailNickname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mail accessor autogenerated
func (s *mqlMicrosoftGroup) Mail() (string, error) {
	res, ok := s.Cache.Load("mail")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.group\" failed: no value provided for static field \"mail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.group\" failed to cast field \"mail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlMicrosoftGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"microsoft.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftGroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.group].Compute")
	switch name {
	case "id":
		return nil
	case "displayName":
		return nil
	case "securityEnabled":
		return nil
	case "mailEnabled":
		return nil
	case "mailNickname":
		return nil
	case "mail":
		return nil
	case "members":
		return s.ComputeMembers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.group\" resource")
	}
}

// ComputeMembers computer autogenerated
func (s *mqlMicrosoftGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftDomain resource interface
type MicrosoftDomain interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AuthenticationType() (string, error)
	AvailabilityStatus() (string, error)
	IsAdminManaged() (bool, error)
	IsDefault() (bool, error)
	IsInitial() (bool, error)
	IsRoot() (bool, error)
	IsVerified() (bool, error)
	PasswordNotificationWindowInDays() (int64, error)
	PasswordValidityPeriodInDays() (int64, error)
	SupportedServices() ([]interface{}, error)
	ServiceConfigurationRecords() ([]interface{}, error)
}

// mqlMicrosoftDomain for the microsoft.domain resource
type mqlMicrosoftDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.domain resource
func newMicrosoftDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftDomain{runtime.NewResource("microsoft.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "authenticationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"authenticationType\" argument has the wrong type (expected type \"string\")")
			}
		case "availabilityStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"availabilityStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "isAdminManaged":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"isAdminManaged\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDefault":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"isDefault\" argument has the wrong type (expected type \"bool\")")
			}
		case "isInitial":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"isInitial\" argument has the wrong type (expected type \"bool\")")
			}
		case "isRoot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"isRoot\" argument has the wrong type (expected type \"bool\")")
			}
		case "isVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"isVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "passwordNotificationWindowInDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"passwordNotificationWindowInDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "passwordValidityPeriodInDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"passwordValidityPeriodInDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "supportedServices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"supportedServices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serviceConfigurationRecords":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"serviceConfigurationRecords\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationType"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"authenticationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("availabilityStatus"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"availabilityStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAdminManaged"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"isAdminManaged\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDefault"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"isDefault\". This field is required.")
	}
	if _, ok := s.Cache.Load("isInitial"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"isInitial\". This field is required.")
	}
	if _, ok := s.Cache.Load("isRoot"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"isRoot\". This field is required.")
	}
	if _, ok := s.Cache.Load("isVerified"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"isVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordNotificationWindowInDays"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"passwordNotificationWindowInDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordValidityPeriodInDays"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"passwordValidityPeriodInDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("supportedServices"); !ok {
		return errors.New("Initialized \"microsoft.domain\" resource without a \"supportedServices\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.domain].Register")
	switch name {
	case "id":
		return nil
	case "authenticationType":
		return nil
	case "availabilityStatus":
		return nil
	case "isAdminManaged":
		return nil
	case "isDefault":
		return nil
	case "isInitial":
		return nil
	case "isRoot":
		return nil
	case "isVerified":
		return nil
	case "passwordNotificationWindowInDays":
		return nil
	case "passwordValidityPeriodInDays":
		return nil
	case "supportedServices":
		return nil
	case "serviceConfigurationRecords":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.domain].Field")
	switch name {
	case "id":
		return s.Id()
	case "authenticationType":
		return s.AuthenticationType()
	case "availabilityStatus":
		return s.AvailabilityStatus()
	case "isAdminManaged":
		return s.IsAdminManaged()
	case "isDefault":
		return s.IsDefault()
	case "isInitial":
		return s.IsInitial()
	case "isRoot":
		return s.IsRoot()
	case "isVerified":
		return s.IsVerified()
	case "passwordNotificationWindowInDays":
		return s.PasswordNotificationWindowInDays()
	case "passwordValidityPeriodInDays":
		return s.PasswordValidityPeriodInDays()
	case "supportedServices":
		return s.SupportedServices()
	case "serviceConfigurationRecords":
		return s.ServiceConfigurationRecords()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.domain\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftDomain) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domain\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domain\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AuthenticationType accessor autogenerated
func (s *mqlMicrosoftDomain) AuthenticationType() (string, error) {
	res, ok := s.Cache.Load("authenticationType")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domain\" failed: no value provided for static field \"authenticationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domain\" failed to cast field \"authenticationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AvailabilityStatus accessor autogenerated
func (s *mqlMicrosoftDomain) AvailabilityStatus() (string, error) {
	res, ok := s.Cache.Load("availabilityStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domain\" failed: no value provided for static field \"availabilityStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domain\" failed to cast field \"availabilityStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsAdminManaged accessor autogenerated
func (s *mqlMicrosoftDomain) IsAdminManaged() (bool, error) {
	res, ok := s.Cache.Load("isAdminManaged")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domain\" failed: no value provided for static field \"isAdminManaged\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domain\" failed to cast field \"isAdminManaged\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDefault accessor autogenerated
func (s *mqlMicrosoftDomain) IsDefault() (bool, error) {
	res, ok := s.Cache.Load("isDefault")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domain\" failed: no value provided for static field \"isDefault\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domain\" failed to cast field \"isDefault\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsInitial accessor autogenerated
func (s *mqlMicrosoftDomain) IsInitial() (bool, error) {
	res, ok := s.Cache.Load("isInitial")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domain\" failed: no value provided for static field \"isInitial\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domain\" failed to cast field \"isInitial\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsRoot accessor autogenerated
func (s *mqlMicrosoftDomain) IsRoot() (bool, error) {
	res, ok := s.Cache.Load("isRoot")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domain\" failed: no value provided for static field \"isRoot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domain\" failed to cast field \"isRoot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsVerified accessor autogenerated
func (s *mqlMicrosoftDomain) IsVerified() (bool, error) {
	res, ok := s.Cache.Load("isVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domain\" failed: no value provided for static field \"isVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domain\" failed to cast field \"isVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PasswordNotificationWindowInDays accessor autogenerated
func (s *mqlMicrosoftDomain) PasswordNotificationWindowInDays() (int64, error) {
	res, ok := s.Cache.Load("passwordNotificationWindowInDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.domain\" failed: no value provided for static field \"passwordNotificationWindowInDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.domain\" failed to cast field \"passwordNotificationWindowInDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// PasswordValidityPeriodInDays accessor autogenerated
func (s *mqlMicrosoftDomain) PasswordValidityPeriodInDays() (int64, error) {
	res, ok := s.Cache.Load("passwordValidityPeriodInDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.domain\" failed: no value provided for static field \"passwordValidityPeriodInDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.domain\" failed to cast field \"passwordValidityPeriodInDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// SupportedServices accessor autogenerated
func (s *mqlMicrosoftDomain) SupportedServices() ([]interface{}, error) {
	res, ok := s.Cache.Load("supportedServices")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.domain\" failed: no value provided for static field \"supportedServices\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.domain\" failed to cast field \"supportedServices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServiceConfigurationRecords accessor autogenerated
func (s *mqlMicrosoftDomain) ServiceConfigurationRecords() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceConfigurationRecords")
	if !ok || !res.Valid {
		if err := s.ComputeServiceConfigurationRecords(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceConfigurationRecords")
		if !ok {
			return nil, errors.New("\"microsoft.domain\" calculated \"serviceConfigurationRecords\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceConfigurationRecords")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.domain\" failed to cast field \"serviceConfigurationRecords\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftDomain) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.domain].Compute")
	switch name {
	case "id":
		return nil
	case "authenticationType":
		return nil
	case "availabilityStatus":
		return nil
	case "isAdminManaged":
		return nil
	case "isDefault":
		return nil
	case "isInitial":
		return nil
	case "isRoot":
		return nil
	case "isVerified":
		return nil
	case "passwordNotificationWindowInDays":
		return nil
	case "passwordValidityPeriodInDays":
		return nil
	case "supportedServices":
		return nil
	case "serviceConfigurationRecords":
		return s.ComputeServiceConfigurationRecords()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.domain\" resource")
	}
}

// ComputeServiceConfigurationRecords computer autogenerated
func (s *mqlMicrosoftDomain) ComputeServiceConfigurationRecords() error {
	var err error
	if _, ok := s.Cache.Load("serviceConfigurationRecords"); ok {
		return nil
	}
	vres, err := s.GetServiceConfigurationRecords()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceConfigurationRecords", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftDomaindnsrecord resource interface
type MicrosoftDomaindnsrecord interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	IsOptional() (bool, error)
	Label() (string, error)
	RecordType() (string, error)
	SupportedService() (string, error)
	Ttl() (int64, error)
	Properties() (interface{}, error)
}

// mqlMicrosoftDomaindnsrecord for the microsoft.domaindnsrecord resource
type mqlMicrosoftDomaindnsrecord struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftDomaindnsrecord) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.domaindnsrecord resource
func newMicrosoftDomaindnsrecord(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftDomaindnsrecord{runtime.NewResource("microsoft.domaindnsrecord")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "isOptional":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"isOptional\" argument has the wrong type (expected type \"bool\")")
			}
		case "label":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"label\" argument has the wrong type (expected type \"string\")")
			}
		case "recordType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"recordType\" argument has the wrong type (expected type \"string\")")
			}
		case "supportedService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"supportedService\" argument has the wrong type (expected type \"string\")")
			}
		case "ttl":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"ttl\" argument has the wrong type (expected type \"int64\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.domaindnsrecord\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.domaindnsrecord with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftDomaindnsrecord) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("isOptional"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"isOptional\". This field is required.")
	}
	if _, ok := s.Cache.Load("label"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"label\". This field is required.")
	}
	if _, ok := s.Cache.Load("recordType"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"recordType\". This field is required.")
	}
	if _, ok := s.Cache.Load("supportedService"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"supportedService\". This field is required.")
	}
	if _, ok := s.Cache.Load("ttl"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"ttl\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"microsoft.domaindnsrecord\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.domaindnsrecord].Register")
	switch name {
	case "id":
		return nil
	case "isOptional":
		return nil
	case "label":
		return nil
	case "recordType":
		return nil
	case "supportedService":
		return nil
	case "ttl":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.domaindnsrecord\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.domaindnsrecord].Field")
	switch name {
	case "id":
		return s.Id()
	case "isOptional":
		return s.IsOptional()
	case "label":
		return s.Label()
	case "recordType":
		return s.RecordType()
	case "supportedService":
		return s.SupportedService()
	case "ttl":
		return s.Ttl()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.domaindnsrecord\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsOptional accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) IsOptional() (bool, error) {
	res, ok := s.Cache.Load("isOptional")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"isOptional\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"isOptional\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Label accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Label() (string, error) {
	res, ok := s.Cache.Load("label")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"label\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"label\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecordType accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) RecordType() (string, error) {
	res, ok := s.Cache.Load("recordType")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"recordType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"recordType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SupportedService accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) SupportedService() (string, error) {
	res, ok := s.Cache.Load("supportedService")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"supportedService\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"supportedService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ttl accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Ttl() (int64, error) {
	res, ok := s.Cache.Load("ttl")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"ttl\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"ttl\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.domaindnsrecord\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.domaindnsrecord\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftDomaindnsrecord) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.domaindnsrecord].Compute")
	switch name {
	case "id":
		return nil
	case "isOptional":
		return nil
	case "label":
		return nil
	case "recordType":
		return nil
	case "supportedService":
		return nil
	case "ttl":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.domaindnsrecord\" resource")
	}
}

// MicrosoftApplication resource interface
type MicrosoftApplication interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AppId() (string, error)
	CreatedDateTime() (*time.Time, error)
	IdentifierUris() ([]interface{}, error)
	DisplayName() (string, error)
	PublisherDomain() (string, error)
	SignInAudience() (string, error)
}

// mqlMicrosoftApplication for the microsoft.application resource
type mqlMicrosoftApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.application resource
func newMicrosoftApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftApplication{runtime.NewResource("microsoft.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "appId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"appId\" argument has the wrong type (expected type \"string\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "identifierUris":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"identifierUris\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "publisherDomain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"publisherDomain\" argument has the wrong type (expected type \"string\")")
			}
		case "signInAudience":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"signInAudience\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("appId"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"appId\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("identifierUris"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"identifierUris\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("publisherDomain"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"publisherDomain\". This field is required.")
	}
	if _, ok := s.Cache.Load("signInAudience"); !ok {
		return errors.New("Initialized \"microsoft.application\" resource without a \"signInAudience\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.application].Register")
	switch name {
	case "id":
		return nil
	case "appId":
		return nil
	case "createdDateTime":
		return nil
	case "identifierUris":
		return nil
	case "displayName":
		return nil
	case "publisherDomain":
		return nil
	case "signInAudience":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.application].Field")
	switch name {
	case "id":
		return s.Id()
	case "appId":
		return s.AppId()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "identifierUris":
		return s.IdentifierUris()
	case "displayName":
		return s.DisplayName()
	case "publisherDomain":
		return s.PublisherDomain()
	case "signInAudience":
		return s.SignInAudience()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AppId accessor autogenerated
func (s *mqlMicrosoftApplication) AppId() (string, error) {
	res, ok := s.Cache.Load("appId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.application\" failed: no value provided for static field \"appId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.application\" failed to cast field \"appId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftApplication) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.application\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.application\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// IdentifierUris accessor autogenerated
func (s *mqlMicrosoftApplication) IdentifierUris() ([]interface{}, error) {
	res, ok := s.Cache.Load("identifierUris")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.application\" failed: no value provided for static field \"identifierUris\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.application\" failed to cast field \"identifierUris\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftApplication) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.application\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.application\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PublisherDomain accessor autogenerated
func (s *mqlMicrosoftApplication) PublisherDomain() (string, error) {
	res, ok := s.Cache.Load("publisherDomain")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.application\" failed: no value provided for static field \"publisherDomain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.application\" failed to cast field \"publisherDomain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SignInAudience accessor autogenerated
func (s *mqlMicrosoftApplication) SignInAudience() (string, error) {
	res, ok := s.Cache.Load("signInAudience")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.application\" failed: no value provided for static field \"signInAudience\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.application\" failed to cast field \"signInAudience\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftApplication) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.application].Compute")
	switch name {
	case "id":
		return nil
	case "appId":
		return nil
	case "createdDateTime":
		return nil
	case "identifierUris":
		return nil
	case "displayName":
		return nil
	case "publisherDomain":
		return nil
	case "signInAudience":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.application\" resource")
	}
}

// MicrosoftServiceprincipal resource interface
type MicrosoftServiceprincipal interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
}

// mqlMicrosoftServiceprincipal for the microsoft.serviceprincipal resource
type mqlMicrosoftServiceprincipal struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftServiceprincipal) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.serviceprincipal resource
func newMicrosoftServiceprincipal(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftServiceprincipal{runtime.NewResource("microsoft.serviceprincipal")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.serviceprincipal\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.serviceprincipal\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.serviceprincipal with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftServiceprincipal) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.serviceprincipal\" resource without a \"id\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftServiceprincipal) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.serviceprincipal].Register")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.serviceprincipal\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftServiceprincipal) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.serviceprincipal].Field")
	switch name {
	case "id":
		return s.Id()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.serviceprincipal\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftServiceprincipal) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.serviceprincipal\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.serviceprincipal\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftServiceprincipal) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.serviceprincipal].Compute")
	switch name {
	case "id":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.serviceprincipal\" resource")
	}
}

// MicrosoftSecurity resource interface
type MicrosoftSecurity interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SecureScores() ([]interface{}, error)
	LatestSecureScores() (MicrosoftSecuritySecurityscore, error)
}

// mqlMicrosoftSecurity for the microsoft.security resource
type mqlMicrosoftSecurity struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftSecurity) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.security resource
func newMicrosoftSecurity(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftSecurity{runtime.NewResource("microsoft.security")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "secureScores":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security\", its \"secureScores\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "latestSecureScores":
			if _, ok := val.(MicrosoftSecuritySecurityscore); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security\", its \"latestSecureScores\" argument has the wrong type (expected type \"MicrosoftSecuritySecurityscore\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.security with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftSecurity) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftSecurity) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.security].Register")
	switch name {
	case "secureScores":
		return nil
	case "latestSecureScores":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.security\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftSecurity) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.security].Field")
	switch name {
	case "secureScores":
		return s.SecureScores()
	case "latestSecureScores":
		return s.LatestSecureScores()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.security\" resource")
	}
}

// SecureScores accessor autogenerated
func (s *mqlMicrosoftSecurity) SecureScores() ([]interface{}, error) {
	res, ok := s.Cache.Load("secureScores")
	if !ok || !res.Valid {
		if err := s.ComputeSecureScores(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secureScores")
		if !ok {
			return nil, errors.New("\"microsoft.security\" calculated \"secureScores\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secureScores")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security\" failed to cast field \"secureScores\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LatestSecureScores accessor autogenerated
func (s *mqlMicrosoftSecurity) LatestSecureScores() (MicrosoftSecuritySecurityscore, error) {
	res, ok := s.Cache.Load("latestSecureScores")
	if !ok || !res.Valid {
		if err := s.ComputeLatestSecureScores(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("latestSecureScores")
		if !ok {
			return nil, errors.New("\"microsoft.security\" calculated \"latestSecureScores\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "latestSecureScores")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(MicrosoftSecuritySecurityscore)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security\" failed to cast field \"latestSecureScores\" to the right type (MicrosoftSecuritySecurityscore): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftSecurity) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.security].Compute")
	switch name {
	case "secureScores":
		return s.ComputeSecureScores()
	case "latestSecureScores":
		return s.ComputeLatestSecureScores()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.security\" resource")
	}
}

// ComputeSecureScores computer autogenerated
func (s *mqlMicrosoftSecurity) ComputeSecureScores() error {
	var err error
	if _, ok := s.Cache.Load("secureScores"); ok {
		return nil
	}
	vres, err := s.GetSecureScores()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secureScores", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLatestSecureScores computer autogenerated
func (s *mqlMicrosoftSecurity) ComputeLatestSecureScores() error {
	var err error
	if _, ok := s.Cache.Load("latestSecureScores"); ok {
		return nil
	}
	vres, err := s.GetLatestSecureScores()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("latestSecureScores", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftSecuritySecurityscore resource interface
type MicrosoftSecuritySecurityscore interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ActiveUserCount() (int64, error)
	AverageComparativeScores() ([]interface{}, error)
	AzureTenantId() (string, error)
	ControlScores() ([]interface{}, error)
	CreatedDateTime() (*time.Time, error)
	CurrentScore() (float64, error)
	EnabledServices() ([]interface{}, error)
	LicensedUserCount() (int64, error)
	MaxScore() (float64, error)
	VendorInformation() (interface{}, error)
}

// mqlMicrosoftSecuritySecurityscore for the microsoft.security.securityscore resource
type mqlMicrosoftSecuritySecurityscore struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftSecuritySecurityscore) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.security.securityscore resource
func newMicrosoftSecuritySecurityscore(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftSecuritySecurityscore{runtime.NewResource("microsoft.security.securityscore")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "activeUserCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"activeUserCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "averageComparativeScores":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"averageComparativeScores\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "azureTenantId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"azureTenantId\" argument has the wrong type (expected type \"string\")")
			}
		case "controlScores":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"controlScores\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "currentScore":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"currentScore\" argument has the wrong type (expected type \"float64\")")
			}
		case "enabledServices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"enabledServices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "licensedUserCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"licensedUserCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "maxScore":
			if _, ok := val.(float64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"maxScore\" argument has the wrong type (expected type \"float64\")")
			}
		case "vendorInformation":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"vendorInformation\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.security.securityscore\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.security.securityscore with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftSecuritySecurityscore) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("activeUserCount"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"activeUserCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("averageComparativeScores"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"averageComparativeScores\". This field is required.")
	}
	if _, ok := s.Cache.Load("azureTenantId"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"azureTenantId\". This field is required.")
	}
	if _, ok := s.Cache.Load("controlScores"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"controlScores\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentScore"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"currentScore\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabledServices"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"enabledServices\". This field is required.")
	}
	if _, ok := s.Cache.Load("licensedUserCount"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"licensedUserCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxScore"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"maxScore\". This field is required.")
	}
	if _, ok := s.Cache.Load("vendorInformation"); !ok {
		return errors.New("Initialized \"microsoft.security.securityscore\" resource without a \"vendorInformation\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.security.securityscore].Register")
	switch name {
	case "id":
		return nil
	case "activeUserCount":
		return nil
	case "averageComparativeScores":
		return nil
	case "azureTenantId":
		return nil
	case "controlScores":
		return nil
	case "createdDateTime":
		return nil
	case "currentScore":
		return nil
	case "enabledServices":
		return nil
	case "licensedUserCount":
		return nil
	case "maxScore":
		return nil
	case "vendorInformation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.security.securityscore\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.security.securityscore].Field")
	switch name {
	case "id":
		return s.Id()
	case "activeUserCount":
		return s.ActiveUserCount()
	case "averageComparativeScores":
		return s.AverageComparativeScores()
	case "azureTenantId":
		return s.AzureTenantId()
	case "controlScores":
		return s.ControlScores()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "currentScore":
		return s.CurrentScore()
	case "enabledServices":
		return s.EnabledServices()
	case "licensedUserCount":
		return s.LicensedUserCount()
	case "maxScore":
		return s.MaxScore()
	case "vendorInformation":
		return s.VendorInformation()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.security.securityscore\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ActiveUserCount accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) ActiveUserCount() (int64, error) {
	res, ok := s.Cache.Load("activeUserCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"activeUserCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"activeUserCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// AverageComparativeScores accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) AverageComparativeScores() ([]interface{}, error) {
	res, ok := s.Cache.Load("averageComparativeScores")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"averageComparativeScores\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"averageComparativeScores\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AzureTenantId accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) AzureTenantId() (string, error) {
	res, ok := s.Cache.Load("azureTenantId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"azureTenantId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"azureTenantId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ControlScores accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) ControlScores() ([]interface{}, error) {
	res, ok := s.Cache.Load("controlScores")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"controlScores\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"controlScores\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CurrentScore accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) CurrentScore() (float64, error) {
	res, ok := s.Cache.Load("currentScore")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"currentScore\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"currentScore\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// EnabledServices accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) EnabledServices() ([]interface{}, error) {
	res, ok := s.Cache.Load("enabledServices")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"enabledServices\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"enabledServices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LicensedUserCount accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) LicensedUserCount() (int64, error) {
	res, ok := s.Cache.Load("licensedUserCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"licensedUserCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"licensedUserCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaxScore accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) MaxScore() (float64, error) {
	res, ok := s.Cache.Load("maxScore")
	if !ok || !res.Valid {
		return 0.0, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"maxScore\"")
	}
	if res.Error != nil {
		return 0.0, res.Error
	}
	tres, ok := res.Data.(float64)
	if !ok {
		return 0.0, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"maxScore\" to the right type (float64): %#v", res)
	}
	return tres, nil
}

// VendorInformation accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) VendorInformation() (interface{}, error) {
	res, ok := s.Cache.Load("vendorInformation")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.security.securityscore\" failed: no value provided for static field \"vendorInformation\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.security.securityscore\" failed to cast field \"vendorInformation\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftSecuritySecurityscore) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.security.securityscore].Compute")
	switch name {
	case "id":
		return nil
	case "activeUserCount":
		return nil
	case "averageComparativeScores":
		return nil
	case "azureTenantId":
		return nil
	case "controlScores":
		return nil
	case "createdDateTime":
		return nil
	case "currentScore":
		return nil
	case "enabledServices":
		return nil
	case "licensedUserCount":
		return nil
	case "maxScore":
		return nil
	case "vendorInformation":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.security.securityscore\" resource")
	}
}

// MicrosoftPolicies resource interface
type MicrosoftPolicies interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	AuthorizationPolicy() (interface{}, error)
	IdentitySecurityDefaultsEnforcementPolicy() (interface{}, error)
	AdminConsentRequestPolicy() (interface{}, error)
	PermissionGrantPolicies() ([]interface{}, error)
}

// mqlMicrosoftPolicies for the microsoft.policies resource
type mqlMicrosoftPolicies struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftPolicies) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.policies resource
func newMicrosoftPolicies(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftPolicies{runtime.NewResource("microsoft.policies")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "authorizationPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.policies\", its \"authorizationPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "identitySecurityDefaultsEnforcementPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.policies\", its \"identitySecurityDefaultsEnforcementPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "adminConsentRequestPolicy":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.policies\", its \"adminConsentRequestPolicy\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "permissionGrantPolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.policies\", its \"permissionGrantPolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.policies\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.policies with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftPolicies) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftPolicies) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.policies].Register")
	switch name {
	case "authorizationPolicy":
		return nil
	case "identitySecurityDefaultsEnforcementPolicy":
		return nil
	case "adminConsentRequestPolicy":
		return nil
	case "permissionGrantPolicies":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.policies\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftPolicies) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.policies].Field")
	switch name {
	case "authorizationPolicy":
		return s.AuthorizationPolicy()
	case "identitySecurityDefaultsEnforcementPolicy":
		return s.IdentitySecurityDefaultsEnforcementPolicy()
	case "adminConsentRequestPolicy":
		return s.AdminConsentRequestPolicy()
	case "permissionGrantPolicies":
		return s.PermissionGrantPolicies()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.policies\" resource")
	}
}

// AuthorizationPolicy accessor autogenerated
func (s *mqlMicrosoftPolicies) AuthorizationPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("authorizationPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAuthorizationPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authorizationPolicy")
		if !ok {
			return nil, errors.New("\"microsoft.policies\" calculated \"authorizationPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authorizationPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.policies\" failed to cast field \"authorizationPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// IdentitySecurityDefaultsEnforcementPolicy accessor autogenerated
func (s *mqlMicrosoftPolicies) IdentitySecurityDefaultsEnforcementPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("identitySecurityDefaultsEnforcementPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIdentitySecurityDefaultsEnforcementPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("identitySecurityDefaultsEnforcementPolicy")
		if !ok {
			return nil, errors.New("\"microsoft.policies\" calculated \"identitySecurityDefaultsEnforcementPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "identitySecurityDefaultsEnforcementPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.policies\" failed to cast field \"identitySecurityDefaultsEnforcementPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AdminConsentRequestPolicy accessor autogenerated
func (s *mqlMicrosoftPolicies) AdminConsentRequestPolicy() (interface{}, error) {
	res, ok := s.Cache.Load("adminConsentRequestPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAdminConsentRequestPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("adminConsentRequestPolicy")
		if !ok {
			return nil, errors.New("\"microsoft.policies\" calculated \"adminConsentRequestPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "adminConsentRequestPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.policies\" failed to cast field \"adminConsentRequestPolicy\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PermissionGrantPolicies accessor autogenerated
func (s *mqlMicrosoftPolicies) PermissionGrantPolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("permissionGrantPolicies")
	if !ok || !res.Valid {
		if err := s.ComputePermissionGrantPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("permissionGrantPolicies")
		if !ok {
			return nil, errors.New("\"microsoft.policies\" calculated \"permissionGrantPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "permissionGrantPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.policies\" failed to cast field \"permissionGrantPolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftPolicies) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.policies].Compute")
	switch name {
	case "authorizationPolicy":
		return s.ComputeAuthorizationPolicy()
	case "identitySecurityDefaultsEnforcementPolicy":
		return s.ComputeIdentitySecurityDefaultsEnforcementPolicy()
	case "adminConsentRequestPolicy":
		return s.ComputeAdminConsentRequestPolicy()
	case "permissionGrantPolicies":
		return s.ComputePermissionGrantPolicies()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.policies\" resource")
	}
}

// ComputeAuthorizationPolicy computer autogenerated
func (s *mqlMicrosoftPolicies) ComputeAuthorizationPolicy() error {
	var err error
	if _, ok := s.Cache.Load("authorizationPolicy"); ok {
		return nil
	}
	vres, err := s.GetAuthorizationPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authorizationPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIdentitySecurityDefaultsEnforcementPolicy computer autogenerated
func (s *mqlMicrosoftPolicies) ComputeIdentitySecurityDefaultsEnforcementPolicy() error {
	var err error
	if _, ok := s.Cache.Load("identitySecurityDefaultsEnforcementPolicy"); ok {
		return nil
	}
	vres, err := s.GetIdentitySecurityDefaultsEnforcementPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("identitySecurityDefaultsEnforcementPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAdminConsentRequestPolicy computer autogenerated
func (s *mqlMicrosoftPolicies) ComputeAdminConsentRequestPolicy() error {
	var err error
	if _, ok := s.Cache.Load("adminConsentRequestPolicy"); ok {
		return nil
	}
	vres, err := s.GetAdminConsentRequestPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("adminConsentRequestPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePermissionGrantPolicies computer autogenerated
func (s *mqlMicrosoftPolicies) ComputePermissionGrantPolicies() error {
	var err error
	if _, ok := s.Cache.Load("permissionGrantPolicies"); ok {
		return nil
	}
	vres, err := s.GetPermissionGrantPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("permissionGrantPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftRolemanagement resource interface
type MicrosoftRolemanagement interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	RoleDefinitions() ([]interface{}, error)
}

// mqlMicrosoftRolemanagement for the microsoft.rolemanagement resource
type mqlMicrosoftRolemanagement struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftRolemanagement) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.rolemanagement resource
func newMicrosoftRolemanagement(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftRolemanagement{runtime.NewResource("microsoft.rolemanagement")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "roleDefinitions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement\", its \"roleDefinitions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.rolemanagement with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftRolemanagement) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftRolemanagement) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement].Register")
	switch name {
	case "roleDefinitions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftRolemanagement) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement].Field")
	switch name {
	case "roleDefinitions":
		return s.RoleDefinitions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.rolemanagement\" resource")
	}
}

// RoleDefinitions accessor autogenerated
func (s *mqlMicrosoftRolemanagement) RoleDefinitions() ([]interface{}, error) {
	res, ok := s.Cache.Load("roleDefinitions")
	if !ok || !res.Valid {
		if err := s.ComputeRoleDefinitions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roleDefinitions")
		if !ok {
			return nil, errors.New("\"microsoft.rolemanagement\" calculated \"roleDefinitions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roleDefinitions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.rolemanagement\" failed to cast field \"roleDefinitions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftRolemanagement) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement].Compute")
	switch name {
	case "roleDefinitions":
		return s.ComputeRoleDefinitions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement\" resource")
	}
}

// ComputeRoleDefinitions computer autogenerated
func (s *mqlMicrosoftRolemanagement) ComputeRoleDefinitions() error {
	var err error
	if _, ok := s.Cache.Load("roleDefinitions"); ok {
		return nil
	}
	vres, err := s.GetRoleDefinitions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roleDefinitions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftRolemanagementRoledefinition resource interface
type MicrosoftRolemanagementRoledefinition interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Description() (string, error)
	DisplayName() (string, error)
	IsBuiltIn() (bool, error)
	IsEnabled() (bool, error)
	RolePermissions() ([]interface{}, error)
	TemplateId() (string, error)
	Version() (string, error)
	Assignments() ([]interface{}, error)
}

// mqlMicrosoftRolemanagementRoledefinition for the microsoft.rolemanagement.roledefinition resource
type mqlMicrosoftRolemanagementRoledefinition struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftRolemanagementRoledefinition) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.rolemanagement.roledefinition resource
func newMicrosoftRolemanagementRoledefinition(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftRolemanagementRoledefinition{runtime.NewResource("microsoft.rolemanagement.roledefinition")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "isBuiltIn":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"isBuiltIn\" argument has the wrong type (expected type \"bool\")")
			}
		case "isEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"isEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "rolePermissions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"rolePermissions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "templateId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"templateId\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "assignments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"assignments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roledefinition\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.rolemanagement.roledefinition with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftRolemanagementRoledefinition) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBuiltIn"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"isBuiltIn\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnabled"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"isEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("rolePermissions"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"rolePermissions\". This field is required.")
	}
	if _, ok := s.Cache.Load("templateId"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"templateId\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roledefinition\" resource without a \"version\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roledefinition].Register")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "isBuiltIn":
		return nil
	case "isEnabled":
		return nil
	case "rolePermissions":
		return nil
	case "templateId":
		return nil
	case "version":
		return nil
	case "assignments":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roledefinition\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roledefinition].Field")
	switch name {
	case "id":
		return s.Id()
	case "description":
		return s.Description()
	case "displayName":
		return s.DisplayName()
	case "isBuiltIn":
		return s.IsBuiltIn()
	case "isEnabled":
		return s.IsEnabled()
	case "rolePermissions":
		return s.RolePermissions()
	case "templateId":
		return s.TemplateId()
	case "version":
		return s.Version()
	case "assignments":
		return s.Assignments()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roledefinition\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsBuiltIn accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) IsBuiltIn() (bool, error) {
	res, ok := s.Cache.Load("isBuiltIn")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"isBuiltIn\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"isBuiltIn\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsEnabled accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) IsEnabled() (bool, error) {
	res, ok := s.Cache.Load("isEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"isEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"isEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RolePermissions accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) RolePermissions() ([]interface{}, error) {
	res, ok := s.Cache.Load("rolePermissions")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"rolePermissions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"rolePermissions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TemplateId accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) TemplateId() (string, error) {
	res, ok := s.Cache.Load("templateId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"templateId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"templateId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roledefinition\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Assignments accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Assignments() ([]interface{}, error) {
	res, ok := s.Cache.Load("assignments")
	if !ok || !res.Valid {
		if err := s.ComputeAssignments(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("assignments")
		if !ok {
			return nil, errors.New("\"microsoft.rolemanagement.roledefinition\" calculated \"assignments\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "assignments")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.rolemanagement.roledefinition\" failed to cast field \"assignments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roledefinition].Compute")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "isBuiltIn":
		return nil
	case "isEnabled":
		return nil
	case "rolePermissions":
		return nil
	case "templateId":
		return nil
	case "version":
		return nil
	case "assignments":
		return s.ComputeAssignments()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roledefinition\" resource")
	}
}

// ComputeAssignments computer autogenerated
func (s *mqlMicrosoftRolemanagementRoledefinition) ComputeAssignments() error {
	var err error
	if _, ok := s.Cache.Load("assignments"); ok {
		return nil
	}
	vres, err := s.GetAssignments()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("assignments", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftRolemanagementRoleassignment resource interface
type MicrosoftRolemanagementRoleassignment interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	RoleDefinitionId() (string, error)
	PrincipalId() (string, error)
	Principal() (interface{}, error)
}

// mqlMicrosoftRolemanagementRoleassignment for the microsoft.rolemanagement.roleassignment resource
type mqlMicrosoftRolemanagementRoleassignment struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftRolemanagementRoleassignment) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.rolemanagement.roleassignment resource
func newMicrosoftRolemanagementRoleassignment(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftRolemanagementRoleassignment{runtime.NewResource("microsoft.rolemanagement.roleassignment")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roleassignment\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "roleDefinitionId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roleassignment\", its \"roleDefinitionId\" argument has the wrong type (expected type \"string\")")
			}
		case "principalId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roleassignment\", its \"principalId\" argument has the wrong type (expected type \"string\")")
			}
		case "principal":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roleassignment\", its \"principal\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.rolemanagement.roleassignment\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.rolemanagement.roleassignment with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftRolemanagementRoleassignment) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roleassignment\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("roleDefinitionId"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roleassignment\" resource without a \"roleDefinitionId\". This field is required.")
	}
	if _, ok := s.Cache.Load("principalId"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roleassignment\" resource without a \"principalId\". This field is required.")
	}
	if _, ok := s.Cache.Load("principal"); !ok {
		return errors.New("Initialized \"microsoft.rolemanagement.roleassignment\" resource without a \"principal\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roleassignment].Register")
	switch name {
	case "id":
		return nil
	case "roleDefinitionId":
		return nil
	case "principalId":
		return nil
	case "principal":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roleassignment\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roleassignment].Field")
	switch name {
	case "id":
		return s.Id()
	case "roleDefinitionId":
		return s.RoleDefinitionId()
	case "principalId":
		return s.PrincipalId()
	case "principal":
		return s.Principal()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roleassignment\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roleassignment\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roleassignment\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RoleDefinitionId accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) RoleDefinitionId() (string, error) {
	res, ok := s.Cache.Load("roleDefinitionId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roleassignment\" failed: no value provided for static field \"roleDefinitionId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roleassignment\" failed to cast field \"roleDefinitionId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrincipalId accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) PrincipalId() (string, error) {
	res, ok := s.Cache.Load("principalId")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.rolemanagement.roleassignment\" failed: no value provided for static field \"principalId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.rolemanagement.roleassignment\" failed to cast field \"principalId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Principal accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) Principal() (interface{}, error) {
	res, ok := s.Cache.Load("principal")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.rolemanagement.roleassignment\" failed: no value provided for static field \"principal\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.rolemanagement.roleassignment\" failed to cast field \"principal\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftRolemanagementRoleassignment) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.rolemanagement.roleassignment].Compute")
	switch name {
	case "id":
		return nil
	case "roleDefinitionId":
		return nil
	case "principalId":
		return nil
	case "principal":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.rolemanagement.roleassignment\" resource")
	}
}

// MicrosoftDevicemanagement resource interface
type MicrosoftDevicemanagement interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DeviceConfigurations() ([]interface{}, error)
	DeviceCompliancePolicies() ([]interface{}, error)
}

// mqlMicrosoftDevicemanagement for the microsoft.devicemanagement resource
type mqlMicrosoftDevicemanagement struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftDevicemanagement) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.devicemanagement resource
func newMicrosoftDevicemanagement(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftDevicemanagement{runtime.NewResource("microsoft.devicemanagement")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "deviceConfigurations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement\", its \"deviceConfigurations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deviceCompliancePolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement\", its \"deviceCompliancePolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.devicemanagement with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftDevicemanagement) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftDevicemanagement) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement].Register")
	switch name {
	case "deviceConfigurations":
		return nil
	case "deviceCompliancePolicies":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftDevicemanagement) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement].Field")
	switch name {
	case "deviceConfigurations":
		return s.DeviceConfigurations()
	case "deviceCompliancePolicies":
		return s.DeviceCompliancePolicies()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.devicemanagement\" resource")
	}
}

// DeviceConfigurations accessor autogenerated
func (s *mqlMicrosoftDevicemanagement) DeviceConfigurations() ([]interface{}, error) {
	res, ok := s.Cache.Load("deviceConfigurations")
	if !ok || !res.Valid {
		if err := s.ComputeDeviceConfigurations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("deviceConfigurations")
		if !ok {
			return nil, errors.New("\"microsoft.devicemanagement\" calculated \"deviceConfigurations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "deviceConfigurations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement\" failed to cast field \"deviceConfigurations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DeviceCompliancePolicies accessor autogenerated
func (s *mqlMicrosoftDevicemanagement) DeviceCompliancePolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("deviceCompliancePolicies")
	if !ok || !res.Valid {
		if err := s.ComputeDeviceCompliancePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("deviceCompliancePolicies")
		if !ok {
			return nil, errors.New("\"microsoft.devicemanagement\" calculated \"deviceCompliancePolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "deviceCompliancePolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement\" failed to cast field \"deviceCompliancePolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftDevicemanagement) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement].Compute")
	switch name {
	case "deviceConfigurations":
		return s.ComputeDeviceConfigurations()
	case "deviceCompliancePolicies":
		return s.ComputeDeviceCompliancePolicies()
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement\" resource")
	}
}

// ComputeDeviceConfigurations computer autogenerated
func (s *mqlMicrosoftDevicemanagement) ComputeDeviceConfigurations() error {
	var err error
	if _, ok := s.Cache.Load("deviceConfigurations"); ok {
		return nil
	}
	vres, err := s.GetDeviceConfigurations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("deviceConfigurations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDeviceCompliancePolicies computer autogenerated
func (s *mqlMicrosoftDevicemanagement) ComputeDeviceCompliancePolicies() error {
	var err error
	if _, ok := s.Cache.Load("deviceCompliancePolicies"); ok {
		return nil
	}
	vres, err := s.GetDeviceCompliancePolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("deviceCompliancePolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// MicrosoftDevicemanagementDeviceconfiguration resource interface
type MicrosoftDevicemanagementDeviceconfiguration interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	LastModifiedDateTime() (*time.Time, error)
	CreatedDateTime() (*time.Time, error)
	Description() (string, error)
	DisplayName() (string, error)
	Version() (int64, error)
	Properties() (interface{}, error)
}

// mqlMicrosoftDevicemanagementDeviceconfiguration for the microsoft.devicemanagement.deviceconfiguration resource
type mqlMicrosoftDevicemanagementDeviceconfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.devicemanagement.deviceconfiguration resource
func newMicrosoftDevicemanagementDeviceconfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftDevicemanagementDeviceconfiguration{runtime.NewResource("microsoft.devicemanagement.deviceconfiguration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "lastModifiedDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"lastModifiedDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"version\" argument has the wrong type (expected type \"int64\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.deviceconfiguration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.devicemanagement.deviceconfiguration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastModifiedDateTime"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"lastModifiedDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.deviceconfiguration\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.deviceconfiguration].Register")
	switch name {
	case "id":
		return nil
	case "lastModifiedDateTime":
		return nil
	case "createdDateTime":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "version":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement.deviceconfiguration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.deviceconfiguration].Field")
	switch name {
	case "id":
		return s.Id()
	case "lastModifiedDateTime":
		return s.LastModifiedDateTime()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "description":
		return s.Description()
	case "displayName":
		return s.DisplayName()
	case "version":
		return s.Version()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.devicemanagement.deviceconfiguration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastModifiedDateTime accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) LastModifiedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastModifiedDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"lastModifiedDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"lastModifiedDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Version() (int64, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"version\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.deviceconfiguration\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.deviceconfiguration\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDeviceconfiguration) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.deviceconfiguration].Compute")
	switch name {
	case "id":
		return nil
	case "lastModifiedDateTime":
		return nil
	case "createdDateTime":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "version":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement.deviceconfiguration\" resource")
	}
}

// MicrosoftDevicemanagementDevicecompliancepolicy resource interface
type MicrosoftDevicemanagementDevicecompliancepolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CreatedDateTime() (*time.Time, error)
	Description() (string, error)
	DisplayName() (string, error)
	LastModifiedDateTime() (*time.Time, error)
	Version() (int64, error)
	Assignments() ([]interface{}, error)
	Properties() (interface{}, error)
}

// mqlMicrosoftDevicemanagementDevicecompliancepolicy for the microsoft.devicemanagement.devicecompliancepolicy resource
type mqlMicrosoftDevicemanagementDevicecompliancepolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the microsoft.devicemanagement.devicecompliancepolicy resource
func newMicrosoftDevicemanagementDevicecompliancepolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMicrosoftDevicemanagementDevicecompliancepolicy{runtime.NewResource("microsoft.devicemanagement.devicecompliancepolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "createdDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"createdDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "lastModifiedDateTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"lastModifiedDateTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "version":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"version\" argument has the wrong type (expected type \"int64\")")
			}
		case "assignments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"assignments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "properties":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"properties\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"microsoft.devicemanagement.devicecompliancepolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized microsoft.devicemanagement.devicecompliancepolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdDateTime"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"createdDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastModifiedDateTime"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"lastModifiedDateTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("assignments"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"assignments\". This field is required.")
	}
	if _, ok := s.Cache.Load("properties"); !ok {
		return errors.New("Initialized \"microsoft.devicemanagement.devicecompliancepolicy\" resource without a \"properties\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.devicecompliancepolicy].Register")
	switch name {
	case "id":
		return nil
	case "createdDateTime":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "lastModifiedDateTime":
		return nil
	case "version":
		return nil
	case "assignments":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement.devicecompliancepolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.devicecompliancepolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "createdDateTime":
		return s.CreatedDateTime()
	case "description":
		return s.Description()
	case "displayName":
		return s.DisplayName()
	case "lastModifiedDateTime":
		return s.LastModifiedDateTime()
	case "version":
		return s.Version()
	case "assignments":
		return s.Assignments()
	case "properties":
		return s.Properties()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"microsoft.devicemanagement.devicecompliancepolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreatedDateTime accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) CreatedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createdDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"createdDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"createdDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastModifiedDateTime accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) LastModifiedDateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastModifiedDateTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"lastModifiedDateTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"lastModifiedDateTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Version() (int64, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return 0, errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"version\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Assignments accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Assignments() ([]interface{}, error) {
	res, ok := s.Cache.Load("assignments")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"assignments\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"assignments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Properties accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Properties() (interface{}, error) {
	res, ok := s.Cache.Load("properties")
	if !ok || !res.Valid {
		return nil, errors.New("\"microsoft.devicemanagement.devicecompliancepolicy\" failed: no value provided for static field \"properties\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"microsoft.devicemanagement.devicecompliancepolicy\" failed to cast field \"properties\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMicrosoftDevicemanagementDevicecompliancepolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[microsoft.devicemanagement.devicecompliancepolicy].Compute")
	switch name {
	case "id":
		return nil
	case "createdDateTime":
		return nil
	case "description":
		return nil
	case "displayName":
		return nil
	case "lastModifiedDateTime":
		return nil
	case "version":
		return nil
	case "assignments":
		return nil
	case "properties":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"microsoft.devicemanagement.devicecompliancepolicy\" resource")
	}
}

// Ms365Exchangeonline resource interface
type Ms365Exchangeonline interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	MalwareFilterPolicy() ([]interface{}, error)
	HostedOutboundSpamFilterPolicy() ([]interface{}, error)
	TransportRule() ([]interface{}, error)
	RemoteDomain() ([]interface{}, error)
	SafeLinksPolicy() ([]interface{}, error)
	SafeAttachmentPolicy() ([]interface{}, error)
	OrganizationConfig() (interface{}, error)
	AuthenticationPolicy() ([]interface{}, error)
	AntiPhishPolicy() ([]interface{}, error)
	DkimSigningConfig() ([]interface{}, error)
	OwaMailboxPolicy() ([]interface{}, error)
	AdminAuditLogConfig() (interface{}, error)
	PhishFilterPolicy() ([]interface{}, error)
	Mailbox() ([]interface{}, error)
	AtpPolicyForO365() ([]interface{}, error)
	SharingPolicy() ([]interface{}, error)
	RoleAssignmentPolicy() ([]interface{}, error)
}

// mqlMs365Exchangeonline for the ms365.exchangeonline resource
type mqlMs365Exchangeonline struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMs365Exchangeonline) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the ms365.exchangeonline resource
func newMs365Exchangeonline(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMs365Exchangeonline{runtime.NewResource("ms365.exchangeonline")}
	var existing Ms365Exchangeonline
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "malwareFilterPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"malwareFilterPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "hostedOutboundSpamFilterPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"hostedOutboundSpamFilterPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "transportRule":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"transportRule\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "remoteDomain":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"remoteDomain\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "safeLinksPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"safeLinksPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "safeAttachmentPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"safeAttachmentPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "organizationConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"organizationConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "authenticationPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"authenticationPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "antiPhishPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"antiPhishPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "dkimSigningConfig":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"dkimSigningConfig\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "owaMailboxPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"owaMailboxPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "adminAuditLogConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"adminAuditLogConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "phishFilterPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"phishFilterPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mailbox":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"mailbox\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "atpPolicyForO365":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"atpPolicyForO365\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sharingPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"sharingPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roleAssignmentPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"roleAssignmentPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"ms365.exchangeonline\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized ms365.exchangeonline with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMs365Exchangeonline) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("malwareFilterPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"malwareFilterPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostedOutboundSpamFilterPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"hostedOutboundSpamFilterPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("transportRule"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"transportRule\". This field is required.")
	}
	if _, ok := s.Cache.Load("remoteDomain"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"remoteDomain\". This field is required.")
	}
	if _, ok := s.Cache.Load("safeLinksPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"safeLinksPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("safeAttachmentPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"safeAttachmentPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("organizationConfig"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"organizationConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("authenticationPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"authenticationPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("antiPhishPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"antiPhishPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("dkimSigningConfig"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"dkimSigningConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("owaMailboxPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"owaMailboxPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("adminAuditLogConfig"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"adminAuditLogConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("phishFilterPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"phishFilterPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("mailbox"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"mailbox\". This field is required.")
	}
	if _, ok := s.Cache.Load("atpPolicyForO365"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"atpPolicyForO365\". This field is required.")
	}
	if _, ok := s.Cache.Load("sharingPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"sharingPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("roleAssignmentPolicy"); !ok {
		return errors.New("Initialized \"ms365.exchangeonline\" resource without a \"roleAssignmentPolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMs365Exchangeonline) Register(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.exchangeonline].Register")
	switch name {
	case "malwareFilterPolicy":
		return nil
	case "hostedOutboundSpamFilterPolicy":
		return nil
	case "transportRule":
		return nil
	case "remoteDomain":
		return nil
	case "safeLinksPolicy":
		return nil
	case "safeAttachmentPolicy":
		return nil
	case "organizationConfig":
		return nil
	case "authenticationPolicy":
		return nil
	case "antiPhishPolicy":
		return nil
	case "dkimSigningConfig":
		return nil
	case "owaMailboxPolicy":
		return nil
	case "adminAuditLogConfig":
		return nil
	case "phishFilterPolicy":
		return nil
	case "mailbox":
		return nil
	case "atpPolicyForO365":
		return nil
	case "sharingPolicy":
		return nil
	case "roleAssignmentPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.exchangeonline\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMs365Exchangeonline) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[ms365.exchangeonline].Field")
	switch name {
	case "malwareFilterPolicy":
		return s.MalwareFilterPolicy()
	case "hostedOutboundSpamFilterPolicy":
		return s.HostedOutboundSpamFilterPolicy()
	case "transportRule":
		return s.TransportRule()
	case "remoteDomain":
		return s.RemoteDomain()
	case "safeLinksPolicy":
		return s.SafeLinksPolicy()
	case "safeAttachmentPolicy":
		return s.SafeAttachmentPolicy()
	case "organizationConfig":
		return s.OrganizationConfig()
	case "authenticationPolicy":
		return s.AuthenticationPolicy()
	case "antiPhishPolicy":
		return s.AntiPhishPolicy()
	case "dkimSigningConfig":
		return s.DkimSigningConfig()
	case "owaMailboxPolicy":
		return s.OwaMailboxPolicy()
	case "adminAuditLogConfig":
		return s.AdminAuditLogConfig()
	case "phishFilterPolicy":
		return s.PhishFilterPolicy()
	case "mailbox":
		return s.Mailbox()
	case "atpPolicyForO365":
		return s.AtpPolicyForO365()
	case "sharingPolicy":
		return s.SharingPolicy()
	case "roleAssignmentPolicy":
		return s.RoleAssignmentPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"ms365.exchangeonline\" resource")
	}
}

// MalwareFilterPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) MalwareFilterPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("malwareFilterPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"malwareFilterPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"malwareFilterPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// HostedOutboundSpamFilterPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) HostedOutboundSpamFilterPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("hostedOutboundSpamFilterPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"hostedOutboundSpamFilterPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"hostedOutboundSpamFilterPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TransportRule accessor autogenerated
func (s *mqlMs365Exchangeonline) TransportRule() ([]interface{}, error) {
	res, ok := s.Cache.Load("transportRule")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"transportRule\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"transportRule\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RemoteDomain accessor autogenerated
func (s *mqlMs365Exchangeonline) RemoteDomain() ([]interface{}, error) {
	res, ok := s.Cache.Load("remoteDomain")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"remoteDomain\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"remoteDomain\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SafeLinksPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) SafeLinksPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("safeLinksPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"safeLinksPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"safeLinksPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SafeAttachmentPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) SafeAttachmentPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("safeAttachmentPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"safeAttachmentPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"safeAttachmentPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OrganizationConfig accessor autogenerated
func (s *mqlMs365Exchangeonline) OrganizationConfig() (interface{}, error) {
	res, ok := s.Cache.Load("organizationConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"organizationConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"organizationConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AuthenticationPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) AuthenticationPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("authenticationPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"authenticationPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"authenticationPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AntiPhishPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) AntiPhishPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("antiPhishPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"antiPhishPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"antiPhishPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DkimSigningConfig accessor autogenerated
func (s *mqlMs365Exchangeonline) DkimSigningConfig() ([]interface{}, error) {
	res, ok := s.Cache.Load("dkimSigningConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"dkimSigningConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"dkimSigningConfig\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OwaMailboxPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) OwaMailboxPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("owaMailboxPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"owaMailboxPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"owaMailboxPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AdminAuditLogConfig accessor autogenerated
func (s *mqlMs365Exchangeonline) AdminAuditLogConfig() (interface{}, error) {
	res, ok := s.Cache.Load("adminAuditLogConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"adminAuditLogConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"adminAuditLogConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PhishFilterPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) PhishFilterPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("phishFilterPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"phishFilterPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"phishFilterPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Mailbox accessor autogenerated
func (s *mqlMs365Exchangeonline) Mailbox() ([]interface{}, error) {
	res, ok := s.Cache.Load("mailbox")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"mailbox\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"mailbox\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AtpPolicyForO365 accessor autogenerated
func (s *mqlMs365Exchangeonline) AtpPolicyForO365() ([]interface{}, error) {
	res, ok := s.Cache.Load("atpPolicyForO365")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"atpPolicyForO365\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"atpPolicyForO365\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SharingPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) SharingPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("sharingPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"sharingPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"sharingPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RoleAssignmentPolicy accessor autogenerated
func (s *mqlMs365Exchangeonline) RoleAssignmentPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("roleAssignmentPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.exchangeonline\" failed: no value provided for static field \"roleAssignmentPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.exchangeonline\" failed to cast field \"roleAssignmentPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMs365Exchangeonline) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.exchangeonline].Compute")
	switch name {
	case "malwareFilterPolicy":
		return nil
	case "hostedOutboundSpamFilterPolicy":
		return nil
	case "transportRule":
		return nil
	case "remoteDomain":
		return nil
	case "safeLinksPolicy":
		return nil
	case "safeAttachmentPolicy":
		return nil
	case "organizationConfig":
		return nil
	case "authenticationPolicy":
		return nil
	case "antiPhishPolicy":
		return nil
	case "dkimSigningConfig":
		return nil
	case "owaMailboxPolicy":
		return nil
	case "adminAuditLogConfig":
		return nil
	case "phishFilterPolicy":
		return nil
	case "mailbox":
		return nil
	case "atpPolicyForO365":
		return nil
	case "sharingPolicy":
		return nil
	case "roleAssignmentPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.exchangeonline\" resource")
	}
}

// Ms365Sharepointonline resource interface
type Ms365Sharepointonline interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	SpoTenant() (interface{}, error)
	SpoTenantSyncClientRestriction() (interface{}, error)
}

// mqlMs365Sharepointonline for the ms365.sharepointonline resource
type mqlMs365Sharepointonline struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMs365Sharepointonline) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the ms365.sharepointonline resource
func newMs365Sharepointonline(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMs365Sharepointonline{runtime.NewResource("ms365.sharepointonline")}
	var existing Ms365Sharepointonline
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "spoTenant":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.sharepointonline\", its \"spoTenant\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "spoTenantSyncClientRestriction":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.sharepointonline\", its \"spoTenantSyncClientRestriction\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"ms365.sharepointonline\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized ms365.sharepointonline with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMs365Sharepointonline) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("spoTenant"); !ok {
		return errors.New("Initialized \"ms365.sharepointonline\" resource without a \"spoTenant\". This field is required.")
	}
	if _, ok := s.Cache.Load("spoTenantSyncClientRestriction"); !ok {
		return errors.New("Initialized \"ms365.sharepointonline\" resource without a \"spoTenantSyncClientRestriction\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMs365Sharepointonline) Register(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.sharepointonline].Register")
	switch name {
	case "spoTenant":
		return nil
	case "spoTenantSyncClientRestriction":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.sharepointonline\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMs365Sharepointonline) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[ms365.sharepointonline].Field")
	switch name {
	case "spoTenant":
		return s.SpoTenant()
	case "spoTenantSyncClientRestriction":
		return s.SpoTenantSyncClientRestriction()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"ms365.sharepointonline\" resource")
	}
}

// SpoTenant accessor autogenerated
func (s *mqlMs365Sharepointonline) SpoTenant() (interface{}, error) {
	res, ok := s.Cache.Load("spoTenant")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.sharepointonline\" failed: no value provided for static field \"spoTenant\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.sharepointonline\" failed to cast field \"spoTenant\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SpoTenantSyncClientRestriction accessor autogenerated
func (s *mqlMs365Sharepointonline) SpoTenantSyncClientRestriction() (interface{}, error) {
	res, ok := s.Cache.Load("spoTenantSyncClientRestriction")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.sharepointonline\" failed: no value provided for static field \"spoTenantSyncClientRestriction\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.sharepointonline\" failed to cast field \"spoTenantSyncClientRestriction\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMs365Sharepointonline) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.sharepointonline].Compute")
	switch name {
	case "spoTenant":
		return nil
	case "spoTenantSyncClientRestriction":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.sharepointonline\" resource")
	}
}

// Ms365Teams resource interface
type Ms365Teams interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CsTeamsClientConfiguration() (interface{}, error)
	CsOAuthConfiguration() ([]interface{}, error)
}

// mqlMs365Teams for the ms365.teams resource
type mqlMs365Teams struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlMs365Teams) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the ms365.teams resource
func newMs365Teams(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlMs365Teams{runtime.NewResource("ms365.teams")}
	var existing Ms365Teams
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "csTeamsClientConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.teams\", its \"csTeamsClientConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "csOAuthConfiguration":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"ms365.teams\", its \"csOAuthConfiguration\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"ms365.teams\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized ms365.teams with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlMs365Teams) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("csTeamsClientConfiguration"); !ok {
		return errors.New("Initialized \"ms365.teams\" resource without a \"csTeamsClientConfiguration\". This field is required.")
	}
	if _, ok := s.Cache.Load("csOAuthConfiguration"); !ok {
		return errors.New("Initialized \"ms365.teams\" resource without a \"csOAuthConfiguration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlMs365Teams) Register(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.teams].Register")
	switch name {
	case "csTeamsClientConfiguration":
		return nil
	case "csOAuthConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.teams\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlMs365Teams) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[ms365.teams].Field")
	switch name {
	case "csTeamsClientConfiguration":
		return s.CsTeamsClientConfiguration()
	case "csOAuthConfiguration":
		return s.CsOAuthConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"ms365.teams\" resource")
	}
}

// CsTeamsClientConfiguration accessor autogenerated
func (s *mqlMs365Teams) CsTeamsClientConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("csTeamsClientConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.teams\" failed: no value provided for static field \"csTeamsClientConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.teams\" failed to cast field \"csTeamsClientConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// CsOAuthConfiguration accessor autogenerated
func (s *mqlMs365Teams) CsOAuthConfiguration() ([]interface{}, error) {
	res, ok := s.Cache.Load("csOAuthConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"ms365.teams\" failed: no value provided for static field \"csOAuthConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"ms365.teams\" failed to cast field \"csOAuthConfiguration\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlMs365Teams) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[ms365.teams].Compute")
	switch name {
	case "csTeamsClientConfiguration":
		return nil
	case "csOAuthConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"ms365.teams\" resource")
	}
}

