import "../core/core.lr"

option go_package = "go.mondoo.com/cnquery/resources/packs/github"

// Git commit
private git.commit @defaults("sha") {
  // Git commit SHA
  sha string
  // Git commit message
  message string
  // Git commit author
  author git.commitAuthor
  // Git commit committer
  committer git.commitAuthor
  // The GPG signature of the commit if there is one
  signatureVerification git.gpgSignature
}

// Git commit author
private git.commitAuthor @defaults("name email") {
  // Author shasum
  sha string
  // Author name
  name string
  // Author email
  email string
  // Date of commit
  date time
}

// Git GPG signature
private git.gpgSignature @defaults("sha") {
  // GPG signature shasum
  sha string
  // GPG signature reason
  reason string
  // Whether GPG signature is verified
  verified bool
  // GPG signature payload
  payload string
  // GPG signature
  signature string
}

// GitHub Organization
github.organization @defaults("login name") {
  // Organization login
  login string
  // Organization ID
  id int
  // Organization global node ID
  nodeId string
  // Organization name
  name string
  // Organization company
  company string
  // Organization blog
  blog string
  // Organization location
  location string
  // Organization email
  email string
  // Organization Twitter name
  twitterUsername string
  // Organization description
  description string
  // Create time for the organization
  createdAt time
  // Update time for the organization
  updatedAt time
  // Number of private repos
  totalPrivateRepos int
  // Number of owned private repositories for the organization
  ownedPrivateRepos int
  // Number of private gists
  privateGists int
  // Disk usage for the organization
  diskUsage int
  // Number of collaborators for the organization
  collaborators int
  // Organization billing email
  billingEmail string
  // GitHub plan the organization is subscribed to
  plan dict
  // Two-factor authentication required for all members
  twoFactorRequirementEnabled bool
  // Verified organization by GitHub
  isVerified bool
  // The default repository permission
  defaultRepositoryPermission string
  // Whether members can create repositories
  membersCanCreateRepositories bool
  // Whether members can create public repositories
  membersCanCreatePublicRepositories bool
  // Whether members can create private repositories
  membersCanCreatePrivateRepositories bool
  // Whether members can create internal repositories
  membersCanCreateInternalRepositories bool
  // Whether members can create pages
  membersCanCreatePages bool
  // Whether members can create public pages
  membersCanCreatePublicPages bool
  // Whether members can create private pages
  membersCanCreatePrivatePages bool
  // List of users that are part of the owners group
  owners() []github.user
  // List of users that are part of the members group
  members() []github.user
  // List of users that are part of the teams group
  teams() []github.team
  // List of repositories
  repositories() []github.repository
  // List of GitHub installations
  installations() []github.installation
  // List of webhooks
  webhooks() []github.webhook
  // List of packages
  packages() []github.package
}

// GitHub User
private github.user @defaults("id name") {
  // User ID
  id int
  // User login
  login string
  // User name
  name string
  // User email
  email string
  // User bio
  bio string
  // User create time in UTC
  createdAt time
  // Last user update time in UTC
  updatedAt time
  // User suspended time
  suspendedAt time
  // User company
  company string
  // User repositories
  repositories() []github.repository
}

// GitHub Team
private github.team @defaults("id name") {
  // Team ID
  id int
  // Team name
  name string
  // Team description
  description string
  // Team slug
  slug string
  // Team privacy configuration
  privacy string
  // Team default permission
  defaultPermission string
  // Team members
  members() []github.user
  // Team owned repositories
  repositories() []github.repository
  // Team organization
  organization github.organization
}

// GitHub Collaborator
private github.collaborator @defaults("user") {
  // Collaborator ID
  id int
  // Collaborator user information
  user github.user
  // Collaborator permissions
  permissions []string
}

// GitHub Package
private github.package @defaults("id name") {
  // Package ID
  id int
  // Package name
  name string
  // Package type
  packageType string
  // Package owner
  owner github.user
  // Package create time
  createdAt time
  // Package update time
  updatedAt time
  // Package version numbers
  versionCount int
  // Package visibility
  visibility string
  // Package repository information
  repository() github.repository
}

// GitHub Repository
private github.repository @defaults("fullName") {
  init(name string) // can only be used when logged in to github as a user
  // Repository ID
  id int
  // Repository name
  name string
  // Repository full name
  fullName string
  // Repository description
  description string
  // Repository homepage
  homepage string
  // Repository create time
  createdAt time
  // Repository update time
  updatedAt time
  // Whether the repository is archived
  archived bool
  // Whether the repository is disabled
  disabled bool
  // Whether the repository is private
  private bool
  // Repository visibility
  visibility string
  // Whether the repository allows auto merging
  allowAutoMerge bool
  // Whether the repository allows forking
  allowForking bool
  // Whether the repository allows merge commit
  allowMergeCommit bool
  // Whether the repository allows rebase merge
  allowRebaseMerge bool
  // Whether the repository allows squash merge
  allowSquashMerge bool
  // Whether the repository has open issues
  hasIssues bool
  // Repository organization name
  organizationName string
  // Whether the repository has open merge requests
  openMergeRequests() []github.mergeRequest
  // List of branches for the repository
  branches() []github.branch
  // Default branch name for the repository
  defaultBranchName string
  // List of commits for the repository
  commits() []github.commit
  // List of contributors for the repository
  contributors() []github.user
  // List of collaborators for the repository
  collaborators() []github.collaborator
  // List of files in the repository
  files() []github.file
  // List of releases for the repository
  releases() []github.release
  // Repository owner
  owner github.user
  // List of webhooks for the repository
  webhooks() []github.webhook
  // List of workflows for the repository
  workflows() []github.workflow
}

// GitHub Repository File
private github.file @defaults("name type") {
  // File path
  path string
  // File name
  name string
  // File type
  type string
  // File shasum
  sha string
  // Whether file is a binary
  isBinary bool
  // List of files in directory
  files() []github.file
  // File owner
  ownerName string
  // File repository name
  repoName string
  // File content
  content() string
}

// GitHub Release
private github.release @defaults("name tagName") {
  // Release url
  url string
  // Release name
  name string
  // Release tag name
  tagName string
  // Whether the release is a pre-release
  preRelease bool
}

// GitHub Webhook
private github.webhook @defaults("id name") {
  // Webhook ID
  id int
  // Webhook name
  name string
  // Webhook url
  url string
  // List of events for webhook
  events []string
  // Webhook config
  config dict
  // Whether the webhook is active
  active bool
}

// GitHub Workflow
private github.workflow @defaults("id name") {
  // Workflow ID
  id int
  // Workflow name
  name string
  // Workflow path
  path string
  // Workflow state
  state string
  // Workflow create time
  createdAt time
  // Workflow update time
  updatedAt time
  // Workflow file 
  file() github.file
  // Workflow configuration 
  configuration() dict
}

// GitHub Repository Branch
private github.branch @defaults("name") {
  // Repository branch name
  name string
  // Whether branch protection is enabled
  protected bool
  // Repository branch HEAD commit
  headCommit github.commit
  // Repository branch protection rules
  protectionRules() github.branchprotection
  // Repository branch organization
  organizationName string
  // Repository branch repository name
  repoName string
  // Repository branch owner
  owner github.user
  // Whether branch is the default branch
  isDefault bool
}

// GitHub Repository Branch Protection
private github.branchprotection @defaults("id") {
  // Repository branch protection ID
  id string
  // Require status checks to pass before merging
  requiredStatusChecks dict
  // Require a pull request before merging
  requiredPullRequestReviews dict
  // Require conversation resolution before merging
  requiredConversationResolution dict
  // Require signed commits
  requiredSignatures bool
  // Require linear history
  requireLinearHistory dict
  // Include administrators
  enforceAdmins dict
  // Restrict who can push to matching branches
  restrictions dict
  // Allow force pushes
  allowForcePushes dict
  // Allow deletions
  allowDeletions dict
}

// GitHub Repository Commit
private github.commit @defaults("sha") {
  // Commit owner
  owner string
  // Commit repository
  repository string
  // Commit SHA
  sha string
  // Commit URL
  url string
  // Commit author
  author github.user
  // Commit committer
  committer github.user
  // Commit resource object
  commit git.commit
  // Commit stats
  stats dict
}

// GitHub Repository Pull Request 
private github.mergeRequest @defaults("id state") {
  // Pull request ID
  id int
  // Pull request number
  number int
  // Pull request state
  state string
  // Pull request created at time (in UTC)
  createdAt time
  // Pull request labels
  labels []dict
  // Pull request title
  title string
  // Pull request owner
  owner github.user
  // Pull request assignees
  assignees []github.user
  // Pull request commits
  commits() []github.commit
  // Pull request reviews
  reviews() []github.review
  // Pull request organization
  organizationName string
  // Pull request repository name
  repoName string
}

// GitHub Repository Review
private github.review @defaults("url state") {
  // Review url
  url string
  // Review state
  state string
  // Author association 
  authorAssociation string
  // Review user information
  user github.user
}

// GitHub App Installation
private github.installation @defaults("id appId") {
  // Application installation ID
  id int
  // Application configured id
  appId int
  // Application configured slug
  appSlug string
  // Application installation create time
  createdAt time
  // Application installation update time
  updatedAt time
}
