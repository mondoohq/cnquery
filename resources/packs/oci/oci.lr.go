// Code generated by resources. DO NOT EDIT.
package oci

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("oci", newOci)
	registry.AddFactory("oci.tenancy", newOciTenancy)
	registry.AddFactory("oci.region", newOciRegion)
	registry.AddFactory("oci.compartment", newOciCompartment)
	registry.AddFactory("oci.identity", newOciIdentity)
	registry.AddFactory("oci.identity.user", newOciIdentityUser)
	registry.AddFactory("oci.identity.apiKey", newOciIdentityApiKey)
	registry.AddFactory("oci.identity.customerSecretKey", newOciIdentityCustomerSecretKey)
	registry.AddFactory("oci.identity.authToken", newOciIdentityAuthToken)
	registry.AddFactory("oci.identity.group", newOciIdentityGroup)
	registry.AddFactory("oci.identity.policy", newOciIdentityPolicy)
	registry.AddFactory("oci.compute", newOciCompute)
	registry.AddFactory("oci.compute.instance", newOciComputeInstance)
	registry.AddFactory("oci.compute.image", newOciComputeImage)
	registry.AddFactory("oci.network", newOciNetwork)
	registry.AddFactory("oci.network.vcn", newOciNetworkVcn)
	registry.AddFactory("oci.network.securityList", newOciNetworkSecurityList)
	registry.AddFactory("oci.objectStorage", newOciObjectStorage)
	registry.AddFactory("oci.objectStorage.bucket", newOciObjectStorageBucket)
}

// Oci resource interface
type Oci interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Regions() ([]interface{}, error)
	Compartments() ([]interface{}, error)
}

// mqlOci for the oci resource
type mqlOci struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOci) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci resource
func newOci(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOci{runtime.NewResource("oci")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "regions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci\", its \"regions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "compartments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci\", its \"compartments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOci) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOci) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci].Register")
	switch name {
	case "regions":
		return nil
	case "compartments":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOci) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci].Field")
	switch name {
	case "regions":
		return s.Regions()
	case "compartments":
		return s.Compartments()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci\" resource")
	}
}

// Regions accessor autogenerated
func (s *mqlOci) Regions() ([]interface{}, error) {
	res, ok := s.Cache.Load("regions")
	if !ok || !res.Valid {
		if err := s.ComputeRegions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("regions")
		if !ok {
			return nil, errors.New("\"oci\" calculated \"regions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "regions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci\" failed to cast field \"regions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compartments accessor autogenerated
func (s *mqlOci) Compartments() ([]interface{}, error) {
	res, ok := s.Cache.Load("compartments")
	if !ok || !res.Valid {
		if err := s.ComputeCompartments(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("compartments")
		if !ok {
			return nil, errors.New("\"oci\" calculated \"compartments\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "compartments")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci\" failed to cast field \"compartments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOci) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci].MqlCompute")
	switch name {
	case "regions":
		return s.ComputeRegions()
	case "compartments":
		return s.ComputeCompartments()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci\" resource")
	}
}

// ComputeRegions computer autogenerated
func (s *mqlOci) ComputeRegions() error {
	var err error
	if _, ok := s.Cache.Load("regions"); ok {
		return nil
	}
	vres, err := s.GetRegions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("regions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCompartments computer autogenerated
func (s *mqlOci) ComputeCompartments() error {
	var err error
	if _, ok := s.Cache.Load("compartments"); ok {
		return nil
	}
	vres, err := s.GetCompartments()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("compartments", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciTenancy resource interface
type OciTenancy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	RetentionPeriod() (*time.Time, error)
}

// mqlOciTenancy for the oci.tenancy resource
type mqlOciTenancy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciTenancy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.tenancy resource
func newOciTenancy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciTenancy{runtime.NewResource("oci.tenancy")}
	var existing OciTenancy
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.tenancy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.tenancy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.tenancy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "retentionPeriod":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.tenancy\", its \"retentionPeriod\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.tenancy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.tenancy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciTenancy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.tenancy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.tenancy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.tenancy\" resource without a \"description\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciTenancy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.tenancy].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "retentionPeriod":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.tenancy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciTenancy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.tenancy].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "retentionPeriod":
		return s.RetentionPeriod()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.tenancy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciTenancy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.tenancy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.tenancy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciTenancy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.tenancy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.tenancy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciTenancy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.tenancy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.tenancy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RetentionPeriod accessor autogenerated
func (s *mqlOciTenancy) RetentionPeriod() (*time.Time, error) {
	res, ok := s.Cache.Load("retentionPeriod")
	if !ok || !res.Valid {
		if err := s.ComputeRetentionPeriod(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("retentionPeriod")
		if !ok {
			return nil, errors.New("\"oci.tenancy\" calculated \"retentionPeriod\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "retentionPeriod")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.tenancy\" failed to cast field \"retentionPeriod\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciTenancy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.tenancy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "retentionPeriod":
		return s.ComputeRetentionPeriod()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.tenancy\" resource")
	}
}

// ComputeRetentionPeriod computer autogenerated
func (s *mqlOciTenancy) ComputeRetentionPeriod() error {
	var err error
	if _, ok := s.Cache.Load("retentionPeriod"); ok {
		return nil
	}
	vres, err := s.GetRetentionPeriod()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("retentionPeriod", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciRegion resource interface
type OciRegion interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	IsHomeRegion() (bool, error)
	Status() (string, error)
}

// mqlOciRegion for the oci.region resource
type mqlOciRegion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciRegion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.region resource
func newOciRegion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciRegion{runtime.NewResource("oci.region")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.region\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.region\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isHomeRegion":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"oci.region\", its \"isHomeRegion\" argument has the wrong type (expected type \"bool\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.region\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.region\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.region with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciRegion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.region\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.region\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isHomeRegion"); !ok {
		return errors.New("Initialized \"oci.region\" resource without a \"isHomeRegion\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"oci.region\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciRegion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.region].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "isHomeRegion":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.region\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciRegion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.region].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "isHomeRegion":
		return s.IsHomeRegion()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.region\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciRegion) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.region\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.region\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciRegion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.region\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.region\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsHomeRegion accessor autogenerated
func (s *mqlOciRegion) IsHomeRegion() (bool, error) {
	res, ok := s.Cache.Load("isHomeRegion")
	if !ok || !res.Valid {
		return false, errors.New("\"oci.region\" failed: no value provided for static field \"isHomeRegion\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"oci.region\" failed to cast field \"isHomeRegion\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOciRegion) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.region\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.region\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciRegion) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.region].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "isHomeRegion":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.region\" resource")
	}
}

// OciCompartment resource interface
type OciCompartment interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciCompartment for the oci.compartment resource
type mqlOciCompartment struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciCompartment) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.compartment resource
func newOciCompartment(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciCompartment{runtime.NewResource("oci.compartment")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.compartment\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.compartment with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciCompartment) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.compartment\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.compartment\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.compartment\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.compartment\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.compartment\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciCompartment) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compartment].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compartment\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciCompartment) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.compartment].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.compartment\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciCompartment) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compartment\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compartment\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciCompartment) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compartment\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compartment\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciCompartment) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compartment\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compartment\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciCompartment) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.compartment\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.compartment\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciCompartment) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compartment\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compartment\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciCompartment) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compartment].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compartment\" resource")
	}
}

// OciIdentity resource interface
type OciIdentity interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Policies() ([]interface{}, error)
}

// mqlOciIdentity for the oci.identity resource
type mqlOciIdentity struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentity) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity resource
func newOciIdentity(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentity{runtime.NewResource("oci.identity")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "policies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity\", its \"policies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentity) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentity) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "policies":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentity) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "policies":
		return s.Policies()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlOciIdentity) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"oci.identity\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlOciIdentity) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"oci.identity\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Policies accessor autogenerated
func (s *mqlOciIdentity) Policies() ([]interface{}, error) {
	res, ok := s.Cache.Load("policies")
	if !ok || !res.Valid {
		if err := s.ComputePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policies")
		if !ok {
			return nil, errors.New("\"oci.identity\" calculated \"policies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity\" failed to cast field \"policies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentity) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity].MqlCompute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "policies":
		return s.ComputePolicies()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlOciIdentity) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlOciIdentity) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePolicies computer autogenerated
func (s *mqlOciIdentity) ComputePolicies() error {
	var err error
	if _, ok := s.Cache.Load("policies"); ok {
		return nil
	}
	vres, err := s.GetPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciIdentityUser resource interface
type OciIdentityUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompartmentID() (string, error)
	Name() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
	MfaActivated() (bool, error)
	Email() (string, error)
	EmailVerified() (bool, error)
	Capabilities() (map[string]interface{}, error)
	LastLogin() (*time.Time, error)
	PreviousLogin() (*time.Time, error)
	ApiKeys() ([]interface{}, error)
	CustomerSecretKeys() ([]interface{}, error)
	AuthTokens() ([]interface{}, error)
	Groups() ([]interface{}, error)
}

// mqlOciIdentityUser for the oci.identity.user resource
type mqlOciIdentityUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.user resource
func newOciIdentityUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityUser{runtime.NewResource("oci.identity.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "mfaActivated":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"mfaActivated\" argument has the wrong type (expected type \"bool\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "emailVerified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"emailVerified\" argument has the wrong type (expected type \"bool\")")
			}
		case "capabilities":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"capabilities\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "lastLogin":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"lastLogin\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "previousLogin":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"previousLogin\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "apiKeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"apiKeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "customerSecretKeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"customerSecretKeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "authTokens":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"authTokens\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("mfaActivated"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"mfaActivated\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("emailVerified"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"emailVerified\". This field is required.")
	}
	if _, ok := s.Cache.Load("capabilities"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"capabilities\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastLogin"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"lastLogin\". This field is required.")
	}
	if _, ok := s.Cache.Load("previousLogin"); !ok {
		return errors.New("Initialized \"oci.identity.user\" resource without a \"previousLogin\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.user].Register")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "mfaActivated":
		return nil
	case "email":
		return nil
	case "emailVerified":
		return nil
	case "capabilities":
		return nil
	case "lastLogin":
		return nil
	case "previousLogin":
		return nil
	case "apiKeys":
		return nil
	case "customerSecretKeys":
		return nil
	case "authTokens":
		return nil
	case "groups":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "compartmentID":
		return s.CompartmentID()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	case "mfaActivated":
		return s.MfaActivated()
	case "email":
		return s.Email()
	case "emailVerified":
		return s.EmailVerified()
	case "capabilities":
		return s.Capabilities()
	case "lastLogin":
		return s.LastLogin()
	case "previousLogin":
		return s.PreviousLogin()
	case "apiKeys":
		return s.ApiKeys()
	case "customerSecretKeys":
		return s.CustomerSecretKeys()
	case "authTokens":
		return s.AuthTokens()
	case "groups":
		return s.Groups()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciIdentityUser) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciIdentityUser) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciIdentityUser) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityUser) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.user\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityUser) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MfaActivated accessor autogenerated
func (s *mqlOciIdentityUser) MfaActivated() (bool, error) {
	res, ok := s.Cache.Load("mfaActivated")
	if !ok || !res.Valid {
		return false, errors.New("\"oci.identity.user\" failed: no value provided for static field \"mfaActivated\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"oci.identity.user\" failed to cast field \"mfaActivated\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlOciIdentityUser) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.user\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.user\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EmailVerified accessor autogenerated
func (s *mqlOciIdentityUser) EmailVerified() (bool, error) {
	res, ok := s.Cache.Load("emailVerified")
	if !ok || !res.Valid {
		return false, errors.New("\"oci.identity.user\" failed: no value provided for static field \"emailVerified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"oci.identity.user\" failed to cast field \"emailVerified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Capabilities accessor autogenerated
func (s *mqlOciIdentityUser) Capabilities() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("capabilities")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.user\" failed: no value provided for static field \"capabilities\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"capabilities\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LastLogin accessor autogenerated
func (s *mqlOciIdentityUser) LastLogin() (*time.Time, error) {
	res, ok := s.Cache.Load("lastLogin")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.user\" failed: no value provided for static field \"lastLogin\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"lastLogin\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PreviousLogin accessor autogenerated
func (s *mqlOciIdentityUser) PreviousLogin() (*time.Time, error) {
	res, ok := s.Cache.Load("previousLogin")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.user\" failed: no value provided for static field \"previousLogin\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"previousLogin\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ApiKeys accessor autogenerated
func (s *mqlOciIdentityUser) ApiKeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("apiKeys")
	if !ok || !res.Valid {
		if err := s.ComputeApiKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apiKeys")
		if !ok {
			return nil, errors.New("\"oci.identity.user\" calculated \"apiKeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apiKeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"apiKeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// CustomerSecretKeys accessor autogenerated
func (s *mqlOciIdentityUser) CustomerSecretKeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("customerSecretKeys")
	if !ok || !res.Valid {
		if err := s.ComputeCustomerSecretKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("customerSecretKeys")
		if !ok {
			return nil, errors.New("\"oci.identity.user\" calculated \"customerSecretKeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "customerSecretKeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"customerSecretKeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AuthTokens accessor autogenerated
func (s *mqlOciIdentityUser) AuthTokens() ([]interface{}, error) {
	res, ok := s.Cache.Load("authTokens")
	if !ok || !res.Valid {
		if err := s.ComputeAuthTokens(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("authTokens")
		if !ok {
			return nil, errors.New("\"oci.identity.user\" calculated \"authTokens\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "authTokens")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"authTokens\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlOciIdentityUser) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"oci.identity.user\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.user\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.user].MqlCompute")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "mfaActivated":
		return nil
	case "email":
		return nil
	case "emailVerified":
		return nil
	case "capabilities":
		return nil
	case "lastLogin":
		return nil
	case "previousLogin":
		return nil
	case "apiKeys":
		return s.ComputeApiKeys()
	case "customerSecretKeys":
		return s.ComputeCustomerSecretKeys()
	case "authTokens":
		return s.ComputeAuthTokens()
	case "groups":
		return s.ComputeGroups()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.user\" resource")
	}
}

// ComputeApiKeys computer autogenerated
func (s *mqlOciIdentityUser) ComputeApiKeys() error {
	var err error
	if _, ok := s.Cache.Load("apiKeys"); ok {
		return nil
	}
	vres, err := s.GetApiKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apiKeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCustomerSecretKeys computer autogenerated
func (s *mqlOciIdentityUser) ComputeCustomerSecretKeys() error {
	var err error
	if _, ok := s.Cache.Load("customerSecretKeys"); ok {
		return nil
	}
	vres, err := s.GetCustomerSecretKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("customerSecretKeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAuthTokens computer autogenerated
func (s *mqlOciIdentityUser) ComputeAuthTokens() error {
	var err error
	if _, ok := s.Cache.Load("authTokens"); ok {
		return nil
	}
	vres, err := s.GetAuthTokens()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("authTokens", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlOciIdentityUser) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciIdentityApiKey resource interface
type OciIdentityApiKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Value() (string, error)
	Fingerprint() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciIdentityApiKey for the oci.identity.apiKey resource
type mqlOciIdentityApiKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityApiKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.apiKey resource
func newOciIdentityApiKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityApiKey{runtime.NewResource("oci.identity.apiKey")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.apiKey\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.apiKey with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityApiKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.apiKey\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"oci.identity.apiKey\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"oci.identity.apiKey\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.apiKey\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.apiKey\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityApiKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.apiKey].Register")
	switch name {
	case "id":
		return nil
	case "value":
		return nil
	case "fingerprint":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.apiKey\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityApiKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.apiKey].Field")
	switch name {
	case "id":
		return s.Id()
	case "value":
		return s.Value()
	case "fingerprint":
		return s.Fingerprint()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.apiKey\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityApiKey) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.apiKey\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.apiKey\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlOciIdentityApiKey) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.apiKey\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.apiKey\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlOciIdentityApiKey) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.apiKey\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.apiKey\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityApiKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.apiKey\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.apiKey\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityApiKey) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.apiKey\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.apiKey\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityApiKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.apiKey].MqlCompute")
	switch name {
	case "id":
		return nil
	case "value":
		return nil
	case "fingerprint":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.apiKey\" resource")
	}
}

// OciIdentityCustomerSecretKey resource interface
type OciIdentityCustomerSecretKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciIdentityCustomerSecretKey for the oci.identity.customerSecretKey resource
type mqlOciIdentityCustomerSecretKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityCustomerSecretKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.customerSecretKey resource
func newOciIdentityCustomerSecretKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityCustomerSecretKey{runtime.NewResource("oci.identity.customerSecretKey")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.customerSecretKey\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.customerSecretKey\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.customerSecretKey\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.customerSecretKey\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.customerSecretKey\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.customerSecretKey with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityCustomerSecretKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.customerSecretKey\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.identity.customerSecretKey\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.customerSecretKey\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.customerSecretKey\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.customerSecretKey].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.customerSecretKey\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.customerSecretKey].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.customerSecretKey\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.customerSecretKey\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.customerSecretKey\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.customerSecretKey\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.customerSecretKey\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.customerSecretKey\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.customerSecretKey\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.customerSecretKey\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.customerSecretKey\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityCustomerSecretKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.customerSecretKey].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.customerSecretKey\" resource")
	}
}

// OciIdentityAuthToken resource interface
type OciIdentityAuthToken interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	Expires() (*time.Time, error)
	State() (string, error)
}

// mqlOciIdentityAuthToken for the oci.identity.authToken resource
type mqlOciIdentityAuthToken struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityAuthToken) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.authToken resource
func newOciIdentityAuthToken(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityAuthToken{runtime.NewResource("oci.identity.authToken")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expires":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"expires\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.authToken\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.authToken with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityAuthToken) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.authToken\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.identity.authToken\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.authToken\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("expires"); !ok {
		return errors.New("Initialized \"oci.identity.authToken\" resource without a \"expires\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.authToken\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityAuthToken) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.authToken].Register")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "expires":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.authToken\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityAuthToken) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.authToken].Field")
	switch name {
	case "id":
		return s.Id()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "expires":
		return s.Expires()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.authToken\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityAuthToken) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.authToken\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.authToken\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciIdentityAuthToken) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.authToken\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.authToken\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityAuthToken) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.authToken\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.authToken\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Expires accessor autogenerated
func (s *mqlOciIdentityAuthToken) Expires() (*time.Time, error) {
	res, ok := s.Cache.Load("expires")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.authToken\" failed: no value provided for static field \"expires\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.authToken\" failed to cast field \"expires\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityAuthToken) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.authToken\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.authToken\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityAuthToken) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.authToken].MqlCompute")
	switch name {
	case "id":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "expires":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.authToken\" resource")
	}
}

// OciIdentityGroup resource interface
type OciIdentityGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompartmentID() (string, error)
	Name() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciIdentityGroup for the oci.identity.group resource
type mqlOciIdentityGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.group resource
func newOciIdentityGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityGroup{runtime.NewResource("oci.identity.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.group\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.group].Register")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "compartmentID":
		return s.CompartmentID()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciIdentityGroup) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.group\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.group\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciIdentityGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.group\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.group\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciIdentityGroup) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.group\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.group\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityGroup) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.group\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.group\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityGroup) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.group\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.group\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.group].MqlCompute")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.group\" resource")
	}
}

// OciIdentityPolicy resource interface
type OciIdentityPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompartmentID() (string, error)
	Name() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
	Statements() ([]interface{}, error)
}

// mqlOciIdentityPolicy for the oci.identity.policy resource
type mqlOciIdentityPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciIdentityPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.identity.policy resource
func newOciIdentityPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciIdentityPolicy{runtime.NewResource("oci.identity.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "statements":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"statements\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.identity.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.identity.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciIdentityPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("statements"); !ok {
		return errors.New("Initialized \"oci.identity.policy\" resource without a \"statements\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciIdentityPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.policy].Register")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "statements":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciIdentityPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.identity.policy].Field")
	switch name {
	case "id":
		return s.Id()
	case "compartmentID":
		return s.CompartmentID()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	case "statements":
		return s.Statements()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.identity.policy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciIdentityPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.policy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciIdentityPolicy) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.policy\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.policy\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciIdentityPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.policy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOciIdentityPolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.policy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.policy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciIdentityPolicy) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.policy\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.policy\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciIdentityPolicy) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.identity.policy\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.identity.policy\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Statements accessor autogenerated
func (s *mqlOciIdentityPolicy) Statements() ([]interface{}, error) {
	res, ok := s.Cache.Load("statements")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.identity.policy\" failed: no value provided for static field \"statements\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.identity.policy\" failed to cast field \"statements\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciIdentityPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.identity.policy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "statements":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.identity.policy\" resource")
	}
}

// OciCompute resource interface
type OciCompute interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
	Images() ([]interface{}, error)
}

// mqlOciCompute for the oci.compute resource
type mqlOciCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.compute resource
func newOciCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciCompute{runtime.NewResource("oci.compute")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "images":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute\", its \"images\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciCompute) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOciCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute].Register")
	switch name {
	case "instances":
		return nil
	case "images":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.compute].Field")
	switch name {
	case "instances":
		return s.Instances()
	case "images":
		return s.Images()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.compute\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlOciCompute) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"oci.compute\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.compute\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Images accessor autogenerated
func (s *mqlOciCompute) Images() ([]interface{}, error) {
	res, ok := s.Cache.Load("images")
	if !ok || !res.Valid {
		if err := s.ComputeImages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("images")
		if !ok {
			return nil, errors.New("\"oci.compute\" calculated \"images\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "images")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.compute\" failed to cast field \"images\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciCompute) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute].MqlCompute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	case "images":
		return s.ComputeImages()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlOciCompute) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeImages computer autogenerated
func (s *mqlOciCompute) ComputeImages() error {
	var err error
	if _, ok := s.Cache.Load("images"); ok {
		return nil
	}
	vres, err := s.GetImages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("images", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciComputeInstance resource interface
type OciComputeInstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Region() (OciRegion, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciComputeInstance for the oci.compute.instance resource
type mqlOciComputeInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciComputeInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.compute.instance resource
func newOciComputeInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciComputeInstance{runtime.NewResource("oci.compute.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(OciRegion); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"region\" argument has the wrong type (expected type \"OciRegion\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.compute.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciComputeInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.compute.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.compute.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"oci.compute.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.compute.instance\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.compute.instance\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciComputeInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute.instance].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciComputeInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.compute.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "region":
		return s.Region()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.compute.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciComputeInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciComputeInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlOciComputeInstance) Region() (OciRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.compute.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(OciRegion)
	if !ok {
		return nil, fmt.Errorf("\"oci.compute.instance\" failed to cast field \"region\" to the right type (OciRegion): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciComputeInstance) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.compute.instance\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.compute.instance\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciComputeInstance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciComputeInstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute.instance].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute.instance\" resource")
	}
}

// OciComputeImage resource interface
type OciComputeImage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Region() (OciRegion, error)
	Created() (*time.Time, error)
	State() (string, error)
}

// mqlOciComputeImage for the oci.compute.image resource
type mqlOciComputeImage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciComputeImage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.compute.image resource
func newOciComputeImage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciComputeImage{runtime.NewResource("oci.compute.image")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(OciRegion); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"region\" argument has the wrong type (expected type \"OciRegion\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.compute.image\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.compute.image with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciComputeImage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.compute.image\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.compute.image\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"oci.compute.image\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.compute.image\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.compute.image\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciComputeImage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute.image].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute.image\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciComputeImage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.compute.image].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "region":
		return s.Region()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.compute.image\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciComputeImage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.image\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.image\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciComputeImage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.image\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.image\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlOciComputeImage) Region() (OciRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.compute.image\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(OciRegion)
	if !ok {
		return nil, fmt.Errorf("\"oci.compute.image\" failed to cast field \"region\" to the right type (OciRegion): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciComputeImage) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.compute.image\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.compute.image\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciComputeImage) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.compute.image\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.compute.image\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciComputeImage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.compute.image].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "region":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.compute.image\" resource")
	}
}

// OciNetwork resource interface
type OciNetwork interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Vcns() ([]interface{}, error)
	SecurityLists() ([]interface{}, error)
}

// mqlOciNetwork for the oci.network resource
type mqlOciNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.network resource
func newOciNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciNetwork{runtime.NewResource("oci.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "vcns":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.network\", its \"vcns\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "securityLists":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.network\", its \"securityLists\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciNetwork) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOciNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network].Register")
	switch name {
	case "vcns":
		return nil
	case "securityLists":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.network].Field")
	switch name {
	case "vcns":
		return s.Vcns()
	case "securityLists":
		return s.SecurityLists()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.network\" resource")
	}
}

// Vcns accessor autogenerated
func (s *mqlOciNetwork) Vcns() ([]interface{}, error) {
	res, ok := s.Cache.Load("vcns")
	if !ok || !res.Valid {
		if err := s.ComputeVcns(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vcns")
		if !ok {
			return nil, errors.New("\"oci.network\" calculated \"vcns\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vcns")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.network\" failed to cast field \"vcns\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SecurityLists accessor autogenerated
func (s *mqlOciNetwork) SecurityLists() ([]interface{}, error) {
	res, ok := s.Cache.Load("securityLists")
	if !ok || !res.Valid {
		if err := s.ComputeSecurityLists(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securityLists")
		if !ok {
			return nil, errors.New("\"oci.network\" calculated \"securityLists\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securityLists")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.network\" failed to cast field \"securityLists\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciNetwork) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network].MqlCompute")
	switch name {
	case "vcns":
		return s.ComputeVcns()
	case "securityLists":
		return s.ComputeSecurityLists()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network\" resource")
	}
}

// ComputeVcns computer autogenerated
func (s *mqlOciNetwork) ComputeVcns() error {
	var err error
	if _, ok := s.Cache.Load("vcns"); ok {
		return nil
	}
	vres, err := s.GetVcns()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vcns", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurityLists computer autogenerated
func (s *mqlOciNetwork) ComputeSecurityLists() error {
	var err error
	if _, ok := s.Cache.Load("securityLists"); ok {
		return nil
	}
	vres, err := s.GetSecurityLists()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securityLists", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciNetworkVcn resource interface
type OciNetworkVcn interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompartmentID() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
	CidrBlock() (string, error)
	CidrBlocks() ([]interface{}, error)
}

// mqlOciNetworkVcn for the oci.network.vcn resource
type mqlOciNetworkVcn struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciNetworkVcn) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.network.vcn resource
func newOciNetworkVcn(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciNetworkVcn{runtime.NewResource("oci.network.vcn")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "cidrBlock":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"cidrBlock\" argument has the wrong type (expected type \"string\")")
			}
		case "cidrBlocks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"cidrBlocks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.network.vcn\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.network.vcn with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciNetworkVcn) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("cidrBlock"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"cidrBlock\". This field is required.")
	}
	if _, ok := s.Cache.Load("cidrBlocks"); !ok {
		return errors.New("Initialized \"oci.network.vcn\" resource without a \"cidrBlocks\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciNetworkVcn) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network.vcn].Register")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "cidrBlock":
		return nil
	case "cidrBlocks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network.vcn\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciNetworkVcn) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.network.vcn].Field")
	switch name {
	case "id":
		return s.Id()
	case "compartmentID":
		return s.CompartmentID()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	case "cidrBlock":
		return s.CidrBlock()
	case "cidrBlocks":
		return s.CidrBlocks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.network.vcn\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciNetworkVcn) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.vcn\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.vcn\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciNetworkVcn) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.vcn\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.vcn\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciNetworkVcn) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.vcn\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.vcn\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciNetworkVcn) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.network.vcn\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.network.vcn\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciNetworkVcn) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.vcn\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.vcn\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CidrBlock accessor autogenerated
func (s *mqlOciNetworkVcn) CidrBlock() (string, error) {
	res, ok := s.Cache.Load("cidrBlock")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.vcn\" failed: no value provided for static field \"cidrBlock\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.vcn\" failed to cast field \"cidrBlock\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CidrBlocks accessor autogenerated
func (s *mqlOciNetworkVcn) CidrBlocks() ([]interface{}, error) {
	res, ok := s.Cache.Load("cidrBlocks")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.network.vcn\" failed: no value provided for static field \"cidrBlocks\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.network.vcn\" failed to cast field \"cidrBlocks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciNetworkVcn) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network.vcn].MqlCompute")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "cidrBlock":
		return nil
	case "cidrBlocks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network.vcn\" resource")
	}
}

// OciNetworkSecurityList resource interface
type OciNetworkSecurityList interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompartmentID() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	State() (string, error)
	EgressSecurityRules() ([]interface{}, error)
	IngressSecurityRules() ([]interface{}, error)
}

// mqlOciNetworkSecurityList for the oci.network.securityList resource
type mqlOciNetworkSecurityList struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciNetworkSecurityList) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.network.securityList resource
func newOciNetworkSecurityList(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciNetworkSecurityList{runtime.NewResource("oci.network.securityList")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "egressSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"egressSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ingressSecurityRules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"ingressSecurityRules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.network.securityList\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.network.securityList with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciNetworkSecurityList) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("egressSecurityRules"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"egressSecurityRules\". This field is required.")
	}
	if _, ok := s.Cache.Load("ingressSecurityRules"); !ok {
		return errors.New("Initialized \"oci.network.securityList\" resource without a \"ingressSecurityRules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciNetworkSecurityList) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network.securityList].Register")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "egressSecurityRules":
		return nil
	case "ingressSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network.securityList\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciNetworkSecurityList) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.network.securityList].Field")
	switch name {
	case "id":
		return s.Id()
	case "compartmentID":
		return s.CompartmentID()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "state":
		return s.State()
	case "egressSecurityRules":
		return s.EgressSecurityRules()
	case "ingressSecurityRules":
		return s.IngressSecurityRules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.network.securityList\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOciNetworkSecurityList) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.securityList\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.securityList\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciNetworkSecurityList) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.securityList\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.securityList\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciNetworkSecurityList) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.securityList\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.securityList\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciNetworkSecurityList) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.network.securityList\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.network.securityList\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOciNetworkSecurityList) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.network.securityList\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.network.securityList\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EgressSecurityRules accessor autogenerated
func (s *mqlOciNetworkSecurityList) EgressSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("egressSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.network.securityList\" failed: no value provided for static field \"egressSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.network.securityList\" failed to cast field \"egressSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IngressSecurityRules accessor autogenerated
func (s *mqlOciNetworkSecurityList) IngressSecurityRules() ([]interface{}, error) {
	res, ok := s.Cache.Load("ingressSecurityRules")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.network.securityList\" failed: no value provided for static field \"ingressSecurityRules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.network.securityList\" failed to cast field \"ingressSecurityRules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciNetworkSecurityList) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.network.securityList].MqlCompute")
	switch name {
	case "id":
		return nil
	case "compartmentID":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "state":
		return nil
	case "egressSecurityRules":
		return nil
	case "ingressSecurityRules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.network.securityList\" resource")
	}
}

// OciObjectStorage resource interface
type OciObjectStorage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespace() (string, error)
	Buckets() ([]interface{}, error)
}

// mqlOciObjectStorage for the oci.objectStorage resource
type mqlOciObjectStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciObjectStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.objectStorage resource
func newOciObjectStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciObjectStorage{runtime.NewResource("oci.objectStorage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.objectStorage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciObjectStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOciObjectStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.objectStorage].Register")
	switch name {
	case "namespace":
		return nil
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.objectStorage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciObjectStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.objectStorage].Field")
	switch name {
	case "namespace":
		return s.Namespace()
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.objectStorage\" resource")
	}
}

// Namespace accessor autogenerated
func (s *mqlOciObjectStorage) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		if err := s.ComputeNamespace(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("namespace")
		if !ok {
			return "", errors.New("\"oci.objectStorage\" calculated \"namespace\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "namespace")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Buckets accessor autogenerated
func (s *mqlOciObjectStorage) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"oci.objectStorage\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"oci.objectStorage\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciObjectStorage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.objectStorage].MqlCompute")
	switch name {
	case "namespace":
		return s.ComputeNamespace()
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.objectStorage\" resource")
	}
}

// ComputeNamespace computer autogenerated
func (s *mqlOciObjectStorage) ComputeNamespace() error {
	var err error
	if _, ok := s.Cache.Load("namespace"); ok {
		return nil
	}
	vres, err := s.GetNamespace()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("namespace", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeBuckets computer autogenerated
func (s *mqlOciObjectStorage) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OciObjectStorageBucket resource interface
type OciObjectStorageBucket interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Namespace() (string, error)
	Name() (string, error)
	CompartmentID() (string, error)
	Created() (*time.Time, error)
	Region() (OciRegion, error)
	PublicAccessType() (string, error)
	StorageTier() (string, error)
	AutoTiering() (string, error)
	Versioning() (string, error)
	ObjectEventsEnabled() (bool, error)
	ReplicationEnabled() (bool, error)
}

// mqlOciObjectStorageBucket for the oci.objectStorage.bucket resource
type mqlOciObjectStorageBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOciObjectStorageBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the oci.objectStorage.bucket resource
func newOciObjectStorageBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOciObjectStorageBucket{runtime.NewResource("oci.objectStorage.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "compartmentID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"compartmentID\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "region":
			if _, ok := val.(OciRegion); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"region\" argument has the wrong type (expected type \"OciRegion\")")
			}
		case "publicAccessType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"publicAccessType\" argument has the wrong type (expected type \"string\")")
			}
		case "storageTier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"storageTier\" argument has the wrong type (expected type \"string\")")
			}
		case "autoTiering":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"autoTiering\" argument has the wrong type (expected type \"string\")")
			}
		case "versioning":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"versioning\" argument has the wrong type (expected type \"string\")")
			}
		case "objectEventsEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"objectEventsEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "replicationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"replicationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"oci.objectStorage.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized oci.objectStorage.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOciObjectStorageBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"oci.objectStorage.bucket\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"oci.objectStorage.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("compartmentID"); !ok {
		return errors.New("Initialized \"oci.objectStorage.bucket\" resource without a \"compartmentID\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"oci.objectStorage.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"oci.objectStorage.bucket\" resource without a \"region\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOciObjectStorageBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[oci.objectStorage.bucket].Register")
	switch name {
	case "namespace":
		return nil
	case "name":
		return nil
	case "compartmentID":
		return nil
	case "created":
		return nil
	case "region":
		return nil
	case "publicAccessType":
		return nil
	case "storageTier":
		return nil
	case "autoTiering":
		return nil
	case "versioning":
		return nil
	case "objectEventsEnabled":
		return nil
	case "replicationEnabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.objectStorage.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOciObjectStorageBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[oci.objectStorage.bucket].Field")
	switch name {
	case "namespace":
		return s.Namespace()
	case "name":
		return s.Name()
	case "compartmentID":
		return s.CompartmentID()
	case "created":
		return s.Created()
	case "region":
		return s.Region()
	case "publicAccessType":
		return s.PublicAccessType()
	case "storageTier":
		return s.StorageTier()
	case "autoTiering":
		return s.AutoTiering()
	case "versioning":
		return s.Versioning()
	case "objectEventsEnabled":
		return s.ObjectEventsEnabled()
	case "replicationEnabled":
		return s.ReplicationEnabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"oci.objectStorage.bucket\" resource")
	}
}

// Namespace accessor autogenerated
func (s *mqlOciObjectStorageBucket) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.objectStorage.bucket\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOciObjectStorageBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.objectStorage.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompartmentID accessor autogenerated
func (s *mqlOciObjectStorageBucket) CompartmentID() (string, error) {
	res, ok := s.Cache.Load("compartmentID")
	if !ok || !res.Valid {
		return "", errors.New("\"oci.objectStorage.bucket\" failed: no value provided for static field \"compartmentID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"compartmentID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOciObjectStorageBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.objectStorage.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlOciObjectStorageBucket) Region() (OciRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return nil, errors.New("\"oci.objectStorage.bucket\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(OciRegion)
	if !ok {
		return nil, fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"region\" to the right type (OciRegion): %#v", res)
	}
	return tres, nil
}

// PublicAccessType accessor autogenerated
func (s *mqlOciObjectStorageBucket) PublicAccessType() (string, error) {
	res, ok := s.Cache.Load("publicAccessType")
	if !ok || !res.Valid {
		if err := s.ComputePublicAccessType(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("publicAccessType")
		if !ok {
			return "", errors.New("\"oci.objectStorage.bucket\" calculated \"publicAccessType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "publicAccessType")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"publicAccessType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageTier accessor autogenerated
func (s *mqlOciObjectStorageBucket) StorageTier() (string, error) {
	res, ok := s.Cache.Load("storageTier")
	if !ok || !res.Valid {
		if err := s.ComputeStorageTier(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("storageTier")
		if !ok {
			return "", errors.New("\"oci.objectStorage.bucket\" calculated \"storageTier\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "storageTier")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"storageTier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoTiering accessor autogenerated
func (s *mqlOciObjectStorageBucket) AutoTiering() (string, error) {
	res, ok := s.Cache.Load("autoTiering")
	if !ok || !res.Valid {
		if err := s.ComputeAutoTiering(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("autoTiering")
		if !ok {
			return "", errors.New("\"oci.objectStorage.bucket\" calculated \"autoTiering\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "autoTiering")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"autoTiering\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versioning accessor autogenerated
func (s *mqlOciObjectStorageBucket) Versioning() (string, error) {
	res, ok := s.Cache.Load("versioning")
	if !ok || !res.Valid {
		if err := s.ComputeVersioning(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("versioning")
		if !ok {
			return "", errors.New("\"oci.objectStorage.bucket\" calculated \"versioning\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versioning")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"versioning\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ObjectEventsEnabled accessor autogenerated
func (s *mqlOciObjectStorageBucket) ObjectEventsEnabled() (bool, error) {
	res, ok := s.Cache.Load("objectEventsEnabled")
	if !ok || !res.Valid {
		if err := s.ComputeObjectEventsEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("objectEventsEnabled")
		if !ok {
			return false, errors.New("\"oci.objectStorage.bucket\" calculated \"objectEventsEnabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "objectEventsEnabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"objectEventsEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ReplicationEnabled accessor autogenerated
func (s *mqlOciObjectStorageBucket) ReplicationEnabled() (bool, error) {
	res, ok := s.Cache.Load("replicationEnabled")
	if !ok || !res.Valid {
		if err := s.ComputeReplicationEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("replicationEnabled")
		if !ok {
			return false, errors.New("\"oci.objectStorage.bucket\" calculated \"replicationEnabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "replicationEnabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"oci.objectStorage.bucket\" failed to cast field \"replicationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOciObjectStorageBucket) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[oci.objectStorage.bucket].MqlCompute")
	switch name {
	case "namespace":
		return nil
	case "name":
		return nil
	case "compartmentID":
		return nil
	case "created":
		return nil
	case "region":
		return nil
	case "publicAccessType":
		return s.ComputePublicAccessType()
	case "storageTier":
		return s.ComputeStorageTier()
	case "autoTiering":
		return s.ComputeAutoTiering()
	case "versioning":
		return s.ComputeVersioning()
	case "objectEventsEnabled":
		return s.ComputeObjectEventsEnabled()
	case "replicationEnabled":
		return s.ComputeReplicationEnabled()
	default:
		return errors.New("Cannot find field '" + name + "' in \"oci.objectStorage.bucket\" resource")
	}
}

// ComputePublicAccessType computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputePublicAccessType() error {
	var err error
	if _, ok := s.Cache.Load("publicAccessType"); ok {
		return nil
	}
	vres, err := s.GetPublicAccessType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("publicAccessType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStorageTier computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputeStorageTier() error {
	var err error
	if _, ok := s.Cache.Load("storageTier"); ok {
		return nil
	}
	vres, err := s.GetStorageTier()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("storageTier", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAutoTiering computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputeAutoTiering() error {
	var err error
	if _, ok := s.Cache.Load("autoTiering"); ok {
		return nil
	}
	vres, err := s.GetAutoTiering()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("autoTiering", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVersioning computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputeVersioning() error {
	var err error
	if _, ok := s.Cache.Load("versioning"); ok {
		return nil
	}
	vres, err := s.GetVersioning()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versioning", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeObjectEventsEnabled computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputeObjectEventsEnabled() error {
	var err error
	if _, ok := s.Cache.Load("objectEventsEnabled"); ok {
		return nil
	}
	vres, err := s.GetObjectEventsEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("objectEventsEnabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeReplicationEnabled computer autogenerated
func (s *mqlOciObjectStorageBucket) ComputeReplicationEnabled() error {
	var err error
	if _, ok := s.Cache.Load("replicationEnabled"); ok {
		return nil
	}
	vres, err := s.GetReplicationEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("replicationEnabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

