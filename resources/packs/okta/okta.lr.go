// Code generated by resources. DO NOT EDIT.
package okta

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("okta", newOkta)
	registry.AddFactory("okta.organization", newOktaOrganization)
	registry.AddFactory("okta.policies", newOktaPolicies)
	registry.AddFactory("okta.user", newOktaUser)
	registry.AddFactory("okta.role", newOktaRole)
	registry.AddFactory("okta.group", newOktaGroup)
	registry.AddFactory("okta.application", newOktaApplication)
	registry.AddFactory("okta.domain", newOktaDomain)
	registry.AddFactory("okta.policy", newOktaPolicy)
	registry.AddFactory("okta.policyRule", newOktaPolicyRule)
	registry.AddFactory("okta.trustedOrigin", newOktaTrustedOrigin)
}

// Okta resource interface
type Okta interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Users() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Applications() ([]interface{}, error)
	TrustedOrigins() ([]interface{}, error)
}

// mqlOkta for the okta resource
type mqlOkta struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOkta) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta resource
func newOkta(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOkta{runtime.NewResource("okta")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "applications":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"applications\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "trustedOrigins":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"trustedOrigins\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOkta) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOkta) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta].Register")
	switch name {
	case "users":
		return nil
	case "groups":
		return nil
	case "domains":
		return nil
	case "applications":
		return nil
	case "trustedOrigins":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOkta) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta].Field")
	switch name {
	case "users":
		return s.Users()
	case "groups":
		return s.Groups()
	case "domains":
		return s.Domains()
	case "applications":
		return s.Applications()
	case "trustedOrigins":
		return s.TrustedOrigins()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta\" resource")
	}
}

// Users accessor autogenerated
func (s *mqlOkta) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"okta\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlOkta) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"okta\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlOkta) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"okta\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Applications accessor autogenerated
func (s *mqlOkta) Applications() ([]interface{}, error) {
	res, ok := s.Cache.Load("applications")
	if !ok || !res.Valid {
		if err := s.ComputeApplications(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("applications")
		if !ok {
			return nil, errors.New("\"okta\" calculated \"applications\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "applications")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta\" failed to cast field \"applications\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TrustedOrigins accessor autogenerated
func (s *mqlOkta) TrustedOrigins() ([]interface{}, error) {
	res, ok := s.Cache.Load("trustedOrigins")
	if !ok || !res.Valid {
		if err := s.ComputeTrustedOrigins(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("trustedOrigins")
		if !ok {
			return nil, errors.New("\"okta\" calculated \"trustedOrigins\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "trustedOrigins")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta\" failed to cast field \"trustedOrigins\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOkta) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta].MqlCompute")
	switch name {
	case "users":
		return s.ComputeUsers()
	case "groups":
		return s.ComputeGroups()
	case "domains":
		return s.ComputeDomains()
	case "applications":
		return s.ComputeApplications()
	case "trustedOrigins":
		return s.ComputeTrustedOrigins()
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta\" resource")
	}
}

// ComputeUsers computer autogenerated
func (s *mqlOkta) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlOkta) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlOkta) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApplications computer autogenerated
func (s *mqlOkta) ComputeApplications() error {
	var err error
	if _, ok := s.Cache.Load("applications"); ok {
		return nil
	}
	vres, err := s.GetApplications()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("applications", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTrustedOrigins computer autogenerated
func (s *mqlOkta) ComputeTrustedOrigins() error {
	var err error
	if _, ok := s.Cache.Load("trustedOrigins"); ok {
		return nil
	}
	vres, err := s.GetTrustedOrigins()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("trustedOrigins", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OktaOrganization resource interface
type OktaOrganization interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CompanyName() (string, error)
	Status() (string, error)
	Subdomain() (string, error)
	Address1() (string, error)
	Address2() (string, error)
	City() (string, error)
	State() (string, error)
	PhoneNumber() (string, error)
	PostalCode() (string, error)
	Country() (string, error)
	SupportPhoneNumber() (string, error)
	Website() (string, error)
	EndUserSupportHelpURL() (string, error)
	Created() (*time.Time, error)
	LastUpdated() (*time.Time, error)
	ExpiresAt() (*time.Time, error)
}

// mqlOktaOrganization for the okta.organization resource
type mqlOktaOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.organization resource
func newOktaOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaOrganization{runtime.NewResource("okta.organization")}
	var existing OktaOrganization
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "companyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"companyName\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "subdomain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"subdomain\" argument has the wrong type (expected type \"string\")")
			}
		case "address1":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"address1\" argument has the wrong type (expected type \"string\")")
			}
		case "address2":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"address2\" argument has the wrong type (expected type \"string\")")
			}
		case "city":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"city\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "phoneNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"phoneNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "postalCode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"postalCode\" argument has the wrong type (expected type \"string\")")
			}
		case "country":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"country\" argument has the wrong type (expected type \"string\")")
			}
		case "supportPhoneNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"supportPhoneNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "website":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"website\" argument has the wrong type (expected type \"string\")")
			}
		case "endUserSupportHelpURL":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"endUserSupportHelpURL\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expiresAt":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"expiresAt\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("companyName"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"companyName\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("subdomain"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"subdomain\". This field is required.")
	}
	if _, ok := s.Cache.Load("address1"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"address1\". This field is required.")
	}
	if _, ok := s.Cache.Load("address2"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"address2\". This field is required.")
	}
	if _, ok := s.Cache.Load("city"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"city\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("phoneNumber"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"phoneNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("postalCode"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"postalCode\". This field is required.")
	}
	if _, ok := s.Cache.Load("country"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"country\". This field is required.")
	}
	if _, ok := s.Cache.Load("supportPhoneNumber"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"supportPhoneNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("website"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"website\". This field is required.")
	}
	if _, ok := s.Cache.Load("endUserSupportHelpURL"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"endUserSupportHelpURL\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("expiresAt"); !ok {
		return errors.New("Initialized \"okta.organization\" resource without a \"expiresAt\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.organization].Register")
	switch name {
	case "id":
		return nil
	case "companyName":
		return nil
	case "status":
		return nil
	case "subdomain":
		return nil
	case "address1":
		return nil
	case "address2":
		return nil
	case "city":
		return nil
	case "state":
		return nil
	case "phoneNumber":
		return nil
	case "postalCode":
		return nil
	case "country":
		return nil
	case "supportPhoneNumber":
		return nil
	case "website":
		return nil
	case "endUserSupportHelpURL":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "expiresAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "companyName":
		return s.CompanyName()
	case "status":
		return s.Status()
	case "subdomain":
		return s.Subdomain()
	case "address1":
		return s.Address1()
	case "address2":
		return s.Address2()
	case "city":
		return s.City()
	case "state":
		return s.State()
	case "phoneNumber":
		return s.PhoneNumber()
	case "postalCode":
		return s.PostalCode()
	case "country":
		return s.Country()
	case "supportPhoneNumber":
		return s.SupportPhoneNumber()
	case "website":
		return s.Website()
	case "endUserSupportHelpURL":
		return s.EndUserSupportHelpURL()
	case "created":
		return s.Created()
	case "lastUpdated":
		return s.LastUpdated()
	case "expiresAt":
		return s.ExpiresAt()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CompanyName accessor autogenerated
func (s *mqlOktaOrganization) CompanyName() (string, error) {
	res, ok := s.Cache.Load("companyName")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"companyName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"companyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaOrganization) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Subdomain accessor autogenerated
func (s *mqlOktaOrganization) Subdomain() (string, error) {
	res, ok := s.Cache.Load("subdomain")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"subdomain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"subdomain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Address1 accessor autogenerated
func (s *mqlOktaOrganization) Address1() (string, error) {
	res, ok := s.Cache.Load("address1")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"address1\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"address1\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Address2 accessor autogenerated
func (s *mqlOktaOrganization) Address2() (string, error) {
	res, ok := s.Cache.Load("address2")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"address2\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"address2\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// City accessor autogenerated
func (s *mqlOktaOrganization) City() (string, error) {
	res, ok := s.Cache.Load("city")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"city\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"city\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlOktaOrganization) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PhoneNumber accessor autogenerated
func (s *mqlOktaOrganization) PhoneNumber() (string, error) {
	res, ok := s.Cache.Load("phoneNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"phoneNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"phoneNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PostalCode accessor autogenerated
func (s *mqlOktaOrganization) PostalCode() (string, error) {
	res, ok := s.Cache.Load("postalCode")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"postalCode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"postalCode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Country accessor autogenerated
func (s *mqlOktaOrganization) Country() (string, error) {
	res, ok := s.Cache.Load("country")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"country\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"country\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SupportPhoneNumber accessor autogenerated
func (s *mqlOktaOrganization) SupportPhoneNumber() (string, error) {
	res, ok := s.Cache.Load("supportPhoneNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"supportPhoneNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"supportPhoneNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Website accessor autogenerated
func (s *mqlOktaOrganization) Website() (string, error) {
	res, ok := s.Cache.Load("website")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"website\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"website\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndUserSupportHelpURL accessor autogenerated
func (s *mqlOktaOrganization) EndUserSupportHelpURL() (string, error) {
	res, ok := s.Cache.Load("endUserSupportHelpURL")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.organization\" failed: no value provided for static field \"endUserSupportHelpURL\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.organization\" failed to cast field \"endUserSupportHelpURL\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaOrganization) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.organization\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.organization\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaOrganization) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.organization\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.organization\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ExpiresAt accessor autogenerated
func (s *mqlOktaOrganization) ExpiresAt() (*time.Time, error) {
	res, ok := s.Cache.Load("expiresAt")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.organization\" failed: no value provided for static field \"expiresAt\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.organization\" failed to cast field \"expiresAt\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaOrganization) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.organization].MqlCompute")
	switch name {
	case "id":
		return nil
	case "companyName":
		return nil
	case "status":
		return nil
	case "subdomain":
		return nil
	case "address1":
		return nil
	case "address2":
		return nil
	case "city":
		return nil
	case "state":
		return nil
	case "phoneNumber":
		return nil
	case "postalCode":
		return nil
	case "country":
		return nil
	case "supportPhoneNumber":
		return nil
	case "website":
		return nil
	case "endUserSupportHelpURL":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "expiresAt":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.organization\" resource")
	}
}

// OktaPolicies resource interface
type OktaPolicies interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Password() ([]interface{}, error)
	MfaEnroll() ([]interface{}, error)
	SignOn() ([]interface{}, error)
	OauthAuthorizationPolicy() ([]interface{}, error)
	IdpDiscovery() ([]interface{}, error)
	AccessPolicy() ([]interface{}, error)
	ProfileEnrollment() ([]interface{}, error)
}

// mqlOktaPolicies for the okta.policies resource
type mqlOktaPolicies struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaPolicies) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.policies resource
func newOktaPolicies(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaPolicies{runtime.NewResource("okta.policies")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "password":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"password\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mfaEnroll":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"mfaEnroll\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "signOn":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"signOn\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "oauthAuthorizationPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"oauthAuthorizationPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "idpDiscovery":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"idpDiscovery\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "accessPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"accessPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "profileEnrollment":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"profileEnrollment\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.policies\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.policies with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaPolicies) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaPolicies) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policies].Register")
	switch name {
	case "password":
		return nil
	case "mfaEnroll":
		return nil
	case "signOn":
		return nil
	case "oauthAuthorizationPolicy":
		return nil
	case "idpDiscovery":
		return nil
	case "accessPolicy":
		return nil
	case "profileEnrollment":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policies\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaPolicies) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.policies].Field")
	switch name {
	case "password":
		return s.Password()
	case "mfaEnroll":
		return s.MfaEnroll()
	case "signOn":
		return s.SignOn()
	case "oauthAuthorizationPolicy":
		return s.OauthAuthorizationPolicy()
	case "idpDiscovery":
		return s.IdpDiscovery()
	case "accessPolicy":
		return s.AccessPolicy()
	case "profileEnrollment":
		return s.ProfileEnrollment()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.policies\" resource")
	}
}

// Password accessor autogenerated
func (s *mqlOktaPolicies) Password() ([]interface{}, error) {
	res, ok := s.Cache.Load("password")
	if !ok || !res.Valid {
		if err := s.ComputePassword(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("password")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"password\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "password")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"password\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MfaEnroll accessor autogenerated
func (s *mqlOktaPolicies) MfaEnroll() ([]interface{}, error) {
	res, ok := s.Cache.Load("mfaEnroll")
	if !ok || !res.Valid {
		if err := s.ComputeMfaEnroll(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("mfaEnroll")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"mfaEnroll\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "mfaEnroll")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"mfaEnroll\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SignOn accessor autogenerated
func (s *mqlOktaPolicies) SignOn() ([]interface{}, error) {
	res, ok := s.Cache.Load("signOn")
	if !ok || !res.Valid {
		if err := s.ComputeSignOn(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("signOn")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"signOn\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "signOn")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"signOn\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// OauthAuthorizationPolicy accessor autogenerated
func (s *mqlOktaPolicies) OauthAuthorizationPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("oauthAuthorizationPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeOauthAuthorizationPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("oauthAuthorizationPolicy")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"oauthAuthorizationPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "oauthAuthorizationPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"oauthAuthorizationPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IdpDiscovery accessor autogenerated
func (s *mqlOktaPolicies) IdpDiscovery() ([]interface{}, error) {
	res, ok := s.Cache.Load("idpDiscovery")
	if !ok || !res.Valid {
		if err := s.ComputeIdpDiscovery(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("idpDiscovery")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"idpDiscovery\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "idpDiscovery")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"idpDiscovery\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AccessPolicy accessor autogenerated
func (s *mqlOktaPolicies) AccessPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("accessPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeAccessPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("accessPolicy")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"accessPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "accessPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"accessPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ProfileEnrollment accessor autogenerated
func (s *mqlOktaPolicies) ProfileEnrollment() ([]interface{}, error) {
	res, ok := s.Cache.Load("profileEnrollment")
	if !ok || !res.Valid {
		if err := s.ComputeProfileEnrollment(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("profileEnrollment")
		if !ok {
			return nil, errors.New("\"okta.policies\" calculated \"profileEnrollment\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "profileEnrollment")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policies\" failed to cast field \"profileEnrollment\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaPolicies) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policies].MqlCompute")
	switch name {
	case "password":
		return s.ComputePassword()
	case "mfaEnroll":
		return s.ComputeMfaEnroll()
	case "signOn":
		return s.ComputeSignOn()
	case "oauthAuthorizationPolicy":
		return s.ComputeOauthAuthorizationPolicy()
	case "idpDiscovery":
		return s.ComputeIdpDiscovery()
	case "accessPolicy":
		return s.ComputeAccessPolicy()
	case "profileEnrollment":
		return s.ComputeProfileEnrollment()
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policies\" resource")
	}
}

// ComputePassword computer autogenerated
func (s *mqlOktaPolicies) ComputePassword() error {
	var err error
	if _, ok := s.Cache.Load("password"); ok {
		return nil
	}
	vres, err := s.GetPassword()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("password", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMfaEnroll computer autogenerated
func (s *mqlOktaPolicies) ComputeMfaEnroll() error {
	var err error
	if _, ok := s.Cache.Load("mfaEnroll"); ok {
		return nil
	}
	vres, err := s.GetMfaEnroll()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("mfaEnroll", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSignOn computer autogenerated
func (s *mqlOktaPolicies) ComputeSignOn() error {
	var err error
	if _, ok := s.Cache.Load("signOn"); ok {
		return nil
	}
	vres, err := s.GetSignOn()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("signOn", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeOauthAuthorizationPolicy computer autogenerated
func (s *mqlOktaPolicies) ComputeOauthAuthorizationPolicy() error {
	var err error
	if _, ok := s.Cache.Load("oauthAuthorizationPolicy"); ok {
		return nil
	}
	vres, err := s.GetOauthAuthorizationPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("oauthAuthorizationPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIdpDiscovery computer autogenerated
func (s *mqlOktaPolicies) ComputeIdpDiscovery() error {
	var err error
	if _, ok := s.Cache.Load("idpDiscovery"); ok {
		return nil
	}
	vres, err := s.GetIdpDiscovery()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("idpDiscovery", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAccessPolicy computer autogenerated
func (s *mqlOktaPolicies) ComputeAccessPolicy() error {
	var err error
	if _, ok := s.Cache.Load("accessPolicy"); ok {
		return nil
	}
	vres, err := s.GetAccessPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("accessPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProfileEnrollment computer autogenerated
func (s *mqlOktaPolicies) ComputeProfileEnrollment() error {
	var err error
	if _, ok := s.Cache.Load("profileEnrollment"); ok {
		return nil
	}
	vres, err := s.GetProfileEnrollment()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("profileEnrollment", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OktaUser resource interface
type OktaUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	TypeId() (string, error)
	Type() (interface{}, error)
	Credentials() (interface{}, error)
	Activated() (*time.Time, error)
	Created() (*time.Time, error)
	LastLogin() (*time.Time, error)
	LastUpdated() (*time.Time, error)
	PasswordChanged() (*time.Time, error)
	Profile() (interface{}, error)
	Status() (string, error)
	StatusChanged() (*time.Time, error)
	TransitioningToStatus() (string, error)
	Roles() ([]interface{}, error)
}

// mqlOktaUser for the okta.user resource
type mqlOktaUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.user resource
func newOktaUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaUser{runtime.NewResource("okta.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "typeId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"typeId\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"type\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "credentials":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"credentials\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "activated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"activated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastLogin":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"lastLogin\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "passwordChanged":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"passwordChanged\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "profile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"profile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusChanged":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"statusChanged\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "transitioningToStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"transitioningToStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("typeId"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"typeId\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("credentials"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"credentials\". This field is required.")
	}
	if _, ok := s.Cache.Load("activated"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"activated\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastLogin"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"lastLogin\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordChanged"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"passwordChanged\". This field is required.")
	}
	if _, ok := s.Cache.Load("profile"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"profile\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusChanged"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"statusChanged\". This field is required.")
	}
	if _, ok := s.Cache.Load("transitioningToStatus"); !ok {
		return errors.New("Initialized \"okta.user\" resource without a \"transitioningToStatus\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.user].Register")
	switch name {
	case "id":
		return nil
	case "typeId":
		return nil
	case "type":
		return nil
	case "credentials":
		return nil
	case "activated":
		return nil
	case "created":
		return nil
	case "lastLogin":
		return nil
	case "lastUpdated":
		return nil
	case "passwordChanged":
		return nil
	case "profile":
		return nil
	case "status":
		return nil
	case "statusChanged":
		return nil
	case "transitioningToStatus":
		return nil
	case "roles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "typeId":
		return s.TypeId()
	case "type":
		return s.Type()
	case "credentials":
		return s.Credentials()
	case "activated":
		return s.Activated()
	case "created":
		return s.Created()
	case "lastLogin":
		return s.LastLogin()
	case "lastUpdated":
		return s.LastUpdated()
	case "passwordChanged":
		return s.PasswordChanged()
	case "profile":
		return s.Profile()
	case "status":
		return s.Status()
	case "statusChanged":
		return s.StatusChanged()
	case "transitioningToStatus":
		return s.TransitioningToStatus()
	case "roles":
		return s.Roles()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TypeId accessor autogenerated
func (s *mqlOktaUser) TypeId() (string, error) {
	res, ok := s.Cache.Load("typeId")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.user\" failed: no value provided for static field \"typeId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.user\" failed to cast field \"typeId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlOktaUser) Type() (interface{}, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"type\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Credentials accessor autogenerated
func (s *mqlOktaUser) Credentials() (interface{}, error) {
	res, ok := s.Cache.Load("credentials")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"credentials\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"credentials\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Activated accessor autogenerated
func (s *mqlOktaUser) Activated() (*time.Time, error) {
	res, ok := s.Cache.Load("activated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"activated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"activated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaUser) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastLogin accessor autogenerated
func (s *mqlOktaUser) LastLogin() (*time.Time, error) {
	res, ok := s.Cache.Load("lastLogin")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"lastLogin\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"lastLogin\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaUser) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// PasswordChanged accessor autogenerated
func (s *mqlOktaUser) PasswordChanged() (*time.Time, error) {
	res, ok := s.Cache.Load("passwordChanged")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"passwordChanged\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"passwordChanged\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Profile accessor autogenerated
func (s *mqlOktaUser) Profile() (interface{}, error) {
	res, ok := s.Cache.Load("profile")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"profile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"profile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaUser) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.user\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.user\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusChanged accessor autogenerated
func (s *mqlOktaUser) StatusChanged() (*time.Time, error) {
	res, ok := s.Cache.Load("statusChanged")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.user\" failed: no value provided for static field \"statusChanged\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"statusChanged\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// TransitioningToStatus accessor autogenerated
func (s *mqlOktaUser) TransitioningToStatus() (string, error) {
	res, ok := s.Cache.Load("transitioningToStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.user\" failed: no value provided for static field \"transitioningToStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.user\" failed to cast field \"transitioningToStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlOktaUser) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"okta.user\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.user\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.user].MqlCompute")
	switch name {
	case "id":
		return nil
	case "typeId":
		return nil
	case "type":
		return nil
	case "credentials":
		return nil
	case "activated":
		return nil
	case "created":
		return nil
	case "lastLogin":
		return nil
	case "lastUpdated":
		return nil
	case "passwordChanged":
		return nil
	case "profile":
		return nil
	case "status":
		return nil
	case "statusChanged":
		return nil
	case "transitioningToStatus":
		return nil
	case "roles":
		return s.ComputeRoles()
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.user\" resource")
	}
}

// ComputeRoles computer autogenerated
func (s *mqlOktaUser) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OktaRole resource interface
type OktaRole interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AssignmentType() (string, error)
	Created() (*time.Time, error)
	Label() (string, error)
	LastUpdated() (*time.Time, error)
	Status() (string, error)
	Type() (string, error)
}

// mqlOktaRole for the okta.role resource
type mqlOktaRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.role resource
func newOktaRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaRole{runtime.NewResource("okta.role")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "assignmentType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"assignmentType\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "label":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"label\" argument has the wrong type (expected type \"string\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("assignmentType"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"assignmentType\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("label"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"label\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"okta.role\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.role].Register")
	switch name {
	case "id":
		return nil
	case "assignmentType":
		return nil
	case "created":
		return nil
	case "label":
		return nil
	case "lastUpdated":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.role].Field")
	switch name {
	case "id":
		return s.Id()
	case "assignmentType":
		return s.AssignmentType()
	case "created":
		return s.Created()
	case "label":
		return s.Label()
	case "lastUpdated":
		return s.LastUpdated()
	case "status":
		return s.Status()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.role\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaRole) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.role\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.role\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AssignmentType accessor autogenerated
func (s *mqlOktaRole) AssignmentType() (string, error) {
	res, ok := s.Cache.Load("assignmentType")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.role\" failed: no value provided for static field \"assignmentType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.role\" failed to cast field \"assignmentType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaRole) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.role\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.role\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Label accessor autogenerated
func (s *mqlOktaRole) Label() (string, error) {
	res, ok := s.Cache.Load("label")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.role\" failed: no value provided for static field \"label\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.role\" failed to cast field \"label\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaRole) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.role\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.role\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaRole) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.role\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.role\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlOktaRole) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.role\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.role\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaRole) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.role].MqlCompute")
	switch name {
	case "id":
		return nil
	case "assignmentType":
		return nil
	case "created":
		return nil
	case "label":
		return nil
	case "lastUpdated":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.role\" resource")
	}
}

// OktaGroup resource interface
type OktaGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Type() (interface{}, error)
	Created() (*time.Time, error)
	LastMembershipUpdated() (*time.Time, error)
	LastUpdated() (*time.Time, error)
	Profile() (interface{}, error)
}

// mqlOktaGroup for the okta.group resource
type mqlOktaGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.group resource
func newOktaGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaGroup{runtime.NewResource("okta.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"type\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastMembershipUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"lastMembershipUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "profile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"profile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastMembershipUpdated"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"lastMembershipUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("profile"); !ok {
		return errors.New("Initialized \"okta.group\" resource without a \"profile\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.group].Register")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "created":
		return nil
	case "lastMembershipUpdated":
		return nil
	case "lastUpdated":
		return nil
	case "profile":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "type":
		return s.Type()
	case "created":
		return s.Created()
	case "lastMembershipUpdated":
		return s.LastMembershipUpdated()
	case "lastUpdated":
		return s.LastUpdated()
	case "profile":
		return s.Profile()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlOktaGroup) Type() (interface{}, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.group\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.group\" failed to cast field \"type\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaGroup) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.group\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.group\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastMembershipUpdated accessor autogenerated
func (s *mqlOktaGroup) LastMembershipUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastMembershipUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.group\" failed: no value provided for static field \"lastMembershipUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.group\" failed to cast field \"lastMembershipUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaGroup) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.group\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.group\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Profile accessor autogenerated
func (s *mqlOktaGroup) Profile() (interface{}, error) {
	res, ok := s.Cache.Load("profile")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.group\" failed: no value provided for static field \"profile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.group\" failed to cast field \"profile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.group].MqlCompute")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	case "created":
		return nil
	case "lastMembershipUpdated":
		return nil
	case "lastUpdated":
		return nil
	case "profile":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.group\" resource")
	}
}

// OktaApplication resource interface
type OktaApplication interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Label() (string, error)
	Created() (*time.Time, error)
	LastUpdated() (*time.Time, error)
	Credentials() (interface{}, error)
	Features() ([]interface{}, error)
	Licensing() (interface{}, error)
	Profile() (interface{}, error)
	Settings() (interface{}, error)
	SignOnMode() (string, error)
	Status() (string, error)
	Visibility() (interface{}, error)
}

// mqlOktaApplication for the okta.application resource
type mqlOktaApplication struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaApplication) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.application resource
func newOktaApplication(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaApplication{runtime.NewResource("okta.application")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "label":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"label\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "credentials":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"credentials\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "features":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"features\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "licensing":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"licensing\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "profile":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"profile\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "signOnMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"signOnMode\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "visibility":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"visibility\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.application\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.application with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaApplication) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("label"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"label\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("credentials"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"credentials\". This field is required.")
	}
	if _, ok := s.Cache.Load("features"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"features\". This field is required.")
	}
	if _, ok := s.Cache.Load("licensing"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"licensing\". This field is required.")
	}
	if _, ok := s.Cache.Load("profile"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"profile\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"settings\". This field is required.")
	}
	if _, ok := s.Cache.Load("signOnMode"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"signOnMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("visibility"); !ok {
		return errors.New("Initialized \"okta.application\" resource without a \"visibility\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaApplication) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.application].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "label":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "credentials":
		return nil
	case "features":
		return nil
	case "licensing":
		return nil
	case "profile":
		return nil
	case "settings":
		return nil
	case "signOnMode":
		return nil
	case "status":
		return nil
	case "visibility":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.application\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaApplication) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.application].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "label":
		return s.Label()
	case "created":
		return s.Created()
	case "lastUpdated":
		return s.LastUpdated()
	case "credentials":
		return s.Credentials()
	case "features":
		return s.Features()
	case "licensing":
		return s.Licensing()
	case "profile":
		return s.Profile()
	case "settings":
		return s.Settings()
	case "signOnMode":
		return s.SignOnMode()
	case "status":
		return s.Status()
	case "visibility":
		return s.Visibility()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.application\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaApplication) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.application\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.application\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOktaApplication) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.application\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.application\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Label accessor autogenerated
func (s *mqlOktaApplication) Label() (string, error) {
	res, ok := s.Cache.Load("label")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.application\" failed: no value provided for static field \"label\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.application\" failed to cast field \"label\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaApplication) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaApplication) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Credentials accessor autogenerated
func (s *mqlOktaApplication) Credentials() (interface{}, error) {
	res, ok := s.Cache.Load("credentials")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"credentials\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"credentials\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Features accessor autogenerated
func (s *mqlOktaApplication) Features() ([]interface{}, error) {
	res, ok := s.Cache.Load("features")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"features\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"features\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Licensing accessor autogenerated
func (s *mqlOktaApplication) Licensing() (interface{}, error) {
	res, ok := s.Cache.Load("licensing")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"licensing\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"licensing\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Profile accessor autogenerated
func (s *mqlOktaApplication) Profile() (interface{}, error) {
	res, ok := s.Cache.Load("profile")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"profile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"profile\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlOktaApplication) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SignOnMode accessor autogenerated
func (s *mqlOktaApplication) SignOnMode() (string, error) {
	res, ok := s.Cache.Load("signOnMode")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.application\" failed: no value provided for static field \"signOnMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.application\" failed to cast field \"signOnMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaApplication) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.application\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.application\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Visibility accessor autogenerated
func (s *mqlOktaApplication) Visibility() (interface{}, error) {
	res, ok := s.Cache.Load("visibility")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.application\" failed: no value provided for static field \"visibility\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.application\" failed to cast field \"visibility\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaApplication) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.application].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "label":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "credentials":
		return nil
	case "features":
		return nil
	case "licensing":
		return nil
	case "profile":
		return nil
	case "settings":
		return nil
	case "signOnMode":
		return nil
	case "status":
		return nil
	case "visibility":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.application\" resource")
	}
}

// OktaDomain resource interface
type OktaDomain interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Domain() (string, error)
	ValidationStatus() (string, error)
	DnsRecords() ([]interface{}, error)
	PublicCertificate() (interface{}, error)
}

// mqlOktaDomain for the okta.domain resource
type mqlOktaDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.domain resource
func newOktaDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaDomain{runtime.NewResource("okta.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "domain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"domain\" argument has the wrong type (expected type \"string\")")
			}
		case "validationStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"validationStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "dnsRecords":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"dnsRecords\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "publicCertificate":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"publicCertificate\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.domain\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("domain"); !ok {
		return errors.New("Initialized \"okta.domain\" resource without a \"domain\". This field is required.")
	}
	if _, ok := s.Cache.Load("validationStatus"); !ok {
		return errors.New("Initialized \"okta.domain\" resource without a \"validationStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("dnsRecords"); !ok {
		return errors.New("Initialized \"okta.domain\" resource without a \"dnsRecords\". This field is required.")
	}
	if _, ok := s.Cache.Load("publicCertificate"); !ok {
		return errors.New("Initialized \"okta.domain\" resource without a \"publicCertificate\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.domain].Register")
	switch name {
	case "id":
		return nil
	case "domain":
		return nil
	case "validationStatus":
		return nil
	case "dnsRecords":
		return nil
	case "publicCertificate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.domain].Field")
	switch name {
	case "id":
		return s.Id()
	case "domain":
		return s.Domain()
	case "validationStatus":
		return s.ValidationStatus()
	case "dnsRecords":
		return s.DnsRecords()
	case "publicCertificate":
		return s.PublicCertificate()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.domain\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaDomain) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.domain\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.domain\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Domain accessor autogenerated
func (s *mqlOktaDomain) Domain() (string, error) {
	res, ok := s.Cache.Load("domain")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.domain\" failed: no value provided for static field \"domain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.domain\" failed to cast field \"domain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ValidationStatus accessor autogenerated
func (s *mqlOktaDomain) ValidationStatus() (string, error) {
	res, ok := s.Cache.Load("validationStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.domain\" failed: no value provided for static field \"validationStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.domain\" failed to cast field \"validationStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DnsRecords accessor autogenerated
func (s *mqlOktaDomain) DnsRecords() ([]interface{}, error) {
	res, ok := s.Cache.Load("dnsRecords")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.domain\" failed: no value provided for static field \"dnsRecords\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.domain\" failed to cast field \"dnsRecords\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PublicCertificate accessor autogenerated
func (s *mqlOktaDomain) PublicCertificate() (interface{}, error) {
	res, ok := s.Cache.Load("publicCertificate")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.domain\" failed: no value provided for static field \"publicCertificate\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.domain\" failed to cast field \"publicCertificate\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaDomain) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.domain].MqlCompute")
	switch name {
	case "id":
		return nil
	case "domain":
		return nil
	case "validationStatus":
		return nil
	case "dnsRecords":
		return nil
	case "publicCertificate":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.domain\" resource")
	}
}

// OktaPolicy resource interface
type OktaPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Priority() (int64, error)
	Status() (string, error)
	System() (bool, error)
	Type() (string, error)
	Conditions() (interface{}, error)
	Settings() (interface{}, error)
	Created() (*time.Time, error)
	LastUpdated() (*time.Time, error)
	Rules() ([]interface{}, error)
}

// mqlOktaPolicy for the okta.policy resource
type mqlOktaPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.policy resource
func newOktaPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaPolicy{runtime.NewResource("okta.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"priority\" argument has the wrong type (expected type \"int64\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "system":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"system\" argument has the wrong type (expected type \"bool\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "conditions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"conditions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("system"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"system\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("conditions"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"conditions\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"settings\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.policy\" resource without a \"lastUpdated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policy].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "status":
		return nil
	case "system":
		return nil
	case "type":
		return nil
	case "conditions":
		return nil
	case "settings":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.policy].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "priority":
		return s.Priority()
	case "status":
		return s.Status()
	case "system":
		return s.System()
	case "type":
		return s.Type()
	case "conditions":
		return s.Conditions()
	case "settings":
		return s.Settings()
	case "created":
		return s.Created()
	case "lastUpdated":
		return s.LastUpdated()
	case "rules":
		return s.Rules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.policy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOktaPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlOktaPolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlOktaPolicy) Priority() (int64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0, errors.New("\"okta.policy\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"okta.policy\" failed to cast field \"priority\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaPolicy) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policy\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policy\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// System accessor autogenerated
func (s *mqlOktaPolicy) System() (bool, error) {
	res, ok := s.Cache.Load("system")
	if !ok || !res.Valid {
		return false, errors.New("\"okta.policy\" failed: no value provided for static field \"system\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"okta.policy\" failed to cast field \"system\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlOktaPolicy) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policy\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policy\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Conditions accessor autogenerated
func (s *mqlOktaPolicy) Conditions() (interface{}, error) {
	res, ok := s.Cache.Load("conditions")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policy\" failed: no value provided for static field \"conditions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policy\" failed to cast field \"conditions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlOktaPolicy) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policy\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policy\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaPolicy) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policy\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.policy\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaPolicy) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policy\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.policy\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlOktaPolicy) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		if err := s.ComputeRules(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("rules")
		if !ok {
			return nil, errors.New("\"okta.policy\" calculated \"rules\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "rules")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policy\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "status":
		return nil
	case "system":
		return nil
	case "type":
		return nil
	case "conditions":
		return nil
	case "settings":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	case "rules":
		return s.ComputeRules()
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policy\" resource")
	}
}

// ComputeRules computer autogenerated
func (s *mqlOktaPolicy) ComputeRules() error {
	var err error
	if _, ok := s.Cache.Load("rules"); ok {
		return nil
	}
	vres, err := s.GetRules()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("rules", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// OktaPolicyRule resource interface
type OktaPolicyRule interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Priority() (int64, error)
	Status() (string, error)
	System() (bool, error)
	Type() (string, error)
	Actions() (interface{}, error)
	Conditions() (interface{}, error)
	Created() (*time.Time, error)
	LastUpdated() (*time.Time, error)
}

// mqlOktaPolicyRule for the okta.policyRule resource
type mqlOktaPolicyRule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaPolicyRule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.policyRule resource
func newOktaPolicyRule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaPolicyRule{runtime.NewResource("okta.policyRule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"priority\" argument has the wrong type (expected type \"int64\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "system":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"system\" argument has the wrong type (expected type \"bool\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "actions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"actions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "conditions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"conditions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.policyRule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.policyRule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaPolicyRule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("system"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"system\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("actions"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"actions\". This field is required.")
	}
	if _, ok := s.Cache.Load("conditions"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"conditions\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.policyRule\" resource without a \"lastUpdated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaPolicyRule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policyRule].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "priority":
		return nil
	case "status":
		return nil
	case "system":
		return nil
	case "type":
		return nil
	case "actions":
		return nil
	case "conditions":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policyRule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaPolicyRule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.policyRule].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "priority":
		return s.Priority()
	case "status":
		return s.Status()
	case "system":
		return s.System()
	case "type":
		return s.Type()
	case "actions":
		return s.Actions()
	case "conditions":
		return s.Conditions()
	case "created":
		return s.Created()
	case "lastUpdated":
		return s.LastUpdated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.policyRule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaPolicyRule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policyRule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policyRule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOktaPolicyRule) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policyRule\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policyRule\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlOktaPolicyRule) Priority() (int64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0, errors.New("\"okta.policyRule\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"okta.policyRule\" failed to cast field \"priority\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaPolicyRule) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policyRule\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policyRule\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// System accessor autogenerated
func (s *mqlOktaPolicyRule) System() (bool, error) {
	res, ok := s.Cache.Load("system")
	if !ok || !res.Valid {
		return false, errors.New("\"okta.policyRule\" failed: no value provided for static field \"system\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"okta.policyRule\" failed to cast field \"system\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlOktaPolicyRule) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.policyRule\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.policyRule\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Actions accessor autogenerated
func (s *mqlOktaPolicyRule) Actions() (interface{}, error) {
	res, ok := s.Cache.Load("actions")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policyRule\" failed: no value provided for static field \"actions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policyRule\" failed to cast field \"actions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Conditions accessor autogenerated
func (s *mqlOktaPolicyRule) Conditions() (interface{}, error) {
	res, ok := s.Cache.Load("conditions")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policyRule\" failed: no value provided for static field \"conditions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.policyRule\" failed to cast field \"conditions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaPolicyRule) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policyRule\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.policyRule\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaPolicyRule) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.policyRule\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.policyRule\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaPolicyRule) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.policyRule].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "priority":
		return nil
	case "status":
		return nil
	case "system":
		return nil
	case "type":
		return nil
	case "actions":
		return nil
	case "conditions":
		return nil
	case "created":
		return nil
	case "lastUpdated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.policyRule\" resource")
	}
}

// OktaTrustedOrigin resource interface
type OktaTrustedOrigin interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Origin() (string, error)
	Created() (*time.Time, error)
	CreatedBy() (string, error)
	LastUpdated() (*time.Time, error)
	LastUpdatedBy() (string, error)
	Scopes() ([]interface{}, error)
	Status() (string, error)
}

// mqlOktaTrustedOrigin for the okta.trustedOrigin resource
type mqlOktaTrustedOrigin struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlOktaTrustedOrigin) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the okta.trustedOrigin resource
func newOktaTrustedOrigin(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlOktaTrustedOrigin{runtime.NewResource("okta.trustedOrigin")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "origin":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"origin\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "createdBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"createdBy\" argument has the wrong type (expected type \"string\")")
			}
		case "lastUpdated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"lastUpdated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastUpdatedBy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"lastUpdatedBy\" argument has the wrong type (expected type \"string\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"okta.trustedOrigin\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized okta.trustedOrigin with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlOktaTrustedOrigin) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("origin"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"origin\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("createdBy"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"createdBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdated"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"lastUpdated\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastUpdatedBy"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"lastUpdatedBy\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"scopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"okta.trustedOrigin\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlOktaTrustedOrigin) Register(name string) error {
	log.Trace().Str("field", name).Msg("[okta.trustedOrigin].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "origin":
		return nil
	case "created":
		return nil
	case "createdBy":
		return nil
	case "lastUpdated":
		return nil
	case "lastUpdatedBy":
		return nil
	case "scopes":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.trustedOrigin\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlOktaTrustedOrigin) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[okta.trustedOrigin].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "origin":
		return s.Origin()
	case "created":
		return s.Created()
	case "createdBy":
		return s.CreatedBy()
	case "lastUpdated":
		return s.LastUpdated()
	case "lastUpdatedBy":
		return s.LastUpdatedBy()
	case "scopes":
		return s.Scopes()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"okta.trustedOrigin\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlOktaTrustedOrigin) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlOktaTrustedOrigin) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Origin accessor autogenerated
func (s *mqlOktaTrustedOrigin) Origin() (string, error) {
	res, ok := s.Cache.Load("origin")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"origin\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"origin\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlOktaTrustedOrigin) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreatedBy accessor autogenerated
func (s *mqlOktaTrustedOrigin) CreatedBy() (string, error) {
	res, ok := s.Cache.Load("createdBy")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"createdBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"createdBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastUpdated accessor autogenerated
func (s *mqlOktaTrustedOrigin) LastUpdated() (*time.Time, error) {
	res, ok := s.Cache.Load("lastUpdated")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"lastUpdated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"lastUpdated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastUpdatedBy accessor autogenerated
func (s *mqlOktaTrustedOrigin) LastUpdatedBy() (string, error) {
	res, ok := s.Cache.Load("lastUpdatedBy")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"lastUpdatedBy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"lastUpdatedBy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlOktaTrustedOrigin) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlOktaTrustedOrigin) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"okta.trustedOrigin\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"okta.trustedOrigin\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlOktaTrustedOrigin) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[okta.trustedOrigin].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "origin":
		return nil
	case "created":
		return nil
	case "createdBy":
		return nil
	case "lastUpdated":
		return nil
	case "lastUpdatedBy":
		return nil
	case "scopes":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"okta.trustedOrigin\" resource")
	}
}

