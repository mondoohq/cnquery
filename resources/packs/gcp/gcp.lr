option go_package = "go.mondoo.com/cnquery/resources/packs/gcp"

alias gcloud.organization = gcp.organization
alias gcloud.project = gcp.project
alias gcloud.resourcemanager.binding = gcp.resourcemanager.binding
alias gcloud.compute = gcp.compute
alias gcloud.compute.instance = gcp.compute.instance
alias gcloud.compute.serviceaccount = gcp.compute.serviceaccount
alias gcloud.storage = gcp.storage
alias gcloud.storage.bucket = gcp.storage.bucket
alias gcloud.sql = gcp.sql
alias gcloud.sql.instance = gcp.sql.instance

// GCP Organization
gcp.organization @defaults("id") {
  id() string
  name() string
  lifecycleState() string
  iamPolicy() []gcp.resourcemanager.binding
}

// Google Cloud Platform Project
gcp.project @defaults("id") {
  id() string
  name() string
  number() string
  lifecycleState() string
  createTime() time
  labels() map[string]string
  iamPolicy() []gcp.resourcemanager.binding
}

// GCP Resource Manager Binding
gcp.resourcemanager.binding {
  id string
  members []string
  role string
}

// GCP Compute
gcp.compute {
  // displays all Google Compute Engine instances in a project
  instances() []gcp.compute.instance
}

// GCP Compute Instances
private gcp.compute.instance @defaults("id name") {
  id string
  name string
  cpuPlatform string
  deletionProtection bool
  description string
  hostname string
  labels map[string]string
  status string
  statusMessage string
  tags []string
  metadata map[string]string
  serviceAccounts []gcp.compute.serviceaccount
}

// GCP Compute Service Account
private gcp.compute.serviceaccount @defaults("email") {
  email string
  scopes []string
}

// GCP Cloud Storage
gcp.storage {
  // List all buckets
  buckets() []gcp.storage.bucket
}

// GCP Cloud Storage Bucket
private gcp.storage.bucket @defaults("id") {
  id string
  name string
  labels map[string]string
  location string
  locationType string
  projectNumber string // TODO: project number / project id / project name
  storageClass string
  created time
  updated time
  iamPolicy() []gcp.resourcemanager.binding
  iamConfiguration dict
}

// GCP Cloud SQL
gcp.sql {
  instances() []gcp.sql.instance
}

// GCP Cloud SQL Instance
private gcp.sql.instance @defaults("name") {
  // Instance name
  name string
  // Backend type
  backendType string
  // Connection name
  connectionName string
  // Database version
  databaseVersion string
  // GCE zone
  gceZone string
  // Instance type
  instanceType string
  // Kind
  kind string
  // Current disk size
  currentDiskSize int
  // Maximum disk size
  maxDiskSize int
  // Instance state
  state string
  // Project
  project string // TODO: should this be id or name
  // Region
  region string
  // Service account email address
  serviceAccountEmailAddress string
  // Settings
  settings dict
}

