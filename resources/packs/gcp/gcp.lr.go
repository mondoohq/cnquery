// Code generated by resources. DO NOT EDIT.
package gcp

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("gcp.organization", newGcpOrganization)
	registry.AddFactory("gcp.project", newGcpProject)
	registry.AddFactory("gcp.service", newGcpService)
	registry.AddFactory("gcp.recommendation", newGcpRecommendation)
	registry.AddFactory("gcp.resourcemanager.binding", newGcpResourcemanagerBinding)
	registry.AddFactory("gcp.project.computeService", newGcpProjectComputeService)
	registry.AddFactory("gcp.project.computeService.region", newGcpProjectComputeServiceRegion)
	registry.AddFactory("gcp.project.computeService.zone", newGcpProjectComputeServiceZone)
	registry.AddFactory("gcp.project.computeService.machineType", newGcpProjectComputeServiceMachineType)
	registry.AddFactory("gcp.project.computeService.instance", newGcpProjectComputeServiceInstance)
	registry.AddFactory("gcp.project.computeService.serviceaccount", newGcpProjectComputeServiceServiceaccount)
	registry.AddFactory("gcp.project.computeService.disk", newGcpProjectComputeServiceDisk)
	registry.AddFactory("gcp.project.computeService.attachedDisk", newGcpProjectComputeServiceAttachedDisk)
	registry.AddFactory("gcp.project.computeService.snapshot", newGcpProjectComputeServiceSnapshot)
	registry.AddFactory("gcp.project.computeService.image", newGcpProjectComputeServiceImage)
	registry.AddFactory("gcp.project.computeService.firewall", newGcpProjectComputeServiceFirewall)
	registry.AddFactory("gcp.project.computeService.network", newGcpProjectComputeServiceNetwork)
	registry.AddFactory("gcp.project.computeService.subnetwork", newGcpProjectComputeServiceSubnetwork)
	registry.AddFactory("gcp.project.computeService.router", newGcpProjectComputeServiceRouter)
	registry.AddFactory("gcp.storage", newGcpStorage)
	registry.AddFactory("gcp.storage.bucket", newGcpStorageBucket)
	registry.AddFactory("gcp.project.sqlService", newGcpProjectSqlService)
	registry.AddFactory("gcp.project.sqlService.instance", newGcpProjectSqlServiceInstance)
	registry.AddFactory("gcp.project.sqlService.instance.database", newGcpProjectSqlServiceInstanceDatabase)
	registry.AddFactory("gcp.project.sqlService.instance.ipMapping", newGcpProjectSqlServiceInstanceIpMapping)
	registry.AddFactory("gcp.project.sqlService.instance.settings", newGcpProjectSqlServiceInstanceSettings)
	registry.AddFactory("gcp.project.sqlService.instance.settings.backupconfiguration", newGcpProjectSqlServiceInstanceSettingsBackupconfiguration)
	registry.AddFactory("gcp.project.sqlService.instance.settings.denyMaintenancePeriod", newGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod)
	registry.AddFactory("gcp.project.sqlService.instance.settings.ipConfiguration", newGcpProjectSqlServiceInstanceSettingsIpConfiguration)
	registry.AddFactory("gcp.project.sqlService.instance.settings.maintenanceWindow", newGcpProjectSqlServiceInstanceSettingsMaintenanceWindow)
	registry.AddFactory("gcp.project.sqlService.instance.settings.passwordValidationPolicy", newGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy)
	registry.AddFactory("gcp.bigquery", newGcpBigquery)
	registry.AddFactory("gcp.bigquery.dataset", newGcpBigqueryDataset)
	registry.AddFactory("gcp.bigquery.table", newGcpBigqueryTable)
	registry.AddFactory("gcp.bigquery.model", newGcpBigqueryModel)
	registry.AddFactory("gcp.bigquery.routine", newGcpBigqueryRoutine)
	registry.AddFactory("gcp.dns", newGcpDns)
	registry.AddFactory("gcp.dns.managedzone", newGcpDnsManagedzone)
	registry.AddFactory("gcp.dns.recordset", newGcpDnsRecordset)
	registry.AddFactory("gcp.dns.policy", newGcpDnsPolicy)
	registry.AddFactory("gcp.project.gkeService", newGcpProjectGkeService)
	registry.AddFactory("gcp.project.gkeService.cluster", newGcpProjectGkeServiceCluster)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool", newGcpProjectGkeServiceClusterNodepool)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.networkConfig", newGcpProjectGkeServiceClusterNodepoolNetworkConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig", newGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config", newGcpProjectGkeServiceClusterNodepoolConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.accelerator", newGcpProjectGkeServiceClusterNodepoolConfigAccelerator)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig", newGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.nodeTaint", newGcpProjectGkeServiceClusterNodepoolConfigNodeTaint)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig", newGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig", newGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig", newGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig", newGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig", newGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures", newGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig", newGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig)
	registry.AddFactory("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes", newGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes)
	registry.AddFactory("gcp.project.pubsubService", newGcpProjectPubsubService)
	registry.AddFactory("gcp.project.pubsubService.topic", newGcpProjectPubsubServiceTopic)
	registry.AddFactory("gcp.project.pubsubService.topic.config", newGcpProjectPubsubServiceTopicConfig)
	registry.AddFactory("gcp.project.pubsubService.topic.config.messagestoragepolicy", newGcpProjectPubsubServiceTopicConfigMessagestoragepolicy)
	registry.AddFactory("gcp.project.pubsubService.subscription", newGcpProjectPubsubServiceSubscription)
	registry.AddFactory("gcp.project.pubsubService.subscription.config", newGcpProjectPubsubServiceSubscriptionConfig)
	registry.AddFactory("gcp.project.pubsubService.subscription.config.pushconfig", newGcpProjectPubsubServiceSubscriptionConfigPushconfig)
	registry.AddFactory("gcp.project.pubsubService.snapshot", newGcpProjectPubsubServiceSnapshot)
	registry.AddFactory("gcp.project.kmsService", newGcpProjectKmsService)
	registry.AddFactory("gcp.project.kmsService.keyring", newGcpProjectKmsServiceKeyring)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey", newGcpProjectKmsServiceKeyringCryptokey)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version", newGcpProjectKmsServiceKeyringCryptokeyVersion)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.attestation", newGcpProjectKmsServiceKeyringCryptokeyVersionAttestation)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains", newGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions", newGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions)
	registry.AddFactory("gcp.essentialContact", newGcpEssentialContact)
	registry.AddFactory("gcp.project.apiKey", newGcpProjectApiKey)
	registry.AddFactory("gcp.project.apiKey.restrictions", newGcpProjectApiKeyRestrictions)
	registry.AddFactory("gcp.project.loggingservice", newGcpProjectLoggingservice)
	registry.AddFactory("gcp.project.loggingservice.bucket", newGcpProjectLoggingserviceBucket)
	registry.AddFactory("gcp.project.loggingservice.bucket.indexConfig", newGcpProjectLoggingserviceBucketIndexConfig)
	registry.AddFactory("gcp.project.iamService", newGcpProjectIamService)
	registry.AddFactory("gcp.project.iamService.serviceAccount", newGcpProjectIamServiceServiceAccount)
	registry.AddFactory("gcp.project.iamService.serviceAccount.key", newGcpProjectIamServiceServiceAccountKey)
}

// GcpOrganization resource interface
type GcpOrganization interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	LifecycleState() (string, error)
	IamPolicy() ([]interface{}, error)
}

// mqlGcpOrganization for the gcp.organization resource
type mqlGcpOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.organization resource
func newGcpOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpOrganization{runtime.NewResource("gcp.organization")}
	var existing GcpOrganization
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("lifecycleState"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"lifecycleState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "lifecycleState":
		return s.LifecycleState()
	case "iamPolicy":
		return s.IamPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpOrganization) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpOrganization) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"lifecycleState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpOrganization) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.organization\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.organization\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpOrganization) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpOrganization) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProject resource interface
type GcpProject interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Number() (string, error)
	State() (string, error)
	LifecycleState() (string, error)
	CreateTime() (*time.Time, error)
	Labels() (map[string]interface{}, error)
	IamPolicy() ([]interface{}, error)
	Services() ([]interface{}, error)
	Recommendations() ([]interface{}, error)
	Gke() (GcpProjectGkeService, error)
	Compute() (GcpProjectComputeService, error)
	Pubsub() (GcpProjectPubsubService, error)
	Kms() (GcpProjectKmsService, error)
	EssentialContacts() ([]interface{}, error)
	ApiKeys() ([]interface{}, error)
	Logging() (GcpProjectLoggingservice, error)
	Sql() (GcpProjectSqlService, error)
	Iam() (GcpProjectIamService, error)
	CommonInstanceMetadata() (map[string]interface{}, error)
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project resource
func newGcpProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProject{runtime.NewResource("gcp.project")}
	var existing GcpProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "number":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"number\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "createTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"createTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "services":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"services\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "recommendations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"recommendations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "gke":
			if _, ok := val.(GcpProjectGkeService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"gke\" argument has the wrong type (expected type \"GcpProjectGkeService\")")
			}
		case "compute":
			if _, ok := val.(GcpProjectComputeService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"compute\" argument has the wrong type (expected type \"GcpProjectComputeService\")")
			}
		case "pubsub":
			if _, ok := val.(GcpProjectPubsubService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"pubsub\" argument has the wrong type (expected type \"GcpProjectPubsubService\")")
			}
		case "kms":
			if _, ok := val.(GcpProjectKmsService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"kms\" argument has the wrong type (expected type \"GcpProjectKmsService\")")
			}
		case "essentialContacts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"essentialContacts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "apiKeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"apiKeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "logging":
			if _, ok := val.(GcpProjectLoggingservice); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"logging\" argument has the wrong type (expected type \"GcpProjectLoggingservice\")")
			}
		case "sql":
			if _, ok := val.(GcpProjectSqlService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"sql\" argument has the wrong type (expected type \"GcpProjectSqlService\")")
			}
		case "iam":
			if _, ok := val.(GcpProjectIamService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"iam\" argument has the wrong type (expected type \"GcpProjectIamService\")")
			}
		case "commonInstanceMetadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"commonInstanceMetadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProject) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "number":
		return nil
	case "state":
		return nil
	case "lifecycleState":
		return nil
	case "createTime":
		return nil
	case "labels":
		return nil
	case "iamPolicy":
		return nil
	case "services":
		return nil
	case "recommendations":
		return nil
	case "gke":
		return nil
	case "compute":
		return nil
	case "pubsub":
		return nil
	case "kms":
		return nil
	case "essentialContacts":
		return nil
	case "apiKeys":
		return nil
	case "logging":
		return nil
	case "sql":
		return nil
	case "iam":
		return nil
	case "commonInstanceMetadata":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "number":
		return s.Number()
	case "state":
		return s.State()
	case "lifecycleState":
		return s.LifecycleState()
	case "createTime":
		return s.CreateTime()
	case "labels":
		return s.Labels()
	case "iamPolicy":
		return s.IamPolicy()
	case "services":
		return s.Services()
	case "recommendations":
		return s.Recommendations()
	case "gke":
		return s.Gke()
	case "compute":
		return s.Compute()
	case "pubsub":
		return s.Pubsub()
	case "kms":
		return s.Kms()
	case "essentialContacts":
		return s.EssentialContacts()
	case "apiKeys":
		return s.ApiKeys()
	case "logging":
		return s.Logging()
	case "sql":
		return s.Sql()
	case "iam":
		return s.Iam()
	case "commonInstanceMetadata":
		return s.CommonInstanceMetadata()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProject) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProject) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Number accessor autogenerated
func (s *mqlGcpProject) Number() (string, error) {
	res, ok := s.Cache.Load("number")
	if !ok || !res.Valid {
		if err := s.ComputeNumber(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("number")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"number\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "number")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"number\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProject) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		if err := s.ComputeState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("state")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"state\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "state")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpProject) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		if err := s.ComputeLifecycleState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("lifecycleState")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"lifecycleState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "lifecycleState")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateTime accessor autogenerated
func (s *mqlGcpProject) CreateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createTime")
	if !ok || !res.Valid {
		if err := s.ComputeCreateTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createTime")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"createTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"createTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProject) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpProject) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Services accessor autogenerated
func (s *mqlGcpProject) Services() ([]interface{}, error) {
	res, ok := s.Cache.Load("services")
	if !ok || !res.Valid {
		if err := s.ComputeServices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("services")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"services\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "services")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"services\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Recommendations accessor autogenerated
func (s *mqlGcpProject) Recommendations() ([]interface{}, error) {
	res, ok := s.Cache.Load("recommendations")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendations")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"recommendations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"recommendations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Gke accessor autogenerated
func (s *mqlGcpProject) Gke() (GcpProjectGkeService, error) {
	res, ok := s.Cache.Load("gke")
	if !ok || !res.Valid {
		if err := s.ComputeGke(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("gke")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"gke\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "gke")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"gke\" to the right type (GcpProjectGkeService): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProject) Compute() (GcpProjectComputeService, error) {
	res, ok := s.Cache.Load("compute")
	if !ok || !res.Valid {
		if err := s.ComputeCompute(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("compute")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"compute\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "compute")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"compute\" to the right type (GcpProjectComputeService): %#v", res)
	}
	return tres, nil
}

// Pubsub accessor autogenerated
func (s *mqlGcpProject) Pubsub() (GcpProjectPubsubService, error) {
	res, ok := s.Cache.Load("pubsub")
	if !ok || !res.Valid {
		if err := s.ComputePubsub(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("pubsub")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"pubsub\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "pubsub")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"pubsub\" to the right type (GcpProjectPubsubService): %#v", res)
	}
	return tres, nil
}

// Kms accessor autogenerated
func (s *mqlGcpProject) Kms() (GcpProjectKmsService, error) {
	res, ok := s.Cache.Load("kms")
	if !ok || !res.Valid {
		if err := s.ComputeKms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kms")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"kms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"kms\" to the right type (GcpProjectKmsService): %#v", res)
	}
	return tres, nil
}

// EssentialContacts accessor autogenerated
func (s *mqlGcpProject) EssentialContacts() ([]interface{}, error) {
	res, ok := s.Cache.Load("essentialContacts")
	if !ok || !res.Valid {
		if err := s.ComputeEssentialContacts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("essentialContacts")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"essentialContacts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "essentialContacts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"essentialContacts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ApiKeys accessor autogenerated
func (s *mqlGcpProject) ApiKeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("apiKeys")
	if !ok || !res.Valid {
		if err := s.ComputeApiKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apiKeys")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"apiKeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apiKeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"apiKeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Logging accessor autogenerated
func (s *mqlGcpProject) Logging() (GcpProjectLoggingservice, error) {
	res, ok := s.Cache.Load("logging")
	if !ok || !res.Valid {
		if err := s.ComputeLogging(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("logging")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"logging\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "logging")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectLoggingservice)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"logging\" to the right type (GcpProjectLoggingservice): %#v", res)
	}
	return tres, nil
}

// Sql accessor autogenerated
func (s *mqlGcpProject) Sql() (GcpProjectSqlService, error) {
	res, ok := s.Cache.Load("sql")
	if !ok || !res.Valid {
		if err := s.ComputeSql(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("sql")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"sql\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "sql")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"sql\" to the right type (GcpProjectSqlService): %#v", res)
	}
	return tres, nil
}

// Iam accessor autogenerated
func (s *mqlGcpProject) Iam() (GcpProjectIamService, error) {
	res, ok := s.Cache.Load("iam")
	if !ok || !res.Valid {
		if err := s.ComputeIam(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iam")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"iam\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iam")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectIamService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"iam\" to the right type (GcpProjectIamService): %#v", res)
	}
	return tres, nil
}

// CommonInstanceMetadata accessor autogenerated
func (s *mqlGcpProject) CommonInstanceMetadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("commonInstanceMetadata")
	if !ok || !res.Valid {
		if err := s.ComputeCommonInstanceMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("commonInstanceMetadata")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"commonInstanceMetadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "commonInstanceMetadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"commonInstanceMetadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProject) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].MqlCompute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "number":
		return s.ComputeNumber()
	case "state":
		return s.ComputeState()
	case "lifecycleState":
		return s.ComputeLifecycleState()
	case "createTime":
		return s.ComputeCreateTime()
	case "labels":
		return s.ComputeLabels()
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "services":
		return s.ComputeServices()
	case "recommendations":
		return s.ComputeRecommendations()
	case "gke":
		return s.ComputeGke()
	case "compute":
		return s.ComputeCompute()
	case "pubsub":
		return s.ComputePubsub()
	case "kms":
		return s.ComputeKms()
	case "essentialContacts":
		return s.ComputeEssentialContacts()
	case "apiKeys":
		return s.ComputeApiKeys()
	case "logging":
		return s.ComputeLogging()
	case "sql":
		return s.ComputeSql()
	case "iam":
		return s.ComputeIam()
	case "commonInstanceMetadata":
		return s.ComputeCommonInstanceMetadata()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlGcpProject) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlGcpProject) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNumber computer autogenerated
func (s *mqlGcpProject) ComputeNumber() error {
	var err error
	if _, ok := s.Cache.Load("number"); ok {
		return nil
	}
	vres, err := s.GetNumber()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("number", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeState computer autogenerated
func (s *mqlGcpProject) ComputeState() error {
	var err error
	if _, ok := s.Cache.Load("state"); ok {
		return nil
	}
	vres, err := s.GetState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("state", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLifecycleState computer autogenerated
func (s *mqlGcpProject) ComputeLifecycleState() error {
	var err error
	if _, ok := s.Cache.Load("lifecycleState"); ok {
		return nil
	}
	vres, err := s.GetLifecycleState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("lifecycleState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCreateTime computer autogenerated
func (s *mqlGcpProject) ComputeCreateTime() error {
	var err error
	if _, ok := s.Cache.Load("createTime"); ok {
		return nil
	}
	vres, err := s.GetCreateTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLabels computer autogenerated
func (s *mqlGcpProject) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpProject) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServices computer autogenerated
func (s *mqlGcpProject) ComputeServices() error {
	var err error
	if _, ok := s.Cache.Load("services"); ok {
		return nil
	}
	vres, err := s.GetServices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("services", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendations computer autogenerated
func (s *mqlGcpProject) ComputeRecommendations() error {
	var err error
	if _, ok := s.Cache.Load("recommendations"); ok {
		return nil
	}
	vres, err := s.GetRecommendations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGke computer autogenerated
func (s *mqlGcpProject) ComputeGke() error {
	var err error
	if _, ok := s.Cache.Load("gke"); ok {
		return nil
	}
	vres, err := s.GetGke()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("gke", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCompute computer autogenerated
func (s *mqlGcpProject) ComputeCompute() error {
	var err error
	if _, ok := s.Cache.Load("compute"); ok {
		return nil
	}
	vres, err := s.GetCompute()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("compute", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePubsub computer autogenerated
func (s *mqlGcpProject) ComputePubsub() error {
	var err error
	if _, ok := s.Cache.Load("pubsub"); ok {
		return nil
	}
	vres, err := s.GetPubsub()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("pubsub", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKms computer autogenerated
func (s *mqlGcpProject) ComputeKms() error {
	var err error
	if _, ok := s.Cache.Load("kms"); ok {
		return nil
	}
	vres, err := s.GetKms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEssentialContacts computer autogenerated
func (s *mqlGcpProject) ComputeEssentialContacts() error {
	var err error
	if _, ok := s.Cache.Load("essentialContacts"); ok {
		return nil
	}
	vres, err := s.GetEssentialContacts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("essentialContacts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeApiKeys computer autogenerated
func (s *mqlGcpProject) ComputeApiKeys() error {
	var err error
	if _, ok := s.Cache.Load("apiKeys"); ok {
		return nil
	}
	vres, err := s.GetApiKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apiKeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLogging computer autogenerated
func (s *mqlGcpProject) ComputeLogging() error {
	var err error
	if _, ok := s.Cache.Load("logging"); ok {
		return nil
	}
	vres, err := s.GetLogging()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("logging", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSql computer autogenerated
func (s *mqlGcpProject) ComputeSql() error {
	var err error
	if _, ok := s.Cache.Load("sql"); ok {
		return nil
	}
	vres, err := s.GetSql()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("sql", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIam computer autogenerated
func (s *mqlGcpProject) ComputeIam() error {
	var err error
	if _, ok := s.Cache.Load("iam"); ok {
		return nil
	}
	vres, err := s.GetIam()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iam", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCommonInstanceMetadata computer autogenerated
func (s *mqlGcpProject) ComputeCommonInstanceMetadata() error {
	var err error
	if _, ok := s.Cache.Load("commonInstanceMetadata"); ok {
		return nil
	}
	vres, err := s.GetCommonInstanceMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("commonInstanceMetadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpService resource interface
type GcpService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	ParentName() (string, error)
	Title() (string, error)
	State() (string, error)
	Enabled() (bool, error)
}

// mqlGcpService for the gcp.service resource
type mqlGcpService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.service resource
func newGcpService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpService{runtime.NewResource("gcp.service")}
	var existing GcpService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "parentName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"parentName\" argument has the wrong type (expected type \"string\")")
			}
		case "title":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"title\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.service with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("parentName"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"parentName\". This field is required.")
	}
	if _, ok := s.Cache.Load("title"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"title\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "parentName":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.service].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "parentName":
		return s.ParentName()
	case "title":
		return s.Title()
	case "state":
		return s.State()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpService) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ParentName accessor autogenerated
func (s *mqlGcpService) ParentName() (string, error) {
	res, ok := s.Cache.Load("parentName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"parentName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"parentName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Title accessor autogenerated
func (s *mqlGcpService) Title() (string, error) {
	res, ok := s.Cache.Load("title")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"title\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"title\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpService) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpService) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		if err := s.ComputeEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("enabled")
		if !ok {
			return false, errors.New("\"gcp.service\" calculated \"enabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "enabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.service\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "parentName":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	case "enabled":
		return s.ComputeEnabled()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// ComputeEnabled computer autogenerated
func (s *mqlGcpService) ComputeEnabled() error {
	var err error
	if _, ok := s.Cache.Load("enabled"); ok {
		return nil
	}
	vres, err := s.GetEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("enabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpRecommendation resource interface
type GcpRecommendation interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	ZoneName() (string, error)
	Name() (string, error)
	Recommender() (string, error)
	PrimaryImpact() (interface{}, error)
	AdditionalImpact() ([]interface{}, error)
	Content() (interface{}, error)
	Category() (string, error)
	Priority() (string, error)
	LastRefreshTime() (*time.Time, error)
	State() (interface{}, error)
}

// mqlGcpRecommendation for the gcp.recommendation resource
type mqlGcpRecommendation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpRecommendation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.recommendation resource
func newGcpRecommendation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpRecommendation{runtime.NewResource("gcp.recommendation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"zoneName\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "recommender":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"recommender\" argument has the wrong type (expected type \"string\")")
			}
		case "primaryImpact":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"primaryImpact\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "additionalImpact":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"additionalImpact\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "content":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"content\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "category":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"category\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"priority\" argument has the wrong type (expected type \"string\")")
			}
		case "lastRefreshTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"lastRefreshTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"state\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.recommendation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpRecommendation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneName"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"zoneName\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("recommender"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"recommender\". This field is required.")
	}
	if _, ok := s.Cache.Load("primaryImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"primaryImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("additionalImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"additionalImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("content"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"content\". This field is required.")
	}
	if _, ok := s.Cache.Load("category"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"category\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastRefreshTime"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"lastRefreshTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpRecommendation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "zoneName":
		return nil
	case "name":
		return nil
	case "recommender":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpRecommendation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "zoneName":
		return s.ZoneName()
	case "name":
		return s.Name()
	case "recommender":
		return s.Recommender()
	case "primaryImpact":
		return s.PrimaryImpact()
	case "additionalImpact":
		return s.AdditionalImpact()
	case "content":
		return s.Content()
	case "category":
		return s.Category()
	case "priority":
		return s.Priority()
	case "lastRefreshTime":
		return s.LastRefreshTime()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpRecommendation) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpRecommendation) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneName accessor autogenerated
func (s *mqlGcpRecommendation) ZoneName() (string, error) {
	res, ok := s.Cache.Load("zoneName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"zoneName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"zoneName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpRecommendation) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Recommender accessor autogenerated
func (s *mqlGcpRecommendation) Recommender() (string, error) {
	res, ok := s.Cache.Load("recommender")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"recommender\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"recommender\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrimaryImpact accessor autogenerated
func (s *mqlGcpRecommendation) PrimaryImpact() (interface{}, error) {
	res, ok := s.Cache.Load("primaryImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"primaryImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"primaryImpact\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AdditionalImpact accessor autogenerated
func (s *mqlGcpRecommendation) AdditionalImpact() ([]interface{}, error) {
	res, ok := s.Cache.Load("additionalImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"additionalImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"additionalImpact\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Content accessor autogenerated
func (s *mqlGcpRecommendation) Content() (interface{}, error) {
	res, ok := s.Cache.Load("content")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"content\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"content\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Category accessor autogenerated
func (s *mqlGcpRecommendation) Category() (string, error) {
	res, ok := s.Cache.Load("category")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"category\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"category\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlGcpRecommendation) Priority() (string, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"priority\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastRefreshTime accessor autogenerated
func (s *mqlGcpRecommendation) LastRefreshTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastRefreshTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"lastRefreshTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"lastRefreshTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpRecommendation) State() (interface{}, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"state\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpRecommendation) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "zoneName":
		return nil
	case "name":
		return nil
	case "recommender":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// GcpResourcemanagerBinding resource interface
type GcpResourcemanagerBinding interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Members() ([]interface{}, error)
	Role() (string, error)
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpResourcemanagerBinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.resourcemanager.binding resource
func newGcpResourcemanagerBinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpResourcemanagerBinding{runtime.NewResource("gcp.resourcemanager.binding")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.resourcemanager.binding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpResourcemanagerBinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("members"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"members\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"role\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Register")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Field")
	switch name {
	case "id":
		return s.Id()
	case "members":
		return s.Members()
	case "role":
		return s.Role()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"members\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].MqlCompute")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// GcpProjectComputeService resource interface
type GcpProjectComputeService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Instances() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
	Disks() ([]interface{}, error)
	Images() ([]interface{}, error)
	Firewalls() ([]interface{}, error)
	Networks() ([]interface{}, error)
	Subnetworks() ([]interface{}, error)
	Routers() ([]interface{}, error)
	MachineTypes() ([]interface{}, error)
	Regions() ([]interface{}, error)
	Zones() ([]interface{}, error)
}

// mqlGcpProjectComputeService for the gcp.project.computeService resource
type mqlGcpProjectComputeService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService resource
func newGcpProjectComputeService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeService{runtime.NewResource("gcp.project.computeService")}
	var existing GcpProjectComputeService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "images":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"images\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewalls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"firewalls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"networks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "subnetworks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"subnetworks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"routers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "machineTypes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"machineTypes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "regions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"regions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.computeService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService].Register")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return nil
	case "snapshots":
		return nil
	case "disks":
		return nil
	case "images":
		return nil
	case "firewalls":
		return nil
	case "networks":
		return nil
	case "subnetworks":
		return nil
	case "routers":
		return nil
	case "machineTypes":
		return nil
	case "regions":
		return nil
	case "zones":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instances":
		return s.Instances()
	case "snapshots":
		return s.Snapshots()
	case "disks":
		return s.Disks()
	case "images":
		return s.Images()
	case "firewalls":
		return s.Firewalls()
	case "networks":
		return s.Networks()
	case "subnetworks":
		return s.Subnetworks()
	case "routers":
		return s.Routers()
	case "machineTypes":
		return s.MachineTypes()
	case "regions":
		return s.Regions()
	case "zones":
		return s.Zones()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectComputeService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlGcpProjectComputeService) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlGcpProjectComputeService) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlGcpProjectComputeService) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Images accessor autogenerated
func (s *mqlGcpProjectComputeService) Images() ([]interface{}, error) {
	res, ok := s.Cache.Load("images")
	if !ok || !res.Valid {
		if err := s.ComputeImages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("images")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"images\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "images")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"images\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Firewalls accessor autogenerated
func (s *mqlGcpProjectComputeService) Firewalls() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewalls")
	if !ok || !res.Valid {
		if err := s.ComputeFirewalls(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewalls")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"firewalls\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewalls")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"firewalls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Networks accessor autogenerated
func (s *mqlGcpProjectComputeService) Networks() ([]interface{}, error) {
	res, ok := s.Cache.Load("networks")
	if !ok || !res.Valid {
		if err := s.ComputeNetworks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("networks")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"networks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "networks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"networks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Subnetworks accessor autogenerated
func (s *mqlGcpProjectComputeService) Subnetworks() ([]interface{}, error) {
	res, ok := s.Cache.Load("subnetworks")
	if !ok || !res.Valid {
		if err := s.ComputeSubnetworks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subnetworks")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"subnetworks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subnetworks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"subnetworks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Routers accessor autogenerated
func (s *mqlGcpProjectComputeService) Routers() ([]interface{}, error) {
	res, ok := s.Cache.Load("routers")
	if !ok || !res.Valid {
		if err := s.ComputeRouters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routers")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"routers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"routers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MachineTypes accessor autogenerated
func (s *mqlGcpProjectComputeService) MachineTypes() ([]interface{}, error) {
	res, ok := s.Cache.Load("machineTypes")
	if !ok || !res.Valid {
		if err := s.ComputeMachineTypes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("machineTypes")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"machineTypes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "machineTypes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"machineTypes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Regions accessor autogenerated
func (s *mqlGcpProjectComputeService) Regions() ([]interface{}, error) {
	res, ok := s.Cache.Load("regions")
	if !ok || !res.Valid {
		if err := s.ComputeRegions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("regions")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"regions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "regions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"regions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlGcpProjectComputeService) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		if err := s.ComputeZones(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("zones")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService\" calculated \"zones\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "zones")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return s.ComputeInstances()
	case "snapshots":
		return s.ComputeSnapshots()
	case "disks":
		return s.ComputeDisks()
	case "images":
		return s.ComputeImages()
	case "firewalls":
		return s.ComputeFirewalls()
	case "networks":
		return s.ComputeNetworks()
	case "subnetworks":
		return s.ComputeSubnetworks()
	case "routers":
		return s.ComputeRouters()
	case "machineTypes":
		return s.ComputeMachineTypes()
	case "regions":
		return s.ComputeRegions()
	case "zones":
		return s.ComputeZones()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnapshots computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeImages computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeImages() error {
	var err error
	if _, ok := s.Cache.Load("images"); ok {
		return nil
	}
	vres, err := s.GetImages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("images", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewalls computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeFirewalls() error {
	var err error
	if _, ok := s.Cache.Load("firewalls"); ok {
		return nil
	}
	vres, err := s.GetFirewalls()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewalls", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetworks computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeNetworks() error {
	var err error
	if _, ok := s.Cache.Load("networks"); ok {
		return nil
	}
	vres, err := s.GetNetworks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("networks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubnetworks computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeSubnetworks() error {
	var err error
	if _, ok := s.Cache.Load("subnetworks"); ok {
		return nil
	}
	vres, err := s.GetSubnetworks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subnetworks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRouters computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeRouters() error {
	var err error
	if _, ok := s.Cache.Load("routers"); ok {
		return nil
	}
	vres, err := s.GetRouters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMachineTypes computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeMachineTypes() error {
	var err error
	if _, ok := s.Cache.Load("machineTypes"); ok {
		return nil
	}
	vres, err := s.GetMachineTypes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("machineTypes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRegions computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeRegions() error {
	var err error
	if _, ok := s.Cache.Load("regions"); ok {
		return nil
	}
	vres, err := s.GetRegions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("regions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeZones computer autogenerated
func (s *mqlGcpProjectComputeService) ComputeZones() error {
	var err error
	if _, ok := s.Cache.Load("zones"); ok {
		return nil
	}
	vres, err := s.GetZones()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("zones", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectComputeServiceRegion resource interface
type GcpProjectComputeServiceRegion interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Status() (string, error)
	Created() (*time.Time, error)
	Quotas() (map[string]interface{}, error)
	Deprecated() (interface{}, error)
}

// mqlGcpProjectComputeServiceRegion for the gcp.project.computeService.region resource
type mqlGcpProjectComputeServiceRegion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceRegion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.region resource
func newGcpProjectComputeServiceRegion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceRegion{runtime.NewResource("gcp.project.computeService.region")}
	var existing GcpProjectComputeServiceRegion
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "quotas":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"quotas\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "deprecated":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"deprecated\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.region\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.region with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceRegion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("quotas"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"quotas\". This field is required.")
	}
	if _, ok := s.Cache.Load("deprecated"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.region\" resource without a \"deprecated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.region].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.region\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.region].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	case "quotas":
		return s.Quotas()
	case "deprecated":
		return s.Deprecated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.region\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Quotas accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Quotas() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("quotas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"quotas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"quotas\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Deprecated accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) Deprecated() (interface{}, error) {
	res, ok := s.Cache.Load("deprecated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.region\" failed: no value provided for static field \"deprecated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.region\" failed to cast field \"deprecated\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceRegion) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.region].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.region\" resource")
	}
}

// GcpProjectComputeServiceZone resource interface
type GcpProjectComputeServiceZone interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Status() (string, error)
	Created() (*time.Time, error)
}

// mqlGcpProjectComputeServiceZone for the gcp.project.computeService.zone resource
type mqlGcpProjectComputeServiceZone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceZone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.zone resource
func newGcpProjectComputeServiceZone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceZone{runtime.NewResource("gcp.project.computeService.zone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.zone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.zone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceZone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.zone\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.zone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.zone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.zone\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.zone\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.zone].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.zone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.zone].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.zone\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.zone\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.zone\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.zone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.zone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.zone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.zone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.zone\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.zone\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.zone\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.zone\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceZone) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.zone].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.zone\" resource")
	}
}

// GcpProjectComputeServiceMachineType resource interface
type GcpProjectComputeServiceMachineType interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	GuestCpus() (int64, error)
	IsSharedCpu() (bool, error)
	MaximumPersistentDisks() (int64, error)
	MaximumPersistentDisksSizeGb() (int64, error)
	MemoryMb() (int64, error)
	Created() (*time.Time, error)
	Zone() (GcpProjectComputeServiceZone, error)
}

// mqlGcpProjectComputeServiceMachineType for the gcp.project.computeService.machineType resource
type mqlGcpProjectComputeServiceMachineType struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceMachineType) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.machineType resource
func newGcpProjectComputeServiceMachineType(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceMachineType{runtime.NewResource("gcp.project.computeService.machineType")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "guestCpus":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"guestCpus\" argument has the wrong type (expected type \"int64\")")
			}
		case "isSharedCpu":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"isSharedCpu\" argument has the wrong type (expected type \"bool\")")
			}
		case "maximumPersistentDisks":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"maximumPersistentDisks\" argument has the wrong type (expected type \"int64\")")
			}
		case "maximumPersistentDisksSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"maximumPersistentDisksSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryMb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"memoryMb\" argument has the wrong type (expected type \"int64\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "zone":
			if _, ok := val.(GcpProjectComputeServiceZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"zone\" argument has the wrong type (expected type \"GcpProjectComputeServiceZone\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.machineType\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.machineType with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceMachineType) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestCpus"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"guestCpus\". This field is required.")
	}
	if _, ok := s.Cache.Load("isSharedCpu"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"isSharedCpu\". This field is required.")
	}
	if _, ok := s.Cache.Load("maximumPersistentDisks"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"maximumPersistentDisks\". This field is required.")
	}
	if _, ok := s.Cache.Load("maximumPersistentDisksSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"maximumPersistentDisksSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryMb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"memoryMb\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.machineType\" resource without a \"zone\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.machineType].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "guestCpus":
		return nil
	case "isSharedCpu":
		return nil
	case "maximumPersistentDisks":
		return nil
	case "maximumPersistentDisksSizeGb":
		return nil
	case "memoryMb":
		return nil
	case "created":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.machineType\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.machineType].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "guestCpus":
		return s.GuestCpus()
	case "isSharedCpu":
		return s.IsSharedCpu()
	case "maximumPersistentDisks":
		return s.MaximumPersistentDisks()
	case "maximumPersistentDisksSizeGb":
		return s.MaximumPersistentDisksSizeGb()
	case "memoryMb":
		return s.MemoryMb()
	case "created":
		return s.Created()
	case "zone":
		return s.Zone()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.machineType\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GuestCpus accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) GuestCpus() (int64, error) {
	res, ok := s.Cache.Load("guestCpus")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"guestCpus\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"guestCpus\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsSharedCpu accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) IsSharedCpu() (bool, error) {
	res, ok := s.Cache.Load("isSharedCpu")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"isSharedCpu\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"isSharedCpu\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MaximumPersistentDisks accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) MaximumPersistentDisks() (int64, error) {
	res, ok := s.Cache.Load("maximumPersistentDisks")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"maximumPersistentDisks\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"maximumPersistentDisks\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaximumPersistentDisksSizeGb accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) MaximumPersistentDisksSizeGb() (int64, error) {
	res, ok := s.Cache.Load("maximumPersistentDisksSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"maximumPersistentDisksSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"maximumPersistentDisksSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryMb accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) MemoryMb() (int64, error) {
	res, ok := s.Cache.Load("memoryMb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"memoryMb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"memoryMb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) Zone() (GcpProjectComputeServiceZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.machineType\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.machineType\" failed to cast field \"zone\" to the right type (GcpProjectComputeServiceZone): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceMachineType) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.machineType].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "guestCpus":
		return nil
	case "isSharedCpu":
		return nil
	case "maximumPersistentDisks":
		return nil
	case "maximumPersistentDisksSizeGb":
		return nil
	case "memoryMb":
		return nil
	case "created":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.machineType\" resource")
	}
}

// GcpProjectComputeServiceInstance resource interface
type GcpProjectComputeServiceInstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	ConfidentialInstanceConfig() (interface{}, error)
	CanIpForward() (bool, error)
	CpuPlatform() (string, error)
	Created() (*time.Time, error)
	DeletionProtection() (bool, error)
	EnableDisplay() (bool, error)
	GuestAccelerators() ([]interface{}, error)
	Fingerprint() (string, error)
	Hostname() (string, error)
	KeyRevocationActionType() (string, error)
	Labels() (map[string]interface{}, error)
	LastStartTimestamp() (*time.Time, error)
	LastStopTimestamp() (*time.Time, error)
	LastSuspendedTimestamp() (*time.Time, error)
	Metadata() (map[string]interface{}, error)
	MinCpuPlatform() (string, error)
	NetworkInterfaces() ([]interface{}, error)
	PrivateIpv6GoogleAccess() (string, error)
	ReservationAffinity() (interface{}, error)
	ResourcePolicies() ([]interface{}, error)
	PhysicalHostResourceStatus() (string, error)
	Scheduling() (interface{}, error)
	EnableIntegrityMonitoring() (bool, error)
	EnableSecureBoot() (bool, error)
	EnableVtpm() (bool, error)
	StartRestricted() (bool, error)
	Status() (string, error)
	StatusMessage() (string, error)
	SourceMachineImage() (string, error)
	Tags() ([]interface{}, error)
	TotalEgressBandwidthTier() (string, error)
	ServiceAccounts() ([]interface{}, error)
	Disks() ([]interface{}, error)
	MachineType() (GcpProjectComputeServiceMachineType, error)
	Zone() (GcpProjectComputeServiceZone, error)
}

// mqlGcpProjectComputeServiceInstance for the gcp.project.computeService.instance resource
type mqlGcpProjectComputeServiceInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.instance resource
func newGcpProjectComputeServiceInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceInstance{runtime.NewResource("gcp.project.computeService.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "confidentialInstanceConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"confidentialInstanceConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "canIpForward":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"canIpForward\" argument has the wrong type (expected type \"bool\")")
			}
		case "cpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"cpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "deletionProtection":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"deletionProtection\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableDisplay":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"enableDisplay\" argument has the wrong type (expected type \"bool\")")
			}
		case "guestAccelerators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"guestAccelerators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "keyRevocationActionType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"keyRevocationActionType\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "lastStartTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"lastStartTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastStopTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"lastStopTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastSuspendedTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"lastSuspendedTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "minCpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"minCpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "networkInterfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"networkInterfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "privateIpv6GoogleAccess":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"privateIpv6GoogleAccess\" argument has the wrong type (expected type \"string\")")
			}
		case "reservationAffinity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"reservationAffinity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "resourcePolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"resourcePolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "physicalHostResourceStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"physicalHostResourceStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "scheduling":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"scheduling\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "enableIntegrityMonitoring":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"enableIntegrityMonitoring\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableSecureBoot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"enableSecureBoot\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableVtpm":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"enableVtpm\" argument has the wrong type (expected type \"bool\")")
			}
		case "startRestricted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"startRestricted\" argument has the wrong type (expected type \"bool\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusMessage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"statusMessage\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceMachineImage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"sourceMachineImage\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "totalEgressBandwidthTier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"totalEgressBandwidthTier\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"serviceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "machineType":
			if _, ok := val.(GcpProjectComputeServiceMachineType); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"machineType\" argument has the wrong type (expected type \"GcpProjectComputeServiceMachineType\")")
			}
		case "zone":
			if _, ok := val.(GcpProjectComputeServiceZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"zone\" argument has the wrong type (expected type \"GcpProjectComputeServiceZone\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("confidentialInstanceConfig"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"confidentialInstanceConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("canIpForward"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"canIpForward\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"cpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtection"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"deletionProtection\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableDisplay"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"enableDisplay\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestAccelerators"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"guestAccelerators\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostname"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"hostname\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyRevocationActionType"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"keyRevocationActionType\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStartTimestamp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"lastStartTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStopTimestamp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"lastStopTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastSuspendedTimestamp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"lastSuspendedTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("minCpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"minCpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkInterfaces"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"networkInterfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpv6GoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"privateIpv6GoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("reservationAffinity"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"reservationAffinity\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcePolicies"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"resourcePolicies\". This field is required.")
	}
	if _, ok := s.Cache.Load("physicalHostResourceStatus"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"physicalHostResourceStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("scheduling"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"scheduling\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableIntegrityMonitoring"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"enableIntegrityMonitoring\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableSecureBoot"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"enableSecureBoot\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableVtpm"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"enableVtpm\". This field is required.")
	}
	if _, ok := s.Cache.Load("startRestricted"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"startRestricted\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusMessage"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"statusMessage\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceMachineImage"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"sourceMachineImage\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("totalEgressBandwidthTier"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"totalEgressBandwidthTier\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccounts"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"serviceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("disks"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"disks\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.instance\" resource without a \"zone\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.instance].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "confidentialInstanceConfig":
		return nil
	case "canIpForward":
		return nil
	case "cpuPlatform":
		return nil
	case "created":
		return nil
	case "deletionProtection":
		return nil
	case "enableDisplay":
		return nil
	case "guestAccelerators":
		return nil
	case "fingerprint":
		return nil
	case "hostname":
		return nil
	case "keyRevocationActionType":
		return nil
	case "labels":
		return nil
	case "lastStartTimestamp":
		return nil
	case "lastStopTimestamp":
		return nil
	case "lastSuspendedTimestamp":
		return nil
	case "metadata":
		return nil
	case "minCpuPlatform":
		return nil
	case "networkInterfaces":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "reservationAffinity":
		return nil
	case "resourcePolicies":
		return nil
	case "physicalHostResourceStatus":
		return nil
	case "scheduling":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableVtpm":
		return nil
	case "startRestricted":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "sourceMachineImage":
		return nil
	case "tags":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	case "serviceAccounts":
		return nil
	case "disks":
		return nil
	case "machineType":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "confidentialInstanceConfig":
		return s.ConfidentialInstanceConfig()
	case "canIpForward":
		return s.CanIpForward()
	case "cpuPlatform":
		return s.CpuPlatform()
	case "created":
		return s.Created()
	case "deletionProtection":
		return s.DeletionProtection()
	case "enableDisplay":
		return s.EnableDisplay()
	case "guestAccelerators":
		return s.GuestAccelerators()
	case "fingerprint":
		return s.Fingerprint()
	case "hostname":
		return s.Hostname()
	case "keyRevocationActionType":
		return s.KeyRevocationActionType()
	case "labels":
		return s.Labels()
	case "lastStartTimestamp":
		return s.LastStartTimestamp()
	case "lastStopTimestamp":
		return s.LastStopTimestamp()
	case "lastSuspendedTimestamp":
		return s.LastSuspendedTimestamp()
	case "metadata":
		return s.Metadata()
	case "minCpuPlatform":
		return s.MinCpuPlatform()
	case "networkInterfaces":
		return s.NetworkInterfaces()
	case "privateIpv6GoogleAccess":
		return s.PrivateIpv6GoogleAccess()
	case "reservationAffinity":
		return s.ReservationAffinity()
	case "resourcePolicies":
		return s.ResourcePolicies()
	case "physicalHostResourceStatus":
		return s.PhysicalHostResourceStatus()
	case "scheduling":
		return s.Scheduling()
	case "enableIntegrityMonitoring":
		return s.EnableIntegrityMonitoring()
	case "enableSecureBoot":
		return s.EnableSecureBoot()
	case "enableVtpm":
		return s.EnableVtpm()
	case "startRestricted":
		return s.StartRestricted()
	case "status":
		return s.Status()
	case "statusMessage":
		return s.StatusMessage()
	case "sourceMachineImage":
		return s.SourceMachineImage()
	case "tags":
		return s.Tags()
	case "totalEgressBandwidthTier":
		return s.TotalEgressBandwidthTier()
	case "serviceAccounts":
		return s.ServiceAccounts()
	case "disks":
		return s.Disks()
	case "machineType":
		return s.MachineType()
	case "zone":
		return s.Zone()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConfidentialInstanceConfig accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ConfidentialInstanceConfig() (interface{}, error) {
	res, ok := s.Cache.Load("confidentialInstanceConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"confidentialInstanceConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"confidentialInstanceConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// CanIpForward accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) CanIpForward() (bool, error) {
	res, ok := s.Cache.Load("canIpForward")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"canIpForward\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"canIpForward\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// CpuPlatform accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) CpuPlatform() (string, error) {
	res, ok := s.Cache.Load("cpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"cpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"cpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DeletionProtection accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) DeletionProtection() (bool, error) {
	res, ok := s.Cache.Load("deletionProtection")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"deletionProtection\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"deletionProtection\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableDisplay accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) EnableDisplay() (bool, error) {
	res, ok := s.Cache.Load("enableDisplay")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"enableDisplay\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"enableDisplay\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GuestAccelerators accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) GuestAccelerators() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestAccelerators")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"guestAccelerators\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"guestAccelerators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"hostname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyRevocationActionType accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) KeyRevocationActionType() (string, error) {
	res, ok := s.Cache.Load("keyRevocationActionType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"keyRevocationActionType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"keyRevocationActionType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LastStartTimestamp accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) LastStartTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastStartTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"lastStartTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"lastStartTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastStopTimestamp accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) LastStopTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastStopTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"lastStopTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"lastStopTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastSuspendedTimestamp accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) LastSuspendedTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastSuspendedTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"lastSuspendedTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"lastSuspendedTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// MinCpuPlatform accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) MinCpuPlatform() (string, error) {
	res, ok := s.Cache.Load("minCpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"minCpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"minCpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NetworkInterfaces accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) NetworkInterfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("networkInterfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"networkInterfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"networkInterfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PrivateIpv6GoogleAccess accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) PrivateIpv6GoogleAccess() (string, error) {
	res, ok := s.Cache.Load("privateIpv6GoogleAccess")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"privateIpv6GoogleAccess\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"privateIpv6GoogleAccess\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReservationAffinity accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ReservationAffinity() (interface{}, error) {
	res, ok := s.Cache.Load("reservationAffinity")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"reservationAffinity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"reservationAffinity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ResourcePolicies accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ResourcePolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("resourcePolicies")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"resourcePolicies\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"resourcePolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PhysicalHostResourceStatus accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) PhysicalHostResourceStatus() (string, error) {
	res, ok := s.Cache.Load("physicalHostResourceStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"physicalHostResourceStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"physicalHostResourceStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scheduling accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Scheduling() (interface{}, error) {
	res, ok := s.Cache.Load("scheduling")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"scheduling\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"scheduling\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnableIntegrityMonitoring accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) EnableIntegrityMonitoring() (bool, error) {
	res, ok := s.Cache.Load("enableIntegrityMonitoring")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"enableIntegrityMonitoring\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"enableIntegrityMonitoring\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableSecureBoot accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) EnableSecureBoot() (bool, error) {
	res, ok := s.Cache.Load("enableSecureBoot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"enableSecureBoot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"enableSecureBoot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableVtpm accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) EnableVtpm() (bool, error) {
	res, ok := s.Cache.Load("enableVtpm")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"enableVtpm\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"enableVtpm\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StartRestricted accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) StartRestricted() (bool, error) {
	res, ok := s.Cache.Load("startRestricted")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"startRestricted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"startRestricted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusMessage accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) StatusMessage() (string, error) {
	res, ok := s.Cache.Load("statusMessage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"statusMessage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"statusMessage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceMachineImage accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) SourceMachineImage() (string, error) {
	res, ok := s.Cache.Load("sourceMachineImage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"sourceMachineImage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"sourceMachineImage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TotalEgressBandwidthTier accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) TotalEgressBandwidthTier() (string, error) {
	res, ok := s.Cache.Load("totalEgressBandwidthTier")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"totalEgressBandwidthTier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"totalEgressBandwidthTier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccounts accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"serviceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"serviceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"disks\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MachineType accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) MachineType() (GcpProjectComputeServiceMachineType, error) {
	res, ok := s.Cache.Load("machineType")
	if !ok || !res.Valid {
		if err := s.ComputeMachineType(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("machineType")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService.instance\" calculated \"machineType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "machineType")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceMachineType)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"machineType\" to the right type (GcpProjectComputeServiceMachineType): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) Zone() (GcpProjectComputeServiceZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.instance\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.instance\" failed to cast field \"zone\" to the right type (GcpProjectComputeServiceZone): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceInstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.instance].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "confidentialInstanceConfig":
		return nil
	case "canIpForward":
		return nil
	case "cpuPlatform":
		return nil
	case "created":
		return nil
	case "deletionProtection":
		return nil
	case "enableDisplay":
		return nil
	case "guestAccelerators":
		return nil
	case "fingerprint":
		return nil
	case "hostname":
		return nil
	case "keyRevocationActionType":
		return nil
	case "labels":
		return nil
	case "lastStartTimestamp":
		return nil
	case "lastStopTimestamp":
		return nil
	case "lastSuspendedTimestamp":
		return nil
	case "metadata":
		return nil
	case "minCpuPlatform":
		return nil
	case "networkInterfaces":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "reservationAffinity":
		return nil
	case "resourcePolicies":
		return nil
	case "physicalHostResourceStatus":
		return nil
	case "scheduling":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableVtpm":
		return nil
	case "startRestricted":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "sourceMachineImage":
		return nil
	case "tags":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	case "serviceAccounts":
		return nil
	case "disks":
		return nil
	case "machineType":
		return s.ComputeMachineType()
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.instance\" resource")
	}
}

// ComputeMachineType computer autogenerated
func (s *mqlGcpProjectComputeServiceInstance) ComputeMachineType() error {
	var err error
	if _, ok := s.Cache.Load("machineType"); ok {
		return nil
	}
	vres, err := s.GetMachineType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("machineType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectComputeServiceServiceaccount resource interface
type GcpProjectComputeServiceServiceaccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Email() (string, error)
	Scopes() ([]interface{}, error)
}

// mqlGcpProjectComputeServiceServiceaccount for the gcp.project.computeService.serviceaccount resource
type mqlGcpProjectComputeServiceServiceaccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceServiceaccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.serviceaccount resource
func newGcpProjectComputeServiceServiceaccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceServiceaccount{runtime.NewResource("gcp.project.computeService.serviceaccount")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.serviceaccount\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.serviceaccount\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.serviceaccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.serviceaccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceServiceaccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.serviceaccount\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.serviceaccount\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceServiceaccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.serviceaccount].Register")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.serviceaccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceServiceaccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.serviceaccount].Field")
	switch name {
	case "email":
		return s.Email()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.serviceaccount\" resource")
	}
}

// Email accessor autogenerated
func (s *mqlGcpProjectComputeServiceServiceaccount) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.serviceaccount\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.serviceaccount\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlGcpProjectComputeServiceServiceaccount) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.serviceaccount\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.serviceaccount\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceServiceaccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.serviceaccount].MqlCompute")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.serviceaccount\" resource")
	}
}

// GcpProjectComputeServiceDisk resource interface
type GcpProjectComputeServiceDisk interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Architecture() (string, error)
	Description() (string, error)
	GuestOsFeatures() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	LastAttachTimestamp() (*time.Time, error)
	LastDetachTimestamp() (*time.Time, error)
	Licenses() ([]interface{}, error)
	LocationHint() (string, error)
	PhysicalBlockSizeBytes() (int64, error)
	ProvisionedIops() (int64, error)
	SizeGb() (int64, error)
	Status() (string, error)
	Zone() (GcpProjectComputeServiceZone, error)
	Created() (*time.Time, error)
}

// mqlGcpProjectComputeServiceDisk for the gcp.project.computeService.disk resource
type mqlGcpProjectComputeServiceDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.disk resource
func newGcpProjectComputeServiceDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceDisk{runtime.NewResource("gcp.project.computeService.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "guestOsFeatures":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"guestOsFeatures\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "lastAttachTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"lastAttachTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastDetachTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"lastDetachTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "locationHint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"locationHint\" argument has the wrong type (expected type \"string\")")
			}
		case "physicalBlockSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"physicalBlockSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "provisionedIops":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"provisionedIops\" argument has the wrong type (expected type \"int64\")")
			}
		case "sizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"sizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "zone":
			if _, ok := val.(GcpProjectComputeServiceZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"zone\" argument has the wrong type (expected type \"GcpProjectComputeServiceZone\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestOsFeatures"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"guestOsFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastAttachTimestamp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"lastAttachTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastDetachTimestamp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"lastDetachTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationHint"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"locationHint\". This field is required.")
	}
	if _, ok := s.Cache.Load("physicalBlockSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"physicalBlockSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisionedIops"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"provisionedIops\". This field is required.")
	}
	if _, ok := s.Cache.Load("sizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"sizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"zone\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.disk\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "description":
		return nil
	case "guestOsFeatures":
		return nil
	case "labels":
		return nil
	case "lastAttachTimestamp":
		return nil
	case "lastDetachTimestamp":
		return nil
	case "licenses":
		return nil
	case "locationHint":
		return nil
	case "physicalBlockSizeBytes":
		return nil
	case "provisionedIops":
		return nil
	case "sizeGb":
		return nil
	case "status":
		return nil
	case "zone":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "architecture":
		return s.Architecture()
	case "description":
		return s.Description()
	case "guestOsFeatures":
		return s.GuestOsFeatures()
	case "labels":
		return s.Labels()
	case "lastAttachTimestamp":
		return s.LastAttachTimestamp()
	case "lastDetachTimestamp":
		return s.LastDetachTimestamp()
	case "licenses":
		return s.Licenses()
	case "locationHint":
		return s.LocationHint()
	case "physicalBlockSizeBytes":
		return s.PhysicalBlockSizeBytes()
	case "provisionedIops":
		return s.ProvisionedIops()
	case "sizeGb":
		return s.SizeGb()
	case "status":
		return s.Status()
	case "zone":
		return s.Zone()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GuestOsFeatures accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) GuestOsFeatures() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestOsFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"guestOsFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"guestOsFeatures\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LastAttachTimestamp accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) LastAttachTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastAttachTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"lastAttachTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"lastAttachTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastDetachTimestamp accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) LastDetachTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastDetachTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"lastDetachTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"lastDetachTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LocationHint accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) LocationHint() (string, error) {
	res, ok := s.Cache.Load("locationHint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"locationHint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"locationHint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PhysicalBlockSizeBytes accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) PhysicalBlockSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("physicalBlockSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"physicalBlockSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"physicalBlockSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ProvisionedIops accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) ProvisionedIops() (int64, error) {
	res, ok := s.Cache.Load("provisionedIops")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"provisionedIops\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"provisionedIops\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// SizeGb accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) SizeGb() (int64, error) {
	res, ok := s.Cache.Load("sizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"sizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"sizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Zone() (GcpProjectComputeServiceZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"zone\" to the right type (GcpProjectComputeServiceZone): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.disk\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.disk\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceDisk) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.disk].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "description":
		return nil
	case "guestOsFeatures":
		return nil
	case "labels":
		return nil
	case "lastAttachTimestamp":
		return nil
	case "lastDetachTimestamp":
		return nil
	case "licenses":
		return nil
	case "locationHint":
		return nil
	case "physicalBlockSizeBytes":
		return nil
	case "provisionedIops":
		return nil
	case "sizeGb":
		return nil
	case "status":
		return nil
	case "zone":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.disk\" resource")
	}
}

// GcpProjectComputeServiceAttachedDisk resource interface
type GcpProjectComputeServiceAttachedDisk interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Architecture() (string, error)
	AutoDelete() (bool, error)
	Boot() (bool, error)
	DeviceName() (string, error)
	DiskSizeGb() (int64, error)
	ForceAttach() (bool, error)
	GuestOsFeatures() ([]interface{}, error)
	Index() (int64, error)
	Interface() (string, error)
	Licenses() ([]interface{}, error)
	Mode() (string, error)
	Source() (GcpProjectComputeServiceDisk, error)
	Type() (string, error)
}

// mqlGcpProjectComputeServiceAttachedDisk for the gcp.project.computeService.attachedDisk resource
type mqlGcpProjectComputeServiceAttachedDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceAttachedDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.attachedDisk resource
func newGcpProjectComputeServiceAttachedDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceAttachedDisk{runtime.NewResource("gcp.project.computeService.attachedDisk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "autoDelete":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"autoDelete\" argument has the wrong type (expected type \"bool\")")
			}
		case "boot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"boot\" argument has the wrong type (expected type \"bool\")")
			}
		case "deviceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"deviceName\" argument has the wrong type (expected type \"string\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "forceAttach":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"forceAttach\" argument has the wrong type (expected type \"bool\")")
			}
		case "guestOsFeatures":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"guestOsFeatures\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "index":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"index\" argument has the wrong type (expected type \"int64\")")
			}
		case "interface":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"interface\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"mode\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(GcpProjectComputeServiceDisk); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"source\" argument has the wrong type (expected type \"GcpProjectComputeServiceDisk\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.attachedDisk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.attachedDisk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceAttachedDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoDelete"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"autoDelete\". This field is required.")
	}
	if _, ok := s.Cache.Load("boot"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"boot\". This field is required.")
	}
	if _, ok := s.Cache.Load("deviceName"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"deviceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("forceAttach"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"forceAttach\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestOsFeatures"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"guestOsFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("index"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"index\". This field is required.")
	}
	if _, ok := s.Cache.Load("interface"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"interface\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("mode"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"mode\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.attachedDisk\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.attachedDisk].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "architecture":
		return nil
	case "autoDelete":
		return nil
	case "boot":
		return nil
	case "deviceName":
		return nil
	case "diskSizeGb":
		return nil
	case "forceAttach":
		return nil
	case "guestOsFeatures":
		return nil
	case "index":
		return nil
	case "interface":
		return nil
	case "licenses":
		return nil
	case "mode":
		return nil
	case "source":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.attachedDisk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.attachedDisk].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "architecture":
		return s.Architecture()
	case "autoDelete":
		return s.AutoDelete()
	case "boot":
		return s.Boot()
	case "deviceName":
		return s.DeviceName()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "forceAttach":
		return s.ForceAttach()
	case "guestOsFeatures":
		return s.GuestOsFeatures()
	case "index":
		return s.Index()
	case "interface":
		return s.Interface()
	case "licenses":
		return s.Licenses()
	case "mode":
		return s.Mode()
	case "source":
		return s.Source()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.attachedDisk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoDelete accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) AutoDelete() (bool, error) {
	res, ok := s.Cache.Load("autoDelete")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"autoDelete\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"autoDelete\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Boot accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Boot() (bool, error) {
	res, ok := s.Cache.Load("boot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"boot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"boot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DeviceName accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) DeviceName() (string, error) {
	res, ok := s.Cache.Load("deviceName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"deviceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"deviceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ForceAttach accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) ForceAttach() (bool, error) {
	res, ok := s.Cache.Load("forceAttach")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"forceAttach\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"forceAttach\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GuestOsFeatures accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) GuestOsFeatures() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestOsFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"guestOsFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"guestOsFeatures\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Index accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Index() (int64, error) {
	res, ok := s.Cache.Load("index")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"index\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"index\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Interface accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Interface() (string, error) {
	res, ok := s.Cache.Load("interface")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"interface\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"interface\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Mode accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Mode() (string, error) {
	res, ok := s.Cache.Load("mode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"mode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"mode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Source() (GcpProjectComputeServiceDisk, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		if err := s.ComputeSource(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("source")
		if !ok {
			return nil, errors.New("\"gcp.project.computeService.attachedDisk\" calculated \"source\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "source")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceDisk)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"source\" to the right type (GcpProjectComputeServiceDisk): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.attachedDisk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.attachedDisk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.attachedDisk].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "architecture":
		return nil
	case "autoDelete":
		return nil
	case "boot":
		return nil
	case "deviceName":
		return nil
	case "diskSizeGb":
		return nil
	case "forceAttach":
		return nil
	case "guestOsFeatures":
		return nil
	case "index":
		return nil
	case "interface":
		return nil
	case "licenses":
		return nil
	case "mode":
		return nil
	case "source":
		return s.ComputeSource()
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.attachedDisk\" resource")
	}
}

// ComputeSource computer autogenerated
func (s *mqlGcpProjectComputeServiceAttachedDisk) ComputeSource() error {
	var err error
	if _, ok := s.Cache.Load("source"); ok {
		return nil
	}
	vres, err := s.GetSource()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("source", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectComputeServiceSnapshot resource interface
type GcpProjectComputeServiceSnapshot interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Architecture() (string, error)
	AutoCreated() (bool, error)
	ChainName() (string, error)
	CreationSizeBytes() (int64, error)
	DiskSizeGb() (int64, error)
	DownloadBytes() (int64, error)
	StorageBytes() (int64, error)
	StorageBytesStatus() (string, error)
	SnapshotType() (string, error)
	Licenses() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Status() (string, error)
}

// mqlGcpProjectComputeServiceSnapshot for the gcp.project.computeService.snapshot resource
type mqlGcpProjectComputeServiceSnapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceSnapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.snapshot resource
func newGcpProjectComputeServiceSnapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceSnapshot{runtime.NewResource("gcp.project.computeService.snapshot")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "autoCreated":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"autoCreated\" argument has the wrong type (expected type \"bool\")")
			}
		case "chainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"chainName\" argument has the wrong type (expected type \"string\")")
			}
		case "creationSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"creationSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "downloadBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"downloadBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"storageBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageBytesStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"storageBytesStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "snapshotType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"snapshotType\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceSnapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoCreated"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"autoCreated\". This field is required.")
	}
	if _, ok := s.Cache.Load("chainName"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"chainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"creationSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("downloadBytes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"downloadBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageBytes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"storageBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageBytesStatus"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"storageBytesStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("snapshotType"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"snapshotType\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.snapshot\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.snapshot].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "autoCreated":
		return nil
	case "chainName":
		return nil
	case "creationSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "downloadBytes":
		return nil
	case "storageBytes":
		return nil
	case "storageBytesStatus":
		return nil
	case "snapshotType":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.snapshot].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "architecture":
		return s.Architecture()
	case "autoCreated":
		return s.AutoCreated()
	case "chainName":
		return s.ChainName()
	case "creationSizeBytes":
		return s.CreationSizeBytes()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "downloadBytes":
		return s.DownloadBytes()
	case "storageBytes":
		return s.StorageBytes()
	case "storageBytesStatus":
		return s.StorageBytesStatus()
	case "snapshotType":
		return s.SnapshotType()
	case "licenses":
		return s.Licenses()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.snapshot\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoCreated accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) AutoCreated() (bool, error) {
	res, ok := s.Cache.Load("autoCreated")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"autoCreated\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"autoCreated\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ChainName accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) ChainName() (string, error) {
	res, ok := s.Cache.Load("chainName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"chainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"chainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationSizeBytes accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) CreationSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("creationSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"creationSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"creationSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DownloadBytes accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) DownloadBytes() (int64, error) {
	res, ok := s.Cache.Load("downloadBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"downloadBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"downloadBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageBytes accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) StorageBytes() (int64, error) {
	res, ok := s.Cache.Load("storageBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"storageBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"storageBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageBytesStatus accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) StorageBytesStatus() (string, error) {
	res, ok := s.Cache.Load("storageBytesStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"storageBytesStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"storageBytesStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SnapshotType accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) SnapshotType() (string, error) {
	res, ok := s.Cache.Load("snapshotType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"snapshotType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"snapshotType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.snapshot\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.snapshot\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceSnapshot) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.snapshot].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "autoCreated":
		return nil
	case "chainName":
		return nil
	case "creationSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "downloadBytes":
		return nil
	case "storageBytes":
		return nil
	case "storageBytesStatus":
		return nil
	case "snapshotType":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.snapshot\" resource")
	}
}

// GcpProjectComputeServiceImage resource interface
type GcpProjectComputeServiceImage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Architecture() (string, error)
	ArchiveSizeBytes() (int64, error)
	DiskSizeGb() (int64, error)
	Family() (string, error)
	Licenses() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Status() (string, error)
}

// mqlGcpProjectComputeServiceImage for the gcp.project.computeService.image resource
type mqlGcpProjectComputeServiceImage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceImage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.image resource
func newGcpProjectComputeServiceImage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceImage{runtime.NewResource("gcp.project.computeService.image")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "archiveSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"archiveSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "family":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"family\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.image\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.image with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceImage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("archiveSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"archiveSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("family"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"family\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.image\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.image].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "archiveSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "family":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.image\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.image].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "architecture":
		return s.Architecture()
	case "archiveSizeBytes":
		return s.ArchiveSizeBytes()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "family":
		return s.Family()
	case "licenses":
		return s.Licenses()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.image\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ArchiveSizeBytes accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) ArchiveSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("archiveSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"archiveSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"archiveSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Family accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Family() (string, error) {
	res, ok := s.Cache.Load("family")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"family\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"family\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.image\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.image\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceImage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.image].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "archiveSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "family":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.image\" resource")
	}
}

// GcpProjectComputeServiceFirewall resource interface
type GcpProjectComputeServiceFirewall interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Priority() (int64, error)
	Direction() (string, error)
	Disabled() (bool, error)
	SourceRanges() ([]interface{}, error)
	SourceServiceAccounts() ([]interface{}, error)
	SourceTags() ([]interface{}, error)
	DestinationRanges() ([]interface{}, error)
	TargetServiceAccounts() ([]interface{}, error)
	Created() (*time.Time, error)
	Allowed() ([]interface{}, error)
	Denied() ([]interface{}, error)
}

// mqlGcpProjectComputeServiceFirewall for the gcp.project.computeService.firewall resource
type mqlGcpProjectComputeServiceFirewall struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceFirewall) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.firewall resource
func newGcpProjectComputeServiceFirewall(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceFirewall{runtime.NewResource("gcp.project.computeService.firewall")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"priority\" argument has the wrong type (expected type \"int64\")")
			}
		case "direction":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"direction\" argument has the wrong type (expected type \"string\")")
			}
		case "disabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"disabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "sourceRanges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"sourceRanges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sourceServiceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"sourceServiceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sourceTags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"sourceTags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "destinationRanges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"destinationRanges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "targetServiceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"targetServiceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "allowed":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"allowed\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "denied":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"denied\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.firewall\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.firewall with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceFirewall) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("direction"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"direction\". This field is required.")
	}
	if _, ok := s.Cache.Load("disabled"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"disabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceRanges"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"sourceRanges\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceServiceAccounts"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"sourceServiceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceTags"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"sourceTags\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationRanges"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"destinationRanges\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetServiceAccounts"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"targetServiceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowed"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"allowed\". This field is required.")
	}
	if _, ok := s.Cache.Load("denied"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.firewall\" resource without a \"denied\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.firewall].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "direction":
		return nil
	case "disabled":
		return nil
	case "sourceRanges":
		return nil
	case "sourceServiceAccounts":
		return nil
	case "sourceTags":
		return nil
	case "destinationRanges":
		return nil
	case "targetServiceAccounts":
		return nil
	case "created":
		return nil
	case "allowed":
		return nil
	case "denied":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.firewall\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.firewall].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "priority":
		return s.Priority()
	case "direction":
		return s.Direction()
	case "disabled":
		return s.Disabled()
	case "sourceRanges":
		return s.SourceRanges()
	case "sourceServiceAccounts":
		return s.SourceServiceAccounts()
	case "sourceTags":
		return s.SourceTags()
	case "destinationRanges":
		return s.DestinationRanges()
	case "targetServiceAccounts":
		return s.TargetServiceAccounts()
	case "created":
		return s.Created()
	case "allowed":
		return s.Allowed()
	case "denied":
		return s.Denied()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.firewall\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Priority() (int64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"priority\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Direction accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Direction() (string, error) {
	res, ok := s.Cache.Load("direction")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"direction\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"direction\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Disabled accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Disabled() (bool, error) {
	res, ok := s.Cache.Load("disabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"disabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"disabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// SourceRanges accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) SourceRanges() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceRanges")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"sourceRanges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"sourceRanges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SourceServiceAccounts accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) SourceServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceServiceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"sourceServiceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"sourceServiceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SourceTags accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) SourceTags() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceTags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"sourceTags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"sourceTags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationRanges accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) DestinationRanges() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationRanges")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"destinationRanges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"destinationRanges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TargetServiceAccounts accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) TargetServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("targetServiceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"targetServiceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"targetServiceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Allowed accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Allowed() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowed")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"allowed\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"allowed\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Denied accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) Denied() ([]interface{}, error) {
	res, ok := s.Cache.Load("denied")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.firewall\" failed: no value provided for static field \"denied\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.firewall\" failed to cast field \"denied\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceFirewall) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.firewall].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "direction":
		return nil
	case "disabled":
		return nil
	case "sourceRanges":
		return nil
	case "sourceServiceAccounts":
		return nil
	case "sourceTags":
		return nil
	case "destinationRanges":
		return nil
	case "targetServiceAccounts":
		return nil
	case "created":
		return nil
	case "allowed":
		return nil
	case "denied":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.firewall\" resource")
	}
}

// GcpProjectComputeServiceNetwork resource interface
type GcpProjectComputeServiceNetwork interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	AutoCreateSubnetworks() (bool, error)
	EnableUlaInternalIpv6() (bool, error)
	GatewayIPv4() (string, error)
	Mtu() (int64, error)
	NetworkFirewallPolicyEnforcementOrder() (string, error)
	Created() (*time.Time, error)
	Peerings() ([]interface{}, error)
	RoutingMode() (string, error)
	Mode() (string, error)
}

// mqlGcpProjectComputeServiceNetwork for the gcp.project.computeService.network resource
type mqlGcpProjectComputeServiceNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.network resource
func newGcpProjectComputeServiceNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceNetwork{runtime.NewResource("gcp.project.computeService.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "autoCreateSubnetworks":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"autoCreateSubnetworks\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableUlaInternalIpv6":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"enableUlaInternalIpv6\" argument has the wrong type (expected type \"bool\")")
			}
		case "gatewayIPv4":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"gatewayIPv4\" argument has the wrong type (expected type \"string\")")
			}
		case "mtu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"mtu\" argument has the wrong type (expected type \"int64\")")
			}
		case "networkFirewallPolicyEnforcementOrder":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"networkFirewallPolicyEnforcementOrder\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "peerings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"peerings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routingMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"routingMode\" argument has the wrong type (expected type \"string\")")
			}
		case "mode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"mode\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceNetwork) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoCreateSubnetworks"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"autoCreateSubnetworks\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableUlaInternalIpv6"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"enableUlaInternalIpv6\". This field is required.")
	}
	if _, ok := s.Cache.Load("gatewayIPv4"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"gatewayIPv4\". This field is required.")
	}
	if _, ok := s.Cache.Load("mtu"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"mtu\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkFirewallPolicyEnforcementOrder"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"networkFirewallPolicyEnforcementOrder\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("peerings"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"peerings\". This field is required.")
	}
	if _, ok := s.Cache.Load("routingMode"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"routingMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("mode"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.network\" resource without a \"mode\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.network].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "autoCreateSubnetworks":
		return nil
	case "enableUlaInternalIpv6":
		return nil
	case "gatewayIPv4":
		return nil
	case "mtu":
		return nil
	case "networkFirewallPolicyEnforcementOrder":
		return nil
	case "created":
		return nil
	case "peerings":
		return nil
	case "routingMode":
		return nil
	case "mode":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.network].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "autoCreateSubnetworks":
		return s.AutoCreateSubnetworks()
	case "enableUlaInternalIpv6":
		return s.EnableUlaInternalIpv6()
	case "gatewayIPv4":
		return s.GatewayIPv4()
	case "mtu":
		return s.Mtu()
	case "networkFirewallPolicyEnforcementOrder":
		return s.NetworkFirewallPolicyEnforcementOrder()
	case "created":
		return s.Created()
	case "peerings":
		return s.Peerings()
	case "routingMode":
		return s.RoutingMode()
	case "mode":
		return s.Mode()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.network\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoCreateSubnetworks accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) AutoCreateSubnetworks() (bool, error) {
	res, ok := s.Cache.Load("autoCreateSubnetworks")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"autoCreateSubnetworks\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"autoCreateSubnetworks\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableUlaInternalIpv6 accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) EnableUlaInternalIpv6() (bool, error) {
	res, ok := s.Cache.Load("enableUlaInternalIpv6")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"enableUlaInternalIpv6\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"enableUlaInternalIpv6\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GatewayIPv4 accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) GatewayIPv4() (string, error) {
	res, ok := s.Cache.Load("gatewayIPv4")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"gatewayIPv4\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"gatewayIPv4\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mtu accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Mtu() (int64, error) {
	res, ok := s.Cache.Load("mtu")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"mtu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"mtu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NetworkFirewallPolicyEnforcementOrder accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) NetworkFirewallPolicyEnforcementOrder() (string, error) {
	res, ok := s.Cache.Load("networkFirewallPolicyEnforcementOrder")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"networkFirewallPolicyEnforcementOrder\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"networkFirewallPolicyEnforcementOrder\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Peerings accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Peerings() ([]interface{}, error) {
	res, ok := s.Cache.Load("peerings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"peerings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"peerings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RoutingMode accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) RoutingMode() (string, error) {
	res, ok := s.Cache.Load("routingMode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"routingMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"routingMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mode accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) Mode() (string, error) {
	res, ok := s.Cache.Load("mode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.network\" failed: no value provided for static field \"mode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.network\" failed to cast field \"mode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceNetwork) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.network].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "autoCreateSubnetworks":
		return nil
	case "enableUlaInternalIpv6":
		return nil
	case "gatewayIPv4":
		return nil
	case "mtu":
		return nil
	case "networkFirewallPolicyEnforcementOrder":
		return nil
	case "created":
		return nil
	case "peerings":
		return nil
	case "routingMode":
		return nil
	case "mode":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.network\" resource")
	}
}

// GcpProjectComputeServiceSubnetwork resource interface
type GcpProjectComputeServiceSubnetwork interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	EnableFlowLogs() (bool, error)
	ExternalIpv6Prefix() (string, error)
	Fingerprint() (string, error)
	GatewayAddress() (string, error)
	InternalIpv6Prefix() (string, error)
	IpCidrRange() (string, error)
	Ipv6AccessType() (string, error)
	Ipv6CidrRange() (string, error)
	PrivateIpGoogleAccess() (bool, error)
	PrivateIpv6GoogleAccess() (string, error)
	Purpose() (string, error)
	Region() (GcpProjectComputeServiceRegion, error)
	Role() (string, error)
	StackType() (string, error)
	State() (string, error)
	Created() (*time.Time, error)
}

// mqlGcpProjectComputeServiceSubnetwork for the gcp.project.computeService.subnetwork resource
type mqlGcpProjectComputeServiceSubnetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceSubnetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.subnetwork resource
func newGcpProjectComputeServiceSubnetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceSubnetwork{runtime.NewResource("gcp.project.computeService.subnetwork")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "enableFlowLogs":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"enableFlowLogs\" argument has the wrong type (expected type \"bool\")")
			}
		case "externalIpv6Prefix":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"externalIpv6Prefix\" argument has the wrong type (expected type \"string\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "gatewayAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"gatewayAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "internalIpv6Prefix":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"internalIpv6Prefix\" argument has the wrong type (expected type \"string\")")
			}
		case "ipCidrRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"ipCidrRange\" argument has the wrong type (expected type \"string\")")
			}
		case "ipv6AccessType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"ipv6AccessType\" argument has the wrong type (expected type \"string\")")
			}
		case "ipv6CidrRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"ipv6CidrRange\" argument has the wrong type (expected type \"string\")")
			}
		case "privateIpGoogleAccess":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"privateIpGoogleAccess\" argument has the wrong type (expected type \"bool\")")
			}
		case "privateIpv6GoogleAccess":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"privateIpv6GoogleAccess\" argument has the wrong type (expected type \"string\")")
			}
		case "purpose":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"purpose\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(GcpProjectComputeServiceRegion); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"region\" argument has the wrong type (expected type \"GcpProjectComputeServiceRegion\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "stackType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"stackType\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.subnetwork\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.subnetwork with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceSubnetwork) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableFlowLogs"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"enableFlowLogs\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalIpv6Prefix"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"externalIpv6Prefix\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("gatewayAddress"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"gatewayAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("internalIpv6Prefix"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"internalIpv6Prefix\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipCidrRange"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"ipCidrRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6AccessType"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"ipv6AccessType\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6CidrRange"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"ipv6CidrRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpGoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"privateIpGoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpv6GoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"privateIpv6GoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("purpose"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"purpose\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"role\". This field is required.")
	}
	if _, ok := s.Cache.Load("stackType"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"stackType\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.subnetwork\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.subnetwork].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableFlowLogs":
		return nil
	case "externalIpv6Prefix":
		return nil
	case "fingerprint":
		return nil
	case "gatewayAddress":
		return nil
	case "internalIpv6Prefix":
		return nil
	case "ipCidrRange":
		return nil
	case "ipv6AccessType":
		return nil
	case "ipv6CidrRange":
		return nil
	case "privateIpGoogleAccess":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "purpose":
		return nil
	case "region":
		return nil
	case "role":
		return nil
	case "stackType":
		return nil
	case "state":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.subnetwork\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.subnetwork].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "enableFlowLogs":
		return s.EnableFlowLogs()
	case "externalIpv6Prefix":
		return s.ExternalIpv6Prefix()
	case "fingerprint":
		return s.Fingerprint()
	case "gatewayAddress":
		return s.GatewayAddress()
	case "internalIpv6Prefix":
		return s.InternalIpv6Prefix()
	case "ipCidrRange":
		return s.IpCidrRange()
	case "ipv6AccessType":
		return s.Ipv6AccessType()
	case "ipv6CidrRange":
		return s.Ipv6CidrRange()
	case "privateIpGoogleAccess":
		return s.PrivateIpGoogleAccess()
	case "privateIpv6GoogleAccess":
		return s.PrivateIpv6GoogleAccess()
	case "purpose":
		return s.Purpose()
	case "region":
		return s.Region()
	case "role":
		return s.Role()
	case "stackType":
		return s.StackType()
	case "state":
		return s.State()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.subnetwork\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableFlowLogs accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) EnableFlowLogs() (bool, error) {
	res, ok := s.Cache.Load("enableFlowLogs")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"enableFlowLogs\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"enableFlowLogs\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ExternalIpv6Prefix accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) ExternalIpv6Prefix() (string, error) {
	res, ok := s.Cache.Load("externalIpv6Prefix")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"externalIpv6Prefix\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"externalIpv6Prefix\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GatewayAddress accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) GatewayAddress() (string, error) {
	res, ok := s.Cache.Load("gatewayAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"gatewayAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"gatewayAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InternalIpv6Prefix accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) InternalIpv6Prefix() (string, error) {
	res, ok := s.Cache.Load("internalIpv6Prefix")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"internalIpv6Prefix\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"internalIpv6Prefix\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpCidrRange accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) IpCidrRange() (string, error) {
	res, ok := s.Cache.Load("ipCidrRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"ipCidrRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"ipCidrRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ipv6AccessType accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Ipv6AccessType() (string, error) {
	res, ok := s.Cache.Load("ipv6AccessType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"ipv6AccessType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"ipv6AccessType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ipv6CidrRange accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Ipv6CidrRange() (string, error) {
	res, ok := s.Cache.Load("ipv6CidrRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"ipv6CidrRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"ipv6CidrRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrivateIpGoogleAccess accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) PrivateIpGoogleAccess() (bool, error) {
	res, ok := s.Cache.Load("privateIpGoogleAccess")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"privateIpGoogleAccess\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"privateIpGoogleAccess\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PrivateIpv6GoogleAccess accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) PrivateIpv6GoogleAccess() (string, error) {
	res, ok := s.Cache.Load("privateIpv6GoogleAccess")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"privateIpv6GoogleAccess\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"privateIpv6GoogleAccess\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Purpose accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Purpose() (string, error) {
	res, ok := s.Cache.Load("purpose")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"purpose\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"purpose\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Region() (GcpProjectComputeServiceRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectComputeServiceRegion)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"region\" to the right type (GcpProjectComputeServiceRegion): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StackType accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) StackType() (string, error) {
	res, ok := s.Cache.Load("stackType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"stackType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"stackType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.subnetwork\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.subnetwork\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceSubnetwork) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.subnetwork].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableFlowLogs":
		return nil
	case "externalIpv6Prefix":
		return nil
	case "fingerprint":
		return nil
	case "gatewayAddress":
		return nil
	case "internalIpv6Prefix":
		return nil
	case "ipCidrRange":
		return nil
	case "ipv6AccessType":
		return nil
	case "ipv6CidrRange":
		return nil
	case "privateIpGoogleAccess":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "purpose":
		return nil
	case "region":
		return nil
	case "role":
		return nil
	case "stackType":
		return nil
	case "state":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.subnetwork\" resource")
	}
}

// GcpProjectComputeServiceRouter resource interface
type GcpProjectComputeServiceRouter interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Bgp() (interface{}, error)
	BgpPeers() ([]interface{}, error)
	EncryptedInterconnectRouter() (bool, error)
	Nats() ([]interface{}, error)
	Created() (*time.Time, error)
}

// mqlGcpProjectComputeServiceRouter for the gcp.project.computeService.router resource
type mqlGcpProjectComputeServiceRouter struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectComputeServiceRouter) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.computeService.router resource
func newGcpProjectComputeServiceRouter(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectComputeServiceRouter{runtime.NewResource("gcp.project.computeService.router")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "bgp":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"bgp\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "bgpPeers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"bgpPeers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "encryptedInterconnectRouter":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"encryptedInterconnectRouter\" argument has the wrong type (expected type \"bool\")")
			}
		case "nats":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"nats\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.computeService.router\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.computeService.router with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectComputeServiceRouter) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("bgp"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"bgp\". This field is required.")
	}
	if _, ok := s.Cache.Load("bgpPeers"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"bgpPeers\". This field is required.")
	}
	if _, ok := s.Cache.Load("encryptedInterconnectRouter"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"encryptedInterconnectRouter\". This field is required.")
	}
	if _, ok := s.Cache.Load("nats"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"nats\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.computeService.router\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.router].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bgp":
		return nil
	case "bgpPeers":
		return nil
	case "encryptedInterconnectRouter":
		return nil
	case "nats":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.router\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.router].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "bgp":
		return s.Bgp()
	case "bgpPeers":
		return s.BgpPeers()
	case "encryptedInterconnectRouter":
		return s.EncryptedInterconnectRouter()
	case "nats":
		return s.Nats()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.computeService.router\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Bgp accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Bgp() (interface{}, error) {
	res, ok := s.Cache.Load("bgp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"bgp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"bgp\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// BgpPeers accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) BgpPeers() ([]interface{}, error) {
	res, ok := s.Cache.Load("bgpPeers")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"bgpPeers\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"bgpPeers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptedInterconnectRouter accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) EncryptedInterconnectRouter() (bool, error) {
	res, ok := s.Cache.Load("encryptedInterconnectRouter")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"encryptedInterconnectRouter\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"encryptedInterconnectRouter\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Nats accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Nats() ([]interface{}, error) {
	res, ok := s.Cache.Load("nats")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"nats\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"nats\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.computeService.router\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.computeService.router\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectComputeServiceRouter) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.computeService.router].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bgp":
		return nil
	case "bgpPeers":
		return nil
	case "encryptedInterconnectRouter":
		return nil
	case "nats":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.computeService.router\" resource")
	}
}

// GcpStorage resource interface
type GcpStorage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Buckets() ([]interface{}, error)
}

// mqlGcpStorage for the gcp.storage resource
type mqlGcpStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage resource
func newGcpStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorage{runtime.NewResource("gcp.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].Register")
	switch name {
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage].Field")
	switch name {
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Buckets accessor autogenerated
func (s *mqlGcpStorage) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"gcp.storage\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].MqlCompute")
	switch name {
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlGcpStorage) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpStorageBucket resource interface
type GcpStorageBucket interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Labels() (map[string]interface{}, error)
	Location() (string, error)
	LocationType() (string, error)
	ProjectNumber() (string, error)
	StorageClass() (string, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	IamPolicy() ([]interface{}, error)
	IamConfiguration() (interface{}, error)
}

// mqlGcpStorageBucket for the gcp.storage.bucket resource
type mqlGcpStorageBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorageBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage.bucket resource
func newGcpStorageBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorageBucket{runtime.NewResource("gcp.storage.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "locationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"locationType\" argument has the wrong type (expected type \"string\")")
			}
		case "projectNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"projectNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "storageClass":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"storageClass\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "iamConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorageBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationType"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"locationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectNumber"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"projectNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageClass"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"storageClass\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("iamConfiguration"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"iamConfiguration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorageBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return nil
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorageBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "labels":
		return s.Labels()
	case "location":
		return s.Location()
	case "locationType":
		return s.LocationType()
	case "projectNumber":
		return s.ProjectNumber()
	case "storageClass":
		return s.StorageClass()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "iamPolicy":
		return s.IamPolicy()
	case "iamConfiguration":
		return s.IamConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpStorageBucket) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpStorageBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpStorageBucket) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpStorageBucket) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LocationType accessor autogenerated
func (s *mqlGcpStorageBucket) LocationType() (string, error) {
	res, ok := s.Cache.Load("locationType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"locationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"locationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectNumber accessor autogenerated
func (s *mqlGcpStorageBucket) ProjectNumber() (string, error) {
	res, ok := s.Cache.Load("projectNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"projectNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"projectNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageClass accessor autogenerated
func (s *mqlGcpStorageBucket) StorageClass() (string, error) {
	res, ok := s.Cache.Load("storageClass")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"storageClass\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"storageClass\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpStorageBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcpStorageBucket) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpStorageBucket) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.storage.bucket\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IamConfiguration accessor autogenerated
func (s *mqlGcpStorageBucket) IamConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("iamConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"iamConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorageBucket) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpStorageBucket) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectSqlService resource interface
type GcpProjectSqlService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Instances() ([]interface{}, error)
}

// mqlGcpProjectSqlService for the gcp.project.sqlService resource
type mqlGcpProjectSqlService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService resource
func newGcpProjectSqlService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlService{runtime.NewResource("gcp.project.sqlService")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService].Register")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectSqlService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlGcpProjectSqlService) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.project.sqlService\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpProjectSqlService) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectSqlServiceInstance resource interface
type GcpProjectSqlServiceInstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	AvailableMaintenanceVersions() ([]interface{}, error)
	BackendType() (string, error)
	ConnectionName() (string, error)
	Created() (*time.Time, error)
	CurrentDiskSize() (int64, error)
	DatabaseInstalledVersion() (string, error)
	DatabaseVersion() (string, error)
	DiskEncryptionConfiguration() (interface{}, error)
	DiskEncryptionStatus() (interface{}, error)
	FailoverReplica() (interface{}, error)
	GceZone() (string, error)
	InstanceType() (string, error)
	IpAddresses() ([]interface{}, error)
	MaintenanceVersion() (string, error)
	MasterInstanceName() (string, error)
	MaxDiskSize() (int64, error)
	Name() (string, error)
	Project() (string, error)
	Region() (string, error)
	ReplicaNames() ([]interface{}, error)
	Settings() (GcpProjectSqlServiceInstanceSettings, error)
	ServiceAccountEmailAddress() (string, error)
	State() (string, error)
	Databases() ([]interface{}, error)
}

// mqlGcpProjectSqlServiceInstance for the gcp.project.sqlService.instance resource
type mqlGcpProjectSqlServiceInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance resource
func newGcpProjectSqlServiceInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstance{runtime.NewResource("gcp.project.sqlService.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "availableMaintenanceVersions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"availableMaintenanceVersions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "backendType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"backendType\" argument has the wrong type (expected type \"string\")")
			}
		case "connectionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"connectionName\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "currentDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"currentDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "databaseInstalledVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"databaseInstalledVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"databaseVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "diskEncryptionConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"diskEncryptionConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "diskEncryptionStatus":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"diskEncryptionStatus\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "failoverReplica":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"failoverReplica\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "gceZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"gceZone\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"instanceType\" argument has the wrong type (expected type \"string\")")
			}
		case "ipAddresses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"ipAddresses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "maintenanceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"maintenanceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "masterInstanceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"masterInstanceName\" argument has the wrong type (expected type \"string\")")
			}
		case "maxDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"maxDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "project":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"project\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "replicaNames":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"replicaNames\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "settings":
			if _, ok := val.(GcpProjectSqlServiceInstanceSettings); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"settings\" argument has the wrong type (expected type \"GcpProjectSqlServiceInstanceSettings\")")
			}
		case "serviceAccountEmailAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"serviceAccountEmailAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "databases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"databases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("availableMaintenanceVersions"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"availableMaintenanceVersions\". This field is required.")
	}
	if _, ok := s.Cache.Load("backendType"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"backendType\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionName"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"connectionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentDiskSize"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"currentDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseInstalledVersion"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"databaseInstalledVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseVersion"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"databaseVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskEncryptionConfiguration"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"diskEncryptionConfiguration\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskEncryptionStatus"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"diskEncryptionStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("failoverReplica"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"failoverReplica\". This field is required.")
	}
	if _, ok := s.Cache.Load("gceZone"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"gceZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceType"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"instanceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddresses"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"ipAddresses\". This field is required.")
	}
	if _, ok := s.Cache.Load("maintenanceVersion"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"maintenanceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("masterInstanceName"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"masterInstanceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxDiskSize"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"maxDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("project"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"project\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("replicaNames"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"replicaNames\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"settings\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccountEmailAddress"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"serviceAccountEmailAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance].Register")
	switch name {
	case "projectId":
		return nil
	case "availableMaintenanceVersions":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "created":
		return nil
	case "currentDiskSize":
		return nil
	case "databaseInstalledVersion":
		return nil
	case "databaseVersion":
		return nil
	case "diskEncryptionConfiguration":
		return nil
	case "diskEncryptionStatus":
		return nil
	case "failoverReplica":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "ipAddresses":
		return nil
	case "maintenanceVersion":
		return nil
	case "masterInstanceName":
		return nil
	case "maxDiskSize":
		return nil
	case "name":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "replicaNames":
		return nil
	case "settings":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "state":
		return nil
	case "databases":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "availableMaintenanceVersions":
		return s.AvailableMaintenanceVersions()
	case "backendType":
		return s.BackendType()
	case "connectionName":
		return s.ConnectionName()
	case "created":
		return s.Created()
	case "currentDiskSize":
		return s.CurrentDiskSize()
	case "databaseInstalledVersion":
		return s.DatabaseInstalledVersion()
	case "databaseVersion":
		return s.DatabaseVersion()
	case "diskEncryptionConfiguration":
		return s.DiskEncryptionConfiguration()
	case "diskEncryptionStatus":
		return s.DiskEncryptionStatus()
	case "failoverReplica":
		return s.FailoverReplica()
	case "gceZone":
		return s.GceZone()
	case "instanceType":
		return s.InstanceType()
	case "ipAddresses":
		return s.IpAddresses()
	case "maintenanceVersion":
		return s.MaintenanceVersion()
	case "masterInstanceName":
		return s.MasterInstanceName()
	case "maxDiskSize":
		return s.MaxDiskSize()
	case "name":
		return s.Name()
	case "project":
		return s.Project()
	case "region":
		return s.Region()
	case "replicaNames":
		return s.ReplicaNames()
	case "settings":
		return s.Settings()
	case "serviceAccountEmailAddress":
		return s.ServiceAccountEmailAddress()
	case "state":
		return s.State()
	case "databases":
		return s.Databases()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AvailableMaintenanceVersions accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) AvailableMaintenanceVersions() ([]interface{}, error) {
	res, ok := s.Cache.Load("availableMaintenanceVersions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"availableMaintenanceVersions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"availableMaintenanceVersions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// BackendType accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) BackendType() (string, error) {
	res, ok := s.Cache.Load("backendType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"backendType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"backendType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectionName accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) ConnectionName() (string, error) {
	res, ok := s.Cache.Load("connectionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"connectionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"connectionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CurrentDiskSize accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) CurrentDiskSize() (int64, error) {
	res, ok := s.Cache.Load("currentDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"currentDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"currentDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DatabaseInstalledVersion accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) DatabaseInstalledVersion() (string, error) {
	res, ok := s.Cache.Load("databaseInstalledVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"databaseInstalledVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"databaseInstalledVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseVersion accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) DatabaseVersion() (string, error) {
	res, ok := s.Cache.Load("databaseVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"databaseVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"databaseVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DiskEncryptionConfiguration accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) DiskEncryptionConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("diskEncryptionConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"diskEncryptionConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"diskEncryptionConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// DiskEncryptionStatus accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) DiskEncryptionStatus() (interface{}, error) {
	res, ok := s.Cache.Load("diskEncryptionStatus")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"diskEncryptionStatus\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"diskEncryptionStatus\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// FailoverReplica accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) FailoverReplica() (interface{}, error) {
	res, ok := s.Cache.Load("failoverReplica")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"failoverReplica\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"failoverReplica\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// GceZone accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) GceZone() (string, error) {
	res, ok := s.Cache.Load("gceZone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"gceZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"gceZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceType accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) InstanceType() (string, error) {
	res, ok := s.Cache.Load("instanceType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"instanceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"instanceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpAddresses accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) IpAddresses() ([]interface{}, error) {
	res, ok := s.Cache.Load("ipAddresses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"ipAddresses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"ipAddresses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MaintenanceVersion accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) MaintenanceVersion() (string, error) {
	res, ok := s.Cache.Load("maintenanceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"maintenanceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"maintenanceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MasterInstanceName accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) MasterInstanceName() (string, error) {
	res, ok := s.Cache.Load("masterInstanceName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"masterInstanceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"masterInstanceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxDiskSize accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) MaxDiskSize() (int64, error) {
	res, ok := s.Cache.Load("maxDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"maxDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"maxDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Project accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Project() (string, error) {
	res, ok := s.Cache.Load("project")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"project\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"project\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReplicaNames accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) ReplicaNames() ([]interface{}, error) {
	res, ok := s.Cache.Load("replicaNames")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"replicaNames\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"replicaNames\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Settings() (GcpProjectSqlServiceInstanceSettings, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlServiceInstanceSettings)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"settings\" to the right type (GcpProjectSqlServiceInstanceSettings): %#v", res)
	}
	return tres, nil
}

// ServiceAccountEmailAddress accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) ServiceAccountEmailAddress() (string, error) {
	res, ok := s.Cache.Load("serviceAccountEmailAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"serviceAccountEmailAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"serviceAccountEmailAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Databases accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) Databases() ([]interface{}, error) {
	res, ok := s.Cache.Load("databases")
	if !ok || !res.Valid {
		if err := s.ComputeDatabases(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("databases")
		if !ok {
			return nil, errors.New("\"gcp.project.sqlService.instance\" calculated \"databases\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "databases")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance\" failed to cast field \"databases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "availableMaintenanceVersions":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "created":
		return nil
	case "currentDiskSize":
		return nil
	case "databaseInstalledVersion":
		return nil
	case "databaseVersion":
		return nil
	case "diskEncryptionConfiguration":
		return nil
	case "diskEncryptionStatus":
		return nil
	case "failoverReplica":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "ipAddresses":
		return nil
	case "maintenanceVersion":
		return nil
	case "masterInstanceName":
		return nil
	case "maxDiskSize":
		return nil
	case "name":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "replicaNames":
		return nil
	case "settings":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "state":
		return nil
	case "databases":
		return s.ComputeDatabases()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance\" resource")
	}
}

// ComputeDatabases computer autogenerated
func (s *mqlGcpProjectSqlServiceInstance) ComputeDatabases() error {
	var err error
	if _, ok := s.Cache.Load("databases"); ok {
		return nil
	}
	vres, err := s.GetDatabases()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("databases", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectSqlServiceInstanceDatabase resource interface
type GcpProjectSqlServiceInstanceDatabase interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Charset() (string, error)
	Collation() (string, error)
	Instance() (string, error)
	Name() (string, error)
	SqlserverDatabaseDetails() (interface{}, error)
}

// mqlGcpProjectSqlServiceInstanceDatabase for the gcp.project.sqlService.instance.database resource
type mqlGcpProjectSqlServiceInstanceDatabase struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceDatabase) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.database resource
func newGcpProjectSqlServiceInstanceDatabase(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceDatabase{runtime.NewResource("gcp.project.sqlService.instance.database")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "charset":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"charset\" argument has the wrong type (expected type \"string\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "instance":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"instance\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "sqlserverDatabaseDetails":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"sqlserverDatabaseDetails\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.database\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.database with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceDatabase) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("charset"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"charset\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("instance"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"instance\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("sqlserverDatabaseDetails"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.database\" resource without a \"sqlserverDatabaseDetails\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.database].Register")
	switch name {
	case "projectId":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	case "instance":
		return nil
	case "name":
		return nil
	case "sqlserverDatabaseDetails":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.database\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.database].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "charset":
		return s.Charset()
	case "collation":
		return s.Collation()
	case "instance":
		return s.Instance()
	case "name":
		return s.Name()
	case "sqlserverDatabaseDetails":
		return s.SqlserverDatabaseDetails()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.database\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Charset accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Charset() (string, error) {
	res, ok := s.Cache.Load("charset")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"charset\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"charset\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instance accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Instance() (string, error) {
	res, ok := s.Cache.Load("instance")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"instance\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"instance\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SqlserverDatabaseDetails accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) SqlserverDatabaseDetails() (interface{}, error) {
	res, ok := s.Cache.Load("sqlserverDatabaseDetails")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.database\" failed: no value provided for static field \"sqlserverDatabaseDetails\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.database\" failed to cast field \"sqlserverDatabaseDetails\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceDatabase) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.database].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "charset":
		return nil
	case "collation":
		return nil
	case "instance":
		return nil
	case "name":
		return nil
	case "sqlserverDatabaseDetails":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.database\" resource")
	}
}

// GcpProjectSqlServiceInstanceIpMapping resource interface
type GcpProjectSqlServiceInstanceIpMapping interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	IpAddress() (string, error)
	TimeToRetire() (*time.Time, error)
	Type() (string, error)
}

// mqlGcpProjectSqlServiceInstanceIpMapping for the gcp.project.sqlService.instance.ipMapping resource
type mqlGcpProjectSqlServiceInstanceIpMapping struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.ipMapping resource
func newGcpProjectSqlServiceInstanceIpMapping(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceIpMapping{runtime.NewResource("gcp.project.sqlService.instance.ipMapping")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.ipMapping\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "ipAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.ipMapping\", its \"ipAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "timeToRetire":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.ipMapping\", its \"timeToRetire\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.ipMapping\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.ipMapping\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.ipMapping with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceIpMapping) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.ipMapping\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddress"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.ipMapping\" resource without a \"ipAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("timeToRetire"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.ipMapping\" resource without a \"timeToRetire\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.ipMapping\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.ipMapping].Register")
	switch name {
	case "id":
		return nil
	case "ipAddress":
		return nil
	case "timeToRetire":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.ipMapping\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.ipMapping].Field")
	switch name {
	case "id":
		return s.Id()
	case "ipAddress":
		return s.IpAddress()
	case "timeToRetire":
		return s.TimeToRetire()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.ipMapping\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.ipMapping\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.ipMapping\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpAddress accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) IpAddress() (string, error) {
	res, ok := s.Cache.Load("ipAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.ipMapping\" failed: no value provided for static field \"ipAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.ipMapping\" failed to cast field \"ipAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TimeToRetire accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) TimeToRetire() (*time.Time, error) {
	res, ok := s.Cache.Load("timeToRetire")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.ipMapping\" failed: no value provided for static field \"timeToRetire\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.ipMapping\" failed to cast field \"timeToRetire\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.ipMapping\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.ipMapping\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceIpMapping) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.ipMapping].MqlCompute")
	switch name {
	case "id":
		return nil
	case "ipAddress":
		return nil
	case "timeToRetire":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.ipMapping\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettings resource interface
type GcpProjectSqlServiceInstanceSettings interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	InstanceName() (string, error)
	ActivationPolicy() (string, error)
	ActiveDirectoryConfig() (interface{}, error)
	AvailabilityType() (string, error)
	BackupConfiguration() (GcpProjectSqlServiceInstanceSettingsBackupconfiguration, error)
	Collation() (string, error)
	ConnectorEnforcement() (string, error)
	CrashSafeReplicationEnabled() (bool, error)
	DataDiskSizeGb() (int64, error)
	DataDiskType() (string, error)
	DatabaseFlags() (map[string]interface{}, error)
	DatabaseReplicationEnabled() (bool, error)
	DeletionProtectionEnabled() (bool, error)
	DenyMaintenancePeriods() ([]interface{}, error)
	InsightsConfig() (interface{}, error)
	IpConfiguration() (GcpProjectSqlServiceInstanceSettingsIpConfiguration, error)
	LocationPreference() (interface{}, error)
	MaintenanceWindow() (GcpProjectSqlServiceInstanceSettingsMaintenanceWindow, error)
	PasswordValidationPolicy() (GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy, error)
	PricingPlan() (string, error)
	ReplicationType() (string, error)
	SettingsVersion() (int64, error)
	SqlServerAuditConfig() (interface{}, error)
	StorageAutoResize() (bool, error)
	StorageAutoResizeLimit() (int64, error)
	Tier() (string, error)
	TimeZone() (string, error)
	UserLabels() (map[string]interface{}, error)
}

// mqlGcpProjectSqlServiceInstanceSettings for the gcp.project.sqlService.instance.settings resource
type mqlGcpProjectSqlServiceInstanceSettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings resource
func newGcpProjectSqlServiceInstanceSettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettings{runtime.NewResource("gcp.project.sqlService.instance.settings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"instanceName\" argument has the wrong type (expected type \"string\")")
			}
		case "activationPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"activationPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "activeDirectoryConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"activeDirectoryConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "availabilityType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"availabilityType\" argument has the wrong type (expected type \"string\")")
			}
		case "backupConfiguration":
			if _, ok := val.(GcpProjectSqlServiceInstanceSettingsBackupconfiguration); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"backupConfiguration\" argument has the wrong type (expected type \"GcpProjectSqlServiceInstanceSettingsBackupconfiguration\")")
			}
		case "collation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"collation\" argument has the wrong type (expected type \"string\")")
			}
		case "connectorEnforcement":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"connectorEnforcement\" argument has the wrong type (expected type \"string\")")
			}
		case "crashSafeReplicationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"crashSafeReplicationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "dataDiskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"dataDiskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "dataDiskType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"dataDiskType\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseFlags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"databaseFlags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "databaseReplicationEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"databaseReplicationEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "deletionProtectionEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"deletionProtectionEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "denyMaintenancePeriods":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"denyMaintenancePeriods\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "insightsConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"insightsConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "ipConfiguration":
			if _, ok := val.(GcpProjectSqlServiceInstanceSettingsIpConfiguration); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"ipConfiguration\" argument has the wrong type (expected type \"GcpProjectSqlServiceInstanceSettingsIpConfiguration\")")
			}
		case "locationPreference":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"locationPreference\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "maintenanceWindow":
			if _, ok := val.(GcpProjectSqlServiceInstanceSettingsMaintenanceWindow); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"maintenanceWindow\" argument has the wrong type (expected type \"GcpProjectSqlServiceInstanceSettingsMaintenanceWindow\")")
			}
		case "passwordValidationPolicy":
			if _, ok := val.(GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"passwordValidationPolicy\" argument has the wrong type (expected type \"GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy\")")
			}
		case "pricingPlan":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"pricingPlan\" argument has the wrong type (expected type \"string\")")
			}
		case "replicationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"replicationType\" argument has the wrong type (expected type \"string\")")
			}
		case "settingsVersion":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"settingsVersion\" argument has the wrong type (expected type \"int64\")")
			}
		case "sqlServerAuditConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"sqlServerAuditConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "storageAutoResize":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"storageAutoResize\" argument has the wrong type (expected type \"bool\")")
			}
		case "storageAutoResizeLimit":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"storageAutoResizeLimit\" argument has the wrong type (expected type \"int64\")")
			}
		case "tier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"tier\" argument has the wrong type (expected type \"string\")")
			}
		case "timeZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"timeZone\" argument has the wrong type (expected type \"string\")")
			}
		case "userLabels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"userLabels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceName"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"instanceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("activationPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"activationPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("activeDirectoryConfig"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"activeDirectoryConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("availabilityType"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"availabilityType\". This field is required.")
	}
	if _, ok := s.Cache.Load("backupConfiguration"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"backupConfiguration\". This field is required.")
	}
	if _, ok := s.Cache.Load("collation"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"collation\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectorEnforcement"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"connectorEnforcement\". This field is required.")
	}
	if _, ok := s.Cache.Load("crashSafeReplicationEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"crashSafeReplicationEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataDiskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"dataDiskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("dataDiskType"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"dataDiskType\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseFlags"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"databaseFlags\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseReplicationEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"databaseReplicationEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtectionEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"deletionProtectionEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("denyMaintenancePeriods"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"denyMaintenancePeriods\". This field is required.")
	}
	if _, ok := s.Cache.Load("insightsConfig"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"insightsConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipConfiguration"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"ipConfiguration\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationPreference"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"locationPreference\". This field is required.")
	}
	if _, ok := s.Cache.Load("maintenanceWindow"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"maintenanceWindow\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordValidationPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"passwordValidationPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("pricingPlan"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"pricingPlan\". This field is required.")
	}
	if _, ok := s.Cache.Load("replicationType"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"replicationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("settingsVersion"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"settingsVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("sqlServerAuditConfig"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"sqlServerAuditConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAutoResize"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"storageAutoResize\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAutoResizeLimit"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"storageAutoResizeLimit\". This field is required.")
	}
	if _, ok := s.Cache.Load("tier"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"tier\". This field is required.")
	}
	if _, ok := s.Cache.Load("timeZone"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"timeZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("userLabels"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings\" resource without a \"userLabels\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings].Register")
	switch name {
	case "projectId":
		return nil
	case "instanceName":
		return nil
	case "activationPolicy":
		return nil
	case "activeDirectoryConfig":
		return nil
	case "availabilityType":
		return nil
	case "backupConfiguration":
		return nil
	case "collation":
		return nil
	case "connectorEnforcement":
		return nil
	case "crashSafeReplicationEnabled":
		return nil
	case "dataDiskSizeGb":
		return nil
	case "dataDiskType":
		return nil
	case "databaseFlags":
		return nil
	case "databaseReplicationEnabled":
		return nil
	case "deletionProtectionEnabled":
		return nil
	case "denyMaintenancePeriods":
		return nil
	case "insightsConfig":
		return nil
	case "ipConfiguration":
		return nil
	case "locationPreference":
		return nil
	case "maintenanceWindow":
		return nil
	case "passwordValidationPolicy":
		return nil
	case "pricingPlan":
		return nil
	case "replicationType":
		return nil
	case "settingsVersion":
		return nil
	case "sqlServerAuditConfig":
		return nil
	case "storageAutoResize":
		return nil
	case "storageAutoResizeLimit":
		return nil
	case "tier":
		return nil
	case "timeZone":
		return nil
	case "userLabels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instanceName":
		return s.InstanceName()
	case "activationPolicy":
		return s.ActivationPolicy()
	case "activeDirectoryConfig":
		return s.ActiveDirectoryConfig()
	case "availabilityType":
		return s.AvailabilityType()
	case "backupConfiguration":
		return s.BackupConfiguration()
	case "collation":
		return s.Collation()
	case "connectorEnforcement":
		return s.ConnectorEnforcement()
	case "crashSafeReplicationEnabled":
		return s.CrashSafeReplicationEnabled()
	case "dataDiskSizeGb":
		return s.DataDiskSizeGb()
	case "dataDiskType":
		return s.DataDiskType()
	case "databaseFlags":
		return s.DatabaseFlags()
	case "databaseReplicationEnabled":
		return s.DatabaseReplicationEnabled()
	case "deletionProtectionEnabled":
		return s.DeletionProtectionEnabled()
	case "denyMaintenancePeriods":
		return s.DenyMaintenancePeriods()
	case "insightsConfig":
		return s.InsightsConfig()
	case "ipConfiguration":
		return s.IpConfiguration()
	case "locationPreference":
		return s.LocationPreference()
	case "maintenanceWindow":
		return s.MaintenanceWindow()
	case "passwordValidationPolicy":
		return s.PasswordValidationPolicy()
	case "pricingPlan":
		return s.PricingPlan()
	case "replicationType":
		return s.ReplicationType()
	case "settingsVersion":
		return s.SettingsVersion()
	case "sqlServerAuditConfig":
		return s.SqlServerAuditConfig()
	case "storageAutoResize":
		return s.StorageAutoResize()
	case "storageAutoResizeLimit":
		return s.StorageAutoResizeLimit()
	case "tier":
		return s.Tier()
	case "timeZone":
		return s.TimeZone()
	case "userLabels":
		return s.UserLabels()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceName accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) InstanceName() (string, error) {
	res, ok := s.Cache.Load("instanceName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"instanceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"instanceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ActivationPolicy accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) ActivationPolicy() (string, error) {
	res, ok := s.Cache.Load("activationPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"activationPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"activationPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ActiveDirectoryConfig accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) ActiveDirectoryConfig() (interface{}, error) {
	res, ok := s.Cache.Load("activeDirectoryConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"activeDirectoryConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"activeDirectoryConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AvailabilityType accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) AvailabilityType() (string, error) {
	res, ok := s.Cache.Load("availabilityType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"availabilityType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"availabilityType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackupConfiguration accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) BackupConfiguration() (GcpProjectSqlServiceInstanceSettingsBackupconfiguration, error) {
	res, ok := s.Cache.Load("backupConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"backupConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlServiceInstanceSettingsBackupconfiguration)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"backupConfiguration\" to the right type (GcpProjectSqlServiceInstanceSettingsBackupconfiguration): %#v", res)
	}
	return tres, nil
}

// Collation accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) Collation() (string, error) {
	res, ok := s.Cache.Load("collation")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"collation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"collation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectorEnforcement accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) ConnectorEnforcement() (string, error) {
	res, ok := s.Cache.Load("connectorEnforcement")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"connectorEnforcement\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"connectorEnforcement\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CrashSafeReplicationEnabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) CrashSafeReplicationEnabled() (bool, error) {
	res, ok := s.Cache.Load("crashSafeReplicationEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"crashSafeReplicationEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"crashSafeReplicationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DataDiskSizeGb accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DataDiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("dataDiskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"dataDiskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"dataDiskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DataDiskType accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DataDiskType() (string, error) {
	res, ok := s.Cache.Load("dataDiskType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"dataDiskType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"dataDiskType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseFlags accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DatabaseFlags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("databaseFlags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"databaseFlags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"databaseFlags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// DatabaseReplicationEnabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DatabaseReplicationEnabled() (bool, error) {
	res, ok := s.Cache.Load("databaseReplicationEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"databaseReplicationEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"databaseReplicationEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DeletionProtectionEnabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DeletionProtectionEnabled() (bool, error) {
	res, ok := s.Cache.Load("deletionProtectionEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"deletionProtectionEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"deletionProtectionEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DenyMaintenancePeriods accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) DenyMaintenancePeriods() ([]interface{}, error) {
	res, ok := s.Cache.Load("denyMaintenancePeriods")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"denyMaintenancePeriods\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"denyMaintenancePeriods\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// InsightsConfig accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) InsightsConfig() (interface{}, error) {
	res, ok := s.Cache.Load("insightsConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"insightsConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"insightsConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// IpConfiguration accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) IpConfiguration() (GcpProjectSqlServiceInstanceSettingsIpConfiguration, error) {
	res, ok := s.Cache.Load("ipConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"ipConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlServiceInstanceSettingsIpConfiguration)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"ipConfiguration\" to the right type (GcpProjectSqlServiceInstanceSettingsIpConfiguration): %#v", res)
	}
	return tres, nil
}

// LocationPreference accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) LocationPreference() (interface{}, error) {
	res, ok := s.Cache.Load("locationPreference")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"locationPreference\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"locationPreference\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// MaintenanceWindow accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) MaintenanceWindow() (GcpProjectSqlServiceInstanceSettingsMaintenanceWindow, error) {
	res, ok := s.Cache.Load("maintenanceWindow")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"maintenanceWindow\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlServiceInstanceSettingsMaintenanceWindow)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"maintenanceWindow\" to the right type (GcpProjectSqlServiceInstanceSettingsMaintenanceWindow): %#v", res)
	}
	return tres, nil
}

// PasswordValidationPolicy accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) PasswordValidationPolicy() (GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy, error) {
	res, ok := s.Cache.Load("passwordValidationPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"passwordValidationPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"passwordValidationPolicy\" to the right type (GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy): %#v", res)
	}
	return tres, nil
}

// PricingPlan accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) PricingPlan() (string, error) {
	res, ok := s.Cache.Load("pricingPlan")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"pricingPlan\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"pricingPlan\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReplicationType accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) ReplicationType() (string, error) {
	res, ok := s.Cache.Load("replicationType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"replicationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"replicationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SettingsVersion accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) SettingsVersion() (int64, error) {
	res, ok := s.Cache.Load("settingsVersion")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"settingsVersion\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"settingsVersion\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// SqlServerAuditConfig accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) SqlServerAuditConfig() (interface{}, error) {
	res, ok := s.Cache.Load("sqlServerAuditConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"sqlServerAuditConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"sqlServerAuditConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// StorageAutoResize accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) StorageAutoResize() (bool, error) {
	res, ok := s.Cache.Load("storageAutoResize")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"storageAutoResize\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"storageAutoResize\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StorageAutoResizeLimit accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) StorageAutoResizeLimit() (int64, error) {
	res, ok := s.Cache.Load("storageAutoResizeLimit")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"storageAutoResizeLimit\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"storageAutoResizeLimit\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Tier accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) Tier() (string, error) {
	res, ok := s.Cache.Load("tier")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"tier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"tier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TimeZone accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) TimeZone() (string, error) {
	res, ok := s.Cache.Load("timeZone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"timeZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"timeZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserLabels accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) UserLabels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("userLabels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings\" failed: no value provided for static field \"userLabels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings\" failed to cast field \"userLabels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettings) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "instanceName":
		return nil
	case "activationPolicy":
		return nil
	case "activeDirectoryConfig":
		return nil
	case "availabilityType":
		return nil
	case "backupConfiguration":
		return nil
	case "collation":
		return nil
	case "connectorEnforcement":
		return nil
	case "crashSafeReplicationEnabled":
		return nil
	case "dataDiskSizeGb":
		return nil
	case "dataDiskType":
		return nil
	case "databaseFlags":
		return nil
	case "databaseReplicationEnabled":
		return nil
	case "deletionProtectionEnabled":
		return nil
	case "denyMaintenancePeriods":
		return nil
	case "insightsConfig":
		return nil
	case "ipConfiguration":
		return nil
	case "locationPreference":
		return nil
	case "maintenanceWindow":
		return nil
	case "passwordValidationPolicy":
		return nil
	case "pricingPlan":
		return nil
	case "replicationType":
		return nil
	case "settingsVersion":
		return nil
	case "sqlServerAuditConfig":
		return nil
	case "storageAutoResize":
		return nil
	case "storageAutoResizeLimit":
		return nil
	case "tier":
		return nil
	case "timeZone":
		return nil
	case "userLabels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettingsBackupconfiguration resource interface
type GcpProjectSqlServiceInstanceSettingsBackupconfiguration interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	BackupRetentionSettings() (interface{}, error)
	BinaryLogEnabled() (bool, error)
	Enabled() (bool, error)
	Location() (string, error)
	PointInTimeRecoveryEnabled() (bool, error)
	StartTime() (string, error)
	TransactionLogRetentionDays() (int64, error)
}

// mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration for the gcp.project.sqlService.instance.settings.backupconfiguration resource
type mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings.backupconfiguration resource
func newGcpProjectSqlServiceInstanceSettingsBackupconfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration{runtime.NewResource("gcp.project.sqlService.instance.settings.backupconfiguration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "backupRetentionSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"backupRetentionSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "binaryLogEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"binaryLogEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "pointInTimeRecoveryEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"pointInTimeRecoveryEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "startTime":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"startTime\" argument has the wrong type (expected type \"string\")")
			}
		case "transactionLogRetentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"transactionLogRetentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.backupconfiguration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings.backupconfiguration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("backupRetentionSettings"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"backupRetentionSettings\". This field is required.")
	}
	if _, ok := s.Cache.Load("binaryLogEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"binaryLogEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("pointInTimeRecoveryEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"pointInTimeRecoveryEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("startTime"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"startTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("transactionLogRetentionDays"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource without a \"transactionLogRetentionDays\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.backupconfiguration].Register")
	switch name {
	case "id":
		return nil
	case "backupRetentionSettings":
		return nil
	case "binaryLogEnabled":
		return nil
	case "enabled":
		return nil
	case "location":
		return nil
	case "pointInTimeRecoveryEnabled":
		return nil
	case "startTime":
		return nil
	case "transactionLogRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.backupconfiguration].Field")
	switch name {
	case "id":
		return s.Id()
	case "backupRetentionSettings":
		return s.BackupRetentionSettings()
	case "binaryLogEnabled":
		return s.BinaryLogEnabled()
	case "enabled":
		return s.Enabled()
	case "location":
		return s.Location()
	case "pointInTimeRecoveryEnabled":
		return s.PointInTimeRecoveryEnabled()
	case "startTime":
		return s.StartTime()
	case "transactionLogRetentionDays":
		return s.TransactionLogRetentionDays()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackupRetentionSettings accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) BackupRetentionSettings() (interface{}, error) {
	res, ok := s.Cache.Load("backupRetentionSettings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"backupRetentionSettings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"backupRetentionSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// BinaryLogEnabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) BinaryLogEnabled() (bool, error) {
	res, ok := s.Cache.Load("binaryLogEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"binaryLogEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"binaryLogEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PointInTimeRecoveryEnabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) PointInTimeRecoveryEnabled() (bool, error) {
	res, ok := s.Cache.Load("pointInTimeRecoveryEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"pointInTimeRecoveryEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"pointInTimeRecoveryEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StartTime accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) StartTime() (string, error) {
	res, ok := s.Cache.Load("startTime")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"startTime\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"startTime\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TransactionLogRetentionDays accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) TransactionLogRetentionDays() (int64, error) {
	res, ok := s.Cache.Load("transactionLogRetentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed: no value provided for static field \"transactionLogRetentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings.backupconfiguration\" failed to cast field \"transactionLogRetentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.backupconfiguration].MqlCompute")
	switch name {
	case "id":
		return nil
	case "backupRetentionSettings":
		return nil
	case "binaryLogEnabled":
		return nil
	case "enabled":
		return nil
	case "location":
		return nil
	case "pointInTimeRecoveryEnabled":
		return nil
	case "startTime":
		return nil
	case "transactionLogRetentionDays":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.backupconfiguration\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod resource interface
type GcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	EndDate() (string, error)
	StartDate() (string, error)
	Time() (string, error)
}

// mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod for the gcp.project.sqlService.instance.settings.denyMaintenancePeriod resource
type mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings.denyMaintenancePeriod resource
func newGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod{runtime.NewResource("gcp.project.sqlService.instance.settings.denyMaintenancePeriod")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "endDate":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\", its \"endDate\" argument has the wrong type (expected type \"string\")")
			}
		case "startDate":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\", its \"startDate\" argument has the wrong type (expected type \"string\")")
			}
		case "time":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\", its \"time\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings.denyMaintenancePeriod with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("endDate"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource without a \"endDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("startDate"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource without a \"startDate\". This field is required.")
	}
	if _, ok := s.Cache.Load("time"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource without a \"time\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.denyMaintenancePeriod].Register")
	switch name {
	case "id":
		return nil
	case "endDate":
		return nil
	case "startDate":
		return nil
	case "time":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.denyMaintenancePeriod].Field")
	switch name {
	case "id":
		return s.Id()
	case "endDate":
		return s.EndDate()
	case "startDate":
		return s.StartDate()
	case "time":
		return s.Time()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EndDate accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) EndDate() (string, error) {
	res, ok := s.Cache.Load("endDate")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed: no value provided for static field \"endDate\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed to cast field \"endDate\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StartDate accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) StartDate() (string, error) {
	res, ok := s.Cache.Load("startDate")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed: no value provided for static field \"startDate\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed to cast field \"startDate\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Time accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) Time() (string, error) {
	res, ok := s.Cache.Load("time")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed: no value provided for static field \"time\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" failed to cast field \"time\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.denyMaintenancePeriod].MqlCompute")
	switch name {
	case "id":
		return nil
	case "endDate":
		return nil
	case "startDate":
		return nil
	case "time":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.denyMaintenancePeriod\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettingsIpConfiguration resource interface
type GcpProjectSqlServiceInstanceSettingsIpConfiguration interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	AllocatedIpRange() (string, error)
	AuthorizedNetworks() ([]interface{}, error)
	Ipv4Enabled() (bool, error)
	PrivateNetwork() (string, error)
	RequireSsl() (bool, error)
}

// mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration for the gcp.project.sqlService.instance.settings.ipConfiguration resource
type mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings.ipConfiguration resource
func newGcpProjectSqlServiceInstanceSettingsIpConfiguration(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration{runtime.NewResource("gcp.project.sqlService.instance.settings.ipConfiguration")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "allocatedIpRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"allocatedIpRange\" argument has the wrong type (expected type \"string\")")
			}
		case "authorizedNetworks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"authorizedNetworks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ipv4Enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"ipv4Enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "privateNetwork":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"privateNetwork\" argument has the wrong type (expected type \"string\")")
			}
		case "requireSsl":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"requireSsl\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.ipConfiguration\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings.ipConfiguration with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("allocatedIpRange"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"allocatedIpRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("authorizedNetworks"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"authorizedNetworks\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv4Enabled"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"ipv4Enabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateNetwork"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"privateNetwork\". This field is required.")
	}
	if _, ok := s.Cache.Load("requireSsl"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource without a \"requireSsl\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.ipConfiguration].Register")
	switch name {
	case "id":
		return nil
	case "allocatedIpRange":
		return nil
	case "authorizedNetworks":
		return nil
	case "ipv4Enabled":
		return nil
	case "privateNetwork":
		return nil
	case "requireSsl":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.ipConfiguration].Field")
	switch name {
	case "id":
		return s.Id()
	case "allocatedIpRange":
		return s.AllocatedIpRange()
	case "authorizedNetworks":
		return s.AuthorizedNetworks()
	case "ipv4Enabled":
		return s.Ipv4Enabled()
	case "privateNetwork":
		return s.PrivateNetwork()
	case "requireSsl":
		return s.RequireSsl()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllocatedIpRange accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) AllocatedIpRange() (string, error) {
	res, ok := s.Cache.Load("allocatedIpRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"allocatedIpRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"allocatedIpRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AuthorizedNetworks accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) AuthorizedNetworks() ([]interface{}, error) {
	res, ok := s.Cache.Load("authorizedNetworks")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"authorizedNetworks\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"authorizedNetworks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ipv4Enabled accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) Ipv4Enabled() (bool, error) {
	res, ok := s.Cache.Load("ipv4Enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"ipv4Enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"ipv4Enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PrivateNetwork accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) PrivateNetwork() (string, error) {
	res, ok := s.Cache.Load("privateNetwork")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"privateNetwork\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"privateNetwork\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RequireSsl accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) RequireSsl() (bool, error) {
	res, ok := s.Cache.Load("requireSsl")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed: no value provided for static field \"requireSsl\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.ipConfiguration\" failed to cast field \"requireSsl\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.ipConfiguration].MqlCompute")
	switch name {
	case "id":
		return nil
	case "allocatedIpRange":
		return nil
	case "authorizedNetworks":
		return nil
	case "ipv4Enabled":
		return nil
	case "privateNetwork":
		return nil
	case "requireSsl":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.ipConfiguration\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettingsMaintenanceWindow resource interface
type GcpProjectSqlServiceInstanceSettingsMaintenanceWindow interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Day() (int64, error)
	Hour() (int64, error)
	UpdateTrack() (string, error)
}

// mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow for the gcp.project.sqlService.instance.settings.maintenanceWindow resource
type mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings.maintenanceWindow resource
func newGcpProjectSqlServiceInstanceSettingsMaintenanceWindow(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow{runtime.NewResource("gcp.project.sqlService.instance.settings.maintenanceWindow")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.maintenanceWindow\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "day":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.maintenanceWindow\", its \"day\" argument has the wrong type (expected type \"int64\")")
			}
		case "hour":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.maintenanceWindow\", its \"hour\" argument has the wrong type (expected type \"int64\")")
			}
		case "updateTrack":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.maintenanceWindow\", its \"updateTrack\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.maintenanceWindow\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings.maintenanceWindow with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("day"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource without a \"day\". This field is required.")
	}
	if _, ok := s.Cache.Load("hour"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource without a \"hour\". This field is required.")
	}
	if _, ok := s.Cache.Load("updateTrack"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource without a \"updateTrack\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.maintenanceWindow].Register")
	switch name {
	case "id":
		return nil
	case "day":
		return nil
	case "hour":
		return nil
	case "updateTrack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.maintenanceWindow].Field")
	switch name {
	case "id":
		return s.Id()
	case "day":
		return s.Day()
	case "hour":
		return s.Hour()
	case "updateTrack":
		return s.UpdateTrack()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Day accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Day() (int64, error) {
	res, ok := s.Cache.Load("day")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed: no value provided for static field \"day\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed to cast field \"day\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Hour accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) Hour() (int64, error) {
	res, ok := s.Cache.Load("hour")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed: no value provided for static field \"hour\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed to cast field \"hour\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// UpdateTrack accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) UpdateTrack() (string, error) {
	res, ok := s.Cache.Load("updateTrack")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed: no value provided for static field \"updateTrack\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.maintenanceWindow\" failed to cast field \"updateTrack\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.maintenanceWindow].MqlCompute")
	switch name {
	case "id":
		return nil
	case "day":
		return nil
	case "hour":
		return nil
	case "updateTrack":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.maintenanceWindow\" resource")
	}
}

// GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy resource interface
type GcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Complexity() (string, error)
	DisallowUsernameSubstring() (bool, error)
	EnabledPasswordPolicy() (bool, error)
	MinLength() (int64, error)
	PasswordChangeInterval() (string, error)
	ReuseInterval() (int64, error)
}

// mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy for the gcp.project.sqlService.instance.settings.passwordValidationPolicy resource
type mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.sqlService.instance.settings.passwordValidationPolicy resource
func newGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy{runtime.NewResource("gcp.project.sqlService.instance.settings.passwordValidationPolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "complexity":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"complexity\" argument has the wrong type (expected type \"string\")")
			}
		case "disallowUsernameSubstring":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"disallowUsernameSubstring\" argument has the wrong type (expected type \"bool\")")
			}
		case "enabledPasswordPolicy":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"enabledPasswordPolicy\" argument has the wrong type (expected type \"bool\")")
			}
		case "minLength":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"minLength\" argument has the wrong type (expected type \"int64\")")
			}
		case "passwordChangeInterval":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"passwordChangeInterval\" argument has the wrong type (expected type \"string\")")
			}
		case "reuseInterval":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"reuseInterval\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.sqlService.instance.settings.passwordValidationPolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("complexity"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"complexity\". This field is required.")
	}
	if _, ok := s.Cache.Load("disallowUsernameSubstring"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"disallowUsernameSubstring\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabledPasswordPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"enabledPasswordPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("minLength"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"minLength\". This field is required.")
	}
	if _, ok := s.Cache.Load("passwordChangeInterval"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"passwordChangeInterval\". This field is required.")
	}
	if _, ok := s.Cache.Load("reuseInterval"); !ok {
		return errors.New("Initialized \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource without a \"reuseInterval\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.passwordValidationPolicy].Register")
	switch name {
	case "id":
		return nil
	case "complexity":
		return nil
	case "disallowUsernameSubstring":
		return nil
	case "enabledPasswordPolicy":
		return nil
	case "minLength":
		return nil
	case "passwordChangeInterval":
		return nil
	case "reuseInterval":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.passwordValidationPolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "complexity":
		return s.Complexity()
	case "disallowUsernameSubstring":
		return s.DisallowUsernameSubstring()
	case "enabledPasswordPolicy":
		return s.EnabledPasswordPolicy()
	case "minLength":
		return s.MinLength()
	case "passwordChangeInterval":
		return s.PasswordChangeInterval()
	case "reuseInterval":
		return s.ReuseInterval()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Complexity accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) Complexity() (string, error) {
	res, ok := s.Cache.Load("complexity")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"complexity\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"complexity\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisallowUsernameSubstring accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) DisallowUsernameSubstring() (bool, error) {
	res, ok := s.Cache.Load("disallowUsernameSubstring")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"disallowUsernameSubstring\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"disallowUsernameSubstring\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnabledPasswordPolicy accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) EnabledPasswordPolicy() (bool, error) {
	res, ok := s.Cache.Load("enabledPasswordPolicy")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"enabledPasswordPolicy\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"enabledPasswordPolicy\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MinLength accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) MinLength() (int64, error) {
	res, ok := s.Cache.Load("minLength")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"minLength\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"minLength\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// PasswordChangeInterval accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) PasswordChangeInterval() (string, error) {
	res, ok := s.Cache.Load("passwordChangeInterval")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"passwordChangeInterval\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"passwordChangeInterval\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReuseInterval accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) ReuseInterval() (int64, error) {
	res, ok := s.Cache.Load("reuseInterval")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed: no value provided for static field \"reuseInterval\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" failed to cast field \"reuseInterval\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.sqlService.instance.settings.passwordValidationPolicy].MqlCompute")
	switch name {
	case "id":
		return nil
	case "complexity":
		return nil
	case "disallowUsernameSubstring":
		return nil
	case "enabledPasswordPolicy":
		return nil
	case "minLength":
		return nil
	case "passwordChangeInterval":
		return nil
	case "reuseInterval":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.sqlService.instance.settings.passwordValidationPolicy\" resource")
	}
}

// GcpBigquery resource interface
type GcpBigquery interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Datasets() ([]interface{}, error)
}

// mqlGcpBigquery for the gcp.bigquery resource
type mqlGcpBigquery struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigquery) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery resource
func newGcpBigquery(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigquery{runtime.NewResource("gcp.bigquery")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "datasets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"datasets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigquery) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigquery) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Register")
	switch name {
	case "datasets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigquery) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Field")
	switch name {
	case "datasets":
		return s.Datasets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Datasets accessor autogenerated
func (s *mqlGcpBigquery) Datasets() ([]interface{}, error) {
	res, ok := s.Cache.Load("datasets")
	if !ok || !res.Valid {
		if err := s.ComputeDatasets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("datasets")
		if !ok {
			return nil, errors.New("\"gcp.bigquery\" calculated \"datasets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "datasets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery\" failed to cast field \"datasets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigquery) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].MqlCompute")
	switch name {
	case "datasets":
		return s.ComputeDatasets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// ComputeDatasets computer autogenerated
func (s *mqlGcpBigquery) ComputeDatasets() error {
	var err error
	if _, ok := s.Cache.Load("datasets"); ok {
		return nil
	}
	vres, err := s.GetDatasets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("datasets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryDataset resource interface
type GcpBigqueryDataset interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	Location() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Tags() (map[string]interface{}, error)
	KmsName() (string, error)
	Tables() ([]interface{}, error)
	Models() ([]interface{}, error)
	Routines() ([]interface{}, error)
}

// mqlGcpBigqueryDataset for the gcp.bigquery.dataset resource
type mqlGcpBigqueryDataset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryDataset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.dataset resource
func newGcpBigqueryDataset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryDataset{runtime.NewResource("gcp.bigquery.dataset")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "tables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "models":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"models\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routines":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"routines\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.dataset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryDataset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"kmsName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryDataset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "kmsName":
		return nil
	case "tables":
		return nil
	case "models":
		return nil
	case "routines":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryDataset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "location":
		return s.Location()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "tags":
		return s.Tags()
	case "kmsName":
		return s.KmsName()
	case "tables":
		return s.Tables()
	case "models":
		return s.Models()
	case "routines":
		return s.Routines()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryDataset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryDataset) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryDataset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryDataset) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryDataset) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryDataset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryDataset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryDataset) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryDataset) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tables accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tables() ([]interface{}, error) {
	res, ok := s.Cache.Load("tables")
	if !ok || !res.Valid {
		if err := s.ComputeTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tables")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"tables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Models accessor autogenerated
func (s *mqlGcpBigqueryDataset) Models() ([]interface{}, error) {
	res, ok := s.Cache.Load("models")
	if !ok || !res.Valid {
		if err := s.ComputeModels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("models")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"models\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "models")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"models\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Routines accessor autogenerated
func (s *mqlGcpBigqueryDataset) Routines() ([]interface{}, error) {
	res, ok := s.Cache.Load("routines")
	if !ok || !res.Valid {
		if err := s.ComputeRoutines(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routines")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"routines\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routines")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"routines\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryDataset) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "kmsName":
		return nil
	case "tables":
		return s.ComputeTables()
	case "models":
		return s.ComputeModels()
	case "routines":
		return s.ComputeRoutines()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// ComputeTables computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeTables() error {
	var err error
	if _, ok := s.Cache.Load("tables"); ok {
		return nil
	}
	vres, err := s.GetTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeModels computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeModels() error {
	var err error
	if _, ok := s.Cache.Load("models"); ok {
		return nil
	}
	vres, err := s.GetModels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("models", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoutines computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeRoutines() error {
	var err error
	if _, ok := s.Cache.Load("routines"); ok {
		return nil
	}
	vres, err := s.GetRoutines()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routines", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryTable resource interface
type GcpBigqueryTable interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	DatasetId() (string, error)
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	Labels() (map[string]interface{}, error)
	UseLegacySQL() (bool, error)
	RequirePartitionFilter() (bool, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	NumBytes() (int64, error)
	NumLongTermBytes() (int64, error)
	NumRows() (int64, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
	KmsName() (string, error)
	SnapshotTime() (*time.Time, error)
	ViewQuery() (string, error)
	ClusteringFields() (interface{}, error)
	ExternalDataConfig() (interface{}, error)
	MaterializedView() (interface{}, error)
	RangePartitioning() (interface{}, error)
	TimePartitioning() (interface{}, error)
	Schema() ([]interface{}, error)
}

// mqlGcpBigqueryTable for the gcp.bigquery.table resource
type mqlGcpBigqueryTable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryTable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.table resource
func newGcpBigqueryTable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryTable{runtime.NewResource("gcp.bigquery.table")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "useLegacySQL":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"useLegacySQL\" argument has the wrong type (expected type \"bool\")")
			}
		case "requirePartitionFilter":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"requirePartitionFilter\" argument has the wrong type (expected type \"bool\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "numBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numLongTermBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numLongTermBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numRows":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numRows\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "snapshotTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"snapshotTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "viewQuery":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"viewQuery\" argument has the wrong type (expected type \"string\")")
			}
		case "clusteringFields":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"clusteringFields\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "externalDataConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"externalDataConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "materializedView":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"materializedView\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rangePartitioning":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"rangePartitioning\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "timePartitioning":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"timePartitioning\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "schema":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"schema\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.table with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryTable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("useLegacySQL"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"useLegacySQL\". This field is required.")
	}
	if _, ok := s.Cache.Load("requirePartitionFilter"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"requirePartitionFilter\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("numBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numLongTermBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numLongTermBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numRows"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numRows\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"expirationTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"kmsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("snapshotTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"snapshotTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("viewQuery"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"viewQuery\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusteringFields"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"clusteringFields\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalDataConfig"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"externalDataConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("materializedView"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"materializedView\". This field is required.")
	}
	if _, ok := s.Cache.Load("rangePartitioning"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"rangePartitioning\". This field is required.")
	}
	if _, ok := s.Cache.Load("timePartitioning"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"timePartitioning\". This field is required.")
	}
	if _, ok := s.Cache.Load("schema"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"schema\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryTable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "datasetId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	case "snapshotTime":
		return nil
	case "viewQuery":
		return nil
	case "clusteringFields":
		return nil
	case "externalDataConfig":
		return nil
	case "materializedView":
		return nil
	case "rangePartitioning":
		return nil
	case "timePartitioning":
		return nil
	case "schema":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryTable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "datasetId":
		return s.DatasetId()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "labels":
		return s.Labels()
	case "useLegacySQL":
		return s.UseLegacySQL()
	case "requirePartitionFilter":
		return s.RequirePartitionFilter()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "numBytes":
		return s.NumBytes()
	case "numLongTermBytes":
		return s.NumLongTermBytes()
	case "numRows":
		return s.NumRows()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	case "kmsName":
		return s.KmsName()
	case "snapshotTime":
		return s.SnapshotTime()
	case "viewQuery":
		return s.ViewQuery()
	case "clusteringFields":
		return s.ClusteringFields()
	case "externalDataConfig":
		return s.ExternalDataConfig()
	case "materializedView":
		return s.MaterializedView()
	case "rangePartitioning":
		return s.RangePartitioning()
	case "timePartitioning":
		return s.TimePartitioning()
	case "schema":
		return s.Schema()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryTable) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryTable) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryTable) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryTable) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryTable) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryTable) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryTable) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// UseLegacySQL accessor autogenerated
func (s *mqlGcpBigqueryTable) UseLegacySQL() (bool, error) {
	res, ok := s.Cache.Load("useLegacySQL")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"useLegacySQL\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"useLegacySQL\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RequirePartitionFilter accessor autogenerated
func (s *mqlGcpBigqueryTable) RequirePartitionFilter() (bool, error) {
	res, ok := s.Cache.Load("requirePartitionFilter")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"requirePartitionFilter\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"requirePartitionFilter\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryTable) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryTable) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// NumBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumBytes() (int64, error) {
	res, ok := s.Cache.Load("numBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumLongTermBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumLongTermBytes() (int64, error) {
	res, ok := s.Cache.Load("numLongTermBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numLongTermBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numLongTermBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumRows accessor autogenerated
func (s *mqlGcpBigqueryTable) NumRows() (int64, error) {
	res, ok := s.Cache.Load("numRows")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numRows\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numRows\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryTable) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryTable) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryTable) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SnapshotTime accessor autogenerated
func (s *mqlGcpBigqueryTable) SnapshotTime() (*time.Time, error) {
	res, ok := s.Cache.Load("snapshotTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"snapshotTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"snapshotTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ViewQuery accessor autogenerated
func (s *mqlGcpBigqueryTable) ViewQuery() (string, error) {
	res, ok := s.Cache.Load("viewQuery")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"viewQuery\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"viewQuery\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusteringFields accessor autogenerated
func (s *mqlGcpBigqueryTable) ClusteringFields() (interface{}, error) {
	res, ok := s.Cache.Load("clusteringFields")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"clusteringFields\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"clusteringFields\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ExternalDataConfig accessor autogenerated
func (s *mqlGcpBigqueryTable) ExternalDataConfig() (interface{}, error) {
	res, ok := s.Cache.Load("externalDataConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"externalDataConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"externalDataConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// MaterializedView accessor autogenerated
func (s *mqlGcpBigqueryTable) MaterializedView() (interface{}, error) {
	res, ok := s.Cache.Load("materializedView")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"materializedView\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"materializedView\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RangePartitioning accessor autogenerated
func (s *mqlGcpBigqueryTable) RangePartitioning() (interface{}, error) {
	res, ok := s.Cache.Load("rangePartitioning")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"rangePartitioning\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"rangePartitioning\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// TimePartitioning accessor autogenerated
func (s *mqlGcpBigqueryTable) TimePartitioning() (interface{}, error) {
	res, ok := s.Cache.Load("timePartitioning")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"timePartitioning\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"timePartitioning\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Schema accessor autogenerated
func (s *mqlGcpBigqueryTable) Schema() ([]interface{}, error) {
	res, ok := s.Cache.Load("schema")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"schema\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"schema\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryTable) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "datasetId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	case "snapshotTime":
		return nil
	case "viewQuery":
		return nil
	case "clusteringFields":
		return nil
	case "externalDataConfig":
		return nil
	case "materializedView":
		return nil
	case "rangePartitioning":
		return nil
	case "timePartitioning":
		return nil
	case "schema":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// GcpBigqueryModel resource interface
type GcpBigqueryModel interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
	KmsName() (string, error)
}

// mqlGcpBigqueryModel for the gcp.bigquery.model resource
type mqlGcpBigqueryModel struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryModel) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.model resource
func newGcpBigqueryModel(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryModel{runtime.NewResource("gcp.bigquery.model")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.model with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryModel) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"expirationTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"kmsName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryModel) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryModel) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	case "kmsName":
		return s.KmsName()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryModel) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryModel) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryModel) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryModel) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryModel) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryModel) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryModel) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryModel) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryModel) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryModel) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryModel) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryModel) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryModel) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].MqlCompute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// GcpBigqueryRoutine resource interface
type GcpBigqueryRoutine interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Language() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
}

// mqlGcpBigqueryRoutine for the gcp.bigquery.routine resource
type mqlGcpBigqueryRoutine struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryRoutine) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.routine resource
func newGcpBigqueryRoutine(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryRoutine{runtime.NewResource("gcp.bigquery.routine")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "language":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"language\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.routine with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryRoutine) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("language"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"language\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "language":
		return s.Language()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Language accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Language() (string, error) {
	res, ok := s.Cache.Load("language")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"language\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"language\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryRoutine) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].MqlCompute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// GcpDns resource interface
type GcpDns interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	ManagedZones() ([]interface{}, error)
	Policies() ([]interface{}, error)
}

// mqlGcpDns for the gcp.dns resource
type mqlGcpDns struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDns) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns resource
func newGcpDns(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDns{runtime.NewResource("gcp.dns")}
	var existing GcpDns
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "managedZones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"managedZones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "policies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"policies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDns) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDns) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns].Register")
	switch name {
	case "projectId":
		return nil
	case "managedZones":
		return nil
	case "policies":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDns) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "managedZones":
		return s.ManagedZones()
	case "policies":
		return s.Policies()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDns) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedZones accessor autogenerated
func (s *mqlGcpDns) ManagedZones() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedZones")
	if !ok || !res.Valid {
		if err := s.ComputeManagedZones(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("managedZones")
		if !ok {
			return nil, errors.New("\"gcp.dns\" calculated \"managedZones\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "managedZones")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns\" failed to cast field \"managedZones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Policies accessor autogenerated
func (s *mqlGcpDns) Policies() ([]interface{}, error) {
	res, ok := s.Cache.Load("policies")
	if !ok || !res.Valid {
		if err := s.ComputePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policies")
		if !ok {
			return nil, errors.New("\"gcp.dns\" calculated \"policies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns\" failed to cast field \"policies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDns) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "managedZones":
		return s.ComputeManagedZones()
	case "policies":
		return s.ComputePolicies()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// ComputeManagedZones computer autogenerated
func (s *mqlGcpDns) ComputeManagedZones() error {
	var err error
	if _, ok := s.Cache.Load("managedZones"); ok {
		return nil
	}
	vres, err := s.GetManagedZones()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("managedZones", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePolicies computer autogenerated
func (s *mqlGcpDns) ComputePolicies() error {
	var err error
	if _, ok := s.Cache.Load("policies"); ok {
		return nil
	}
	vres, err := s.GetPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpDnsManagedzone resource interface
type GcpDnsManagedzone interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	DnsName() (string, error)
	NameServerSet() (string, error)
	NameServers() ([]interface{}, error)
	Visibility() (string, error)
	Created() (*time.Time, error)
	RecordSets() ([]interface{}, error)
}

// mqlGcpDnsManagedzone for the gcp.dns.managedzone resource
type mqlGcpDnsManagedzone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsManagedzone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.managedzone resource
func newGcpDnsManagedzone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsManagedzone{runtime.NewResource("gcp.dns.managedzone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "dnsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"dnsName\" argument has the wrong type (expected type \"string\")")
			}
		case "nameServerSet":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"nameServerSet\" argument has the wrong type (expected type \"string\")")
			}
		case "nameServers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"nameServers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "visibility":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"visibility\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recordSets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"recordSets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.managedzone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsManagedzone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("dnsName"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"dnsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("nameServerSet"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"nameServerSet\". This field is required.")
	}
	if _, ok := s.Cache.Load("nameServers"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"nameServers\". This field is required.")
	}
	if _, ok := s.Cache.Load("visibility"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"visibility\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsManagedzone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "dnsName":
		return nil
	case "nameServerSet":
		return nil
	case "nameServers":
		return nil
	case "visibility":
		return nil
	case "created":
		return nil
	case "recordSets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsManagedzone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "dnsName":
		return s.DnsName()
	case "nameServerSet":
		return s.NameServerSet()
	case "nameServers":
		return s.NameServers()
	case "visibility":
		return s.Visibility()
	case "created":
		return s.Created()
	case "recordSets":
		return s.RecordSets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpDnsManagedzone) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsManagedzone) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsManagedzone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpDnsManagedzone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DnsName accessor autogenerated
func (s *mqlGcpDnsManagedzone) DnsName() (string, error) {
	res, ok := s.Cache.Load("dnsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"dnsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"dnsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NameServerSet accessor autogenerated
func (s *mqlGcpDnsManagedzone) NameServerSet() (string, error) {
	res, ok := s.Cache.Load("nameServerSet")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"nameServerSet\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"nameServerSet\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NameServers accessor autogenerated
func (s *mqlGcpDnsManagedzone) NameServers() ([]interface{}, error) {
	res, ok := s.Cache.Load("nameServers")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"nameServers\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"nameServers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Visibility accessor autogenerated
func (s *mqlGcpDnsManagedzone) Visibility() (string, error) {
	res, ok := s.Cache.Load("visibility")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"visibility\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"visibility\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpDnsManagedzone) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecordSets accessor autogenerated
func (s *mqlGcpDnsManagedzone) RecordSets() ([]interface{}, error) {
	res, ok := s.Cache.Load("recordSets")
	if !ok || !res.Valid {
		if err := s.ComputeRecordSets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recordSets")
		if !ok {
			return nil, errors.New("\"gcp.dns.managedzone\" calculated \"recordSets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recordSets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"recordSets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsManagedzone) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "dnsName":
		return nil
	case "nameServerSet":
		return nil
	case "nameServers":
		return nil
	case "visibility":
		return nil
	case "created":
		return nil
	case "recordSets":
		return s.ComputeRecordSets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// ComputeRecordSets computer autogenerated
func (s *mqlGcpDnsManagedzone) ComputeRecordSets() error {
	var err error
	if _, ok := s.Cache.Load("recordSets"); ok {
		return nil
	}
	vres, err := s.GetRecordSets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recordSets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpDnsRecordset resource interface
type GcpDnsRecordset interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Rrdatas() ([]interface{}, error)
	SignatureRrdatas() ([]interface{}, error)
	Ttl() (int64, error)
	Type() (string, error)
}

// mqlGcpDnsRecordset for the gcp.dns.recordset resource
type mqlGcpDnsRecordset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsRecordset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.recordset resource
func newGcpDnsRecordset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsRecordset{runtime.NewResource("gcp.dns.recordset")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "rrdatas":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"rrdatas\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "signatureRrdatas":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"signatureRrdatas\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ttl":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"ttl\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.recordset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsRecordset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("rrdatas"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"rrdatas\". This field is required.")
	}
	if _, ok := s.Cache.Load("signatureRrdatas"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"signatureRrdatas\". This field is required.")
	}
	if _, ok := s.Cache.Load("ttl"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"ttl\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsRecordset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "rrdatas":
		return nil
	case "signatureRrdatas":
		return nil
	case "ttl":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsRecordset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "rrdatas":
		return s.Rrdatas()
	case "signatureRrdatas":
		return s.SignatureRrdatas()
	case "ttl":
		return s.Ttl()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsRecordset) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsRecordset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Rrdatas accessor autogenerated
func (s *mqlGcpDnsRecordset) Rrdatas() ([]interface{}, error) {
	res, ok := s.Cache.Load("rrdatas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"rrdatas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"rrdatas\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SignatureRrdatas accessor autogenerated
func (s *mqlGcpDnsRecordset) SignatureRrdatas() ([]interface{}, error) {
	res, ok := s.Cache.Load("signatureRrdatas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"signatureRrdatas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"signatureRrdatas\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ttl accessor autogenerated
func (s *mqlGcpDnsRecordset) Ttl() (int64, error) {
	res, ok := s.Cache.Load("ttl")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"ttl\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"ttl\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpDnsRecordset) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsRecordset) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "rrdatas":
		return nil
	case "signatureRrdatas":
		return nil
	case "ttl":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// GcpDnsPolicy resource interface
type GcpDnsPolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	EnableInboundForwarding() (bool, error)
	EnableLogging() (bool, error)
}

// mqlGcpDnsPolicy for the gcp.dns.policy resource
type mqlGcpDnsPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.policy resource
func newGcpDnsPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsPolicy{runtime.NewResource("gcp.dns.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "enableInboundForwarding":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"enableInboundForwarding\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableLogging":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"enableLogging\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableInboundForwarding"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"enableInboundForwarding\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableLogging"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"enableLogging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].Register")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableInboundForwarding":
		return nil
	case "enableLogging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "enableInboundForwarding":
		return s.EnableInboundForwarding()
	case "enableLogging":
		return s.EnableLogging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsPolicy) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlGcpDnsPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpDnsPolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableInboundForwarding accessor autogenerated
func (s *mqlGcpDnsPolicy) EnableInboundForwarding() (bool, error) {
	res, ok := s.Cache.Load("enableInboundForwarding")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"enableInboundForwarding\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"enableInboundForwarding\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableLogging accessor autogenerated
func (s *mqlGcpDnsPolicy) EnableLogging() (bool, error) {
	res, ok := s.Cache.Load("enableLogging")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"enableLogging\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"enableLogging\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsPolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableInboundForwarding":
		return nil
	case "enableLogging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// GcpProjectGkeService resource interface
type GcpProjectGkeService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Clusters() ([]interface{}, error)
}

// mqlGcpProjectGkeService for the gcp.project.gkeService resource
type mqlGcpProjectGkeService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService resource
func newGcpProjectGkeService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeService{runtime.NewResource("gcp.project.gkeService")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService].Register")
	switch name {
	case "projectId":
		return nil
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectGkeService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Clusters accessor autogenerated
func (s *mqlGcpProjectGkeService) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"gcp.project.gkeService\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlGcpProjectGkeService) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectGkeServiceCluster resource interface
type GcpProjectGkeServiceCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	LoggingService() (string, error)
	MonitoringService() (string, error)
	Network() (string, error)
	ClusterIpv4Cidr() (string, error)
	Subnetwork() (string, error)
	NodePools() ([]interface{}, error)
	Locations() ([]interface{}, error)
	EnableKubernetesAlpha() (bool, error)
	AutopilotEnabled() (bool, error)
	Zone() (string, error)
	Endpoint() (string, error)
	InitialClusterVersion() (string, error)
	CurrentMasterVersion() (string, error)
	Status() (string, error)
	ResourceLabels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	ExpirationTime() (*time.Time, error)
}

// mqlGcpProjectGkeServiceCluster for the gcp.project.gkeService.cluster resource
type mqlGcpProjectGkeServiceCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster resource
func newGcpProjectGkeServiceCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceCluster{runtime.NewResource("gcp.project.gkeService.cluster")}
	var existing GcpProjectGkeServiceCluster
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "loggingService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"loggingService\" argument has the wrong type (expected type \"string\")")
			}
		case "monitoringService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"monitoringService\" argument has the wrong type (expected type \"string\")")
			}
		case "network":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"network\" argument has the wrong type (expected type \"string\")")
			}
		case "clusterIpv4Cidr":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"clusterIpv4Cidr\" argument has the wrong type (expected type \"string\")")
			}
		case "subnetwork":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"subnetwork\" argument has the wrong type (expected type \"string\")")
			}
		case "nodePools":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"nodePools\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "enableKubernetesAlpha":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"enableKubernetesAlpha\" argument has the wrong type (expected type \"bool\")")
			}
		case "autopilotEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"autopilotEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "zone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"zone\" argument has the wrong type (expected type \"string\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "initialClusterVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"initialClusterVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "currentMasterVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"currentMasterVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceLabels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"resourceLabels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("loggingService"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"loggingService\". This field is required.")
	}
	if _, ok := s.Cache.Load("monitoringService"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"monitoringService\". This field is required.")
	}
	if _, ok := s.Cache.Load("network"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"network\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusterIpv4Cidr"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"clusterIpv4Cidr\". This field is required.")
	}
	if _, ok := s.Cache.Load("subnetwork"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"subnetwork\". This field is required.")
	}
	if _, ok := s.Cache.Load("nodePools"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"nodePools\". This field is required.")
	}
	if _, ok := s.Cache.Load("locations"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"locations\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableKubernetesAlpha"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"enableKubernetesAlpha\". This field is required.")
	}
	if _, ok := s.Cache.Load("autopilotEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"autopilotEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"zone\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("initialClusterVersion"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"initialClusterVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentMasterVersion"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"currentMasterVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceLabels"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"resourceLabels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster\" resource without a \"expirationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster].Register")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "loggingService":
		return nil
	case "monitoringService":
		return nil
	case "network":
		return nil
	case "clusterIpv4Cidr":
		return nil
	case "subnetwork":
		return nil
	case "nodePools":
		return nil
	case "locations":
		return nil
	case "enableKubernetesAlpha":
		return nil
	case "autopilotEnabled":
		return nil
	case "zone":
		return nil
	case "endpoint":
		return nil
	case "initialClusterVersion":
		return nil
	case "currentMasterVersion":
		return nil
	case "status":
		return nil
	case "resourceLabels":
		return nil
	case "created":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "loggingService":
		return s.LoggingService()
	case "monitoringService":
		return s.MonitoringService()
	case "network":
		return s.Network()
	case "clusterIpv4Cidr":
		return s.ClusterIpv4Cidr()
	case "subnetwork":
		return s.Subnetwork()
	case "nodePools":
		return s.NodePools()
	case "locations":
		return s.Locations()
	case "enableKubernetesAlpha":
		return s.EnableKubernetesAlpha()
	case "autopilotEnabled":
		return s.AutopilotEnabled()
	case "zone":
		return s.Zone()
	case "endpoint":
		return s.Endpoint()
	case "initialClusterVersion":
		return s.InitialClusterVersion()
	case "currentMasterVersion":
		return s.CurrentMasterVersion()
	case "status":
		return s.Status()
	case "resourceLabels":
		return s.ResourceLabels()
	case "created":
		return s.Created()
	case "expirationTime":
		return s.ExpirationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LoggingService accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) LoggingService() (string, error) {
	res, ok := s.Cache.Load("loggingService")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"loggingService\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"loggingService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MonitoringService accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) MonitoringService() (string, error) {
	res, ok := s.Cache.Load("monitoringService")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"monitoringService\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"monitoringService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Network accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Network() (string, error) {
	res, ok := s.Cache.Load("network")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"network\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"network\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusterIpv4Cidr accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) ClusterIpv4Cidr() (string, error) {
	res, ok := s.Cache.Load("clusterIpv4Cidr")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"clusterIpv4Cidr\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"clusterIpv4Cidr\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Subnetwork accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Subnetwork() (string, error) {
	res, ok := s.Cache.Load("subnetwork")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"subnetwork\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"subnetwork\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NodePools accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) NodePools() ([]interface{}, error) {
	res, ok := s.Cache.Load("nodePools")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"nodePools\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"nodePools\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"locations\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// EnableKubernetesAlpha accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) EnableKubernetesAlpha() (bool, error) {
	res, ok := s.Cache.Load("enableKubernetesAlpha")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"enableKubernetesAlpha\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"enableKubernetesAlpha\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AutopilotEnabled accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) AutopilotEnabled() (bool, error) {
	res, ok := s.Cache.Load("autopilotEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"autopilotEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"autopilotEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Zone() (string, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"zone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InitialClusterVersion accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) InitialClusterVersion() (string, error) {
	res, ok := s.Cache.Load("initialClusterVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"initialClusterVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"initialClusterVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentMasterVersion accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) CurrentMasterVersion() (string, error) {
	res, ok := s.Cache.Load("currentMasterVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"currentMasterVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"currentMasterVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceLabels accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) ResourceLabels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("resourceLabels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"resourceLabels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"resourceLabels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "loggingService":
		return nil
	case "monitoringService":
		return nil
	case "network":
		return nil
	case "clusterIpv4Cidr":
		return nil
	case "subnetwork":
		return nil
	case "nodePools":
		return nil
	case "locations":
		return nil
	case "enableKubernetesAlpha":
		return nil
	case "autopilotEnabled":
		return nil
	case "zone":
		return nil
	case "endpoint":
		return nil
	case "initialClusterVersion":
		return nil
	case "currentMasterVersion":
		return nil
	case "status":
		return nil
	case "resourceLabels":
		return nil
	case "created":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepool resource interface
type GcpProjectGkeServiceClusterNodepool interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Config() (GcpProjectGkeServiceClusterNodepoolConfig, error)
	InitialNodeCount() (int64, error)
	Locations() ([]interface{}, error)
	NetworkConfig() (GcpProjectGkeServiceClusterNodepoolNetworkConfig, error)
	Version() (string, error)
	InstanceGroupUrls() ([]interface{}, error)
	Status() (string, error)
}

// mqlGcpProjectGkeServiceClusterNodepool for the gcp.project.gkeService.cluster.nodepool resource
type mqlGcpProjectGkeServiceClusterNodepool struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepool) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool resource
func newGcpProjectGkeServiceClusterNodepool(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepool{runtime.NewResource("gcp.project.gkeService.cluster.nodepool")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"config\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfig\")")
			}
		case "initialNodeCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"initialNodeCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networkConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolNetworkConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"networkConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolNetworkConfig\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceGroupUrls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"instanceGroupUrls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepool) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("config"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"config\". This field is required.")
	}
	if _, ok := s.Cache.Load("initialNodeCount"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"initialNodeCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("locations"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"locations\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"networkConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceGroupUrls"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"instanceGroupUrls\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	case "initialNodeCount":
		return nil
	case "locations":
		return nil
	case "networkConfig":
		return nil
	case "version":
		return nil
	case "instanceGroupUrls":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	case "initialNodeCount":
		return s.InitialNodeCount()
	case "locations":
		return s.Locations()
	case "networkConfig":
		return s.NetworkConfig()
	case "version":
		return s.Version()
	case "instanceGroupUrls":
		return s.InstanceGroupUrls()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Config() (GcpProjectGkeServiceClusterNodepoolConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"config\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"config\" to the right type (GcpProjectGkeServiceClusterNodepoolConfig): %#v", res)
	}
	return tres, nil
}

// InitialNodeCount accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) InitialNodeCount() (int64, error) {
	res, ok := s.Cache.Load("initialNodeCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"initialNodeCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"initialNodeCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"locations\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) NetworkConfig() (GcpProjectGkeServiceClusterNodepoolNetworkConfig, error) {
	res, ok := s.Cache.Load("networkConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"networkConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolNetworkConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"networkConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolNetworkConfig): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceGroupUrls accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) InstanceGroupUrls() ([]interface{}, error) {
	res, ok := s.Cache.Load("instanceGroupUrls")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"instanceGroupUrls\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"instanceGroupUrls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepool) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	case "initialNodeCount":
		return nil
	case "locations":
		return nil
	case "networkConfig":
		return nil
	case "version":
		return nil
	case "instanceGroupUrls":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolNetworkConfig resource interface
type GcpProjectGkeServiceClusterNodepoolNetworkConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	PodRange() (string, error)
	PodIpv4CidrBlock() (string, error)
	PerformanceConfig() (GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.networkConfig resource
func newGcpProjectGkeServiceClusterNodepoolNetworkConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.networkConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "podRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig\", its \"podRange\" argument has the wrong type (expected type \"string\")")
			}
		case "podIpv4CidrBlock":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig\", its \"podIpv4CidrBlock\" argument has the wrong type (expected type \"string\")")
			}
		case "performanceConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig\", its \"performanceConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.networkConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("podRange"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource without a \"podRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("podIpv4CidrBlock"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource without a \"podIpv4CidrBlock\". This field is required.")
	}
	if _, ok := s.Cache.Load("performanceConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource without a \"performanceConfig\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig].Register")
	switch name {
	case "id":
		return nil
	case "podRange":
		return nil
	case "podIpv4CidrBlock":
		return nil
	case "performanceConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "podRange":
		return s.PodRange()
	case "podIpv4CidrBlock":
		return s.PodIpv4CidrBlock()
	case "performanceConfig":
		return s.PerformanceConfig()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodRange accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) PodRange() (string, error) {
	res, ok := s.Cache.Load("podRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed: no value provided for static field \"podRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed to cast field \"podRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodIpv4CidrBlock accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) PodIpv4CidrBlock() (string, error) {
	res, ok := s.Cache.Load("podIpv4CidrBlock")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed: no value provided for static field \"podIpv4CidrBlock\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed to cast field \"podIpv4CidrBlock\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PerformanceConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) PerformanceConfig() (GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig, error) {
	res, ok := s.Cache.Load("performanceConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed: no value provided for static field \"performanceConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig\" failed to cast field \"performanceConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "podRange":
		return nil
	case "podIpv4CidrBlock":
		return nil
	case "performanceConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig resource interface
type GcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	TotalEgressBandwidthTier() (string, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig resource
func newGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "totalEgressBandwidthTier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\", its \"totalEgressBandwidthTier\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("totalEgressBandwidthTier"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" resource without a \"totalEgressBandwidthTier\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig].Register")
	switch name {
	case "id":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "totalEgressBandwidthTier":
		return s.TotalEgressBandwidthTier()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TotalEgressBandwidthTier accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) TotalEgressBandwidthTier() (string, error) {
	res, ok := s.Cache.Load("totalEgressBandwidthTier")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" failed: no value provided for static field \"totalEgressBandwidthTier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" failed to cast field \"totalEgressBandwidthTier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	MachineType() (string, error)
	DiskSizeGb() (int64, error)
	OauthScopes() ([]interface{}, error)
	ServiceAccount() (string, error)
	Metadata() (map[string]interface{}, error)
	ImageType() (string, error)
	Labels() (map[string]interface{}, error)
	LocalSsdCount() (int64, error)
	Tags() ([]interface{}, error)
	Preemptible() (bool, error)
	Accelerators() ([]interface{}, error)
	DiskType() (string, error)
	MinCpuPlatform() (string, error)
	WorkloadMetadataMode() (string, error)
	Taints() ([]interface{}, error)
	SandboxConfig() (GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig, error)
	ShieldedInstanceConfig() (GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig, error)
	LinuxNodeConfig() (GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig, error)
	KubeletConfig() (GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig, error)
	BootDiskKmsKey() (string, error)
	GcfsConfig() (GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig, error)
	AdvancedMachineFeatures() (GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures, error)
	GvnicConfig() (GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig, error)
	Spot() (bool, error)
	ConfidentialNodes() (GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfig for the gcp.project.gkeService.cluster.nodepool.config resource
type mqlGcpProjectGkeServiceClusterNodepoolConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config resource
func newGcpProjectGkeServiceClusterNodepoolConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "machineType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"machineType\" argument has the wrong type (expected type \"string\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "oauthScopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"oauthScopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serviceAccount":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"serviceAccount\" argument has the wrong type (expected type \"string\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "imageType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"imageType\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "localSsdCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"localSsdCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "preemptible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"preemptible\" argument has the wrong type (expected type \"bool\")")
			}
		case "accelerators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"accelerators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diskType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"diskType\" argument has the wrong type (expected type \"string\")")
			}
		case "minCpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"minCpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "workloadMetadataMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"workloadMetadataMode\" argument has the wrong type (expected type \"string\")")
			}
		case "taints":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"taints\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sandboxConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"sandboxConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig\")")
			}
		case "shieldedInstanceConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"shieldedInstanceConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig\")")
			}
		case "linuxNodeConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"linuxNodeConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig\")")
			}
		case "kubeletConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"kubeletConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig\")")
			}
		case "bootDiskKmsKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"bootDiskKmsKey\" argument has the wrong type (expected type \"string\")")
			}
		case "gcfsConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"gcfsConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig\")")
			}
		case "advancedMachineFeatures":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"advancedMachineFeatures\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures\")")
			}
		case "gvnicConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"gvnicConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig\")")
			}
		case "spot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"spot\" argument has the wrong type (expected type \"bool\")")
			}
		case "confidentialNodes":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"confidentialNodes\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("machineType"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"machineType\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("oauthScopes"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"oauthScopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccount"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"serviceAccount\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("imageType"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"imageType\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("localSsdCount"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"localSsdCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("preemptible"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"preemptible\". This field is required.")
	}
	if _, ok := s.Cache.Load("accelerators"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"accelerators\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskType"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"diskType\". This field is required.")
	}
	if _, ok := s.Cache.Load("minCpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"minCpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("workloadMetadataMode"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"workloadMetadataMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("taints"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"taints\". This field is required.")
	}
	if _, ok := s.Cache.Load("sandboxConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"sandboxConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("shieldedInstanceConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"shieldedInstanceConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("linuxNodeConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"linuxNodeConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("kubeletConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"kubeletConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("bootDiskKmsKey"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"bootDiskKmsKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("gcfsConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"gcfsConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("advancedMachineFeatures"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"advancedMachineFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("gvnicConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"gvnicConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("spot"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"spot\". This field is required.")
	}
	if _, ok := s.Cache.Load("confidentialNodes"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config\" resource without a \"confidentialNodes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config].Register")
	switch name {
	case "id":
		return nil
	case "machineType":
		return nil
	case "diskSizeGb":
		return nil
	case "oauthScopes":
		return nil
	case "serviceAccount":
		return nil
	case "metadata":
		return nil
	case "imageType":
		return nil
	case "labels":
		return nil
	case "localSsdCount":
		return nil
	case "tags":
		return nil
	case "preemptible":
		return nil
	case "accelerators":
		return nil
	case "diskType":
		return nil
	case "minCpuPlatform":
		return nil
	case "workloadMetadataMode":
		return nil
	case "taints":
		return nil
	case "sandboxConfig":
		return nil
	case "shieldedInstanceConfig":
		return nil
	case "linuxNodeConfig":
		return nil
	case "kubeletConfig":
		return nil
	case "bootDiskKmsKey":
		return nil
	case "gcfsConfig":
		return nil
	case "advancedMachineFeatures":
		return nil
	case "gvnicConfig":
		return nil
	case "spot":
		return nil
	case "confidentialNodes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config].Field")
	switch name {
	case "id":
		return s.Id()
	case "machineType":
		return s.MachineType()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "oauthScopes":
		return s.OauthScopes()
	case "serviceAccount":
		return s.ServiceAccount()
	case "metadata":
		return s.Metadata()
	case "imageType":
		return s.ImageType()
	case "labels":
		return s.Labels()
	case "localSsdCount":
		return s.LocalSsdCount()
	case "tags":
		return s.Tags()
	case "preemptible":
		return s.Preemptible()
	case "accelerators":
		return s.Accelerators()
	case "diskType":
		return s.DiskType()
	case "minCpuPlatform":
		return s.MinCpuPlatform()
	case "workloadMetadataMode":
		return s.WorkloadMetadataMode()
	case "taints":
		return s.Taints()
	case "sandboxConfig":
		return s.SandboxConfig()
	case "shieldedInstanceConfig":
		return s.ShieldedInstanceConfig()
	case "linuxNodeConfig":
		return s.LinuxNodeConfig()
	case "kubeletConfig":
		return s.KubeletConfig()
	case "bootDiskKmsKey":
		return s.BootDiskKmsKey()
	case "gcfsConfig":
		return s.GcfsConfig()
	case "advancedMachineFeatures":
		return s.AdvancedMachineFeatures()
	case "gvnicConfig":
		return s.GvnicConfig()
	case "spot":
		return s.Spot()
	case "confidentialNodes":
		return s.ConfidentialNodes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MachineType accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) MachineType() (string, error) {
	res, ok := s.Cache.Load("machineType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"machineType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"machineType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// OauthScopes accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) OauthScopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("oauthScopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"oauthScopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"oauthScopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServiceAccount accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) ServiceAccount() (string, error) {
	res, ok := s.Cache.Load("serviceAccount")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"serviceAccount\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"serviceAccount\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ImageType accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) ImageType() (string, error) {
	res, ok := s.Cache.Load("imageType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"imageType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"imageType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LocalSsdCount accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) LocalSsdCount() (int64, error) {
	res, ok := s.Cache.Load("localSsdCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"localSsdCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"localSsdCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Preemptible accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Preemptible() (bool, error) {
	res, ok := s.Cache.Load("preemptible")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"preemptible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"preemptible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Accelerators accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Accelerators() ([]interface{}, error) {
	res, ok := s.Cache.Load("accelerators")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"accelerators\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"accelerators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiskType accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) DiskType() (string, error) {
	res, ok := s.Cache.Load("diskType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"diskType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"diskType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MinCpuPlatform accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) MinCpuPlatform() (string, error) {
	res, ok := s.Cache.Load("minCpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"minCpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"minCpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// WorkloadMetadataMode accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) WorkloadMetadataMode() (string, error) {
	res, ok := s.Cache.Load("workloadMetadataMode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"workloadMetadataMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"workloadMetadataMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Taints accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Taints() ([]interface{}, error) {
	res, ok := s.Cache.Load("taints")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"taints\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"taints\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SandboxConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) SandboxConfig() (GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig, error) {
	res, ok := s.Cache.Load("sandboxConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"sandboxConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"sandboxConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig): %#v", res)
	}
	return tres, nil
}

// ShieldedInstanceConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) ShieldedInstanceConfig() (GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig, error) {
	res, ok := s.Cache.Load("shieldedInstanceConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"shieldedInstanceConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"shieldedInstanceConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig): %#v", res)
	}
	return tres, nil
}

// LinuxNodeConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) LinuxNodeConfig() (GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig, error) {
	res, ok := s.Cache.Load("linuxNodeConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"linuxNodeConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"linuxNodeConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig): %#v", res)
	}
	return tres, nil
}

// KubeletConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) KubeletConfig() (GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig, error) {
	res, ok := s.Cache.Load("kubeletConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"kubeletConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"kubeletConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig): %#v", res)
	}
	return tres, nil
}

// BootDiskKmsKey accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) BootDiskKmsKey() (string, error) {
	res, ok := s.Cache.Load("bootDiskKmsKey")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"bootDiskKmsKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"bootDiskKmsKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GcfsConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) GcfsConfig() (GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig, error) {
	res, ok := s.Cache.Load("gcfsConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"gcfsConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"gcfsConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig): %#v", res)
	}
	return tres, nil
}

// AdvancedMachineFeatures accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) AdvancedMachineFeatures() (GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures, error) {
	res, ok := s.Cache.Load("advancedMachineFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"advancedMachineFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"advancedMachineFeatures\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures): %#v", res)
	}
	return tres, nil
}

// GvnicConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) GvnicConfig() (GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig, error) {
	res, ok := s.Cache.Load("gvnicConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"gvnicConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"gvnicConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig): %#v", res)
	}
	return tres, nil
}

// Spot accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) Spot() (bool, error) {
	res, ok := s.Cache.Load("spot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"spot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"spot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ConfidentialNodes accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) ConfidentialNodes() (GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes, error) {
	res, ok := s.Cache.Load("confidentialNodes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config\" failed: no value provided for static field \"confidentialNodes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config\" failed to cast field \"confidentialNodes\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config].MqlCompute")
	switch name {
	case "id":
		return nil
	case "machineType":
		return nil
	case "diskSizeGb":
		return nil
	case "oauthScopes":
		return nil
	case "serviceAccount":
		return nil
	case "metadata":
		return nil
	case "imageType":
		return nil
	case "labels":
		return nil
	case "localSsdCount":
		return nil
	case "tags":
		return nil
	case "preemptible":
		return nil
	case "accelerators":
		return nil
	case "diskType":
		return nil
	case "minCpuPlatform":
		return nil
	case "workloadMetadataMode":
		return nil
	case "taints":
		return nil
	case "sandboxConfig":
		return nil
	case "shieldedInstanceConfig":
		return nil
	case "linuxNodeConfig":
		return nil
	case "kubeletConfig":
		return nil
	case "bootDiskKmsKey":
		return nil
	case "gcfsConfig":
		return nil
	case "advancedMachineFeatures":
		return nil
	case "gvnicConfig":
		return nil
	case "spot":
		return nil
	case "confidentialNodes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigAccelerator resource interface
type GcpProjectGkeServiceClusterNodepoolConfigAccelerator interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Count() (int64, error)
	Type() (string, error)
	GpuPartitionSize() (string, error)
	GpuSharingConfig() (GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator for the gcp.project.gkeService.cluster.nodepool.config.accelerator resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.accelerator resource
func newGcpProjectGkeServiceClusterNodepoolConfigAccelerator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.accelerator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "count":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"count\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "gpuPartitionSize":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"gpuPartitionSize\" argument has the wrong type (expected type \"string\")")
			}
		case "gpuSharingConfig":
			if _, ok := val.(GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"gpuSharingConfig\" argument has the wrong type (expected type \"GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.accelerator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("count"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource without a \"count\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("gpuPartitionSize"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource without a \"gpuPartitionSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("gpuSharingConfig"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource without a \"gpuSharingConfig\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator].Register")
	switch name {
	case "id":
		return nil
	case "count":
		return nil
	case "type":
		return nil
	case "gpuPartitionSize":
		return nil
	case "gpuSharingConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator].Field")
	switch name {
	case "id":
		return s.Id()
	case "count":
		return s.Count()
	case "type":
		return s.Type()
	case "gpuPartitionSize":
		return s.GpuPartitionSize()
	case "gpuSharingConfig":
		return s.GpuSharingConfig()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Count accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Count() (int64, error) {
	res, ok := s.Cache.Load("count")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"count\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed to cast field \"count\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GpuPartitionSize accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GpuPartitionSize() (string, error) {
	res, ok := s.Cache.Load("gpuPartitionSize")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"gpuPartitionSize\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed to cast field \"gpuPartitionSize\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GpuSharingConfig accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GpuSharingConfig() (GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig, error) {
	res, ok := s.Cache.Load("gpuSharingConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"gpuSharingConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator\" failed to cast field \"gpuSharingConfig\" to the right type (GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator].MqlCompute")
	switch name {
	case "id":
		return nil
	case "count":
		return nil
	case "type":
		return nil
	case "gpuPartitionSize":
		return nil
	case "gpuSharingConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	MaxSharedClientsPerGpu() (int64, error)
	Strategy() (string, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig for the gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSharedClientsPerGpu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"maxSharedClientsPerGpu\" argument has the wrong type (expected type \"int64\")")
			}
		case "strategy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"strategy\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSharedClientsPerGpu"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"maxSharedClientsPerGpu\". This field is required.")
	}
	if _, ok := s.Cache.Load("strategy"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"strategy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig].Register")
	switch name {
	case "id":
		return nil
	case "maxSharedClientsPerGpu":
		return nil
	case "strategy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "maxSharedClientsPerGpu":
		return s.MaxSharedClientsPerGpu()
	case "strategy":
		return s.Strategy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSharedClientsPerGpu accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MaxSharedClientsPerGpu() (int64, error) {
	res, ok := s.Cache.Load("maxSharedClientsPerGpu")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"maxSharedClientsPerGpu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"maxSharedClientsPerGpu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Strategy accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) Strategy() (string, error) {
	res, ok := s.Cache.Load("strategy")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"strategy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"strategy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "maxSharedClientsPerGpu":
		return nil
	case "strategy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigNodeTaint resource interface
type GcpProjectGkeServiceClusterNodepoolConfigNodeTaint interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Key() (string, error)
	Value() (string, error)
	Effect() (string, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint for the gcp.project.gkeService.cluster.nodepool.config.nodeTaint resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.nodeTaint resource
func newGcpProjectGkeServiceClusterNodepoolConfigNodeTaint(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.nodeTaint")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "key":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\", its \"key\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "effect":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\", its \"effect\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.nodeTaint with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("key"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource without a \"key\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("effect"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource without a \"effect\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.nodeTaint].Register")
	switch name {
	case "id":
		return nil
	case "key":
		return nil
	case "value":
		return nil
	case "effect":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.nodeTaint].Field")
	switch name {
	case "id":
		return s.Id()
	case "key":
		return s.Key()
	case "value":
		return s.Value()
	case "effect":
		return s.Effect()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Key accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Key() (string, error) {
	res, ok := s.Cache.Load("key")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"key\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed to cast field \"key\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Effect accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) Effect() (string, error) {
	res, ok := s.Cache.Load("effect")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"effect\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" failed to cast field \"effect\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.nodeTaint].MqlCompute")
	switch name {
	case "id":
		return nil
	case "key":
		return nil
	case "value":
		return nil
	case "effect":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigSandboxConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Type() (string, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig for the gcp.project.gkeService.cluster.nodepool.config.sandboxConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.sandboxConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.sandboxConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.sandboxConfig].Register")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.sandboxConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.sandboxConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	EnableSecureBoot() (bool, error)
	EnableIntegrityMonitoring() (bool, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig for the gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enableSecureBoot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\", its \"enableSecureBoot\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableIntegrityMonitoring":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\", its \"enableIntegrityMonitoring\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableSecureBoot"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"enableSecureBoot\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableIntegrityMonitoring"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"enableIntegrityMonitoring\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig].Register")
	switch name {
	case "id":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enableSecureBoot":
		return s.EnableSecureBoot()
	case "enableIntegrityMonitoring":
		return s.EnableIntegrityMonitoring()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableSecureBoot accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) EnableSecureBoot() (bool, error) {
	res, ok := s.Cache.Load("enableSecureBoot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"enableSecureBoot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"enableSecureBoot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableIntegrityMonitoring accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) EnableIntegrityMonitoring() (bool, error) {
	res, ok := s.Cache.Load("enableIntegrityMonitoring")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"enableIntegrityMonitoring\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"enableIntegrityMonitoring\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Sysctls() (map[string]interface{}, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig for the gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "sysctls":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\", its \"sysctls\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("sysctls"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" resource without a \"sysctls\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig].Register")
	switch name {
	case "id":
		return nil
	case "sysctls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "sysctls":
		return s.Sysctls()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sysctls accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) Sysctls() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("sysctls")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" failed: no value provided for static field \"sysctls\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" failed to cast field \"sysctls\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "sysctls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigKubeletConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CpuManagerPolicy() (string, error)
	CpuCfsQuotaPeriod() (string, error)
	PodPidsLimit() (int64, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig for the gcp.project.gkeService.cluster.nodepool.config.kubeletConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.kubeletConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuManagerPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\", its \"cpuManagerPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuCfsQuotaPeriod":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\", its \"cpuCfsQuotaPeriod\" argument has the wrong type (expected type \"string\")")
			}
		case "podPidsLimit":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\", its \"podPidsLimit\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.kubeletConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuManagerPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource without a \"cpuManagerPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuCfsQuotaPeriod"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource without a \"cpuCfsQuotaPeriod\". This field is required.")
	}
	if _, ok := s.Cache.Load("podPidsLimit"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource without a \"podPidsLimit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.kubeletConfig].Register")
	switch name {
	case "id":
		return nil
	case "cpuManagerPolicy":
		return nil
	case "cpuCfsQuotaPeriod":
		return nil
	case "podPidsLimit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.kubeletConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "cpuManagerPolicy":
		return s.CpuManagerPolicy()
	case "cpuCfsQuotaPeriod":
		return s.CpuCfsQuotaPeriod()
	case "podPidsLimit":
		return s.PodPidsLimit()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuManagerPolicy accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) CpuManagerPolicy() (string, error) {
	res, ok := s.Cache.Load("cpuManagerPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"cpuManagerPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed to cast field \"cpuManagerPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuCfsQuotaPeriod accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) CpuCfsQuotaPeriod() (string, error) {
	res, ok := s.Cache.Load("cpuCfsQuotaPeriod")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"cpuCfsQuotaPeriod\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed to cast field \"cpuCfsQuotaPeriod\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodPidsLimit accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) PodPidsLimit() (int64, error) {
	res, ok := s.Cache.Load("podPidsLimit")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"podPidsLimit\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" failed to cast field \"podPidsLimit\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.kubeletConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "cpuManagerPolicy":
		return nil
	case "cpuCfsQuotaPeriod":
		return nil
	case "podPidsLimit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigGcfsConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig for the gcp.project.gkeService.cluster.nodepool.config.gcfsConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.gcfsConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.gcfsConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gcfsConfig].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gcfsConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gcfsConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures resource interface
type GcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ThreadsPerCore() (int64, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures for the gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures resource
func newGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "threadsPerCore":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\", its \"threadsPerCore\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("threadsPerCore"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" resource without a \"threadsPerCore\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures].Register")
	switch name {
	case "id":
		return nil
	case "threadsPerCore":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures].Field")
	switch name {
	case "id":
		return s.Id()
	case "threadsPerCore":
		return s.ThreadsPerCore()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ThreadsPerCore accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) ThreadsPerCore() (int64, error) {
	res, ok := s.Cache.Load("threadsPerCore")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" failed: no value provided for static field \"threadsPerCore\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" failed to cast field \"threadsPerCore\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures].MqlCompute")
	switch name {
	case "id":
		return nil
	case "threadsPerCore":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig resource interface
type GcpProjectGkeServiceClusterNodepoolConfigGvnicConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig for the gcp.project.gkeService.cluster.nodepool.config.gvnicConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.gvnicConfig resource
func newGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.gvnicConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gvnicConfig].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gvnicConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.gvnicConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes resource interface
type GcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes for the gcp.project.gkeService.cluster.nodepool.config.confidentialNodes resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.gkeService.cluster.nodepool.config.confidentialNodes resource
func newGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes{runtime.NewResource("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.gkeService.cluster.nodepool.config.confidentialNodes with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.confidentialNodes].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.confidentialNodes].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.gkeService.cluster.nodepool.config.confidentialNodes].MqlCompute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// GcpProjectPubsubService resource interface
type GcpProjectPubsubService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Topics() ([]interface{}, error)
	Subscriptions() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
}

// mqlGcpProjectPubsubService for the gcp.project.pubsubService resource
type mqlGcpProjectPubsubService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService resource
func newGcpProjectPubsubService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubService{runtime.NewResource("gcp.project.pubsubService")}
	var existing GcpProjectPubsubService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "topics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"topics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "subscriptions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"subscriptions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].Register")
	switch name {
	case "projectId":
		return nil
	case "topics":
		return nil
	case "subscriptions":
		return nil
	case "snapshots":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "topics":
		return s.Topics()
	case "subscriptions":
		return s.Subscriptions()
	case "snapshots":
		return s.Snapshots()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topics accessor autogenerated
func (s *mqlGcpProjectPubsubService) Topics() ([]interface{}, error) {
	res, ok := s.Cache.Load("topics")
	if !ok || !res.Valid {
		if err := s.ComputeTopics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("topics")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"topics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "topics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"topics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Subscriptions accessor autogenerated
func (s *mqlGcpProjectPubsubService) Subscriptions() ([]interface{}, error) {
	res, ok := s.Cache.Load("subscriptions")
	if !ok || !res.Valid {
		if err := s.ComputeSubscriptions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subscriptions")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"subscriptions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscriptions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"subscriptions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlGcpProjectPubsubService) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "topics":
		return s.ComputeTopics()
	case "subscriptions":
		return s.ComputeSubscriptions()
	case "snapshots":
		return s.ComputeSnapshots()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// ComputeTopics computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeTopics() error {
	var err error
	if _, ok := s.Cache.Load("topics"); ok {
		return nil
	}
	vres, err := s.GetTopics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("topics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubscriptions computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeSubscriptions() error {
	var err error
	if _, ok := s.Cache.Load("subscriptions"); ok {
		return nil
	}
	vres, err := s.GetSubscriptions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscriptions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnapshots computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceTopic resource interface
type GcpProjectPubsubServiceTopic interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Config() (GcpProjectPubsubServiceTopicConfig, error)
}

// mqlGcpProjectPubsubServiceTopic for the gcp.project.pubsubService.topic resource
type mqlGcpProjectPubsubServiceTopic struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopic) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic resource
func newGcpProjectPubsubServiceTopic(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopic{runtime.NewResource("gcp.project.pubsubService.topic")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectPubsubServiceTopicConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"config\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopicConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopic) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Config() (GcpProjectPubsubServiceTopicConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		if err := s.ComputeConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("config")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService.topic\" calculated \"config\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "config")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopicConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"config\" to the right type (GcpProjectPubsubServiceTopicConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return s.ComputeConfig()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// ComputeConfig computer autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) ComputeConfig() error {
	var err error
	if _, ok := s.Cache.Load("config"); ok {
		return nil
	}
	vres, err := s.GetConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("config", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceTopicConfig resource interface
type GcpProjectPubsubServiceTopicConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	TopicName() (string, error)
	Labels() (map[string]interface{}, error)
	KmsKeyName() (string, error)
	MessageStoragePolicy() (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy, error)
}

// mqlGcpProjectPubsubServiceTopicConfig for the gcp.project.pubsubService.topic.config resource
type mqlGcpProjectPubsubServiceTopicConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopicConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic.config resource
func newGcpProjectPubsubServiceTopicConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopicConfig{runtime.NewResource("gcp.project.pubsubService.topic.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "topicName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"topicName\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "kmsKeyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"kmsKeyName\" argument has the wrong type (expected type \"string\")")
			}
		case "messageStoragePolicy":
			if _, ok := val.(GcpProjectPubsubServiceTopicConfigMessagestoragepolicy); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"messageStoragePolicy\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopicConfigMessagestoragepolicy\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopicConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("topicName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"topicName\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsKeyName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"kmsKeyName\". This field is required.")
	}
	if _, ok := s.Cache.Load("messageStoragePolicy"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"messageStoragePolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].Register")
	switch name {
	case "projectId":
		return nil
	case "topicName":
		return nil
	case "labels":
		return nil
	case "kmsKeyName":
		return nil
	case "messageStoragePolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "topicName":
		return s.TopicName()
	case "labels":
		return s.Labels()
	case "kmsKeyName":
		return s.KmsKeyName()
	case "messageStoragePolicy":
		return s.MessageStoragePolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TopicName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) TopicName() (string, error) {
	res, ok := s.Cache.Load("topicName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"topicName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"topicName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// KmsKeyName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) KmsKeyName() (string, error) {
	res, ok := s.Cache.Load("kmsKeyName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"kmsKeyName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"kmsKeyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MessageStoragePolicy accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) MessageStoragePolicy() (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy, error) {
	res, ok := s.Cache.Load("messageStoragePolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"messageStoragePolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopicConfigMessagestoragepolicy)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"messageStoragePolicy\" to the right type (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "topicName":
		return nil
	case "labels":
		return nil
	case "kmsKeyName":
		return nil
	case "messageStoragePolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// GcpProjectPubsubServiceTopicConfigMessagestoragepolicy resource interface
type GcpProjectPubsubServiceTopicConfigMessagestoragepolicy interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ConfigId() (string, error)
	AllowedPersistenceRegions() ([]interface{}, error)
}

// mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy for the gcp.project.pubsubService.topic.config.messagestoragepolicy resource
type mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic.config.messagestoragepolicy resource
func newGcpProjectPubsubServiceTopicConfigMessagestoragepolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy{runtime.NewResource("gcp.project.pubsubService.topic.config.messagestoragepolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "configId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"configId\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedPersistenceRegions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"allowedPersistenceRegions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic.config.messagestoragepolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("configId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource without a \"configId\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedPersistenceRegions"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource without a \"allowedPersistenceRegions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].Register")
	switch name {
	case "configId":
		return nil
	case "allowedPersistenceRegions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].Field")
	switch name {
	case "configId":
		return s.ConfigId()
	case "allowedPersistenceRegions":
		return s.AllowedPersistenceRegions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// ConfigId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) ConfigId() (string, error) {
	res, ok := s.Cache.Load("configId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed: no value provided for static field \"configId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed to cast field \"configId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedPersistenceRegions accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) AllowedPersistenceRegions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedPersistenceRegions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed: no value provided for static field \"allowedPersistenceRegions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed to cast field \"allowedPersistenceRegions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].MqlCompute")
	switch name {
	case "configId":
		return nil
	case "allowedPersistenceRegions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// GcpProjectPubsubServiceSubscription resource interface
type GcpProjectPubsubServiceSubscription interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Config() (GcpProjectPubsubServiceSubscriptionConfig, error)
}

// mqlGcpProjectPubsubServiceSubscription for the gcp.project.pubsubService.subscription resource
type mqlGcpProjectPubsubServiceSubscription struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscription) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription resource
func newGcpProjectPubsubServiceSubscription(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscription{runtime.NewResource("gcp.project.pubsubService.subscription")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectPubsubServiceSubscriptionConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"config\" argument has the wrong type (expected type \"GcpProjectPubsubServiceSubscriptionConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscription) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Config() (GcpProjectPubsubServiceSubscriptionConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		if err := s.ComputeConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("config")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService.subscription\" calculated \"config\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "config")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceSubscriptionConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"config\" to the right type (GcpProjectPubsubServiceSubscriptionConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return s.ComputeConfig()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// ComputeConfig computer autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) ComputeConfig() error {
	var err error
	if _, ok := s.Cache.Load("config"); ok {
		return nil
	}
	vres, err := s.GetConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("config", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceSubscriptionConfig resource interface
type GcpProjectPubsubServiceSubscriptionConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	SubscriptionName() (string, error)
	Topic() (GcpProjectPubsubServiceTopic, error)
	PushConfig() (GcpProjectPubsubServiceSubscriptionConfigPushconfig, error)
	AckDeadline() (*time.Time, error)
	RetainAckedMessages() (bool, error)
	RetentionDuration() (*time.Time, error)
	ExpirationPolicy() (*time.Time, error)
	Labels() (map[string]interface{}, error)
}

// mqlGcpProjectPubsubServiceSubscriptionConfig for the gcp.project.pubsubService.subscription.config resource
type mqlGcpProjectPubsubServiceSubscriptionConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription.config resource
func newGcpProjectPubsubServiceSubscriptionConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscriptionConfig{runtime.NewResource("gcp.project.pubsubService.subscription.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"subscriptionName\" argument has the wrong type (expected type \"string\")")
			}
		case "topic":
			if _, ok := val.(GcpProjectPubsubServiceTopic); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"topic\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopic\")")
			}
		case "pushConfig":
			if _, ok := val.(GcpProjectPubsubServiceSubscriptionConfigPushconfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"pushConfig\" argument has the wrong type (expected type \"GcpProjectPubsubServiceSubscriptionConfigPushconfig\")")
			}
		case "ackDeadline":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"ackDeadline\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "retainAckedMessages":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"retainAckedMessages\" argument has the wrong type (expected type \"bool\")")
			}
		case "retentionDuration":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"retentionDuration\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expirationPolicy":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"expirationPolicy\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("subscriptionName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"subscriptionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("topic"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"topic\". This field is required.")
	}
	if _, ok := s.Cache.Load("pushConfig"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"pushConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("ackDeadline"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"ackDeadline\". This field is required.")
	}
	if _, ok := s.Cache.Load("retainAckedMessages"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"retainAckedMessages\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDuration"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"retentionDuration\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"expirationPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"labels\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].Register")
	switch name {
	case "projectId":
		return nil
	case "subscriptionName":
		return nil
	case "topic":
		return nil
	case "pushConfig":
		return nil
	case "ackDeadline":
		return nil
	case "retainAckedMessages":
		return nil
	case "retentionDuration":
		return nil
	case "expirationPolicy":
		return nil
	case "labels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "subscriptionName":
		return s.SubscriptionName()
	case "topic":
		return s.Topic()
	case "pushConfig":
		return s.PushConfig()
	case "ackDeadline":
		return s.AckDeadline()
	case "retainAckedMessages":
		return s.RetainAckedMessages()
	case "retentionDuration":
		return s.RetentionDuration()
	case "expirationPolicy":
		return s.ExpirationPolicy()
	case "labels":
		return s.Labels()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) SubscriptionName() (string, error) {
	res, ok := s.Cache.Load("subscriptionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"subscriptionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"subscriptionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topic accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Topic() (GcpProjectPubsubServiceTopic, error) {
	res, ok := s.Cache.Load("topic")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"topic\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopic)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"topic\" to the right type (GcpProjectPubsubServiceTopic): %#v", res)
	}
	return tres, nil
}

// PushConfig accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) PushConfig() (GcpProjectPubsubServiceSubscriptionConfigPushconfig, error) {
	res, ok := s.Cache.Load("pushConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"pushConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceSubscriptionConfigPushconfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"pushConfig\" to the right type (GcpProjectPubsubServiceSubscriptionConfigPushconfig): %#v", res)
	}
	return tres, nil
}

// AckDeadline accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) AckDeadline() (*time.Time, error) {
	res, ok := s.Cache.Load("ackDeadline")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"ackDeadline\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"ackDeadline\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RetainAckedMessages accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) RetainAckedMessages() (bool, error) {
	res, ok := s.Cache.Load("retainAckedMessages")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"retainAckedMessages\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"retainAckedMessages\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RetentionDuration accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) RetentionDuration() (*time.Time, error) {
	res, ok := s.Cache.Load("retentionDuration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"retentionDuration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"retentionDuration\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ExpirationPolicy accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) ExpirationPolicy() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"expirationPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"expirationPolicy\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "subscriptionName":
		return nil
	case "topic":
		return nil
	case "pushConfig":
		return nil
	case "ackDeadline":
		return nil
	case "retainAckedMessages":
		return nil
	case "retentionDuration":
		return nil
	case "expirationPolicy":
		return nil
	case "labels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// GcpProjectPubsubServiceSubscriptionConfigPushconfig resource interface
type GcpProjectPubsubServiceSubscriptionConfigPushconfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ConfigId() (string, error)
	Endpoint() (string, error)
	Attributes() (map[string]interface{}, error)
}

// mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig for the gcp.project.pubsubService.subscription.config.pushconfig resource
type mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription.config.pushconfig resource
func newGcpProjectPubsubServiceSubscriptionConfigPushconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig{runtime.NewResource("gcp.project.pubsubService.subscription.config.pushconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "configId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"configId\" argument has the wrong type (expected type \"string\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "attributes":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"attributes\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription.config.pushconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("configId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"configId\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("attributes"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"attributes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].Register")
	switch name {
	case "configId":
		return nil
	case "endpoint":
		return nil
	case "attributes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].Field")
	switch name {
	case "configId":
		return s.ConfigId()
	case "endpoint":
		return s.Endpoint()
	case "attributes":
		return s.Attributes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// ConfigId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) ConfigId() (string, error) {
	res, ok := s.Cache.Load("configId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"configId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"configId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attributes accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Attributes() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("attributes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"attributes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"attributes\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].MqlCompute")
	switch name {
	case "configId":
		return nil
	case "endpoint":
		return nil
	case "attributes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// GcpProjectPubsubServiceSnapshot resource interface
type GcpProjectPubsubServiceSnapshot interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Topic() (GcpProjectPubsubServiceTopic, error)
	Expiration() (*time.Time, error)
}

// mqlGcpProjectPubsubServiceSnapshot for the gcp.project.pubsubService.snapshot resource
type mqlGcpProjectPubsubServiceSnapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSnapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.snapshot resource
func newGcpProjectPubsubServiceSnapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSnapshot{runtime.NewResource("gcp.project.pubsubService.snapshot")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "topic":
			if _, ok := val.(GcpProjectPubsubServiceTopic); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"topic\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopic\")")
			}
		case "expiration":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"expiration\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSnapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("topic"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"topic\". This field is required.")
	}
	if _, ok := s.Cache.Load("expiration"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"expiration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "topic":
		return nil
	case "expiration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "topic":
		return s.Topic()
	case "expiration":
		return s.Expiration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topic accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Topic() (GcpProjectPubsubServiceTopic, error) {
	res, ok := s.Cache.Load("topic")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"topic\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopic)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"topic\" to the right type (GcpProjectPubsubServiceTopic): %#v", res)
	}
	return tres, nil
}

// Expiration accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Expiration() (*time.Time, error) {
	res, ok := s.Cache.Load("expiration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"expiration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"expiration\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "topic":
		return nil
	case "expiration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// GcpProjectKmsService resource interface
type GcpProjectKmsService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Locations() ([]interface{}, error)
	Keyrings() ([]interface{}, error)
}

// mqlGcpProjectKmsService for the gcp.project.kmsService resource
type mqlGcpProjectKmsService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService resource
func newGcpProjectKmsService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsService{runtime.NewResource("gcp.project.kmsService")}
	var existing GcpProjectKmsService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "keyrings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"keyrings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].Register")
	switch name {
	case "projectId":
		return nil
	case "locations":
		return nil
	case "keyrings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "locations":
		return s.Locations()
	case "keyrings":
		return s.Keyrings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectKmsService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectKmsService) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		if err := s.ComputeLocations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("locations")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService\" calculated \"locations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "locations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Keyrings accessor autogenerated
func (s *mqlGcpProjectKmsService) Keyrings() ([]interface{}, error) {
	res, ok := s.Cache.Load("keyrings")
	if !ok || !res.Valid {
		if err := s.ComputeKeyrings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keyrings")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService\" calculated \"keyrings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyrings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"keyrings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "locations":
		return s.ComputeLocations()
	case "keyrings":
		return s.ComputeKeyrings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// ComputeLocations computer autogenerated
func (s *mqlGcpProjectKmsService) ComputeLocations() error {
	var err error
	if _, ok := s.Cache.Load("locations"); ok {
		return nil
	}
	vres, err := s.GetLocations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("locations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeyrings computer autogenerated
func (s *mqlGcpProjectKmsService) ComputeKeyrings() error {
	var err error
	if _, ok := s.Cache.Load("keyrings"); ok {
		return nil
	}
	vres, err := s.GetKeyrings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyrings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyring resource interface
type GcpProjectKmsServiceKeyring interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	ResourcePath() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	Location() (string, error)
	Cryptokeys() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyring for the gcp.project.kmsService.keyring resource
type mqlGcpProjectKmsServiceKeyring struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyring) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring resource
func newGcpProjectKmsServiceKeyring(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyring{runtime.NewResource("gcp.project.kmsService.keyring")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "cryptokeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"cryptokeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyring) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"location\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].Register")
	switch name {
	case "projectId":
		return nil
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "location":
		return nil
	case "cryptokeys":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "location":
		return s.Location()
	case "cryptokeys":
		return s.Cryptokeys()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Cryptokeys accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Cryptokeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("cryptokeys")
	if !ok || !res.Valid {
		if err := s.ComputeCryptokeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cryptokeys")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService.keyring\" calculated \"cryptokeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cryptokeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"cryptokeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "location":
		return nil
	case "cryptokeys":
		return s.ComputeCryptokeys()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// ComputeCryptokeys computer autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ComputeCryptokeys() error {
	var err error
	if _, ok := s.Cache.Load("cryptokeys"); ok {
		return nil
	}
	vres, err := s.GetCryptokeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cryptokeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyringCryptokey resource interface
type GcpProjectKmsServiceKeyringCryptokey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Name() (string, error)
	Primary() (GcpProjectKmsServiceKeyringCryptokeyVersion, error)
	Purpose() (string, error)
	Versions() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokey for the gcp.project.kmsService.keyring.cryptokey resource
type mqlGcpProjectKmsServiceKeyringCryptokey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey resource
func newGcpProjectKmsServiceKeyringCryptokey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokey{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "primary":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersion); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"primary\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersion\")")
			}
		case "purpose":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"purpose\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("primary"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"primary\". This field is required.")
	}
	if _, ok := s.Cache.Load("purpose"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"purpose\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].Register")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "primary":
		return nil
	case "purpose":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "primary":
		return s.Primary()
	case "purpose":
		return s.Purpose()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Primary accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Primary() (GcpProjectKmsServiceKeyringCryptokeyVersion, error) {
	res, ok := s.Cache.Load("primary")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"primary\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersion)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"primary\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersion): %#v", res)
	}
	return tres, nil
}

// Purpose accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Purpose() (string, error) {
	res, ok := s.Cache.Load("purpose")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"purpose\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"purpose\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].MqlCompute")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "primary":
		return nil
	case "purpose":
		return nil
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// ComputeVersions computer autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyringCryptokeyVersion resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersion interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Name() (string, error)
	State() (string, error)
	ProtectionLevel() (string, error)
	Algorithm() (string, error)
	Attestation() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation, error)
	Created() (*time.Time, error)
	Generated() (*time.Time, error)
	Destroyed() (*time.Time, error)
	DestroyEventTime() (*time.Time, error)
	ImportJob() (string, error)
	ImportTime() (*time.Time, error)
	ImportFailureReason() (string, error)
	ExternalProtectionLevelOptions() (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions, error)
	ReimportEligible() (bool, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersion for the gcp.project.kmsService.keyring.cryptokey.version resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version resource
func newGcpProjectKmsServiceKeyringCryptokeyVersion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersion{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "protectionLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"protectionLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "algorithm":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"algorithm\" argument has the wrong type (expected type \"string\")")
			}
		case "attestation":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestation); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"attestation\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionAttestation\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "generated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"generated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "destroyed":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"destroyed\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "destroyEventTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"destroyEventTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "importJob":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importJob\" argument has the wrong type (expected type \"string\")")
			}
		case "importTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "importFailureReason":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importFailureReason\" argument has the wrong type (expected type \"string\")")
			}
		case "externalProtectionLevelOptions":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"externalProtectionLevelOptions\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions\")")
			}
		case "reimportEligible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"reimportEligible\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("protectionLevel"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"protectionLevel\". This field is required.")
	}
	if _, ok := s.Cache.Load("algorithm"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"algorithm\". This field is required.")
	}
	if _, ok := s.Cache.Load("attestation"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"attestation\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("generated"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"generated\". This field is required.")
	}
	if _, ok := s.Cache.Load("destroyed"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"destroyed\". This field is required.")
	}
	if _, ok := s.Cache.Load("destroyEventTime"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"destroyEventTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("importJob"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importJob\". This field is required.")
	}
	if _, ok := s.Cache.Load("importTime"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("importFailureReason"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importFailureReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalProtectionLevelOptions"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"externalProtectionLevelOptions\". This field is required.")
	}
	if _, ok := s.Cache.Load("reimportEligible"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"reimportEligible\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].Register")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "state":
		return nil
	case "protectionLevel":
		return nil
	case "algorithm":
		return nil
	case "attestation":
		return nil
	case "created":
		return nil
	case "generated":
		return nil
	case "destroyed":
		return nil
	case "destroyEventTime":
		return nil
	case "importJob":
		return nil
	case "importTime":
		return nil
	case "importFailureReason":
		return nil
	case "externalProtectionLevelOptions":
		return nil
	case "reimportEligible":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "state":
		return s.State()
	case "protectionLevel":
		return s.ProtectionLevel()
	case "algorithm":
		return s.Algorithm()
	case "attestation":
		return s.Attestation()
	case "created":
		return s.Created()
	case "generated":
		return s.Generated()
	case "destroyed":
		return s.Destroyed()
	case "destroyEventTime":
		return s.DestroyEventTime()
	case "importJob":
		return s.ImportJob()
	case "importTime":
		return s.ImportTime()
	case "importFailureReason":
		return s.ImportFailureReason()
	case "externalProtectionLevelOptions":
		return s.ExternalProtectionLevelOptions()
	case "reimportEligible":
		return s.ReimportEligible()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProtectionLevel accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ProtectionLevel() (string, error) {
	res, ok := s.Cache.Load("protectionLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"protectionLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"protectionLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Algorithm accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Algorithm() (string, error) {
	res, ok := s.Cache.Load("algorithm")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"algorithm\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"algorithm\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attestation accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Attestation() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation, error) {
	res, ok := s.Cache.Load("attestation")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"attestation\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestation)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"attestation\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Generated accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Generated() (*time.Time, error) {
	res, ok := s.Cache.Load("generated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"generated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"generated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Destroyed accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Destroyed() (*time.Time, error) {
	res, ok := s.Cache.Load("destroyed")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"destroyed\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"destroyed\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DestroyEventTime accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) DestroyEventTime() (*time.Time, error) {
	res, ok := s.Cache.Load("destroyEventTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"destroyEventTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"destroyEventTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ImportJob accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportJob() (string, error) {
	res, ok := s.Cache.Load("importJob")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importJob\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importJob\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ImportTime accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportTime() (*time.Time, error) {
	res, ok := s.Cache.Load("importTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ImportFailureReason accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportFailureReason() (string, error) {
	res, ok := s.Cache.Load("importFailureReason")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importFailureReason\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importFailureReason\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExternalProtectionLevelOptions accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ExternalProtectionLevelOptions() (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions, error) {
	res, ok := s.Cache.Load("externalProtectionLevelOptions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"externalProtectionLevelOptions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"externalProtectionLevelOptions\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions): %#v", res)
	}
	return tres, nil
}

// ReimportEligible accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ReimportEligible() (bool, error) {
	res, ok := s.Cache.Load("reimportEligible")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"reimportEligible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"reimportEligible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].MqlCompute")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "state":
		return nil
	case "protectionLevel":
		return nil
	case "algorithm":
		return nil
	case "attestation":
		return nil
	case "created":
		return nil
	case "generated":
		return nil
	case "destroyed":
		return nil
	case "destroyEventTime":
		return nil
	case "importJob":
		return nil
	case "importTime":
		return nil
	case "importFailureReason":
		return nil
	case "externalProtectionLevelOptions":
		return nil
	case "reimportEligible":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionAttestation resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionAttestation interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	Format() (string, error)
	CertificateChains() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation for the gcp.project.kmsService.keyring.cryptokey.version.attestation resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.attestation resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionAttestation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.attestation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "format":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"format\" argument has the wrong type (expected type \"string\")")
			}
		case "certificateChains":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"certificateChains\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.attestation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("format"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"format\". This field is required.")
	}
	if _, ok := s.Cache.Load("certificateChains"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"certificateChains\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "format":
		return nil
	case "certificateChains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "format":
		return s.Format()
	case "certificateChains":
		return s.CertificateChains()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Format accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Format() (string, error) {
	res, ok := s.Cache.Load("format")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"format\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"format\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertificateChains accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) CertificateChains() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains, error) {
	res, ok := s.Cache.Load("certificateChains")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"certificateChains\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"certificateChains\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].MqlCompute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "format":
		return nil
	case "certificateChains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	CaviumCerts() ([]interface{}, error)
	GoogleCardCerts() ([]interface{}, error)
	GooglePartitionCerts() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains for the gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "caviumCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"caviumCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "googleCardCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"googleCardCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "googlePartitionCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"googlePartitionCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("caviumCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"caviumCerts\". This field is required.")
	}
	if _, ok := s.Cache.Load("googleCardCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"googleCardCerts\". This field is required.")
	}
	if _, ok := s.Cache.Load("googlePartitionCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"googlePartitionCerts\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "caviumCerts":
		return nil
	case "googleCardCerts":
		return nil
	case "googlePartitionCerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "caviumCerts":
		return s.CaviumCerts()
	case "googleCardCerts":
		return s.GoogleCardCerts()
	case "googlePartitionCerts":
		return s.GooglePartitionCerts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CaviumCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) CaviumCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("caviumCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"caviumCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"caviumCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// GoogleCardCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GoogleCardCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("googleCardCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"googleCardCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"googleCardCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// GooglePartitionCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GooglePartitionCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("googlePartitionCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"googlePartitionCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"googlePartitionCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].MqlCompute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "caviumCerts":
		return nil
	case "googleCardCerts":
		return nil
	case "googlePartitionCerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	ExternalKeyUri() (string, error)
	EkmConnectionKeyPath() (string, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions for the gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "externalKeyUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"externalKeyUri\" argument has the wrong type (expected type \"string\")")
			}
		case "ekmConnectionKeyPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"ekmConnectionKeyPath\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalKeyUri"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"externalKeyUri\". This field is required.")
	}
	if _, ok := s.Cache.Load("ekmConnectionKeyPath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"ekmConnectionKeyPath\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "externalKeyUri":
		return nil
	case "ekmConnectionKeyPath":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "externalKeyUri":
		return s.ExternalKeyUri()
	case "ekmConnectionKeyPath":
		return s.EkmConnectionKeyPath()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExternalKeyUri accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) ExternalKeyUri() (string, error) {
	res, ok := s.Cache.Load("externalKeyUri")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"externalKeyUri\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"externalKeyUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EkmConnectionKeyPath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) EkmConnectionKeyPath() (string, error) {
	res, ok := s.Cache.Load("ekmConnectionKeyPath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"ekmConnectionKeyPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"ekmConnectionKeyPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].MqlCompute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "externalKeyUri":
		return nil
	case "ekmConnectionKeyPath":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// GcpEssentialContact resource interface
type GcpEssentialContact interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Email() (string, error)
	LanguageTag() (string, error)
	NotificationCategories() ([]interface{}, error)
	Validated() (*time.Time, error)
	ValidationState() (string, error)
}

// mqlGcpEssentialContact for the gcp.essentialContact resource
type mqlGcpEssentialContact struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpEssentialContact) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.essentialContact resource
func newGcpEssentialContact(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpEssentialContact{runtime.NewResource("gcp.essentialContact")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "languageTag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"languageTag\" argument has the wrong type (expected type \"string\")")
			}
		case "notificationCategories":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"notificationCategories\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "validated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"validated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "validationState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"validationState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.essentialContact with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpEssentialContact) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("languageTag"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"languageTag\". This field is required.")
	}
	if _, ok := s.Cache.Load("notificationCategories"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"notificationCategories\". This field is required.")
	}
	if _, ok := s.Cache.Load("validated"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"validated\". This field is required.")
	}
	if _, ok := s.Cache.Load("validationState"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"validationState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpEssentialContact) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].Register")
	switch name {
	case "resourcePath":
		return nil
	case "email":
		return nil
	case "languageTag":
		return nil
	case "notificationCategories":
		return nil
	case "validated":
		return nil
	case "validationState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpEssentialContact) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "email":
		return s.Email()
	case "languageTag":
		return s.LanguageTag()
	case "notificationCategories":
		return s.NotificationCategories()
	case "validated":
		return s.Validated()
	case "validationState":
		return s.ValidationState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpEssentialContact) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlGcpEssentialContact) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LanguageTag accessor autogenerated
func (s *mqlGcpEssentialContact) LanguageTag() (string, error) {
	res, ok := s.Cache.Load("languageTag")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"languageTag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"languageTag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NotificationCategories accessor autogenerated
func (s *mqlGcpEssentialContact) NotificationCategories() ([]interface{}, error) {
	res, ok := s.Cache.Load("notificationCategories")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"notificationCategories\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"notificationCategories\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Validated accessor autogenerated
func (s *mqlGcpEssentialContact) Validated() (*time.Time, error) {
	res, ok := s.Cache.Load("validated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"validated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"validated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ValidationState accessor autogenerated
func (s *mqlGcpEssentialContact) ValidationState() (string, error) {
	res, ok := s.Cache.Load("validationState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"validationState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"validationState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpEssentialContact) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].MqlCompute")
	switch name {
	case "resourcePath":
		return nil
	case "email":
		return nil
	case "languageTag":
		return nil
	case "notificationCategories":
		return nil
	case "validated":
		return nil
	case "validationState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

// GcpProjectApiKey resource interface
type GcpProjectApiKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	ResourcePath() (string, error)
	Annotations() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Deleted() (*time.Time, error)
	KeyString() (string, error)
	Restrictions() (GcpProjectApiKeyRestrictions, error)
	Updated() (*time.Time, error)
}

// mqlGcpProjectApiKey for the gcp.project.apiKey resource
type mqlGcpProjectApiKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectApiKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.apiKey resource
func newGcpProjectApiKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectApiKey{runtime.NewResource("gcp.project.apiKey")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "deleted":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"deleted\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "keyString":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"keyString\" argument has the wrong type (expected type \"string\")")
			}
		case "restrictions":
			if _, ok := val.(GcpProjectApiKeyRestrictions); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"restrictions\" argument has the wrong type (expected type \"GcpProjectApiKeyRestrictions\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.apiKey with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectApiKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("annotations"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"annotations\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("deleted"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"deleted\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyString"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"keyString\". This field is required.")
	}
	if _, ok := s.Cache.Load("restrictions"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"restrictions\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectApiKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "resourcePath":
		return nil
	case "annotations":
		return nil
	case "created":
		return nil
	case "deleted":
		return nil
	case "keyString":
		return nil
	case "restrictions":
		return nil
	case "updated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.apiKey\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectApiKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "resourcePath":
		return s.ResourcePath()
	case "annotations":
		return s.Annotations()
	case "created":
		return s.Created()
	case "deleted":
		return s.Deleted()
	case "keyString":
		return s.KeyString()
	case "restrictions":
		return s.Restrictions()
	case "updated":
		return s.Updated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.apiKey\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectApiKey) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectApiKey) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectApiKey) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectApiKey) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlGcpProjectApiKey) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"annotations\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectApiKey) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Deleted accessor autogenerated
func (s *mqlGcpProjectApiKey) Deleted() (*time.Time, error) {
	res, ok := s.Cache.Load("deleted")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"deleted\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"deleted\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KeyString accessor autogenerated
func (s *mqlGcpProjectApiKey) KeyString() (string, error) {
	res, ok := s.Cache.Load("keyString")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"keyString\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"keyString\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Restrictions accessor autogenerated
func (s *mqlGcpProjectApiKey) Restrictions() (GcpProjectApiKeyRestrictions, error) {
	res, ok := s.Cache.Load("restrictions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"restrictions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectApiKeyRestrictions)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"restrictions\" to the right type (GcpProjectApiKeyRestrictions): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcpProjectApiKey) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectApiKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "resourcePath":
		return nil
	case "annotations":
		return nil
	case "created":
		return nil
	case "deleted":
		return nil
	case "keyString":
		return nil
	case "restrictions":
		return nil
	case "updated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.apiKey\" resource")
	}
}

// GcpProjectApiKeyRestrictions resource interface
type GcpProjectApiKeyRestrictions interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ParentResourcePath() (string, error)
	AndroidKeyRestrictions() (interface{}, error)
	ApiTargets() ([]interface{}, error)
	BrowserKeyRestrictions() (interface{}, error)
	IosKeyRestrictions() (interface{}, error)
	ServerKeyRestrictions() (interface{}, error)
}

// mqlGcpProjectApiKeyRestrictions for the gcp.project.apiKey.restrictions resource
type mqlGcpProjectApiKeyRestrictions struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectApiKeyRestrictions) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.apiKey.restrictions resource
func newGcpProjectApiKeyRestrictions(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectApiKeyRestrictions{runtime.NewResource("gcp.project.apiKey.restrictions")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "parentResourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"parentResourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "androidKeyRestrictions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"androidKeyRestrictions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "apiTargets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"apiTargets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "browserKeyRestrictions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"browserKeyRestrictions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "iosKeyRestrictions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"iosKeyRestrictions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "serverKeyRestrictions":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"serverKeyRestrictions\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.apiKey.restrictions\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.apiKey.restrictions with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectApiKeyRestrictions) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("parentResourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"parentResourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("androidKeyRestrictions"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"androidKeyRestrictions\". This field is required.")
	}
	if _, ok := s.Cache.Load("apiTargets"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"apiTargets\". This field is required.")
	}
	if _, ok := s.Cache.Load("browserKeyRestrictions"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"browserKeyRestrictions\". This field is required.")
	}
	if _, ok := s.Cache.Load("iosKeyRestrictions"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"iosKeyRestrictions\". This field is required.")
	}
	if _, ok := s.Cache.Load("serverKeyRestrictions"); !ok {
		return errors.New("Initialized \"gcp.project.apiKey.restrictions\" resource without a \"serverKeyRestrictions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey.restrictions].Register")
	switch name {
	case "parentResourcePath":
		return nil
	case "androidKeyRestrictions":
		return nil
	case "apiTargets":
		return nil
	case "browserKeyRestrictions":
		return nil
	case "iosKeyRestrictions":
		return nil
	case "serverKeyRestrictions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.apiKey.restrictions\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey.restrictions].Field")
	switch name {
	case "parentResourcePath":
		return s.ParentResourcePath()
	case "androidKeyRestrictions":
		return s.AndroidKeyRestrictions()
	case "apiTargets":
		return s.ApiTargets()
	case "browserKeyRestrictions":
		return s.BrowserKeyRestrictions()
	case "iosKeyRestrictions":
		return s.IosKeyRestrictions()
	case "serverKeyRestrictions":
		return s.ServerKeyRestrictions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.apiKey.restrictions\" resource")
	}
}

// ParentResourcePath accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) ParentResourcePath() (string, error) {
	res, ok := s.Cache.Load("parentResourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"parentResourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"parentResourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AndroidKeyRestrictions accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) AndroidKeyRestrictions() (interface{}, error) {
	res, ok := s.Cache.Load("androidKeyRestrictions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"androidKeyRestrictions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"androidKeyRestrictions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ApiTargets accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) ApiTargets() ([]interface{}, error) {
	res, ok := s.Cache.Load("apiTargets")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"apiTargets\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"apiTargets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// BrowserKeyRestrictions accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) BrowserKeyRestrictions() (interface{}, error) {
	res, ok := s.Cache.Load("browserKeyRestrictions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"browserKeyRestrictions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"browserKeyRestrictions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// IosKeyRestrictions accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) IosKeyRestrictions() (interface{}, error) {
	res, ok := s.Cache.Load("iosKeyRestrictions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"iosKeyRestrictions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"iosKeyRestrictions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ServerKeyRestrictions accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) ServerKeyRestrictions() (interface{}, error) {
	res, ok := s.Cache.Load("serverKeyRestrictions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.apiKey.restrictions\" failed: no value provided for static field \"serverKeyRestrictions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.apiKey.restrictions\" failed to cast field \"serverKeyRestrictions\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectApiKeyRestrictions) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.apiKey.restrictions].MqlCompute")
	switch name {
	case "parentResourcePath":
		return nil
	case "androidKeyRestrictions":
		return nil
	case "apiTargets":
		return nil
	case "browserKeyRestrictions":
		return nil
	case "iosKeyRestrictions":
		return nil
	case "serverKeyRestrictions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.apiKey.restrictions\" resource")
	}
}

// GcpProjectLoggingservice resource interface
type GcpProjectLoggingservice interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Buckets() ([]interface{}, error)
}

// mqlGcpProjectLoggingservice for the gcp.project.loggingservice resource
type mqlGcpProjectLoggingservice struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectLoggingservice) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.loggingservice resource
func newGcpProjectLoggingservice(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectLoggingservice{runtime.NewResource("gcp.project.loggingservice")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.loggingservice with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectLoggingservice) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectLoggingservice) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice].Register")
	switch name {
	case "projectId":
		return nil
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectLoggingservice) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.loggingservice\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectLoggingservice) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Buckets accessor autogenerated
func (s *mqlGcpProjectLoggingservice) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"gcp.project.loggingservice\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectLoggingservice) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlGcpProjectLoggingservice) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectLoggingserviceBucket resource interface
type GcpProjectLoggingserviceBucket interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	CmekSettings() (interface{}, error)
	Created() (*time.Time, error)
	Description() (string, error)
	IndexConfigs() ([]interface{}, error)
	LifecycleState() (string, error)
	Locked() (bool, error)
	Name() (string, error)
	RestrictedFields() ([]interface{}, error)
	RetentionDays() (int64, error)
	Updated() (*time.Time, error)
}

// mqlGcpProjectLoggingserviceBucket for the gcp.project.loggingservice.bucket resource
type mqlGcpProjectLoggingserviceBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectLoggingserviceBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.loggingservice.bucket resource
func newGcpProjectLoggingserviceBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectLoggingserviceBucket{runtime.NewResource("gcp.project.loggingservice.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "cmekSettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"cmekSettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "indexConfigs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"indexConfigs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "locked":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"locked\" argument has the wrong type (expected type \"bool\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "restrictedFields":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"restrictedFields\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "retentionDays":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"retentionDays\" argument has the wrong type (expected type \"int64\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.loggingservice.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectLoggingserviceBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("cmekSettings"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"cmekSettings\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("indexConfigs"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"indexConfigs\". This field is required.")
	}
	if _, ok := s.Cache.Load("lifecycleState"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"lifecycleState\". This field is required.")
	}
	if _, ok := s.Cache.Load("locked"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"locked\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("restrictedFields"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"restrictedFields\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDays"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"retentionDays\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket\" resource without a \"updated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket].Register")
	switch name {
	case "projectId":
		return nil
	case "cmekSettings":
		return nil
	case "created":
		return nil
	case "description":
		return nil
	case "indexConfigs":
		return nil
	case "lifecycleState":
		return nil
	case "locked":
		return nil
	case "name":
		return nil
	case "restrictedFields":
		return nil
	case "retentionDays":
		return nil
	case "updated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "cmekSettings":
		return s.CmekSettings()
	case "created":
		return s.Created()
	case "description":
		return s.Description()
	case "indexConfigs":
		return s.IndexConfigs()
	case "lifecycleState":
		return s.LifecycleState()
	case "locked":
		return s.Locked()
	case "name":
		return s.Name()
	case "restrictedFields":
		return s.RestrictedFields()
	case "retentionDays":
		return s.RetentionDays()
	case "updated":
		return s.Updated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CmekSettings accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) CmekSettings() (interface{}, error) {
	res, ok := s.Cache.Load("cmekSettings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"cmekSettings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"cmekSettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IndexConfigs accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) IndexConfigs() ([]interface{}, error) {
	res, ok := s.Cache.Load("indexConfigs")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"indexConfigs\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"indexConfigs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"lifecycleState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Locked accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Locked() (bool, error) {
	res, ok := s.Cache.Load("locked")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"locked\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"locked\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RestrictedFields accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) RestrictedFields() ([]interface{}, error) {
	res, ok := s.Cache.Load("restrictedFields")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"restrictedFields\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"restrictedFields\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RetentionDays accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) RetentionDays() (int64, error) {
	res, ok := s.Cache.Load("retentionDays")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"retentionDays\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"retentionDays\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucket) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "cmekSettings":
		return nil
	case "created":
		return nil
	case "description":
		return nil
	case "indexConfigs":
		return nil
	case "lifecycleState":
		return nil
	case "locked":
		return nil
	case "name":
		return nil
	case "restrictedFields":
		return nil
	case "retentionDays":
		return nil
	case "updated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket\" resource")
	}
}

// GcpProjectLoggingserviceBucketIndexConfig resource interface
type GcpProjectLoggingserviceBucketIndexConfig interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Created() (*time.Time, error)
	FieldPath() (string, error)
	Type() (string, error)
}

// mqlGcpProjectLoggingserviceBucketIndexConfig for the gcp.project.loggingservice.bucket.indexConfig resource
type mqlGcpProjectLoggingserviceBucketIndexConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.loggingservice.bucket.indexConfig resource
func newGcpProjectLoggingserviceBucketIndexConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectLoggingserviceBucketIndexConfig{runtime.NewResource("gcp.project.loggingservice.bucket.indexConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket.indexConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket.indexConfig\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "fieldPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket.indexConfig\", its \"fieldPath\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket.indexConfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.loggingservice.bucket.indexConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.loggingservice.bucket.indexConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket.indexConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket.indexConfig\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("fieldPath"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket.indexConfig\" resource without a \"fieldPath\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.loggingservice.bucket.indexConfig\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket.indexConfig].Register")
	switch name {
	case "id":
		return nil
	case "created":
		return nil
	case "fieldPath":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket.indexConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket.indexConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "created":
		return s.Created()
	case "fieldPath":
		return s.FieldPath()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket.indexConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket.indexConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket.indexConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.loggingservice.bucket.indexConfig\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.loggingservice.bucket.indexConfig\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// FieldPath accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) FieldPath() (string, error) {
	res, ok := s.Cache.Load("fieldPath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket.indexConfig\" failed: no value provided for static field \"fieldPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket.indexConfig\" failed to cast field \"fieldPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.loggingservice.bucket.indexConfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.loggingservice.bucket.indexConfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectLoggingserviceBucketIndexConfig) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.loggingservice.bucket.indexConfig].MqlCompute")
	switch name {
	case "id":
		return nil
	case "created":
		return nil
	case "fieldPath":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.loggingservice.bucket.indexConfig\" resource")
	}
}

// GcpProjectIamService resource interface
type GcpProjectIamService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	ServiceAccounts() ([]interface{}, error)
}

// mqlGcpProjectIamService for the gcp.project.iamService resource
type mqlGcpProjectIamService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectIamService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.iamService resource
func newGcpProjectIamService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectIamService{runtime.NewResource("gcp.project.iamService")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService\", its \"serviceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.iamService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectIamService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.iamService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectIamService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService].Register")
	switch name {
	case "projectId":
		return nil
	case "serviceAccounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectIamService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "serviceAccounts":
		return s.ServiceAccounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.iamService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectIamService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccounts accessor autogenerated
func (s *mqlGcpProjectIamService) ServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceAccounts")
	if !ok || !res.Valid {
		if err := s.ComputeServiceAccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceAccounts")
		if !ok {
			return nil, errors.New("\"gcp.project.iamService\" calculated \"serviceAccounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceAccounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.iamService\" failed to cast field \"serviceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectIamService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "serviceAccounts":
		return s.ComputeServiceAccounts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService\" resource")
	}
}

// ComputeServiceAccounts computer autogenerated
func (s *mqlGcpProjectIamService) ComputeServiceAccounts() error {
	var err error
	if _, ok := s.Cache.Load("serviceAccounts"); ok {
		return nil
	}
	vres, err := s.GetServiceAccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceAccounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectIamServiceServiceAccount resource interface
type GcpProjectIamServiceServiceAccount interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	UniqueId() (string, error)
	Email() (string, error)
	DisplayName() (string, error)
	Description() (string, error)
	Oauth2ClientId() (string, error)
	Disabled() (bool, error)
	Keys() ([]interface{}, error)
}

// mqlGcpProjectIamServiceServiceAccount for the gcp.project.iamService.serviceAccount resource
type mqlGcpProjectIamServiceServiceAccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectIamServiceServiceAccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.iamService.serviceAccount resource
func newGcpProjectIamServiceServiceAccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectIamServiceServiceAccount{runtime.NewResource("gcp.project.iamService.serviceAccount")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "uniqueId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"uniqueId\" argument has the wrong type (expected type \"string\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "displayName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"displayName\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "oauth2ClientId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"oauth2ClientId\" argument has the wrong type (expected type \"string\")")
			}
		case "disabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"disabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "keys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"keys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.iamService.serviceAccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectIamServiceServiceAccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("uniqueId"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"uniqueId\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayName"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"displayName\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("oauth2ClientId"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"oauth2ClientId\". This field is required.")
	}
	if _, ok := s.Cache.Load("disabled"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount\" resource without a \"disabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "uniqueId":
		return nil
	case "email":
		return nil
	case "displayName":
		return nil
	case "description":
		return nil
	case "oauth2ClientId":
		return nil
	case "disabled":
		return nil
	case "keys":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "uniqueId":
		return s.UniqueId()
	case "email":
		return s.Email()
	case "displayName":
		return s.DisplayName()
	case "description":
		return s.Description()
	case "oauth2ClientId":
		return s.Oauth2ClientId()
	case "disabled":
		return s.Disabled()
	case "keys":
		return s.Keys()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UniqueId accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) UniqueId() (string, error) {
	res, ok := s.Cache.Load("uniqueId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"uniqueId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"uniqueId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayName accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) DisplayName() (string, error) {
	res, ok := s.Cache.Load("displayName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"displayName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"displayName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Oauth2ClientId accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Oauth2ClientId() (string, error) {
	res, ok := s.Cache.Load("oauth2ClientId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"oauth2ClientId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"oauth2ClientId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Disabled accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Disabled() (bool, error) {
	res, ok := s.Cache.Load("disabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.iamService.serviceAccount\" failed: no value provided for static field \"disabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"disabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Keys accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) Keys() ([]interface{}, error) {
	res, ok := s.Cache.Load("keys")
	if !ok || !res.Valid {
		if err := s.ComputeKeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keys")
		if !ok {
			return nil, errors.New("\"gcp.project.iamService.serviceAccount\" calculated \"keys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.iamService.serviceAccount\" failed to cast field \"keys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "uniqueId":
		return nil
	case "email":
		return nil
	case "displayName":
		return nil
	case "description":
		return nil
	case "oauth2ClientId":
		return nil
	case "disabled":
		return nil
	case "keys":
		return s.ComputeKeys()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount\" resource")
	}
}

// ComputeKeys computer autogenerated
func (s *mqlGcpProjectIamServiceServiceAccount) ComputeKeys() error {
	var err error
	if _, ok := s.Cache.Load("keys"); ok {
		return nil
	}
	vres, err := s.GetKeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectIamServiceServiceAccountKey resource interface
type GcpProjectIamServiceServiceAccountKey interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	KeyAlgorithm() (string, error)
	ValidAfterTime() (*time.Time, error)
	ValidBeforeTime() (*time.Time, error)
	KeyOrigin() (string, error)
	KeyType() (string, error)
	Disabled() (bool, error)
}

// mqlGcpProjectIamServiceServiceAccountKey for the gcp.project.iamService.serviceAccount.key resource
type mqlGcpProjectIamServiceServiceAccountKey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectIamServiceServiceAccountKey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.iamService.serviceAccount.key resource
func newGcpProjectIamServiceServiceAccountKey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectIamServiceServiceAccountKey{runtime.NewResource("gcp.project.iamService.serviceAccount.key")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "keyAlgorithm":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"keyAlgorithm\" argument has the wrong type (expected type \"string\")")
			}
		case "validAfterTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"validAfterTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "validBeforeTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"validBeforeTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "keyOrigin":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"keyOrigin\" argument has the wrong type (expected type \"string\")")
			}
		case "keyType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"keyType\" argument has the wrong type (expected type \"string\")")
			}
		case "disabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"disabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.iamService.serviceAccount.key\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.iamService.serviceAccount.key with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectIamServiceServiceAccountKey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyAlgorithm"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"keyAlgorithm\". This field is required.")
	}
	if _, ok := s.Cache.Load("validAfterTime"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"validAfterTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("validBeforeTime"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"validBeforeTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyOrigin"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"keyOrigin\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyType"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"keyType\". This field is required.")
	}
	if _, ok := s.Cache.Load("disabled"); !ok {
		return errors.New("Initialized \"gcp.project.iamService.serviceAccount.key\" resource without a \"disabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount.key].Register")
	switch name {
	case "name":
		return nil
	case "keyAlgorithm":
		return nil
	case "validAfterTime":
		return nil
	case "validBeforeTime":
		return nil
	case "keyOrigin":
		return nil
	case "keyType":
		return nil
	case "disabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount.key\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount.key].Field")
	switch name {
	case "name":
		return s.Name()
	case "keyAlgorithm":
		return s.KeyAlgorithm()
	case "validAfterTime":
		return s.ValidAfterTime()
	case "validBeforeTime":
		return s.ValidBeforeTime()
	case "keyOrigin":
		return s.KeyOrigin()
	case "keyType":
		return s.KeyType()
	case "disabled":
		return s.Disabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount.key\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyAlgorithm accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) KeyAlgorithm() (string, error) {
	res, ok := s.Cache.Load("keyAlgorithm")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"keyAlgorithm\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"keyAlgorithm\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ValidAfterTime accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) ValidAfterTime() (*time.Time, error) {
	res, ok := s.Cache.Load("validAfterTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"validAfterTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"validAfterTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ValidBeforeTime accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) ValidBeforeTime() (*time.Time, error) {
	res, ok := s.Cache.Load("validBeforeTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"validBeforeTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"validBeforeTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KeyOrigin accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) KeyOrigin() (string, error) {
	res, ok := s.Cache.Load("keyOrigin")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"keyOrigin\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"keyOrigin\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyType accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) KeyType() (string, error) {
	res, ok := s.Cache.Load("keyType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"keyType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"keyType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Disabled accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) Disabled() (bool, error) {
	res, ok := s.Cache.Load("disabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.iamService.serviceAccount.key\" failed: no value provided for static field \"disabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.iamService.serviceAccount.key\" failed to cast field \"disabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectIamServiceServiceAccountKey) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.iamService.serviceAccount.key].MqlCompute")
	switch name {
	case "name":
		return nil
	case "keyAlgorithm":
		return nil
	case "validAfterTime":
		return nil
	case "validBeforeTime":
		return nil
	case "keyOrigin":
		return nil
	case "keyType":
		return nil
	case "disabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.iamService.serviceAccount.key\" resource")
	}
}

