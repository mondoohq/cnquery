// Code generated by resources. DO NOT EDIT.
package gcp

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("gcp.organization", newGcpOrganization)
	registry.AddFactory("gcp.project", newGcpProject)
	registry.AddFactory("gcp.service", newGcpService)
	registry.AddFactory("gcp.recommendation", newGcpRecommendation)
	registry.AddFactory("gcp.resourcemanager.binding", newGcpResourcemanagerBinding)
	registry.AddFactory("gcp.compute", newGcpCompute)
	registry.AddFactory("gcp.compute.region", newGcpComputeRegion)
	registry.AddFactory("gcp.compute.zone", newGcpComputeZone)
	registry.AddFactory("gcp.compute.machineType", newGcpComputeMachineType)
	registry.AddFactory("gcp.compute.instance", newGcpComputeInstance)
	registry.AddFactory("gcp.compute.serviceaccount", newGcpComputeServiceaccount)
	registry.AddFactory("gcp.compute.disk", newGcpComputeDisk)
	registry.AddFactory("gcp.compute.attachedDisk", newGcpComputeAttachedDisk)
	registry.AddFactory("gcp.compute.snapshot", newGcpComputeSnapshot)
	registry.AddFactory("gcp.compute.image", newGcpComputeImage)
	registry.AddFactory("gcp.compute.firewall", newGcpComputeFirewall)
	registry.AddFactory("gcp.compute.network", newGcpComputeNetwork)
	registry.AddFactory("gcp.compute.subnetwork", newGcpComputeSubnetwork)
	registry.AddFactory("gcp.compute.router", newGcpComputeRouter)
	registry.AddFactory("gcp.storage", newGcpStorage)
	registry.AddFactory("gcp.storage.bucket", newGcpStorageBucket)
	registry.AddFactory("gcp.sql", newGcpSql)
	registry.AddFactory("gcp.sql.instance", newGcpSqlInstance)
	registry.AddFactory("gcp.bigquery", newGcpBigquery)
	registry.AddFactory("gcp.bigquery.dataset", newGcpBigqueryDataset)
	registry.AddFactory("gcp.bigquery.table", newGcpBigqueryTable)
	registry.AddFactory("gcp.bigquery.model", newGcpBigqueryModel)
	registry.AddFactory("gcp.bigquery.routine", newGcpBigqueryRoutine)
	registry.AddFactory("gcp.dns", newGcpDns)
	registry.AddFactory("gcp.dns.managedzone", newGcpDnsManagedzone)
	registry.AddFactory("gcp.dns.recordset", newGcpDnsRecordset)
	registry.AddFactory("gcp.dns.policy", newGcpDnsPolicy)
	registry.AddFactory("gcp.project.cluster", newGcpProjectCluster)
	registry.AddFactory("gcp.project.cluster.nodepool", newGcpProjectClusterNodepool)
	registry.AddFactory("gcp.project.cluster.nodepool.networkConfig", newGcpProjectClusterNodepoolNetworkConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.networkConfig.performanceConfig", newGcpProjectClusterNodepoolNetworkConfigPerformanceConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config", newGcpProjectClusterNodepoolConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.accelerator", newGcpProjectClusterNodepoolConfigAccelerator)
	registry.AddFactory("gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig", newGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.nodeTaint", newGcpProjectClusterNodepoolConfigNodeTaint)
	registry.AddFactory("gcp.project.cluster.nodepool.config.sandboxConfig", newGcpProjectClusterNodepoolConfigSandboxConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.shieldedInstanceConfig", newGcpProjectClusterNodepoolConfigShieldedInstanceConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.linuxNodeConfig", newGcpProjectClusterNodepoolConfigLinuxNodeConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.kubeletConfig", newGcpProjectClusterNodepoolConfigKubeletConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.gcfsConfig", newGcpProjectClusterNodepoolConfigGcfsConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.advancedMachineFeatures", newGcpProjectClusterNodepoolConfigAdvancedMachineFeatures)
	registry.AddFactory("gcp.project.cluster.nodepool.config.gvnicConfig", newGcpProjectClusterNodepoolConfigGvnicConfig)
	registry.AddFactory("gcp.project.cluster.nodepool.config.confidentialNodes", newGcpProjectClusterNodepoolConfigConfidentialNodes)
	registry.AddFactory("gcp.project.pubsubService", newGcpProjectPubsubService)
	registry.AddFactory("gcp.project.pubsubService.topic", newGcpProjectPubsubServiceTopic)
	registry.AddFactory("gcp.project.pubsubService.topic.config", newGcpProjectPubsubServiceTopicConfig)
	registry.AddFactory("gcp.project.pubsubService.topic.config.messagestoragepolicy", newGcpProjectPubsubServiceTopicConfigMessagestoragepolicy)
	registry.AddFactory("gcp.project.pubsubService.subscription", newGcpProjectPubsubServiceSubscription)
	registry.AddFactory("gcp.project.pubsubService.subscription.config", newGcpProjectPubsubServiceSubscriptionConfig)
	registry.AddFactory("gcp.project.pubsubService.subscription.config.pushconfig", newGcpProjectPubsubServiceSubscriptionConfigPushconfig)
	registry.AddFactory("gcp.project.pubsubService.snapshot", newGcpProjectPubsubServiceSnapshot)
	registry.AddFactory("gcp.project.kmsService", newGcpProjectKmsService)
	registry.AddFactory("gcp.project.kmsService.keyring", newGcpProjectKmsServiceKeyring)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey", newGcpProjectKmsServiceKeyringCryptokey)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version", newGcpProjectKmsServiceKeyringCryptokeyVersion)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.attestation", newGcpProjectKmsServiceKeyringCryptokeyVersionAttestation)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains", newGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains)
	registry.AddFactory("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions", newGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions)
	registry.AddFactory("gcp.essentialContact", newGcpEssentialContact)
}

// GcpOrganization resource interface
type GcpOrganization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	LifecycleState() (string, error)
	IamPolicy() ([]interface{}, error)
}

// mqlGcpOrganization for the gcp.organization resource
type mqlGcpOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.organization resource
func newGcpOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpOrganization{runtime.NewResource("gcp.organization")}
	var existing GcpOrganization
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("lifecycleState"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"lifecycleState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "lifecycleState":
		return s.LifecycleState()
	case "iamPolicy":
		return s.IamPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpOrganization) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpOrganization) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"lifecycleState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpOrganization) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.organization\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.organization\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpOrganization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpOrganization) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProject resource interface
type GcpProject interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Number() (string, error)
	State() (string, error)
	LifecycleState() (string, error)
	CreateTime() (*time.Time, error)
	Labels() (map[string]interface{}, error)
	IamPolicy() ([]interface{}, error)
	Services() ([]interface{}, error)
	Recommendations() ([]interface{}, error)
	Clusters() ([]interface{}, error)
	Pubsub() (GcpProjectPubsubService, error)
	Kms() (GcpProjectKmsService, error)
	EssentialContacts() ([]interface{}, error)
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project resource
func newGcpProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProject{runtime.NewResource("gcp.project")}
	var existing GcpProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "number":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"number\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "createTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"createTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "services":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"services\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "recommendations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"recommendations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "pubsub":
			if _, ok := val.(GcpProjectPubsubService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"pubsub\" argument has the wrong type (expected type \"GcpProjectPubsubService\")")
			}
		case "kms":
			if _, ok := val.(GcpProjectKmsService); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"kms\" argument has the wrong type (expected type \"GcpProjectKmsService\")")
			}
		case "essentialContacts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"essentialContacts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProject) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "number":
		return nil
	case "state":
		return nil
	case "lifecycleState":
		return nil
	case "createTime":
		return nil
	case "labels":
		return nil
	case "iamPolicy":
		return nil
	case "services":
		return nil
	case "recommendations":
		return nil
	case "clusters":
		return nil
	case "pubsub":
		return nil
	case "kms":
		return nil
	case "essentialContacts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "number":
		return s.Number()
	case "state":
		return s.State()
	case "lifecycleState":
		return s.LifecycleState()
	case "createTime":
		return s.CreateTime()
	case "labels":
		return s.Labels()
	case "iamPolicy":
		return s.IamPolicy()
	case "services":
		return s.Services()
	case "recommendations":
		return s.Recommendations()
	case "clusters":
		return s.Clusters()
	case "pubsub":
		return s.Pubsub()
	case "kms":
		return s.Kms()
	case "essentialContacts":
		return s.EssentialContacts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProject) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProject) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Number accessor autogenerated
func (s *mqlGcpProject) Number() (string, error) {
	res, ok := s.Cache.Load("number")
	if !ok || !res.Valid {
		if err := s.ComputeNumber(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("number")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"number\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "number")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"number\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProject) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		if err := s.ComputeState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("state")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"state\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "state")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpProject) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		if err := s.ComputeLifecycleState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("lifecycleState")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"lifecycleState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "lifecycleState")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateTime accessor autogenerated
func (s *mqlGcpProject) CreateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createTime")
	if !ok || !res.Valid {
		if err := s.ComputeCreateTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createTime")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"createTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"createTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProject) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpProject) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Services accessor autogenerated
func (s *mqlGcpProject) Services() ([]interface{}, error) {
	res, ok := s.Cache.Load("services")
	if !ok || !res.Valid {
		if err := s.ComputeServices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("services")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"services\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "services")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"services\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Recommendations accessor autogenerated
func (s *mqlGcpProject) Recommendations() ([]interface{}, error) {
	res, ok := s.Cache.Load("recommendations")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendations")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"recommendations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"recommendations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Clusters accessor autogenerated
func (s *mqlGcpProject) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Pubsub accessor autogenerated
func (s *mqlGcpProject) Pubsub() (GcpProjectPubsubService, error) {
	res, ok := s.Cache.Load("pubsub")
	if !ok || !res.Valid {
		if err := s.ComputePubsub(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("pubsub")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"pubsub\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "pubsub")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"pubsub\" to the right type (GcpProjectPubsubService): %#v", res)
	}
	return tres, nil
}

// Kms accessor autogenerated
func (s *mqlGcpProject) Kms() (GcpProjectKmsService, error) {
	res, ok := s.Cache.Load("kms")
	if !ok || !res.Valid {
		if err := s.ComputeKms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("kms")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"kms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "kms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsService)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"kms\" to the right type (GcpProjectKmsService): %#v", res)
	}
	return tres, nil
}

// EssentialContacts accessor autogenerated
func (s *mqlGcpProject) EssentialContacts() ([]interface{}, error) {
	res, ok := s.Cache.Load("essentialContacts")
	if !ok || !res.Valid {
		if err := s.ComputeEssentialContacts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("essentialContacts")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"essentialContacts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "essentialContacts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"essentialContacts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProject) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].Compute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "number":
		return s.ComputeNumber()
	case "state":
		return s.ComputeState()
	case "lifecycleState":
		return s.ComputeLifecycleState()
	case "createTime":
		return s.ComputeCreateTime()
	case "labels":
		return s.ComputeLabels()
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "services":
		return s.ComputeServices()
	case "recommendations":
		return s.ComputeRecommendations()
	case "clusters":
		return s.ComputeClusters()
	case "pubsub":
		return s.ComputePubsub()
	case "kms":
		return s.ComputeKms()
	case "essentialContacts":
		return s.ComputeEssentialContacts()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlGcpProject) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlGcpProject) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNumber computer autogenerated
func (s *mqlGcpProject) ComputeNumber() error {
	var err error
	if _, ok := s.Cache.Load("number"); ok {
		return nil
	}
	vres, err := s.GetNumber()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("number", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeState computer autogenerated
func (s *mqlGcpProject) ComputeState() error {
	var err error
	if _, ok := s.Cache.Load("state"); ok {
		return nil
	}
	vres, err := s.GetState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("state", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLifecycleState computer autogenerated
func (s *mqlGcpProject) ComputeLifecycleState() error {
	var err error
	if _, ok := s.Cache.Load("lifecycleState"); ok {
		return nil
	}
	vres, err := s.GetLifecycleState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("lifecycleState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCreateTime computer autogenerated
func (s *mqlGcpProject) ComputeCreateTime() error {
	var err error
	if _, ok := s.Cache.Load("createTime"); ok {
		return nil
	}
	vres, err := s.GetCreateTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLabels computer autogenerated
func (s *mqlGcpProject) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpProject) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServices computer autogenerated
func (s *mqlGcpProject) ComputeServices() error {
	var err error
	if _, ok := s.Cache.Load("services"); ok {
		return nil
	}
	vres, err := s.GetServices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("services", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendations computer autogenerated
func (s *mqlGcpProject) ComputeRecommendations() error {
	var err error
	if _, ok := s.Cache.Load("recommendations"); ok {
		return nil
	}
	vres, err := s.GetRecommendations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeClusters computer autogenerated
func (s *mqlGcpProject) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePubsub computer autogenerated
func (s *mqlGcpProject) ComputePubsub() error {
	var err error
	if _, ok := s.Cache.Load("pubsub"); ok {
		return nil
	}
	vres, err := s.GetPubsub()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("pubsub", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKms computer autogenerated
func (s *mqlGcpProject) ComputeKms() error {
	var err error
	if _, ok := s.Cache.Load("kms"); ok {
		return nil
	}
	vres, err := s.GetKms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("kms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEssentialContacts computer autogenerated
func (s *mqlGcpProject) ComputeEssentialContacts() error {
	var err error
	if _, ok := s.Cache.Load("essentialContacts"); ok {
		return nil
	}
	vres, err := s.GetEssentialContacts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("essentialContacts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpService resource interface
type GcpService interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	ParentName() (string, error)
	Title() (string, error)
	State() (string, error)
	Enabled() (bool, error)
}

// mqlGcpService for the gcp.service resource
type mqlGcpService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.service resource
func newGcpService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpService{runtime.NewResource("gcp.service")}
	var existing GcpService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "parentName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"parentName\" argument has the wrong type (expected type \"string\")")
			}
		case "title":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"title\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.service with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("parentName"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"parentName\". This field is required.")
	}
	if _, ok := s.Cache.Load("title"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"title\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "parentName":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.service].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "parentName":
		return s.ParentName()
	case "title":
		return s.Title()
	case "state":
		return s.State()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpService) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ParentName accessor autogenerated
func (s *mqlGcpService) ParentName() (string, error) {
	res, ok := s.Cache.Load("parentName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"parentName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"parentName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Title accessor autogenerated
func (s *mqlGcpService) Title() (string, error) {
	res, ok := s.Cache.Load("title")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"title\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"title\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpService) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpService) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		if err := s.ComputeEnabled(); err != nil {
			return false, err
		}
		res, ok = s.Cache.Load("enabled")
		if !ok {
			return false, errors.New("\"gcp.service\" calculated \"enabled\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "enabled")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.service\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpService) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].Compute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "parentName":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	case "enabled":
		return s.ComputeEnabled()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// ComputeEnabled computer autogenerated
func (s *mqlGcpService) ComputeEnabled() error {
	var err error
	if _, ok := s.Cache.Load("enabled"); ok {
		return nil
	}
	vres, err := s.GetEnabled()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("enabled", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpRecommendation resource interface
type GcpRecommendation interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	ZoneName() (string, error)
	Name() (string, error)
	Recommender() (string, error)
	PrimaryImpact() (interface{}, error)
	AdditionalImpact() ([]interface{}, error)
	Content() (interface{}, error)
	Category() (string, error)
	Priority() (string, error)
	LastRefreshTime() (*time.Time, error)
	State() (interface{}, error)
}

// mqlGcpRecommendation for the gcp.recommendation resource
type mqlGcpRecommendation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpRecommendation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.recommendation resource
func newGcpRecommendation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpRecommendation{runtime.NewResource("gcp.recommendation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "zoneName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"zoneName\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "recommender":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"recommender\" argument has the wrong type (expected type \"string\")")
			}
		case "primaryImpact":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"primaryImpact\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "additionalImpact":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"additionalImpact\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "content":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"content\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "category":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"category\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"priority\" argument has the wrong type (expected type \"string\")")
			}
		case "lastRefreshTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"lastRefreshTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"state\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.recommendation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpRecommendation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("zoneName"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"zoneName\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("recommender"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"recommender\". This field is required.")
	}
	if _, ok := s.Cache.Load("primaryImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"primaryImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("additionalImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"additionalImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("content"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"content\". This field is required.")
	}
	if _, ok := s.Cache.Load("category"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"category\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastRefreshTime"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"lastRefreshTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpRecommendation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "zoneName":
		return nil
	case "name":
		return nil
	case "recommender":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpRecommendation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "zoneName":
		return s.ZoneName()
	case "name":
		return s.Name()
	case "recommender":
		return s.Recommender()
	case "primaryImpact":
		return s.PrimaryImpact()
	case "additionalImpact":
		return s.AdditionalImpact()
	case "content":
		return s.Content()
	case "category":
		return s.Category()
	case "priority":
		return s.Priority()
	case "lastRefreshTime":
		return s.LastRefreshTime()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpRecommendation) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpRecommendation) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ZoneName accessor autogenerated
func (s *mqlGcpRecommendation) ZoneName() (string, error) {
	res, ok := s.Cache.Load("zoneName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"zoneName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"zoneName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpRecommendation) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Recommender accessor autogenerated
func (s *mqlGcpRecommendation) Recommender() (string, error) {
	res, ok := s.Cache.Load("recommender")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"recommender\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"recommender\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrimaryImpact accessor autogenerated
func (s *mqlGcpRecommendation) PrimaryImpact() (interface{}, error) {
	res, ok := s.Cache.Load("primaryImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"primaryImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"primaryImpact\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AdditionalImpact accessor autogenerated
func (s *mqlGcpRecommendation) AdditionalImpact() ([]interface{}, error) {
	res, ok := s.Cache.Load("additionalImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"additionalImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"additionalImpact\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Content accessor autogenerated
func (s *mqlGcpRecommendation) Content() (interface{}, error) {
	res, ok := s.Cache.Load("content")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"content\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"content\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Category accessor autogenerated
func (s *mqlGcpRecommendation) Category() (string, error) {
	res, ok := s.Cache.Load("category")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"category\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"category\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlGcpRecommendation) Priority() (string, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"priority\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastRefreshTime accessor autogenerated
func (s *mqlGcpRecommendation) LastRefreshTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastRefreshTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"lastRefreshTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"lastRefreshTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpRecommendation) State() (interface{}, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"state\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpRecommendation) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "zoneName":
		return nil
	case "name":
		return nil
	case "recommender":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// GcpResourcemanagerBinding resource interface
type GcpResourcemanagerBinding interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Members() ([]interface{}, error)
	Role() (string, error)
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpResourcemanagerBinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.resourcemanager.binding resource
func newGcpResourcemanagerBinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpResourcemanagerBinding{runtime.NewResource("gcp.resourcemanager.binding")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.resourcemanager.binding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpResourcemanagerBinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("members"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"members\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"role\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Register")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Field")
	switch name {
	case "id":
		return s.Id()
	case "members":
		return s.Members()
	case "role":
		return s.Role()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"members\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Compute")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// GcpCompute resource interface
type GcpCompute interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Instances() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
	Disks() ([]interface{}, error)
	Images() ([]interface{}, error)
	Firewalls() ([]interface{}, error)
	Networks() ([]interface{}, error)
	Subnetworks() ([]interface{}, error)
	Routers() ([]interface{}, error)
	MachineTypes() ([]interface{}, error)
	Regions() ([]interface{}, error)
	Zones() ([]interface{}, error)
}

// mqlGcpCompute for the gcp.compute resource
type mqlGcpCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute resource
func newGcpCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpCompute{runtime.NewResource("gcp.compute")}
	var existing GcpCompute
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "images":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"images\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "firewalls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"firewalls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"networks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "subnetworks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"subnetworks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"routers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "machineTypes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"machineTypes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "regions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"regions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpCompute) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.compute\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute].Register")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return nil
	case "snapshots":
		return nil
	case "disks":
		return nil
	case "images":
		return nil
	case "firewalls":
		return nil
	case "networks":
		return nil
	case "subnetworks":
		return nil
	case "routers":
		return nil
	case "machineTypes":
		return nil
	case "regions":
		return nil
	case "zones":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instances":
		return s.Instances()
	case "snapshots":
		return s.Snapshots()
	case "disks":
		return s.Disks()
	case "images":
		return s.Images()
	case "firewalls":
		return s.Firewalls()
	case "networks":
		return s.Networks()
	case "subnetworks":
		return s.Subnetworks()
	case "routers":
		return s.Routers()
	case "machineTypes":
		return s.MachineTypes()
	case "regions":
		return s.Regions()
	case "zones":
		return s.Zones()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpCompute) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlGcpCompute) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlGcpCompute) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlGcpCompute) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Images accessor autogenerated
func (s *mqlGcpCompute) Images() ([]interface{}, error) {
	res, ok := s.Cache.Load("images")
	if !ok || !res.Valid {
		if err := s.ComputeImages(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("images")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"images\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "images")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"images\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Firewalls accessor autogenerated
func (s *mqlGcpCompute) Firewalls() ([]interface{}, error) {
	res, ok := s.Cache.Load("firewalls")
	if !ok || !res.Valid {
		if err := s.ComputeFirewalls(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("firewalls")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"firewalls\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "firewalls")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"firewalls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Networks accessor autogenerated
func (s *mqlGcpCompute) Networks() ([]interface{}, error) {
	res, ok := s.Cache.Load("networks")
	if !ok || !res.Valid {
		if err := s.ComputeNetworks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("networks")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"networks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "networks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"networks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Subnetworks accessor autogenerated
func (s *mqlGcpCompute) Subnetworks() ([]interface{}, error) {
	res, ok := s.Cache.Load("subnetworks")
	if !ok || !res.Valid {
		if err := s.ComputeSubnetworks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subnetworks")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"subnetworks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subnetworks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"subnetworks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Routers accessor autogenerated
func (s *mqlGcpCompute) Routers() ([]interface{}, error) {
	res, ok := s.Cache.Load("routers")
	if !ok || !res.Valid {
		if err := s.ComputeRouters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routers")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"routers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"routers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MachineTypes accessor autogenerated
func (s *mqlGcpCompute) MachineTypes() ([]interface{}, error) {
	res, ok := s.Cache.Load("machineTypes")
	if !ok || !res.Valid {
		if err := s.ComputeMachineTypes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("machineTypes")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"machineTypes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "machineTypes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"machineTypes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Regions accessor autogenerated
func (s *mqlGcpCompute) Regions() ([]interface{}, error) {
	res, ok := s.Cache.Load("regions")
	if !ok || !res.Valid {
		if err := s.ComputeRegions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("regions")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"regions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "regions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"regions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlGcpCompute) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		if err := s.ComputeZones(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("zones")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"zones\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "zones")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpCompute) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute].Compute")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return s.ComputeInstances()
	case "snapshots":
		return s.ComputeSnapshots()
	case "disks":
		return s.ComputeDisks()
	case "images":
		return s.ComputeImages()
	case "firewalls":
		return s.ComputeFirewalls()
	case "networks":
		return s.ComputeNetworks()
	case "subnetworks":
		return s.ComputeSubnetworks()
	case "routers":
		return s.ComputeRouters()
	case "machineTypes":
		return s.ComputeMachineTypes()
	case "regions":
		return s.ComputeRegions()
	case "zones":
		return s.ComputeZones()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpCompute) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnapshots computer autogenerated
func (s *mqlGcpCompute) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlGcpCompute) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeImages computer autogenerated
func (s *mqlGcpCompute) ComputeImages() error {
	var err error
	if _, ok := s.Cache.Load("images"); ok {
		return nil
	}
	vres, err := s.GetImages()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("images", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeFirewalls computer autogenerated
func (s *mqlGcpCompute) ComputeFirewalls() error {
	var err error
	if _, ok := s.Cache.Load("firewalls"); ok {
		return nil
	}
	vres, err := s.GetFirewalls()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("firewalls", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetworks computer autogenerated
func (s *mqlGcpCompute) ComputeNetworks() error {
	var err error
	if _, ok := s.Cache.Load("networks"); ok {
		return nil
	}
	vres, err := s.GetNetworks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("networks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubnetworks computer autogenerated
func (s *mqlGcpCompute) ComputeSubnetworks() error {
	var err error
	if _, ok := s.Cache.Load("subnetworks"); ok {
		return nil
	}
	vres, err := s.GetSubnetworks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subnetworks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRouters computer autogenerated
func (s *mqlGcpCompute) ComputeRouters() error {
	var err error
	if _, ok := s.Cache.Load("routers"); ok {
		return nil
	}
	vres, err := s.GetRouters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeMachineTypes computer autogenerated
func (s *mqlGcpCompute) ComputeMachineTypes() error {
	var err error
	if _, ok := s.Cache.Load("machineTypes"); ok {
		return nil
	}
	vres, err := s.GetMachineTypes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("machineTypes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRegions computer autogenerated
func (s *mqlGcpCompute) ComputeRegions() error {
	var err error
	if _, ok := s.Cache.Load("regions"); ok {
		return nil
	}
	vres, err := s.GetRegions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("regions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeZones computer autogenerated
func (s *mqlGcpCompute) ComputeZones() error {
	var err error
	if _, ok := s.Cache.Load("zones"); ok {
		return nil
	}
	vres, err := s.GetZones()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("zones", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpComputeRegion resource interface
type GcpComputeRegion interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Status() (string, error)
	Created() (*time.Time, error)
	Quotas() (map[string]interface{}, error)
	Deprecated() (interface{}, error)
}

// mqlGcpComputeRegion for the gcp.compute.region resource
type mqlGcpComputeRegion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeRegion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.region resource
func newGcpComputeRegion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeRegion{runtime.NewResource("gcp.compute.region")}
	var existing GcpComputeRegion
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "quotas":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"quotas\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "deprecated":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"deprecated\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.region with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeRegion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("quotas"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"quotas\". This field is required.")
	}
	if _, ok := s.Cache.Load("deprecated"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"deprecated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeRegion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeRegion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	case "quotas":
		return s.Quotas()
	case "deprecated":
		return s.Deprecated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeRegion) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeRegion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeRegion) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeRegion) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeRegion) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Quotas accessor autogenerated
func (s *mqlGcpComputeRegion) Quotas() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("quotas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"quotas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"quotas\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Deprecated accessor autogenerated
func (s *mqlGcpComputeRegion) Deprecated() (interface{}, error) {
	res, ok := s.Cache.Load("deprecated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"deprecated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"deprecated\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeRegion) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// GcpComputeZone resource interface
type GcpComputeZone interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Status() (string, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeZone for the gcp.compute.zone resource
type mqlGcpComputeZone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeZone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.zone resource
func newGcpComputeZone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeZone{runtime.NewResource("gcp.compute.zone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.zone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeZone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeZone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeZone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeZone) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeZone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeZone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeZone) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeZone) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeZone) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// GcpComputeMachineType resource interface
type GcpComputeMachineType interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	GuestCpus() (int64, error)
	IsSharedCpu() (bool, error)
	MaximumPersistentDisks() (int64, error)
	MaximumPersistentDisksSizeGb() (int64, error)
	MemoryMb() (int64, error)
	Created() (*time.Time, error)
	Zone() (GcpComputeZone, error)
}

// mqlGcpComputeMachineType for the gcp.compute.machineType resource
type mqlGcpComputeMachineType struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeMachineType) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.machineType resource
func newGcpComputeMachineType(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeMachineType{runtime.NewResource("gcp.compute.machineType")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "guestCpus":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"guestCpus\" argument has the wrong type (expected type \"int64\")")
			}
		case "isSharedCpu":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"isSharedCpu\" argument has the wrong type (expected type \"bool\")")
			}
		case "maximumPersistentDisks":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"maximumPersistentDisks\" argument has the wrong type (expected type \"int64\")")
			}
		case "maximumPersistentDisksSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"maximumPersistentDisksSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryMb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"memoryMb\" argument has the wrong type (expected type \"int64\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "zone":
			if _, ok := val.(GcpComputeZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"zone\" argument has the wrong type (expected type \"GcpComputeZone\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.machineType\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.machineType with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeMachineType) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestCpus"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"guestCpus\". This field is required.")
	}
	if _, ok := s.Cache.Load("isSharedCpu"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"isSharedCpu\". This field is required.")
	}
	if _, ok := s.Cache.Load("maximumPersistentDisks"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"maximumPersistentDisks\". This field is required.")
	}
	if _, ok := s.Cache.Load("maximumPersistentDisksSizeGb"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"maximumPersistentDisksSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryMb"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"memoryMb\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.compute.machineType\" resource without a \"zone\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeMachineType) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.machineType].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "guestCpus":
		return nil
	case "isSharedCpu":
		return nil
	case "maximumPersistentDisks":
		return nil
	case "maximumPersistentDisksSizeGb":
		return nil
	case "memoryMb":
		return nil
	case "created":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.machineType\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeMachineType) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.machineType].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "guestCpus":
		return s.GuestCpus()
	case "isSharedCpu":
		return s.IsSharedCpu()
	case "maximumPersistentDisks":
		return s.MaximumPersistentDisks()
	case "maximumPersistentDisksSizeGb":
		return s.MaximumPersistentDisksSizeGb()
	case "memoryMb":
		return s.MemoryMb()
	case "created":
		return s.Created()
	case "zone":
		return s.Zone()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.machineType\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeMachineType) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpComputeMachineType) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeMachineType) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeMachineType) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GuestCpus accessor autogenerated
func (s *mqlGcpComputeMachineType) GuestCpus() (int64, error) {
	res, ok := s.Cache.Load("guestCpus")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"guestCpus\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"guestCpus\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsSharedCpu accessor autogenerated
func (s *mqlGcpComputeMachineType) IsSharedCpu() (bool, error) {
	res, ok := s.Cache.Load("isSharedCpu")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"isSharedCpu\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"isSharedCpu\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// MaximumPersistentDisks accessor autogenerated
func (s *mqlGcpComputeMachineType) MaximumPersistentDisks() (int64, error) {
	res, ok := s.Cache.Load("maximumPersistentDisks")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"maximumPersistentDisks\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"maximumPersistentDisks\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaximumPersistentDisksSizeGb accessor autogenerated
func (s *mqlGcpComputeMachineType) MaximumPersistentDisksSizeGb() (int64, error) {
	res, ok := s.Cache.Load("maximumPersistentDisksSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"maximumPersistentDisksSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"maximumPersistentDisksSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryMb accessor autogenerated
func (s *mqlGcpComputeMachineType) MemoryMb() (int64, error) {
	res, ok := s.Cache.Load("memoryMb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"memoryMb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"memoryMb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeMachineType) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpComputeMachineType) Zone() (GcpComputeZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.machineType\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.machineType\" failed to cast field \"zone\" to the right type (GcpComputeZone): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeMachineType) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.machineType].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "guestCpus":
		return nil
	case "isSharedCpu":
		return nil
	case "maximumPersistentDisks":
		return nil
	case "maximumPersistentDisksSizeGb":
		return nil
	case "memoryMb":
		return nil
	case "created":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.machineType\" resource")
	}
}

// GcpComputeInstance resource interface
type GcpComputeInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	CanIpForward() (bool, error)
	CpuPlatform() (string, error)
	Created() (*time.Time, error)
	DeletionProtection() (bool, error)
	EnableDisplay() (bool, error)
	GuestAccelerators() ([]interface{}, error)
	Fingerprint() (string, error)
	Hostname() (string, error)
	KeyRevocationActionType() (string, error)
	Labels() (map[string]interface{}, error)
	LastStartTimestamp() (*time.Time, error)
	LastStopTimestamp() (*time.Time, error)
	LastSuspendedTimestamp() (*time.Time, error)
	Metadata() (map[string]interface{}, error)
	MinCpuPlatform() (string, error)
	NetworkInterfaces() ([]interface{}, error)
	PrivateIpv6GoogleAccess() (string, error)
	ReservationAffinity() (interface{}, error)
	ResourcePolicies() ([]interface{}, error)
	PhysicalHostResourceStatus() (string, error)
	Scheduling() (interface{}, error)
	EnableIntegrityMonitoring() (bool, error)
	EnableSecureBoot() (bool, error)
	EnableVtpm() (bool, error)
	StartRestricted() (bool, error)
	Status() (string, error)
	StatusMessage() (string, error)
	SourceMachineImage() (string, error)
	Tags() ([]interface{}, error)
	TotalEgressBandwidthTier() (string, error)
	ServiceAccounts() ([]interface{}, error)
	Disks() ([]interface{}, error)
	MachineType() (GcpComputeMachineType, error)
	Zone() (GcpComputeZone, error)
}

// mqlGcpComputeInstance for the gcp.compute.instance resource
type mqlGcpComputeInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.instance resource
func newGcpComputeInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeInstance{runtime.NewResource("gcp.compute.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "canIpForward":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"canIpForward\" argument has the wrong type (expected type \"bool\")")
			}
		case "cpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"cpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "deletionProtection":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"deletionProtection\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableDisplay":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"enableDisplay\" argument has the wrong type (expected type \"bool\")")
			}
		case "guestAccelerators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"guestAccelerators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "keyRevocationActionType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"keyRevocationActionType\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "lastStartTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"lastStartTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastStopTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"lastStopTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastSuspendedTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"lastSuspendedTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "minCpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"minCpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "networkInterfaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"networkInterfaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "privateIpv6GoogleAccess":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"privateIpv6GoogleAccess\" argument has the wrong type (expected type \"string\")")
			}
		case "reservationAffinity":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"reservationAffinity\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "resourcePolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"resourcePolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "physicalHostResourceStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"physicalHostResourceStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "scheduling":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"scheduling\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "enableIntegrityMonitoring":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"enableIntegrityMonitoring\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableSecureBoot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"enableSecureBoot\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableVtpm":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"enableVtpm\" argument has the wrong type (expected type \"bool\")")
			}
		case "startRestricted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"startRestricted\" argument has the wrong type (expected type \"bool\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusMessage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"statusMessage\" argument has the wrong type (expected type \"string\")")
			}
		case "sourceMachineImage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"sourceMachineImage\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "totalEgressBandwidthTier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"totalEgressBandwidthTier\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"serviceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "machineType":
			if _, ok := val.(GcpComputeMachineType); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"machineType\" argument has the wrong type (expected type \"GcpComputeMachineType\")")
			}
		case "zone":
			if _, ok := val.(GcpComputeZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"zone\" argument has the wrong type (expected type \"GcpComputeZone\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("canIpForward"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"canIpForward\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"cpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtection"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"deletionProtection\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableDisplay"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"enableDisplay\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestAccelerators"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"guestAccelerators\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostname"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"hostname\". This field is required.")
	}
	if _, ok := s.Cache.Load("keyRevocationActionType"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"keyRevocationActionType\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStartTimestamp"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"lastStartTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastStopTimestamp"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"lastStopTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastSuspendedTimestamp"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"lastSuspendedTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("minCpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"minCpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkInterfaces"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"networkInterfaces\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpv6GoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"privateIpv6GoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("reservationAffinity"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"reservationAffinity\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcePolicies"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"resourcePolicies\". This field is required.")
	}
	if _, ok := s.Cache.Load("physicalHostResourceStatus"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"physicalHostResourceStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("scheduling"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"scheduling\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableIntegrityMonitoring"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"enableIntegrityMonitoring\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableSecureBoot"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"enableSecureBoot\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableVtpm"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"enableVtpm\". This field is required.")
	}
	if _, ok := s.Cache.Load("startRestricted"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"startRestricted\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusMessage"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"statusMessage\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceMachineImage"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"sourceMachineImage\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("totalEgressBandwidthTier"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"totalEgressBandwidthTier\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccounts"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"serviceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("disks"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"disks\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"zone\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "canIpForward":
		return nil
	case "cpuPlatform":
		return nil
	case "created":
		return nil
	case "deletionProtection":
		return nil
	case "enableDisplay":
		return nil
	case "guestAccelerators":
		return nil
	case "fingerprint":
		return nil
	case "hostname":
		return nil
	case "keyRevocationActionType":
		return nil
	case "labels":
		return nil
	case "lastStartTimestamp":
		return nil
	case "lastStopTimestamp":
		return nil
	case "lastSuspendedTimestamp":
		return nil
	case "metadata":
		return nil
	case "minCpuPlatform":
		return nil
	case "networkInterfaces":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "reservationAffinity":
		return nil
	case "resourcePolicies":
		return nil
	case "physicalHostResourceStatus":
		return nil
	case "scheduling":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableVtpm":
		return nil
	case "startRestricted":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "sourceMachineImage":
		return nil
	case "tags":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	case "serviceAccounts":
		return nil
	case "disks":
		return nil
	case "machineType":
		return nil
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "canIpForward":
		return s.CanIpForward()
	case "cpuPlatform":
		return s.CpuPlatform()
	case "created":
		return s.Created()
	case "deletionProtection":
		return s.DeletionProtection()
	case "enableDisplay":
		return s.EnableDisplay()
	case "guestAccelerators":
		return s.GuestAccelerators()
	case "fingerprint":
		return s.Fingerprint()
	case "hostname":
		return s.Hostname()
	case "keyRevocationActionType":
		return s.KeyRevocationActionType()
	case "labels":
		return s.Labels()
	case "lastStartTimestamp":
		return s.LastStartTimestamp()
	case "lastStopTimestamp":
		return s.LastStopTimestamp()
	case "lastSuspendedTimestamp":
		return s.LastSuspendedTimestamp()
	case "metadata":
		return s.Metadata()
	case "minCpuPlatform":
		return s.MinCpuPlatform()
	case "networkInterfaces":
		return s.NetworkInterfaces()
	case "privateIpv6GoogleAccess":
		return s.PrivateIpv6GoogleAccess()
	case "reservationAffinity":
		return s.ReservationAffinity()
	case "resourcePolicies":
		return s.ResourcePolicies()
	case "physicalHostResourceStatus":
		return s.PhysicalHostResourceStatus()
	case "scheduling":
		return s.Scheduling()
	case "enableIntegrityMonitoring":
		return s.EnableIntegrityMonitoring()
	case "enableSecureBoot":
		return s.EnableSecureBoot()
	case "enableVtpm":
		return s.EnableVtpm()
	case "startRestricted":
		return s.StartRestricted()
	case "status":
		return s.Status()
	case "statusMessage":
		return s.StatusMessage()
	case "sourceMachineImage":
		return s.SourceMachineImage()
	case "tags":
		return s.Tags()
	case "totalEgressBandwidthTier":
		return s.TotalEgressBandwidthTier()
	case "serviceAccounts":
		return s.ServiceAccounts()
	case "disks":
		return s.Disks()
	case "machineType":
		return s.MachineType()
	case "zone":
		return s.Zone()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpComputeInstance) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeInstance) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CanIpForward accessor autogenerated
func (s *mqlGcpComputeInstance) CanIpForward() (bool, error) {
	res, ok := s.Cache.Load("canIpForward")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"canIpForward\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"canIpForward\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// CpuPlatform accessor autogenerated
func (s *mqlGcpComputeInstance) CpuPlatform() (string, error) {
	res, ok := s.Cache.Load("cpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"cpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"cpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeInstance) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DeletionProtection accessor autogenerated
func (s *mqlGcpComputeInstance) DeletionProtection() (bool, error) {
	res, ok := s.Cache.Load("deletionProtection")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"deletionProtection\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"deletionProtection\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableDisplay accessor autogenerated
func (s *mqlGcpComputeInstance) EnableDisplay() (bool, error) {
	res, ok := s.Cache.Load("enableDisplay")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"enableDisplay\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"enableDisplay\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GuestAccelerators accessor autogenerated
func (s *mqlGcpComputeInstance) GuestAccelerators() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestAccelerators")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"guestAccelerators\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"guestAccelerators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlGcpComputeInstance) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlGcpComputeInstance) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"hostname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// KeyRevocationActionType accessor autogenerated
func (s *mqlGcpComputeInstance) KeyRevocationActionType() (string, error) {
	res, ok := s.Cache.Load("keyRevocationActionType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"keyRevocationActionType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"keyRevocationActionType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpComputeInstance) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LastStartTimestamp accessor autogenerated
func (s *mqlGcpComputeInstance) LastStartTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastStartTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"lastStartTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"lastStartTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastStopTimestamp accessor autogenerated
func (s *mqlGcpComputeInstance) LastStopTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastStopTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"lastStopTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"lastStopTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastSuspendedTimestamp accessor autogenerated
func (s *mqlGcpComputeInstance) LastSuspendedTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastSuspendedTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"lastSuspendedTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"lastSuspendedTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcpComputeInstance) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// MinCpuPlatform accessor autogenerated
func (s *mqlGcpComputeInstance) MinCpuPlatform() (string, error) {
	res, ok := s.Cache.Load("minCpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"minCpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"minCpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NetworkInterfaces accessor autogenerated
func (s *mqlGcpComputeInstance) NetworkInterfaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("networkInterfaces")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"networkInterfaces\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"networkInterfaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PrivateIpv6GoogleAccess accessor autogenerated
func (s *mqlGcpComputeInstance) PrivateIpv6GoogleAccess() (string, error) {
	res, ok := s.Cache.Load("privateIpv6GoogleAccess")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"privateIpv6GoogleAccess\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"privateIpv6GoogleAccess\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ReservationAffinity accessor autogenerated
func (s *mqlGcpComputeInstance) ReservationAffinity() (interface{}, error) {
	res, ok := s.Cache.Load("reservationAffinity")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"reservationAffinity\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"reservationAffinity\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ResourcePolicies accessor autogenerated
func (s *mqlGcpComputeInstance) ResourcePolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("resourcePolicies")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"resourcePolicies\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"resourcePolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// PhysicalHostResourceStatus accessor autogenerated
func (s *mqlGcpComputeInstance) PhysicalHostResourceStatus() (string, error) {
	res, ok := s.Cache.Load("physicalHostResourceStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"physicalHostResourceStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"physicalHostResourceStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scheduling accessor autogenerated
func (s *mqlGcpComputeInstance) Scheduling() (interface{}, error) {
	res, ok := s.Cache.Load("scheduling")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"scheduling\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"scheduling\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnableIntegrityMonitoring accessor autogenerated
func (s *mqlGcpComputeInstance) EnableIntegrityMonitoring() (bool, error) {
	res, ok := s.Cache.Load("enableIntegrityMonitoring")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"enableIntegrityMonitoring\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"enableIntegrityMonitoring\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableSecureBoot accessor autogenerated
func (s *mqlGcpComputeInstance) EnableSecureBoot() (bool, error) {
	res, ok := s.Cache.Load("enableSecureBoot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"enableSecureBoot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"enableSecureBoot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableVtpm accessor autogenerated
func (s *mqlGcpComputeInstance) EnableVtpm() (bool, error) {
	res, ok := s.Cache.Load("enableVtpm")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"enableVtpm\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"enableVtpm\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StartRestricted accessor autogenerated
func (s *mqlGcpComputeInstance) StartRestricted() (bool, error) {
	res, ok := s.Cache.Load("startRestricted")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"startRestricted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"startRestricted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeInstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusMessage accessor autogenerated
func (s *mqlGcpComputeInstance) StatusMessage() (string, error) {
	res, ok := s.Cache.Load("statusMessage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"statusMessage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"statusMessage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SourceMachineImage accessor autogenerated
func (s *mqlGcpComputeInstance) SourceMachineImage() (string, error) {
	res, ok := s.Cache.Load("sourceMachineImage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"sourceMachineImage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"sourceMachineImage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpComputeInstance) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TotalEgressBandwidthTier accessor autogenerated
func (s *mqlGcpComputeInstance) TotalEgressBandwidthTier() (string, error) {
	res, ok := s.Cache.Load("totalEgressBandwidthTier")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"totalEgressBandwidthTier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"totalEgressBandwidthTier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccounts accessor autogenerated
func (s *mqlGcpComputeInstance) ServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"serviceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"serviceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlGcpComputeInstance) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"disks\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// MachineType accessor autogenerated
func (s *mqlGcpComputeInstance) MachineType() (GcpComputeMachineType, error) {
	res, ok := s.Cache.Load("machineType")
	if !ok || !res.Valid {
		if err := s.ComputeMachineType(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("machineType")
		if !ok {
			return nil, errors.New("\"gcp.compute.instance\" calculated \"machineType\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "machineType")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeMachineType)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"machineType\" to the right type (GcpComputeMachineType): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpComputeInstance) Zone() (GcpComputeZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"zone\" to the right type (GcpComputeZone): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "canIpForward":
		return nil
	case "cpuPlatform":
		return nil
	case "created":
		return nil
	case "deletionProtection":
		return nil
	case "enableDisplay":
		return nil
	case "guestAccelerators":
		return nil
	case "fingerprint":
		return nil
	case "hostname":
		return nil
	case "keyRevocationActionType":
		return nil
	case "labels":
		return nil
	case "lastStartTimestamp":
		return nil
	case "lastStopTimestamp":
		return nil
	case "lastSuspendedTimestamp":
		return nil
	case "metadata":
		return nil
	case "minCpuPlatform":
		return nil
	case "networkInterfaces":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "reservationAffinity":
		return nil
	case "resourcePolicies":
		return nil
	case "physicalHostResourceStatus":
		return nil
	case "scheduling":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableVtpm":
		return nil
	case "startRestricted":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "sourceMachineImage":
		return nil
	case "tags":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	case "serviceAccounts":
		return nil
	case "disks":
		return nil
	case "machineType":
		return s.ComputeMachineType()
	case "zone":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// ComputeMachineType computer autogenerated
func (s *mqlGcpComputeInstance) ComputeMachineType() error {
	var err error
	if _, ok := s.Cache.Load("machineType"); ok {
		return nil
	}
	vres, err := s.GetMachineType()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("machineType", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpComputeServiceaccount resource interface
type GcpComputeServiceaccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Email() (string, error)
	Scopes() ([]interface{}, error)
}

// mqlGcpComputeServiceaccount for the gcp.compute.serviceaccount resource
type mqlGcpComputeServiceaccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeServiceaccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.serviceaccount resource
func newGcpComputeServiceaccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeServiceaccount{runtime.NewResource("gcp.compute.serviceaccount")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.serviceaccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeServiceaccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.compute.serviceaccount\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"gcp.compute.serviceaccount\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Register")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Field")
	switch name {
	case "email":
		return s.Email()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// Email accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.serviceaccount\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.serviceaccount\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.serviceaccount\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.serviceaccount\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Compute")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// GcpComputeDisk resource interface
type GcpComputeDisk interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Architecture() (string, error)
	Description() (string, error)
	GuestOsFeatures() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	LastAttachTimestamp() (*time.Time, error)
	LastDetachTimestamp() (*time.Time, error)
	Licenses() ([]interface{}, error)
	LocationHint() (string, error)
	PhysicalBlockSizeBytes() (int64, error)
	ProvisionedIops() (int64, error)
	SizeGb() (int64, error)
	Status() (string, error)
	Zone() (GcpComputeZone, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeDisk for the gcp.compute.disk resource
type mqlGcpComputeDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.disk resource
func newGcpComputeDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeDisk{runtime.NewResource("gcp.compute.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "guestOsFeatures":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"guestOsFeatures\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "lastAttachTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"lastAttachTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "lastDetachTimestamp":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"lastDetachTimestamp\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "locationHint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"locationHint\" argument has the wrong type (expected type \"string\")")
			}
		case "physicalBlockSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"physicalBlockSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "provisionedIops":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"provisionedIops\" argument has the wrong type (expected type \"int64\")")
			}
		case "sizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"sizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "zone":
			if _, ok := val.(GcpComputeZone); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"zone\" argument has the wrong type (expected type \"GcpComputeZone\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestOsFeatures"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"guestOsFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastAttachTimestamp"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"lastAttachTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastDetachTimestamp"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"lastDetachTimestamp\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationHint"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"locationHint\". This field is required.")
	}
	if _, ok := s.Cache.Load("physicalBlockSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"physicalBlockSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("provisionedIops"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"provisionedIops\". This field is required.")
	}
	if _, ok := s.Cache.Load("sizeGb"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"sizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"zone\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.disk\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.disk].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "description":
		return nil
	case "guestOsFeatures":
		return nil
	case "labels":
		return nil
	case "lastAttachTimestamp":
		return nil
	case "lastDetachTimestamp":
		return nil
	case "licenses":
		return nil
	case "locationHint":
		return nil
	case "physicalBlockSizeBytes":
		return nil
	case "provisionedIops":
		return nil
	case "sizeGb":
		return nil
	case "status":
		return nil
	case "zone":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "architecture":
		return s.Architecture()
	case "description":
		return s.Description()
	case "guestOsFeatures":
		return s.GuestOsFeatures()
	case "labels":
		return s.Labels()
	case "lastAttachTimestamp":
		return s.LastAttachTimestamp()
	case "lastDetachTimestamp":
		return s.LastDetachTimestamp()
	case "licenses":
		return s.Licenses()
	case "locationHint":
		return s.LocationHint()
	case "physicalBlockSizeBytes":
		return s.PhysicalBlockSizeBytes()
	case "provisionedIops":
		return s.ProvisionedIops()
	case "sizeGb":
		return s.SizeGb()
	case "status":
		return s.Status()
	case "zone":
		return s.Zone()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpComputeDisk) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeDisk) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GuestOsFeatures accessor autogenerated
func (s *mqlGcpComputeDisk) GuestOsFeatures() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestOsFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"guestOsFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"guestOsFeatures\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpComputeDisk) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LastAttachTimestamp accessor autogenerated
func (s *mqlGcpComputeDisk) LastAttachTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastAttachTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"lastAttachTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"lastAttachTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// LastDetachTimestamp accessor autogenerated
func (s *mqlGcpComputeDisk) LastDetachTimestamp() (*time.Time, error) {
	res, ok := s.Cache.Load("lastDetachTimestamp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"lastDetachTimestamp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"lastDetachTimestamp\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpComputeDisk) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LocationHint accessor autogenerated
func (s *mqlGcpComputeDisk) LocationHint() (string, error) {
	res, ok := s.Cache.Load("locationHint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"locationHint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"locationHint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PhysicalBlockSizeBytes accessor autogenerated
func (s *mqlGcpComputeDisk) PhysicalBlockSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("physicalBlockSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"physicalBlockSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"physicalBlockSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ProvisionedIops accessor autogenerated
func (s *mqlGcpComputeDisk) ProvisionedIops() (int64, error) {
	res, ok := s.Cache.Load("provisionedIops")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"provisionedIops\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"provisionedIops\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// SizeGb accessor autogenerated
func (s *mqlGcpComputeDisk) SizeGb() (int64, error) {
	res, ok := s.Cache.Load("sizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"sizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"sizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeDisk) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpComputeDisk) Zone() (GcpComputeZone, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeZone)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"zone\" to the right type (GcpComputeZone): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeDisk) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.disk\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.disk\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeDisk) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.disk].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "architecture":
		return nil
	case "description":
		return nil
	case "guestOsFeatures":
		return nil
	case "labels":
		return nil
	case "lastAttachTimestamp":
		return nil
	case "lastDetachTimestamp":
		return nil
	case "licenses":
		return nil
	case "locationHint":
		return nil
	case "physicalBlockSizeBytes":
		return nil
	case "provisionedIops":
		return nil
	case "sizeGb":
		return nil
	case "status":
		return nil
	case "zone":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.disk\" resource")
	}
}

// GcpComputeAttachedDisk resource interface
type GcpComputeAttachedDisk interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Architecture() (string, error)
	AutoDelete() (bool, error)
	Boot() (bool, error)
	DeviceName() (string, error)
	DiskSizeGb() (int64, error)
	ForceAttach() (bool, error)
	GuestOsFeatures() ([]interface{}, error)
	Index() (int64, error)
	Interface() (string, error)
	Licenses() ([]interface{}, error)
	Mode() (string, error)
	Source() (GcpComputeDisk, error)
	Type() (string, error)
}

// mqlGcpComputeAttachedDisk for the gcp.compute.attachedDisk resource
type mqlGcpComputeAttachedDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeAttachedDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.attachedDisk resource
func newGcpComputeAttachedDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeAttachedDisk{runtime.NewResource("gcp.compute.attachedDisk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "autoDelete":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"autoDelete\" argument has the wrong type (expected type \"bool\")")
			}
		case "boot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"boot\" argument has the wrong type (expected type \"bool\")")
			}
		case "deviceName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"deviceName\" argument has the wrong type (expected type \"string\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "forceAttach":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"forceAttach\" argument has the wrong type (expected type \"bool\")")
			}
		case "guestOsFeatures":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"guestOsFeatures\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "index":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"index\" argument has the wrong type (expected type \"int64\")")
			}
		case "interface":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"interface\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "mode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"mode\" argument has the wrong type (expected type \"string\")")
			}
		case "source":
			if _, ok := val.(GcpComputeDisk); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"source\" argument has the wrong type (expected type \"GcpComputeDisk\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.attachedDisk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.attachedDisk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeAttachedDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoDelete"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"autoDelete\". This field is required.")
	}
	if _, ok := s.Cache.Load("boot"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"boot\". This field is required.")
	}
	if _, ok := s.Cache.Load("deviceName"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"deviceName\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("forceAttach"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"forceAttach\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestOsFeatures"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"guestOsFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("index"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"index\". This field is required.")
	}
	if _, ok := s.Cache.Load("interface"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"interface\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("mode"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"mode\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.compute.attachedDisk\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.attachedDisk].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "architecture":
		return nil
	case "autoDelete":
		return nil
	case "boot":
		return nil
	case "deviceName":
		return nil
	case "diskSizeGb":
		return nil
	case "forceAttach":
		return nil
	case "guestOsFeatures":
		return nil
	case "index":
		return nil
	case "interface":
		return nil
	case "licenses":
		return nil
	case "mode":
		return nil
	case "source":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.attachedDisk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.attachedDisk].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "architecture":
		return s.Architecture()
	case "autoDelete":
		return s.AutoDelete()
	case "boot":
		return s.Boot()
	case "deviceName":
		return s.DeviceName()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "forceAttach":
		return s.ForceAttach()
	case "guestOsFeatures":
		return s.GuestOsFeatures()
	case "index":
		return s.Index()
	case "interface":
		return s.Interface()
	case "licenses":
		return s.Licenses()
	case "mode":
		return s.Mode()
	case "source":
		return s.Source()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.attachedDisk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoDelete accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) AutoDelete() (bool, error) {
	res, ok := s.Cache.Load("autoDelete")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"autoDelete\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"autoDelete\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Boot accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Boot() (bool, error) {
	res, ok := s.Cache.Load("boot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"boot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"boot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DeviceName accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) DeviceName() (string, error) {
	res, ok := s.Cache.Load("deviceName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"deviceName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"deviceName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// ForceAttach accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) ForceAttach() (bool, error) {
	res, ok := s.Cache.Load("forceAttach")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"forceAttach\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"forceAttach\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GuestOsFeatures accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) GuestOsFeatures() ([]interface{}, error) {
	res, ok := s.Cache.Load("guestOsFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"guestOsFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"guestOsFeatures\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Index accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Index() (int64, error) {
	res, ok := s.Cache.Load("index")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"index\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"index\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Interface accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Interface() (string, error) {
	res, ok := s.Cache.Load("interface")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"interface\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"interface\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Mode accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Mode() (string, error) {
	res, ok := s.Cache.Load("mode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"mode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"mode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Source accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Source() (GcpComputeDisk, error) {
	res, ok := s.Cache.Load("source")
	if !ok || !res.Valid {
		if err := s.ComputeSource(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("source")
		if !ok {
			return nil, errors.New("\"gcp.compute.attachedDisk\" calculated \"source\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "source")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeDisk)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"source\" to the right type (GcpComputeDisk): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.attachedDisk\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.attachedDisk\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeAttachedDisk) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.attachedDisk].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "architecture":
		return nil
	case "autoDelete":
		return nil
	case "boot":
		return nil
	case "deviceName":
		return nil
	case "diskSizeGb":
		return nil
	case "forceAttach":
		return nil
	case "guestOsFeatures":
		return nil
	case "index":
		return nil
	case "interface":
		return nil
	case "licenses":
		return nil
	case "mode":
		return nil
	case "source":
		return s.ComputeSource()
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.attachedDisk\" resource")
	}
}

// ComputeSource computer autogenerated
func (s *mqlGcpComputeAttachedDisk) ComputeSource() error {
	var err error
	if _, ok := s.Cache.Load("source"); ok {
		return nil
	}
	vres, err := s.GetSource()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("source", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpComputeSnapshot resource interface
type GcpComputeSnapshot interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Architecture() (string, error)
	AutoCreated() (bool, error)
	ChainName() (string, error)
	CreationSizeBytes() (int64, error)
	DiskSizeGb() (int64, error)
	DownloadBytes() (int64, error)
	StorageBytes() (int64, error)
	StorageBytesStatus() (string, error)
	SnapshotType() (string, error)
	Licenses() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Status() (string, error)
}

// mqlGcpComputeSnapshot for the gcp.compute.snapshot resource
type mqlGcpComputeSnapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeSnapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.snapshot resource
func newGcpComputeSnapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeSnapshot{runtime.NewResource("gcp.compute.snapshot")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "autoCreated":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"autoCreated\" argument has the wrong type (expected type \"bool\")")
			}
		case "chainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"chainName\" argument has the wrong type (expected type \"string\")")
			}
		case "creationSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"creationSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "downloadBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"downloadBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"storageBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageBytesStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"storageBytesStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "snapshotType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"snapshotType\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeSnapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoCreated"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"autoCreated\". This field is required.")
	}
	if _, ok := s.Cache.Load("chainName"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"chainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"creationSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("downloadBytes"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"downloadBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageBytes"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"storageBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageBytesStatus"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"storageBytesStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("snapshotType"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"snapshotType\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.snapshot\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeSnapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.snapshot].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "autoCreated":
		return nil
	case "chainName":
		return nil
	case "creationSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "downloadBytes":
		return nil
	case "storageBytes":
		return nil
	case "storageBytesStatus":
		return nil
	case "snapshotType":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeSnapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.snapshot].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "architecture":
		return s.Architecture()
	case "autoCreated":
		return s.AutoCreated()
	case "chainName":
		return s.ChainName()
	case "creationSizeBytes":
		return s.CreationSizeBytes()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "downloadBytes":
		return s.DownloadBytes()
	case "storageBytes":
		return s.StorageBytes()
	case "storageBytesStatus":
		return s.StorageBytesStatus()
	case "snapshotType":
		return s.SnapshotType()
	case "licenses":
		return s.Licenses()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.snapshot\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeSnapshot) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeSnapshot) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeSnapshot) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpComputeSnapshot) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoCreated accessor autogenerated
func (s *mqlGcpComputeSnapshot) AutoCreated() (bool, error) {
	res, ok := s.Cache.Load("autoCreated")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"autoCreated\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"autoCreated\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ChainName accessor autogenerated
func (s *mqlGcpComputeSnapshot) ChainName() (string, error) {
	res, ok := s.Cache.Load("chainName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"chainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"chainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreationSizeBytes accessor autogenerated
func (s *mqlGcpComputeSnapshot) CreationSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("creationSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"creationSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"creationSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpComputeSnapshot) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DownloadBytes accessor autogenerated
func (s *mqlGcpComputeSnapshot) DownloadBytes() (int64, error) {
	res, ok := s.Cache.Load("downloadBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"downloadBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"downloadBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageBytes accessor autogenerated
func (s *mqlGcpComputeSnapshot) StorageBytes() (int64, error) {
	res, ok := s.Cache.Load("storageBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"storageBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"storageBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageBytesStatus accessor autogenerated
func (s *mqlGcpComputeSnapshot) StorageBytesStatus() (string, error) {
	res, ok := s.Cache.Load("storageBytesStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"storageBytesStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"storageBytesStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SnapshotType accessor autogenerated
func (s *mqlGcpComputeSnapshot) SnapshotType() (string, error) {
	res, ok := s.Cache.Load("snapshotType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"snapshotType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"snapshotType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpComputeSnapshot) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpComputeSnapshot) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeSnapshot) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeSnapshot) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.snapshot\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.snapshot\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeSnapshot) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.snapshot].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "autoCreated":
		return nil
	case "chainName":
		return nil
	case "creationSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "downloadBytes":
		return nil
	case "storageBytes":
		return nil
	case "storageBytesStatus":
		return nil
	case "snapshotType":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.snapshot\" resource")
	}
}

// GcpComputeImage resource interface
type GcpComputeImage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Architecture() (string, error)
	ArchiveSizeBytes() (int64, error)
	DiskSizeGb() (int64, error)
	Family() (string, error)
	Licenses() ([]interface{}, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Status() (string, error)
}

// mqlGcpComputeImage for the gcp.compute.image resource
type mqlGcpComputeImage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeImage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.image resource
func newGcpComputeImage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeImage{runtime.NewResource("gcp.compute.image")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "architecture":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"architecture\" argument has the wrong type (expected type \"string\")")
			}
		case "archiveSizeBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"archiveSizeBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "family":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"family\" argument has the wrong type (expected type \"string\")")
			}
		case "licenses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"licenses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.image\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.image with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeImage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("architecture"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"architecture\". This field is required.")
	}
	if _, ok := s.Cache.Load("archiveSizeBytes"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"archiveSizeBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("family"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"family\". This field is required.")
	}
	if _, ok := s.Cache.Load("licenses"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"licenses\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.image\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeImage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.image].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "archiveSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "family":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.image\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeImage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.image].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "architecture":
		return s.Architecture()
	case "archiveSizeBytes":
		return s.ArchiveSizeBytes()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "family":
		return s.Family()
	case "licenses":
		return s.Licenses()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.image\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeImage) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeImage) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeImage) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Architecture accessor autogenerated
func (s *mqlGcpComputeImage) Architecture() (string, error) {
	res, ok := s.Cache.Load("architecture")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"architecture\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"architecture\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ArchiveSizeBytes accessor autogenerated
func (s *mqlGcpComputeImage) ArchiveSizeBytes() (int64, error) {
	res, ok := s.Cache.Load("archiveSizeBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.image\" failed: no value provided for static field \"archiveSizeBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.image\" failed to cast field \"archiveSizeBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpComputeImage) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.image\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.image\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Family accessor autogenerated
func (s *mqlGcpComputeImage) Family() (string, error) {
	res, ok := s.Cache.Load("family")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"family\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"family\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Licenses accessor autogenerated
func (s *mqlGcpComputeImage) Licenses() ([]interface{}, error) {
	res, ok := s.Cache.Load("licenses")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.image\" failed: no value provided for static field \"licenses\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.image\" failed to cast field \"licenses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpComputeImage) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.image\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.image\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeImage) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.image\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.image\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeImage) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.image\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.image\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeImage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.image].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "architecture":
		return nil
	case "archiveSizeBytes":
		return nil
	case "diskSizeGb":
		return nil
	case "family":
		return nil
	case "licenses":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.image\" resource")
	}
}

// GcpComputeFirewall resource interface
type GcpComputeFirewall interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Priority() (int64, error)
	Direction() (string, error)
	Disabled() (bool, error)
	SourceRanges() ([]interface{}, error)
	SourceServiceAccounts() ([]interface{}, error)
	SourceTags() ([]interface{}, error)
	DestinationRanges() ([]interface{}, error)
	TargetServiceAccounts() ([]interface{}, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeFirewall for the gcp.compute.firewall resource
type mqlGcpComputeFirewall struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeFirewall) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.firewall resource
func newGcpComputeFirewall(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeFirewall{runtime.NewResource("gcp.compute.firewall")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"priority\" argument has the wrong type (expected type \"int64\")")
			}
		case "direction":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"direction\" argument has the wrong type (expected type \"string\")")
			}
		case "disabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"disabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "sourceRanges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"sourceRanges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sourceServiceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"sourceServiceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sourceTags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"sourceTags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "destinationRanges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"destinationRanges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "targetServiceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"targetServiceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.firewall\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.firewall with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeFirewall) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("direction"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"direction\". This field is required.")
	}
	if _, ok := s.Cache.Load("disabled"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"disabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceRanges"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"sourceRanges\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceServiceAccounts"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"sourceServiceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("sourceTags"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"sourceTags\". This field is required.")
	}
	if _, ok := s.Cache.Load("destinationRanges"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"destinationRanges\". This field is required.")
	}
	if _, ok := s.Cache.Load("targetServiceAccounts"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"targetServiceAccounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.firewall\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeFirewall) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.firewall].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "direction":
		return nil
	case "disabled":
		return nil
	case "sourceRanges":
		return nil
	case "sourceServiceAccounts":
		return nil
	case "sourceTags":
		return nil
	case "destinationRanges":
		return nil
	case "targetServiceAccounts":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.firewall\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeFirewall) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.firewall].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "priority":
		return s.Priority()
	case "direction":
		return s.Direction()
	case "disabled":
		return s.Disabled()
	case "sourceRanges":
		return s.SourceRanges()
	case "sourceServiceAccounts":
		return s.SourceServiceAccounts()
	case "sourceTags":
		return s.SourceTags()
	case "destinationRanges":
		return s.DestinationRanges()
	case "targetServiceAccounts":
		return s.TargetServiceAccounts()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.firewall\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeFirewall) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeFirewall) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeFirewall) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlGcpComputeFirewall) Priority() (int64, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"priority\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Direction accessor autogenerated
func (s *mqlGcpComputeFirewall) Direction() (string, error) {
	res, ok := s.Cache.Load("direction")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"direction\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"direction\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Disabled accessor autogenerated
func (s *mqlGcpComputeFirewall) Disabled() (bool, error) {
	res, ok := s.Cache.Load("disabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"disabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"disabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// SourceRanges accessor autogenerated
func (s *mqlGcpComputeFirewall) SourceRanges() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceRanges")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"sourceRanges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"sourceRanges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SourceServiceAccounts accessor autogenerated
func (s *mqlGcpComputeFirewall) SourceServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceServiceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"sourceServiceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"sourceServiceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SourceTags accessor autogenerated
func (s *mqlGcpComputeFirewall) SourceTags() ([]interface{}, error) {
	res, ok := s.Cache.Load("sourceTags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"sourceTags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"sourceTags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DestinationRanges accessor autogenerated
func (s *mqlGcpComputeFirewall) DestinationRanges() ([]interface{}, error) {
	res, ok := s.Cache.Load("destinationRanges")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"destinationRanges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"destinationRanges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// TargetServiceAccounts accessor autogenerated
func (s *mqlGcpComputeFirewall) TargetServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("targetServiceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"targetServiceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"targetServiceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeFirewall) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.firewall\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.firewall\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeFirewall) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.firewall].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "priority":
		return nil
	case "direction":
		return nil
	case "disabled":
		return nil
	case "sourceRanges":
		return nil
	case "sourceServiceAccounts":
		return nil
	case "sourceTags":
		return nil
	case "destinationRanges":
		return nil
	case "targetServiceAccounts":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.firewall\" resource")
	}
}

// GcpComputeNetwork resource interface
type GcpComputeNetwork interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	AutoCreateSubnetworks() (bool, error)
	EnableUlaInternalIpv6() (bool, error)
	GatewayIPv4() (string, error)
	Mtu() (int64, error)
	NetworkFirewallPolicyEnforcementOrder() (string, error)
	Created() (*time.Time, error)
	Peerings() ([]interface{}, error)
	RoutingMode() (string, error)
}

// mqlGcpComputeNetwork for the gcp.compute.network resource
type mqlGcpComputeNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.network resource
func newGcpComputeNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeNetwork{runtime.NewResource("gcp.compute.network")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "autoCreateSubnetworks":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"autoCreateSubnetworks\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableUlaInternalIpv6":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"enableUlaInternalIpv6\" argument has the wrong type (expected type \"bool\")")
			}
		case "gatewayIPv4":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"gatewayIPv4\" argument has the wrong type (expected type \"string\")")
			}
		case "mtu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"mtu\" argument has the wrong type (expected type \"int64\")")
			}
		case "networkFirewallPolicyEnforcementOrder":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"networkFirewallPolicyEnforcementOrder\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "peerings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"peerings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routingMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"routingMode\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.network\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.network with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeNetwork) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("autoCreateSubnetworks"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"autoCreateSubnetworks\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableUlaInternalIpv6"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"enableUlaInternalIpv6\". This field is required.")
	}
	if _, ok := s.Cache.Load("gatewayIPv4"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"gatewayIPv4\". This field is required.")
	}
	if _, ok := s.Cache.Load("mtu"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"mtu\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkFirewallPolicyEnforcementOrder"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"networkFirewallPolicyEnforcementOrder\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("peerings"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"peerings\". This field is required.")
	}
	if _, ok := s.Cache.Load("routingMode"); !ok {
		return errors.New("Initialized \"gcp.compute.network\" resource without a \"routingMode\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.network].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "autoCreateSubnetworks":
		return nil
	case "enableUlaInternalIpv6":
		return nil
	case "gatewayIPv4":
		return nil
	case "mtu":
		return nil
	case "networkFirewallPolicyEnforcementOrder":
		return nil
	case "created":
		return nil
	case "peerings":
		return nil
	case "routingMode":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.network\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.network].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "autoCreateSubnetworks":
		return s.AutoCreateSubnetworks()
	case "enableUlaInternalIpv6":
		return s.EnableUlaInternalIpv6()
	case "gatewayIPv4":
		return s.GatewayIPv4()
	case "mtu":
		return s.Mtu()
	case "networkFirewallPolicyEnforcementOrder":
		return s.NetworkFirewallPolicyEnforcementOrder()
	case "created":
		return s.Created()
	case "peerings":
		return s.Peerings()
	case "routingMode":
		return s.RoutingMode()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.network\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeNetwork) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeNetwork) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeNetwork) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AutoCreateSubnetworks accessor autogenerated
func (s *mqlGcpComputeNetwork) AutoCreateSubnetworks() (bool, error) {
	res, ok := s.Cache.Load("autoCreateSubnetworks")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.network\" failed: no value provided for static field \"autoCreateSubnetworks\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.network\" failed to cast field \"autoCreateSubnetworks\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableUlaInternalIpv6 accessor autogenerated
func (s *mqlGcpComputeNetwork) EnableUlaInternalIpv6() (bool, error) {
	res, ok := s.Cache.Load("enableUlaInternalIpv6")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.network\" failed: no value provided for static field \"enableUlaInternalIpv6\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.network\" failed to cast field \"enableUlaInternalIpv6\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GatewayIPv4 accessor autogenerated
func (s *mqlGcpComputeNetwork) GatewayIPv4() (string, error) {
	res, ok := s.Cache.Load("gatewayIPv4")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"gatewayIPv4\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"gatewayIPv4\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Mtu accessor autogenerated
func (s *mqlGcpComputeNetwork) Mtu() (int64, error) {
	res, ok := s.Cache.Load("mtu")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.compute.network\" failed: no value provided for static field \"mtu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.compute.network\" failed to cast field \"mtu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NetworkFirewallPolicyEnforcementOrder accessor autogenerated
func (s *mqlGcpComputeNetwork) NetworkFirewallPolicyEnforcementOrder() (string, error) {
	res, ok := s.Cache.Load("networkFirewallPolicyEnforcementOrder")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"networkFirewallPolicyEnforcementOrder\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"networkFirewallPolicyEnforcementOrder\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeNetwork) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.network\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.network\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Peerings accessor autogenerated
func (s *mqlGcpComputeNetwork) Peerings() ([]interface{}, error) {
	res, ok := s.Cache.Load("peerings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.network\" failed: no value provided for static field \"peerings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.network\" failed to cast field \"peerings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RoutingMode accessor autogenerated
func (s *mqlGcpComputeNetwork) RoutingMode() (string, error) {
	res, ok := s.Cache.Load("routingMode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.network\" failed: no value provided for static field \"routingMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.network\" failed to cast field \"routingMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeNetwork) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.network].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "autoCreateSubnetworks":
		return nil
	case "enableUlaInternalIpv6":
		return nil
	case "gatewayIPv4":
		return nil
	case "mtu":
		return nil
	case "networkFirewallPolicyEnforcementOrder":
		return nil
	case "created":
		return nil
	case "peerings":
		return nil
	case "routingMode":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.network\" resource")
	}
}

// GcpComputeSubnetwork resource interface
type GcpComputeSubnetwork interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	EnableFlowLogs() (bool, error)
	ExternalIpv6Prefix() (string, error)
	Fingerprint() (string, error)
	GatewayAddress() (string, error)
	InternalIpv6Prefix() (string, error)
	IpCidrRange() (string, error)
	Ipv6AccessType() (string, error)
	Ipv6CidrRange() (string, error)
	PrivateIpGoogleAccess() (bool, error)
	PrivateIpv6GoogleAccess() (string, error)
	Purpose() (string, error)
	Region() (GcpComputeRegion, error)
	Role() (string, error)
	StackType() (string, error)
	State() (string, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeSubnetwork for the gcp.compute.subnetwork resource
type mqlGcpComputeSubnetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeSubnetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.subnetwork resource
func newGcpComputeSubnetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeSubnetwork{runtime.NewResource("gcp.compute.subnetwork")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "enableFlowLogs":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"enableFlowLogs\" argument has the wrong type (expected type \"bool\")")
			}
		case "externalIpv6Prefix":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"externalIpv6Prefix\" argument has the wrong type (expected type \"string\")")
			}
		case "fingerprint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"fingerprint\" argument has the wrong type (expected type \"string\")")
			}
		case "gatewayAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"gatewayAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "internalIpv6Prefix":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"internalIpv6Prefix\" argument has the wrong type (expected type \"string\")")
			}
		case "ipCidrRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"ipCidrRange\" argument has the wrong type (expected type \"string\")")
			}
		case "ipv6AccessType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"ipv6AccessType\" argument has the wrong type (expected type \"string\")")
			}
		case "ipv6CidrRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"ipv6CidrRange\" argument has the wrong type (expected type \"string\")")
			}
		case "privateIpGoogleAccess":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"privateIpGoogleAccess\" argument has the wrong type (expected type \"bool\")")
			}
		case "privateIpv6GoogleAccess":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"privateIpv6GoogleAccess\" argument has the wrong type (expected type \"string\")")
			}
		case "purpose":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"purpose\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(GcpComputeRegion); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"region\" argument has the wrong type (expected type \"GcpComputeRegion\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "stackType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"stackType\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.subnetwork\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.subnetwork with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeSubnetwork) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableFlowLogs"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"enableFlowLogs\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalIpv6Prefix"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"externalIpv6Prefix\". This field is required.")
	}
	if _, ok := s.Cache.Load("fingerprint"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"fingerprint\". This field is required.")
	}
	if _, ok := s.Cache.Load("gatewayAddress"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"gatewayAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("internalIpv6Prefix"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"internalIpv6Prefix\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipCidrRange"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"ipCidrRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6AccessType"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"ipv6AccessType\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipv6CidrRange"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"ipv6CidrRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpGoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"privateIpGoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("privateIpv6GoogleAccess"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"privateIpv6GoogleAccess\". This field is required.")
	}
	if _, ok := s.Cache.Load("purpose"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"purpose\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"role\". This field is required.")
	}
	if _, ok := s.Cache.Load("stackType"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"stackType\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.subnetwork\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.subnetwork].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableFlowLogs":
		return nil
	case "externalIpv6Prefix":
		return nil
	case "fingerprint":
		return nil
	case "gatewayAddress":
		return nil
	case "internalIpv6Prefix":
		return nil
	case "ipCidrRange":
		return nil
	case "ipv6AccessType":
		return nil
	case "ipv6CidrRange":
		return nil
	case "privateIpGoogleAccess":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "purpose":
		return nil
	case "region":
		return nil
	case "role":
		return nil
	case "stackType":
		return nil
	case "state":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.subnetwork\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.subnetwork].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "enableFlowLogs":
		return s.EnableFlowLogs()
	case "externalIpv6Prefix":
		return s.ExternalIpv6Prefix()
	case "fingerprint":
		return s.Fingerprint()
	case "gatewayAddress":
		return s.GatewayAddress()
	case "internalIpv6Prefix":
		return s.InternalIpv6Prefix()
	case "ipCidrRange":
		return s.IpCidrRange()
	case "ipv6AccessType":
		return s.Ipv6AccessType()
	case "ipv6CidrRange":
		return s.Ipv6CidrRange()
	case "privateIpGoogleAccess":
		return s.PrivateIpGoogleAccess()
	case "privateIpv6GoogleAccess":
		return s.PrivateIpv6GoogleAccess()
	case "purpose":
		return s.Purpose()
	case "region":
		return s.Region()
	case "role":
		return s.Role()
	case "stackType":
		return s.StackType()
	case "state":
		return s.State()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.subnetwork\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableFlowLogs accessor autogenerated
func (s *mqlGcpComputeSubnetwork) EnableFlowLogs() (bool, error) {
	res, ok := s.Cache.Load("enableFlowLogs")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"enableFlowLogs\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"enableFlowLogs\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ExternalIpv6Prefix accessor autogenerated
func (s *mqlGcpComputeSubnetwork) ExternalIpv6Prefix() (string, error) {
	res, ok := s.Cache.Load("externalIpv6Prefix")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"externalIpv6Prefix\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"externalIpv6Prefix\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Fingerprint accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Fingerprint() (string, error) {
	res, ok := s.Cache.Load("fingerprint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"fingerprint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"fingerprint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GatewayAddress accessor autogenerated
func (s *mqlGcpComputeSubnetwork) GatewayAddress() (string, error) {
	res, ok := s.Cache.Load("gatewayAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"gatewayAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"gatewayAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InternalIpv6Prefix accessor autogenerated
func (s *mqlGcpComputeSubnetwork) InternalIpv6Prefix() (string, error) {
	res, ok := s.Cache.Load("internalIpv6Prefix")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"internalIpv6Prefix\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"internalIpv6Prefix\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpCidrRange accessor autogenerated
func (s *mqlGcpComputeSubnetwork) IpCidrRange() (string, error) {
	res, ok := s.Cache.Load("ipCidrRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"ipCidrRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"ipCidrRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ipv6AccessType accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Ipv6AccessType() (string, error) {
	res, ok := s.Cache.Load("ipv6AccessType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"ipv6AccessType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"ipv6AccessType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Ipv6CidrRange accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Ipv6CidrRange() (string, error) {
	res, ok := s.Cache.Load("ipv6CidrRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"ipv6CidrRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"ipv6CidrRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrivateIpGoogleAccess accessor autogenerated
func (s *mqlGcpComputeSubnetwork) PrivateIpGoogleAccess() (bool, error) {
	res, ok := s.Cache.Load("privateIpGoogleAccess")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"privateIpGoogleAccess\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"privateIpGoogleAccess\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// PrivateIpv6GoogleAccess accessor autogenerated
func (s *mqlGcpComputeSubnetwork) PrivateIpv6GoogleAccess() (string, error) {
	res, ok := s.Cache.Load("privateIpv6GoogleAccess")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"privateIpv6GoogleAccess\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"privateIpv6GoogleAccess\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Purpose accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Purpose() (string, error) {
	res, ok := s.Cache.Load("purpose")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"purpose\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"purpose\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Region() (GcpComputeRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeRegion)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"region\" to the right type (GcpComputeRegion): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StackType accessor autogenerated
func (s *mqlGcpComputeSubnetwork) StackType() (string, error) {
	res, ok := s.Cache.Load("stackType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"stackType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"stackType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpComputeSubnetwork) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.subnetwork\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.subnetwork\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeSubnetwork) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.subnetwork].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableFlowLogs":
		return nil
	case "externalIpv6Prefix":
		return nil
	case "fingerprint":
		return nil
	case "gatewayAddress":
		return nil
	case "internalIpv6Prefix":
		return nil
	case "ipCidrRange":
		return nil
	case "ipv6AccessType":
		return nil
	case "ipv6CidrRange":
		return nil
	case "privateIpGoogleAccess":
		return nil
	case "privateIpv6GoogleAccess":
		return nil
	case "purpose":
		return nil
	case "region":
		return nil
	case "role":
		return nil
	case "stackType":
		return nil
	case "state":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.subnetwork\" resource")
	}
}

// GcpComputeRouter resource interface
type GcpComputeRouter interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Bgp() (interface{}, error)
	BgpPeers() ([]interface{}, error)
	EncryptedInterconnectRouter() (bool, error)
	Nats() ([]interface{}, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeRouter for the gcp.compute.router resource
type mqlGcpComputeRouter struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeRouter) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.router resource
func newGcpComputeRouter(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeRouter{runtime.NewResource("gcp.compute.router")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "bgp":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"bgp\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "bgpPeers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"bgpPeers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "encryptedInterconnectRouter":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"encryptedInterconnectRouter\" argument has the wrong type (expected type \"bool\")")
			}
		case "nats":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"nats\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.router\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.router with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeRouter) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("bgp"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"bgp\". This field is required.")
	}
	if _, ok := s.Cache.Load("bgpPeers"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"bgpPeers\". This field is required.")
	}
	if _, ok := s.Cache.Load("encryptedInterconnectRouter"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"encryptedInterconnectRouter\". This field is required.")
	}
	if _, ok := s.Cache.Load("nats"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"nats\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.router\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeRouter) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.router].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bgp":
		return nil
	case "bgpPeers":
		return nil
	case "encryptedInterconnectRouter":
		return nil
	case "nats":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.router\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeRouter) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.router].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "bgp":
		return s.Bgp()
	case "bgpPeers":
		return s.BgpPeers()
	case "encryptedInterconnectRouter":
		return s.EncryptedInterconnectRouter()
	case "nats":
		return s.Nats()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.router\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeRouter) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.router\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.router\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeRouter) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.router\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.router\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeRouter) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.router\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.router\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Bgp accessor autogenerated
func (s *mqlGcpComputeRouter) Bgp() (interface{}, error) {
	res, ok := s.Cache.Load("bgp")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.router\" failed: no value provided for static field \"bgp\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.router\" failed to cast field \"bgp\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// BgpPeers accessor autogenerated
func (s *mqlGcpComputeRouter) BgpPeers() ([]interface{}, error) {
	res, ok := s.Cache.Load("bgpPeers")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.router\" failed: no value provided for static field \"bgpPeers\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.router\" failed to cast field \"bgpPeers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// EncryptedInterconnectRouter accessor autogenerated
func (s *mqlGcpComputeRouter) EncryptedInterconnectRouter() (bool, error) {
	res, ok := s.Cache.Load("encryptedInterconnectRouter")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.router\" failed: no value provided for static field \"encryptedInterconnectRouter\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.router\" failed to cast field \"encryptedInterconnectRouter\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Nats accessor autogenerated
func (s *mqlGcpComputeRouter) Nats() ([]interface{}, error) {
	res, ok := s.Cache.Load("nats")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.router\" failed: no value provided for static field \"nats\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.router\" failed to cast field \"nats\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeRouter) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.router\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.router\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeRouter) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.router].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bgp":
		return nil
	case "bgpPeers":
		return nil
	case "encryptedInterconnectRouter":
		return nil
	case "nats":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.router\" resource")
	}
}

// GcpStorage resource interface
type GcpStorage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Buckets() ([]interface{}, error)
}

// mqlGcpStorage for the gcp.storage resource
type mqlGcpStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage resource
func newGcpStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorage{runtime.NewResource("gcp.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].Register")
	switch name {
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage].Field")
	switch name {
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Buckets accessor autogenerated
func (s *mqlGcpStorage) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"gcp.storage\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].Compute")
	switch name {
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlGcpStorage) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpStorageBucket resource interface
type GcpStorageBucket interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Labels() (map[string]interface{}, error)
	Location() (string, error)
	LocationType() (string, error)
	ProjectNumber() (string, error)
	StorageClass() (string, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	IamPolicy() ([]interface{}, error)
	IamConfiguration() (interface{}, error)
}

// mqlGcpStorageBucket for the gcp.storage.bucket resource
type mqlGcpStorageBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorageBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage.bucket resource
func newGcpStorageBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorageBucket{runtime.NewResource("gcp.storage.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "locationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"locationType\" argument has the wrong type (expected type \"string\")")
			}
		case "projectNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"projectNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "storageClass":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"storageClass\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "iamConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorageBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationType"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"locationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectNumber"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"projectNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageClass"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"storageClass\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("iamConfiguration"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"iamConfiguration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorageBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return nil
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorageBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "labels":
		return s.Labels()
	case "location":
		return s.Location()
	case "locationType":
		return s.LocationType()
	case "projectNumber":
		return s.ProjectNumber()
	case "storageClass":
		return s.StorageClass()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "iamPolicy":
		return s.IamPolicy()
	case "iamConfiguration":
		return s.IamConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpStorageBucket) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpStorageBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpStorageBucket) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpStorageBucket) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LocationType accessor autogenerated
func (s *mqlGcpStorageBucket) LocationType() (string, error) {
	res, ok := s.Cache.Load("locationType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"locationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"locationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectNumber accessor autogenerated
func (s *mqlGcpStorageBucket) ProjectNumber() (string, error) {
	res, ok := s.Cache.Load("projectNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"projectNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"projectNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageClass accessor autogenerated
func (s *mqlGcpStorageBucket) StorageClass() (string, error) {
	res, ok := s.Cache.Load("storageClass")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"storageClass\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"storageClass\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpStorageBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcpStorageBucket) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpStorageBucket) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.storage.bucket\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IamConfiguration accessor autogenerated
func (s *mqlGcpStorageBucket) IamConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("iamConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"iamConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorageBucket) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpStorageBucket) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpSql resource interface
type GcpSql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
}

// mqlGcpSql for the gcp.sql resource
type mqlGcpSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.sql resource
func newGcpSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpSql{runtime.NewResource("gcp.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql].Register")
	switch name {
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.sql].Field")
	switch name {
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlGcpSql) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.sql\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.sql\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpSql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql].Compute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpSql) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpSqlInstance resource interface
type GcpSqlInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	BackendType() (string, error)
	ConnectionName() (string, error)
	DatabaseVersion() (string, error)
	GceZone() (string, error)
	InstanceType() (string, error)
	Kind() (string, error)
	CurrentDiskSize() (int64, error)
	MaxDiskSize() (int64, error)
	State() (string, error)
	Project() (string, error)
	Region() (string, error)
	ServiceAccountEmailAddress() (string, error)
	Settings() (interface{}, error)
}

// mqlGcpSqlInstance for the gcp.sql.instance resource
type mqlGcpSqlInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpSqlInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.sql.instance resource
func newGcpSqlInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpSqlInstance{runtime.NewResource("gcp.sql.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "backendType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"backendType\" argument has the wrong type (expected type \"string\")")
			}
		case "connectionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"connectionName\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"databaseVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "gceZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"gceZone\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"instanceType\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "currentDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"currentDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "maxDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"maxDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "project":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"project\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccountEmailAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"serviceAccountEmailAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.sql.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpSqlInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("backendType"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"backendType\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionName"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"connectionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseVersion"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"databaseVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("gceZone"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"gceZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceType"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"instanceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentDiskSize"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"currentDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxDiskSize"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"maxDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("project"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"project\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccountEmailAddress"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"serviceAccountEmailAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"settings\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpSqlInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Register")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpSqlInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Field")
	switch name {
	case "name":
		return s.Name()
	case "backendType":
		return s.BackendType()
	case "connectionName":
		return s.ConnectionName()
	case "databaseVersion":
		return s.DatabaseVersion()
	case "gceZone":
		return s.GceZone()
	case "instanceType":
		return s.InstanceType()
	case "kind":
		return s.Kind()
	case "currentDiskSize":
		return s.CurrentDiskSize()
	case "maxDiskSize":
		return s.MaxDiskSize()
	case "state":
		return s.State()
	case "project":
		return s.Project()
	case "region":
		return s.Region()
	case "serviceAccountEmailAddress":
		return s.ServiceAccountEmailAddress()
	case "settings":
		return s.Settings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcpSqlInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackendType accessor autogenerated
func (s *mqlGcpSqlInstance) BackendType() (string, error) {
	res, ok := s.Cache.Load("backendType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"backendType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"backendType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectionName accessor autogenerated
func (s *mqlGcpSqlInstance) ConnectionName() (string, error) {
	res, ok := s.Cache.Load("connectionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"connectionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"connectionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseVersion accessor autogenerated
func (s *mqlGcpSqlInstance) DatabaseVersion() (string, error) {
	res, ok := s.Cache.Load("databaseVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"databaseVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"databaseVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GceZone accessor autogenerated
func (s *mqlGcpSqlInstance) GceZone() (string, error) {
	res, ok := s.Cache.Load("gceZone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"gceZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"gceZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceType accessor autogenerated
func (s *mqlGcpSqlInstance) InstanceType() (string, error) {
	res, ok := s.Cache.Load("instanceType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"instanceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"instanceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlGcpSqlInstance) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentDiskSize accessor autogenerated
func (s *mqlGcpSqlInstance) CurrentDiskSize() (int64, error) {
	res, ok := s.Cache.Load("currentDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"currentDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"currentDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaxDiskSize accessor autogenerated
func (s *mqlGcpSqlInstance) MaxDiskSize() (int64, error) {
	res, ok := s.Cache.Load("maxDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"maxDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"maxDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpSqlInstance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Project accessor autogenerated
func (s *mqlGcpSqlInstance) Project() (string, error) {
	res, ok := s.Cache.Load("project")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"project\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"project\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpSqlInstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccountEmailAddress accessor autogenerated
func (s *mqlGcpSqlInstance) ServiceAccountEmailAddress() (string, error) {
	res, ok := s.Cache.Load("serviceAccountEmailAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"serviceAccountEmailAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"serviceAccountEmailAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlGcpSqlInstance) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpSqlInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Compute")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// GcpBigquery resource interface
type GcpBigquery interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Datasets() ([]interface{}, error)
}

// mqlGcpBigquery for the gcp.bigquery resource
type mqlGcpBigquery struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigquery) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery resource
func newGcpBigquery(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigquery{runtime.NewResource("gcp.bigquery")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "datasets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"datasets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigquery) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigquery) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Register")
	switch name {
	case "datasets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigquery) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Field")
	switch name {
	case "datasets":
		return s.Datasets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Datasets accessor autogenerated
func (s *mqlGcpBigquery) Datasets() ([]interface{}, error) {
	res, ok := s.Cache.Load("datasets")
	if !ok || !res.Valid {
		if err := s.ComputeDatasets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("datasets")
		if !ok {
			return nil, errors.New("\"gcp.bigquery\" calculated \"datasets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "datasets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery\" failed to cast field \"datasets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigquery) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Compute")
	switch name {
	case "datasets":
		return s.ComputeDatasets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// ComputeDatasets computer autogenerated
func (s *mqlGcpBigquery) ComputeDatasets() error {
	var err error
	if _, ok := s.Cache.Load("datasets"); ok {
		return nil
	}
	vres, err := s.GetDatasets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("datasets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryDataset resource interface
type GcpBigqueryDataset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	Location() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Tags() (map[string]interface{}, error)
	KmsName() (string, error)
	Tables() ([]interface{}, error)
	Models() ([]interface{}, error)
	Routines() ([]interface{}, error)
}

// mqlGcpBigqueryDataset for the gcp.bigquery.dataset resource
type mqlGcpBigqueryDataset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryDataset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.dataset resource
func newGcpBigqueryDataset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryDataset{runtime.NewResource("gcp.bigquery.dataset")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "tables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "models":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"models\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routines":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"routines\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.dataset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryDataset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"kmsName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryDataset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "kmsName":
		return nil
	case "tables":
		return nil
	case "models":
		return nil
	case "routines":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryDataset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "location":
		return s.Location()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "tags":
		return s.Tags()
	case "kmsName":
		return s.KmsName()
	case "tables":
		return s.Tables()
	case "models":
		return s.Models()
	case "routines":
		return s.Routines()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryDataset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryDataset) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryDataset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryDataset) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryDataset) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryDataset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryDataset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryDataset) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryDataset) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tables accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tables() ([]interface{}, error) {
	res, ok := s.Cache.Load("tables")
	if !ok || !res.Valid {
		if err := s.ComputeTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tables")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"tables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Models accessor autogenerated
func (s *mqlGcpBigqueryDataset) Models() ([]interface{}, error) {
	res, ok := s.Cache.Load("models")
	if !ok || !res.Valid {
		if err := s.ComputeModels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("models")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"models\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "models")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"models\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Routines accessor autogenerated
func (s *mqlGcpBigqueryDataset) Routines() ([]interface{}, error) {
	res, ok := s.Cache.Load("routines")
	if !ok || !res.Valid {
		if err := s.ComputeRoutines(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routines")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"routines\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routines")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"routines\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryDataset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "kmsName":
		return nil
	case "tables":
		return s.ComputeTables()
	case "models":
		return s.ComputeModels()
	case "routines":
		return s.ComputeRoutines()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// ComputeTables computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeTables() error {
	var err error
	if _, ok := s.Cache.Load("tables"); ok {
		return nil
	}
	vres, err := s.GetTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeModels computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeModels() error {
	var err error
	if _, ok := s.Cache.Load("models"); ok {
		return nil
	}
	vres, err := s.GetModels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("models", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoutines computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeRoutines() error {
	var err error
	if _, ok := s.Cache.Load("routines"); ok {
		return nil
	}
	vres, err := s.GetRoutines()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routines", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryTable resource interface
type GcpBigqueryTable interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	DatasetId() (string, error)
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	Labels() (map[string]interface{}, error)
	UseLegacySQL() (bool, error)
	RequirePartitionFilter() (bool, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	NumBytes() (int64, error)
	NumLongTermBytes() (int64, error)
	NumRows() (int64, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
	KmsName() (string, error)
	SnapshotTime() (*time.Time, error)
	ViewQuery() (string, error)
	ClusteringFields() (interface{}, error)
	ExternalDataConfig() (interface{}, error)
	MaterializedView() (interface{}, error)
	RangePartitioning() (interface{}, error)
	TimePartitioning() (interface{}, error)
	Schema() ([]interface{}, error)
}

// mqlGcpBigqueryTable for the gcp.bigquery.table resource
type mqlGcpBigqueryTable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryTable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.table resource
func newGcpBigqueryTable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryTable{runtime.NewResource("gcp.bigquery.table")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "useLegacySQL":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"useLegacySQL\" argument has the wrong type (expected type \"bool\")")
			}
		case "requirePartitionFilter":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"requirePartitionFilter\" argument has the wrong type (expected type \"bool\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "numBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numLongTermBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numLongTermBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numRows":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numRows\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "snapshotTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"snapshotTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "viewQuery":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"viewQuery\" argument has the wrong type (expected type \"string\")")
			}
		case "clusteringFields":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"clusteringFields\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "externalDataConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"externalDataConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "materializedView":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"materializedView\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rangePartitioning":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"rangePartitioning\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "timePartitioning":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"timePartitioning\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "schema":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"schema\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.table with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryTable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("useLegacySQL"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"useLegacySQL\". This field is required.")
	}
	if _, ok := s.Cache.Load("requirePartitionFilter"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"requirePartitionFilter\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("numBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numLongTermBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numLongTermBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numRows"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numRows\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"expirationTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"kmsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("snapshotTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"snapshotTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("viewQuery"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"viewQuery\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusteringFields"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"clusteringFields\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalDataConfig"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"externalDataConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("materializedView"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"materializedView\". This field is required.")
	}
	if _, ok := s.Cache.Load("rangePartitioning"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"rangePartitioning\". This field is required.")
	}
	if _, ok := s.Cache.Load("timePartitioning"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"timePartitioning\". This field is required.")
	}
	if _, ok := s.Cache.Load("schema"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"schema\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryTable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "datasetId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	case "snapshotTime":
		return nil
	case "viewQuery":
		return nil
	case "clusteringFields":
		return nil
	case "externalDataConfig":
		return nil
	case "materializedView":
		return nil
	case "rangePartitioning":
		return nil
	case "timePartitioning":
		return nil
	case "schema":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryTable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "datasetId":
		return s.DatasetId()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "labels":
		return s.Labels()
	case "useLegacySQL":
		return s.UseLegacySQL()
	case "requirePartitionFilter":
		return s.RequirePartitionFilter()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "numBytes":
		return s.NumBytes()
	case "numLongTermBytes":
		return s.NumLongTermBytes()
	case "numRows":
		return s.NumRows()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	case "kmsName":
		return s.KmsName()
	case "snapshotTime":
		return s.SnapshotTime()
	case "viewQuery":
		return s.ViewQuery()
	case "clusteringFields":
		return s.ClusteringFields()
	case "externalDataConfig":
		return s.ExternalDataConfig()
	case "materializedView":
		return s.MaterializedView()
	case "rangePartitioning":
		return s.RangePartitioning()
	case "timePartitioning":
		return s.TimePartitioning()
	case "schema":
		return s.Schema()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryTable) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryTable) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryTable) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryTable) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryTable) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryTable) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryTable) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// UseLegacySQL accessor autogenerated
func (s *mqlGcpBigqueryTable) UseLegacySQL() (bool, error) {
	res, ok := s.Cache.Load("useLegacySQL")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"useLegacySQL\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"useLegacySQL\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RequirePartitionFilter accessor autogenerated
func (s *mqlGcpBigqueryTable) RequirePartitionFilter() (bool, error) {
	res, ok := s.Cache.Load("requirePartitionFilter")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"requirePartitionFilter\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"requirePartitionFilter\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryTable) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryTable) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// NumBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumBytes() (int64, error) {
	res, ok := s.Cache.Load("numBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumLongTermBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumLongTermBytes() (int64, error) {
	res, ok := s.Cache.Load("numLongTermBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numLongTermBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numLongTermBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumRows accessor autogenerated
func (s *mqlGcpBigqueryTable) NumRows() (int64, error) {
	res, ok := s.Cache.Load("numRows")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numRows\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numRows\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryTable) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryTable) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryTable) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SnapshotTime accessor autogenerated
func (s *mqlGcpBigqueryTable) SnapshotTime() (*time.Time, error) {
	res, ok := s.Cache.Load("snapshotTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"snapshotTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"snapshotTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ViewQuery accessor autogenerated
func (s *mqlGcpBigqueryTable) ViewQuery() (string, error) {
	res, ok := s.Cache.Load("viewQuery")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"viewQuery\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"viewQuery\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusteringFields accessor autogenerated
func (s *mqlGcpBigqueryTable) ClusteringFields() (interface{}, error) {
	res, ok := s.Cache.Load("clusteringFields")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"clusteringFields\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"clusteringFields\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ExternalDataConfig accessor autogenerated
func (s *mqlGcpBigqueryTable) ExternalDataConfig() (interface{}, error) {
	res, ok := s.Cache.Load("externalDataConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"externalDataConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"externalDataConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// MaterializedView accessor autogenerated
func (s *mqlGcpBigqueryTable) MaterializedView() (interface{}, error) {
	res, ok := s.Cache.Load("materializedView")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"materializedView\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"materializedView\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// RangePartitioning accessor autogenerated
func (s *mqlGcpBigqueryTable) RangePartitioning() (interface{}, error) {
	res, ok := s.Cache.Load("rangePartitioning")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"rangePartitioning\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"rangePartitioning\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// TimePartitioning accessor autogenerated
func (s *mqlGcpBigqueryTable) TimePartitioning() (interface{}, error) {
	res, ok := s.Cache.Load("timePartitioning")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"timePartitioning\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"timePartitioning\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Schema accessor autogenerated
func (s *mqlGcpBigqueryTable) Schema() ([]interface{}, error) {
	res, ok := s.Cache.Load("schema")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"schema\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"schema\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryTable) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "datasetId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	case "snapshotTime":
		return nil
	case "viewQuery":
		return nil
	case "clusteringFields":
		return nil
	case "externalDataConfig":
		return nil
	case "materializedView":
		return nil
	case "rangePartitioning":
		return nil
	case "timePartitioning":
		return nil
	case "schema":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// GcpBigqueryModel resource interface
type GcpBigqueryModel interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
	KmsName() (string, error)
}

// mqlGcpBigqueryModel for the gcp.bigquery.model resource
type mqlGcpBigqueryModel struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryModel) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.model resource
func newGcpBigqueryModel(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryModel{runtime.NewResource("gcp.bigquery.model")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "kmsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"kmsName\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.model with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryModel) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"expirationTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"kmsName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryModel) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryModel) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	case "kmsName":
		return s.KmsName()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryModel) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryModel) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryModel) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryModel) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryModel) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryModel) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryModel) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryModel) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryModel) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryModel) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryModel) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// KmsName accessor autogenerated
func (s *mqlGcpBigqueryModel) KmsName() (string, error) {
	res, ok := s.Cache.Load("kmsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"kmsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"kmsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryModel) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Compute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	case "kmsName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// GcpBigqueryRoutine resource interface
type GcpBigqueryRoutine interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Language() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
}

// mqlGcpBigqueryRoutine for the gcp.bigquery.routine resource
type mqlGcpBigqueryRoutine struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryRoutine) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.routine resource
func newGcpBigqueryRoutine(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryRoutine{runtime.NewResource("gcp.bigquery.routine")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "language":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"language\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.routine with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryRoutine) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("language"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"language\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "language":
		return s.Language()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Language accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Language() (string, error) {
	res, ok := s.Cache.Load("language")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"language\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"language\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Compute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// GcpDns resource interface
type GcpDns interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	ManagedZones() ([]interface{}, error)
	Policies() ([]interface{}, error)
}

// mqlGcpDns for the gcp.dns resource
type mqlGcpDns struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDns) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns resource
func newGcpDns(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDns{runtime.NewResource("gcp.dns")}
	var existing GcpDns
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "managedZones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"managedZones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "policies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"policies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDns) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDns) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns].Register")
	switch name {
	case "projectId":
		return nil
	case "managedZones":
		return nil
	case "policies":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDns) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "managedZones":
		return s.ManagedZones()
	case "policies":
		return s.Policies()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDns) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ManagedZones accessor autogenerated
func (s *mqlGcpDns) ManagedZones() ([]interface{}, error) {
	res, ok := s.Cache.Load("managedZones")
	if !ok || !res.Valid {
		if err := s.ComputeManagedZones(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("managedZones")
		if !ok {
			return nil, errors.New("\"gcp.dns\" calculated \"managedZones\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "managedZones")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns\" failed to cast field \"managedZones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Policies accessor autogenerated
func (s *mqlGcpDns) Policies() ([]interface{}, error) {
	res, ok := s.Cache.Load("policies")
	if !ok || !res.Valid {
		if err := s.ComputePolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("policies")
		if !ok {
			return nil, errors.New("\"gcp.dns\" calculated \"policies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "policies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns\" failed to cast field \"policies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDns) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns].Compute")
	switch name {
	case "projectId":
		return nil
	case "managedZones":
		return s.ComputeManagedZones()
	case "policies":
		return s.ComputePolicies()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns\" resource")
	}
}

// ComputeManagedZones computer autogenerated
func (s *mqlGcpDns) ComputeManagedZones() error {
	var err error
	if _, ok := s.Cache.Load("managedZones"); ok {
		return nil
	}
	vres, err := s.GetManagedZones()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("managedZones", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePolicies computer autogenerated
func (s *mqlGcpDns) ComputePolicies() error {
	var err error
	if _, ok := s.Cache.Load("policies"); ok {
		return nil
	}
	vres, err := s.GetPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("policies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpDnsManagedzone resource interface
type GcpDnsManagedzone interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Description() (string, error)
	DnsName() (string, error)
	NameServerSet() (string, error)
	NameServers() ([]interface{}, error)
	Visibility() (string, error)
	Created() (*time.Time, error)
	RecordSets() ([]interface{}, error)
}

// mqlGcpDnsManagedzone for the gcp.dns.managedzone resource
type mqlGcpDnsManagedzone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsManagedzone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.managedzone resource
func newGcpDnsManagedzone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsManagedzone{runtime.NewResource("gcp.dns.managedzone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "dnsName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"dnsName\" argument has the wrong type (expected type \"string\")")
			}
		case "nameServerSet":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"nameServerSet\" argument has the wrong type (expected type \"string\")")
			}
		case "nameServers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"nameServers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "visibility":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"visibility\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "recordSets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"recordSets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.managedzone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.managedzone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsManagedzone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("dnsName"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"dnsName\". This field is required.")
	}
	if _, ok := s.Cache.Load("nameServerSet"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"nameServerSet\". This field is required.")
	}
	if _, ok := s.Cache.Load("nameServers"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"nameServers\". This field is required.")
	}
	if _, ok := s.Cache.Load("visibility"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"visibility\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.dns.managedzone\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsManagedzone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "dnsName":
		return nil
	case "nameServerSet":
		return nil
	case "nameServers":
		return nil
	case "visibility":
		return nil
	case "created":
		return nil
	case "recordSets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsManagedzone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "dnsName":
		return s.DnsName()
	case "nameServerSet":
		return s.NameServerSet()
	case "nameServers":
		return s.NameServers()
	case "visibility":
		return s.Visibility()
	case "created":
		return s.Created()
	case "recordSets":
		return s.RecordSets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpDnsManagedzone) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsManagedzone) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsManagedzone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpDnsManagedzone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DnsName accessor autogenerated
func (s *mqlGcpDnsManagedzone) DnsName() (string, error) {
	res, ok := s.Cache.Load("dnsName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"dnsName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"dnsName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NameServerSet accessor autogenerated
func (s *mqlGcpDnsManagedzone) NameServerSet() (string, error) {
	res, ok := s.Cache.Load("nameServerSet")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"nameServerSet\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"nameServerSet\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NameServers accessor autogenerated
func (s *mqlGcpDnsManagedzone) NameServers() ([]interface{}, error) {
	res, ok := s.Cache.Load("nameServers")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"nameServers\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"nameServers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Visibility accessor autogenerated
func (s *mqlGcpDnsManagedzone) Visibility() (string, error) {
	res, ok := s.Cache.Load("visibility")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"visibility\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"visibility\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpDnsManagedzone) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.managedzone\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RecordSets accessor autogenerated
func (s *mqlGcpDnsManagedzone) RecordSets() ([]interface{}, error) {
	res, ok := s.Cache.Load("recordSets")
	if !ok || !res.Valid {
		if err := s.ComputeRecordSets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recordSets")
		if !ok {
			return nil, errors.New("\"gcp.dns.managedzone\" calculated \"recordSets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recordSets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.managedzone\" failed to cast field \"recordSets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsManagedzone) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.managedzone].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "dnsName":
		return nil
	case "nameServerSet":
		return nil
	case "nameServers":
		return nil
	case "visibility":
		return nil
	case "created":
		return nil
	case "recordSets":
		return s.ComputeRecordSets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.managedzone\" resource")
	}
}

// ComputeRecordSets computer autogenerated
func (s *mqlGcpDnsManagedzone) ComputeRecordSets() error {
	var err error
	if _, ok := s.Cache.Load("recordSets"); ok {
		return nil
	}
	vres, err := s.GetRecordSets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recordSets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpDnsRecordset resource interface
type GcpDnsRecordset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Rrdatas() ([]interface{}, error)
	SignatureRrdatas() ([]interface{}, error)
	Ttl() (int64, error)
	Type() (string, error)
}

// mqlGcpDnsRecordset for the gcp.dns.recordset resource
type mqlGcpDnsRecordset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsRecordset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.recordset resource
func newGcpDnsRecordset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsRecordset{runtime.NewResource("gcp.dns.recordset")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "rrdatas":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"rrdatas\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "signatureRrdatas":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"signatureRrdatas\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ttl":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"ttl\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.recordset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.recordset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsRecordset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("rrdatas"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"rrdatas\". This field is required.")
	}
	if _, ok := s.Cache.Load("signatureRrdatas"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"signatureRrdatas\". This field is required.")
	}
	if _, ok := s.Cache.Load("ttl"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"ttl\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.dns.recordset\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsRecordset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "rrdatas":
		return nil
	case "signatureRrdatas":
		return nil
	case "ttl":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsRecordset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "rrdatas":
		return s.Rrdatas()
	case "signatureRrdatas":
		return s.SignatureRrdatas()
	case "ttl":
		return s.Ttl()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsRecordset) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsRecordset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Rrdatas accessor autogenerated
func (s *mqlGcpDnsRecordset) Rrdatas() ([]interface{}, error) {
	res, ok := s.Cache.Load("rrdatas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"rrdatas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"rrdatas\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SignatureRrdatas accessor autogenerated
func (s *mqlGcpDnsRecordset) SignatureRrdatas() ([]interface{}, error) {
	res, ok := s.Cache.Load("signatureRrdatas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"signatureRrdatas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"signatureRrdatas\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ttl accessor autogenerated
func (s *mqlGcpDnsRecordset) Ttl() (int64, error) {
	res, ok := s.Cache.Load("ttl")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"ttl\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"ttl\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpDnsRecordset) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.recordset\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.recordset\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsRecordset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.recordset].Compute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "rrdatas":
		return nil
	case "signatureRrdatas":
		return nil
	case "ttl":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.recordset\" resource")
	}
}

// GcpDnsPolicy resource interface
type GcpDnsPolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	EnableInboundForwarding() (bool, error)
	EnableLogging() (bool, error)
}

// mqlGcpDnsPolicy for the gcp.dns.policy resource
type mqlGcpDnsPolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpDnsPolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.dns.policy resource
func newGcpDnsPolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpDnsPolicy{runtime.NewResource("gcp.dns.policy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "enableInboundForwarding":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"enableInboundForwarding\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableLogging":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"enableLogging\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.dns.policy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.dns.policy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpDnsPolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableInboundForwarding"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"enableInboundForwarding\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableLogging"); !ok {
		return errors.New("Initialized \"gcp.dns.policy\" resource without a \"enableLogging\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpDnsPolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].Register")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableInboundForwarding":
		return nil
	case "enableLogging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpDnsPolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "enableInboundForwarding":
		return s.EnableInboundForwarding()
	case "enableLogging":
		return s.EnableLogging()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpDnsPolicy) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlGcpDnsPolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpDnsPolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpDnsPolicy) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableInboundForwarding accessor autogenerated
func (s *mqlGcpDnsPolicy) EnableInboundForwarding() (bool, error) {
	res, ok := s.Cache.Load("enableInboundForwarding")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"enableInboundForwarding\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"enableInboundForwarding\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableLogging accessor autogenerated
func (s *mqlGcpDnsPolicy) EnableLogging() (bool, error) {
	res, ok := s.Cache.Load("enableLogging")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.dns.policy\" failed: no value provided for static field \"enableLogging\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.dns.policy\" failed to cast field \"enableLogging\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpDnsPolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.dns.policy].Compute")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "enableInboundForwarding":
		return nil
	case "enableLogging":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.dns.policy\" resource")
	}
}

// GcpProjectCluster resource interface
type GcpProjectCluster interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	LoggingService() (string, error)
	MonitoringService() (string, error)
	Network() (string, error)
	ClusterIpv4Cidr() (string, error)
	Subnetwork() (string, error)
	NodePools() ([]interface{}, error)
	Locations() ([]interface{}, error)
	EnableKubernetesAlpha() (bool, error)
	AutopilotEnabled() (bool, error)
	Zone() (string, error)
	Endpoint() (string, error)
	InitialClusterVersion() (string, error)
	CurrentMasterVersion() (string, error)
	Status() (string, error)
	ResourceLabels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	ExpirationTime() (*time.Time, error)
}

// mqlGcpProjectCluster for the gcp.project.cluster resource
type mqlGcpProjectCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster resource
func newGcpProjectCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectCluster{runtime.NewResource("gcp.project.cluster")}
	var existing GcpProjectCluster
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "loggingService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"loggingService\" argument has the wrong type (expected type \"string\")")
			}
		case "monitoringService":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"monitoringService\" argument has the wrong type (expected type \"string\")")
			}
		case "network":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"network\" argument has the wrong type (expected type \"string\")")
			}
		case "clusterIpv4Cidr":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"clusterIpv4Cidr\" argument has the wrong type (expected type \"string\")")
			}
		case "subnetwork":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"subnetwork\" argument has the wrong type (expected type \"string\")")
			}
		case "nodePools":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"nodePools\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "enableKubernetesAlpha":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"enableKubernetesAlpha\" argument has the wrong type (expected type \"bool\")")
			}
		case "autopilotEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"autopilotEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "zone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"zone\" argument has the wrong type (expected type \"string\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "initialClusterVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"initialClusterVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "currentMasterVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"currentMasterVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceLabels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"resourceLabels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("loggingService"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"loggingService\". This field is required.")
	}
	if _, ok := s.Cache.Load("monitoringService"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"monitoringService\". This field is required.")
	}
	if _, ok := s.Cache.Load("network"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"network\". This field is required.")
	}
	if _, ok := s.Cache.Load("clusterIpv4Cidr"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"clusterIpv4Cidr\". This field is required.")
	}
	if _, ok := s.Cache.Load("subnetwork"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"subnetwork\". This field is required.")
	}
	if _, ok := s.Cache.Load("nodePools"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"nodePools\". This field is required.")
	}
	if _, ok := s.Cache.Load("locations"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"locations\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableKubernetesAlpha"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"enableKubernetesAlpha\". This field is required.")
	}
	if _, ok := s.Cache.Load("autopilotEnabled"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"autopilotEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("zone"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"zone\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("initialClusterVersion"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"initialClusterVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentMasterVersion"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"currentMasterVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceLabels"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"resourceLabels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.project.cluster\" resource without a \"expirationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster].Register")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "loggingService":
		return nil
	case "monitoringService":
		return nil
	case "network":
		return nil
	case "clusterIpv4Cidr":
		return nil
	case "subnetwork":
		return nil
	case "nodePools":
		return nil
	case "locations":
		return nil
	case "enableKubernetesAlpha":
		return nil
	case "autopilotEnabled":
		return nil
	case "zone":
		return nil
	case "endpoint":
		return nil
	case "initialClusterVersion":
		return nil
	case "currentMasterVersion":
		return nil
	case "status":
		return nil
	case "resourceLabels":
		return nil
	case "created":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "loggingService":
		return s.LoggingService()
	case "monitoringService":
		return s.MonitoringService()
	case "network":
		return s.Network()
	case "clusterIpv4Cidr":
		return s.ClusterIpv4Cidr()
	case "subnetwork":
		return s.Subnetwork()
	case "nodePools":
		return s.NodePools()
	case "locations":
		return s.Locations()
	case "enableKubernetesAlpha":
		return s.EnableKubernetesAlpha()
	case "autopilotEnabled":
		return s.AutopilotEnabled()
	case "zone":
		return s.Zone()
	case "endpoint":
		return s.Endpoint()
	case "initialClusterVersion":
		return s.InitialClusterVersion()
	case "currentMasterVersion":
		return s.CurrentMasterVersion()
	case "status":
		return s.Status()
	case "resourceLabels":
		return s.ResourceLabels()
	case "created":
		return s.Created()
	case "expirationTime":
		return s.ExpirationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectCluster) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Id accessor autogenerated
func (s *mqlGcpProjectCluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpProjectCluster) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LoggingService accessor autogenerated
func (s *mqlGcpProjectCluster) LoggingService() (string, error) {
	res, ok := s.Cache.Load("loggingService")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"loggingService\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"loggingService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MonitoringService accessor autogenerated
func (s *mqlGcpProjectCluster) MonitoringService() (string, error) {
	res, ok := s.Cache.Load("monitoringService")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"monitoringService\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"monitoringService\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Network accessor autogenerated
func (s *mqlGcpProjectCluster) Network() (string, error) {
	res, ok := s.Cache.Load("network")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"network\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"network\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ClusterIpv4Cidr accessor autogenerated
func (s *mqlGcpProjectCluster) ClusterIpv4Cidr() (string, error) {
	res, ok := s.Cache.Load("clusterIpv4Cidr")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"clusterIpv4Cidr\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"clusterIpv4Cidr\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Subnetwork accessor autogenerated
func (s *mqlGcpProjectCluster) Subnetwork() (string, error) {
	res, ok := s.Cache.Load("subnetwork")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"subnetwork\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"subnetwork\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NodePools accessor autogenerated
func (s *mqlGcpProjectCluster) NodePools() ([]interface{}, error) {
	res, ok := s.Cache.Load("nodePools")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"nodePools\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"nodePools\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectCluster) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"locations\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// EnableKubernetesAlpha accessor autogenerated
func (s *mqlGcpProjectCluster) EnableKubernetesAlpha() (bool, error) {
	res, ok := s.Cache.Load("enableKubernetesAlpha")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"enableKubernetesAlpha\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"enableKubernetesAlpha\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// AutopilotEnabled accessor autogenerated
func (s *mqlGcpProjectCluster) AutopilotEnabled() (bool, error) {
	res, ok := s.Cache.Load("autopilotEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"autopilotEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"autopilotEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Zone accessor autogenerated
func (s *mqlGcpProjectCluster) Zone() (string, error) {
	res, ok := s.Cache.Load("zone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"zone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"zone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlGcpProjectCluster) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InitialClusterVersion accessor autogenerated
func (s *mqlGcpProjectCluster) InitialClusterVersion() (string, error) {
	res, ok := s.Cache.Load("initialClusterVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"initialClusterVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"initialClusterVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentMasterVersion accessor autogenerated
func (s *mqlGcpProjectCluster) CurrentMasterVersion() (string, error) {
	res, ok := s.Cache.Load("currentMasterVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"currentMasterVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"currentMasterVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectCluster) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceLabels accessor autogenerated
func (s *mqlGcpProjectCluster) ResourceLabels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("resourceLabels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"resourceLabels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"resourceLabels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectCluster) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpProjectCluster) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectCluster) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster].Compute")
	switch name {
	case "projectId":
		return nil
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "loggingService":
		return nil
	case "monitoringService":
		return nil
	case "network":
		return nil
	case "clusterIpv4Cidr":
		return nil
	case "subnetwork":
		return nil
	case "nodePools":
		return nil
	case "locations":
		return nil
	case "enableKubernetesAlpha":
		return nil
	case "autopilotEnabled":
		return nil
	case "zone":
		return nil
	case "endpoint":
		return nil
	case "initialClusterVersion":
		return nil
	case "currentMasterVersion":
		return nil
	case "status":
		return nil
	case "resourceLabels":
		return nil
	case "created":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster\" resource")
	}
}

// GcpProjectClusterNodepool resource interface
type GcpProjectClusterNodepool interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Config() (GcpProjectClusterNodepoolConfig, error)
	InitialNodeCount() (int64, error)
	Locations() ([]interface{}, error)
	NetworkConfig() (GcpProjectClusterNodepoolNetworkConfig, error)
	Version() (string, error)
	InstanceGroupUrls() ([]interface{}, error)
	Status() (string, error)
}

// mqlGcpProjectClusterNodepool for the gcp.project.cluster.nodepool resource
type mqlGcpProjectClusterNodepool struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepool) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool resource
func newGcpProjectClusterNodepool(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepool{runtime.NewResource("gcp.project.cluster.nodepool")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectClusterNodepoolConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"config\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfig\")")
			}
		case "initialNodeCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"initialNodeCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networkConfig":
			if _, ok := val.(GcpProjectClusterNodepoolNetworkConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"networkConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolNetworkConfig\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceGroupUrls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"instanceGroupUrls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepool) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("config"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"config\". This field is required.")
	}
	if _, ok := s.Cache.Load("initialNodeCount"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"initialNodeCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("locations"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"locations\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"networkConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceGroupUrls"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"instanceGroupUrls\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool\" resource without a \"status\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	case "initialNodeCount":
		return nil
	case "locations":
		return nil
	case "networkConfig":
		return nil
	case "version":
		return nil
	case "instanceGroupUrls":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	case "initialNodeCount":
		return s.InitialNodeCount()
	case "locations":
		return s.Locations()
	case "networkConfig":
		return s.NetworkConfig()
	case "version":
		return s.Version()
	case "instanceGroupUrls":
		return s.InstanceGroupUrls()
	case "status":
		return s.Status()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Config() (GcpProjectClusterNodepoolConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"config\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"config\" to the right type (GcpProjectClusterNodepoolConfig): %#v", res)
	}
	return tres, nil
}

// InitialNodeCount accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) InitialNodeCount() (int64, error) {
	res, ok := s.Cache.Load("initialNodeCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"initialNodeCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"initialNodeCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"locations\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) NetworkConfig() (GcpProjectClusterNodepoolNetworkConfig, error) {
	res, ok := s.Cache.Load("networkConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"networkConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolNetworkConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"networkConfig\" to the right type (GcpProjectClusterNodepoolNetworkConfig): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceGroupUrls accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) InstanceGroupUrls() ([]interface{}, error) {
	res, ok := s.Cache.Load("instanceGroupUrls")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"instanceGroupUrls\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"instanceGroupUrls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepool) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	case "initialNodeCount":
		return nil
	case "locations":
		return nil
	case "networkConfig":
		return nil
	case "version":
		return nil
	case "instanceGroupUrls":
		return nil
	case "status":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool\" resource")
	}
}

// GcpProjectClusterNodepoolNetworkConfig resource interface
type GcpProjectClusterNodepoolNetworkConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	PodRange() (string, error)
	PodIpv4CidrBlock() (string, error)
	PerformanceConfig() (GcpProjectClusterNodepoolNetworkConfigPerformanceConfig, error)
}

// mqlGcpProjectClusterNodepoolNetworkConfig for the gcp.project.cluster.nodepool.networkConfig resource
type mqlGcpProjectClusterNodepoolNetworkConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.networkConfig resource
func newGcpProjectClusterNodepoolNetworkConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolNetworkConfig{runtime.NewResource("gcp.project.cluster.nodepool.networkConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "podRange":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig\", its \"podRange\" argument has the wrong type (expected type \"string\")")
			}
		case "podIpv4CidrBlock":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig\", its \"podIpv4CidrBlock\" argument has the wrong type (expected type \"string\")")
			}
		case "performanceConfig":
			if _, ok := val.(GcpProjectClusterNodepoolNetworkConfigPerformanceConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig\", its \"performanceConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolNetworkConfigPerformanceConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.networkConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolNetworkConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("podRange"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig\" resource without a \"podRange\". This field is required.")
	}
	if _, ok := s.Cache.Load("podIpv4CidrBlock"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig\" resource without a \"podIpv4CidrBlock\". This field is required.")
	}
	if _, ok := s.Cache.Load("performanceConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig\" resource without a \"performanceConfig\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig].Register")
	switch name {
	case "id":
		return nil
	case "podRange":
		return nil
	case "podIpv4CidrBlock":
		return nil
	case "performanceConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "podRange":
		return s.PodRange()
	case "podIpv4CidrBlock":
		return s.PodIpv4CidrBlock()
	case "performanceConfig":
		return s.PerformanceConfig()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.networkConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodRange accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) PodRange() (string, error) {
	res, ok := s.Cache.Load("podRange")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.networkConfig\" failed: no value provided for static field \"podRange\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig\" failed to cast field \"podRange\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodIpv4CidrBlock accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) PodIpv4CidrBlock() (string, error) {
	res, ok := s.Cache.Load("podIpv4CidrBlock")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.networkConfig\" failed: no value provided for static field \"podIpv4CidrBlock\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig\" failed to cast field \"podIpv4CidrBlock\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PerformanceConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) PerformanceConfig() (GcpProjectClusterNodepoolNetworkConfigPerformanceConfig, error) {
	res, ok := s.Cache.Load("performanceConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.networkConfig\" failed: no value provided for static field \"performanceConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolNetworkConfigPerformanceConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig\" failed to cast field \"performanceConfig\" to the right type (GcpProjectClusterNodepoolNetworkConfigPerformanceConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig].Compute")
	switch name {
	case "id":
		return nil
	case "podRange":
		return nil
	case "podIpv4CidrBlock":
		return nil
	case "performanceConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig\" resource")
	}
}

// GcpProjectClusterNodepoolNetworkConfigPerformanceConfig resource interface
type GcpProjectClusterNodepoolNetworkConfigPerformanceConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	TotalEgressBandwidthTier() (string, error)
}

// mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig for the gcp.project.cluster.nodepool.networkConfig.performanceConfig resource
type mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.networkConfig.performanceConfig resource
func newGcpProjectClusterNodepoolNetworkConfigPerformanceConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig{runtime.NewResource("gcp.project.cluster.nodepool.networkConfig.performanceConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "totalEgressBandwidthTier":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\", its \"totalEgressBandwidthTier\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.networkConfig.performanceConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("totalEgressBandwidthTier"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" resource without a \"totalEgressBandwidthTier\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig.performanceConfig].Register")
	switch name {
	case "id":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig.performanceConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "totalEgressBandwidthTier":
		return s.TotalEgressBandwidthTier()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TotalEgressBandwidthTier accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) TotalEgressBandwidthTier() (string, error) {
	res, ok := s.Cache.Load("totalEgressBandwidthTier")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" failed: no value provided for static field \"totalEgressBandwidthTier\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" failed to cast field \"totalEgressBandwidthTier\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolNetworkConfigPerformanceConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.networkConfig.performanceConfig].Compute")
	switch name {
	case "id":
		return nil
	case "totalEgressBandwidthTier":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.networkConfig.performanceConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfig resource interface
type GcpProjectClusterNodepoolConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	MachineType() (string, error)
	DiskSizeGb() (int64, error)
	OauthScopes() ([]interface{}, error)
	ServiceAccount() (string, error)
	Metadata() (map[string]interface{}, error)
	ImageType() (string, error)
	Labels() (map[string]interface{}, error)
	LocalSsdCount() (int64, error)
	Tags() ([]interface{}, error)
	Preemptible() (bool, error)
	Accelerators() ([]interface{}, error)
	DiskType() (string, error)
	MinCpuPlatform() (string, error)
	WorkloadMetadataMode() (string, error)
	Taints() ([]interface{}, error)
	SandboxConfig() (GcpProjectClusterNodepoolConfigSandboxConfig, error)
	ShieldedInstanceConfig() (GcpProjectClusterNodepoolConfigShieldedInstanceConfig, error)
	LinuxNodeConfig() (GcpProjectClusterNodepoolConfigLinuxNodeConfig, error)
	KubeletConfig() (GcpProjectClusterNodepoolConfigKubeletConfig, error)
	BootDiskKmsKey() (string, error)
	GcfsConfig() (GcpProjectClusterNodepoolConfigGcfsConfig, error)
	AdvancedMachineFeatures() (GcpProjectClusterNodepoolConfigAdvancedMachineFeatures, error)
	GvnicConfig() (GcpProjectClusterNodepoolConfigGvnicConfig, error)
	Spot() (bool, error)
	ConfidentialNodes() (GcpProjectClusterNodepoolConfigConfidentialNodes, error)
}

// mqlGcpProjectClusterNodepoolConfig for the gcp.project.cluster.nodepool.config resource
type mqlGcpProjectClusterNodepoolConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config resource
func newGcpProjectClusterNodepoolConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfig{runtime.NewResource("gcp.project.cluster.nodepool.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "machineType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"machineType\" argument has the wrong type (expected type \"string\")")
			}
		case "diskSizeGb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"diskSizeGb\" argument has the wrong type (expected type \"int64\")")
			}
		case "oauthScopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"oauthScopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serviceAccount":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"serviceAccount\" argument has the wrong type (expected type \"string\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "imageType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"imageType\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "localSsdCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"localSsdCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "preemptible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"preemptible\" argument has the wrong type (expected type \"bool\")")
			}
		case "accelerators":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"accelerators\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "diskType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"diskType\" argument has the wrong type (expected type \"string\")")
			}
		case "minCpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"minCpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "workloadMetadataMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"workloadMetadataMode\" argument has the wrong type (expected type \"string\")")
			}
		case "taints":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"taints\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "sandboxConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigSandboxConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"sandboxConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigSandboxConfig\")")
			}
		case "shieldedInstanceConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigShieldedInstanceConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"shieldedInstanceConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigShieldedInstanceConfig\")")
			}
		case "linuxNodeConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigLinuxNodeConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"linuxNodeConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigLinuxNodeConfig\")")
			}
		case "kubeletConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigKubeletConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"kubeletConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigKubeletConfig\")")
			}
		case "bootDiskKmsKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"bootDiskKmsKey\" argument has the wrong type (expected type \"string\")")
			}
		case "gcfsConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigGcfsConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"gcfsConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigGcfsConfig\")")
			}
		case "advancedMachineFeatures":
			if _, ok := val.(GcpProjectClusterNodepoolConfigAdvancedMachineFeatures); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"advancedMachineFeatures\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigAdvancedMachineFeatures\")")
			}
		case "gvnicConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigGvnicConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"gvnicConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigGvnicConfig\")")
			}
		case "spot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"spot\" argument has the wrong type (expected type \"bool\")")
			}
		case "confidentialNodes":
			if _, ok := val.(GcpProjectClusterNodepoolConfigConfidentialNodes); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"confidentialNodes\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigConfidentialNodes\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("machineType"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"machineType\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskSizeGb"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"diskSizeGb\". This field is required.")
	}
	if _, ok := s.Cache.Load("oauthScopes"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"oauthScopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccount"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"serviceAccount\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("imageType"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"imageType\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("localSsdCount"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"localSsdCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("preemptible"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"preemptible\". This field is required.")
	}
	if _, ok := s.Cache.Load("accelerators"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"accelerators\". This field is required.")
	}
	if _, ok := s.Cache.Load("diskType"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"diskType\". This field is required.")
	}
	if _, ok := s.Cache.Load("minCpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"minCpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("workloadMetadataMode"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"workloadMetadataMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("taints"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"taints\". This field is required.")
	}
	if _, ok := s.Cache.Load("sandboxConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"sandboxConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("shieldedInstanceConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"shieldedInstanceConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("linuxNodeConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"linuxNodeConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("kubeletConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"kubeletConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("bootDiskKmsKey"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"bootDiskKmsKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("gcfsConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"gcfsConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("advancedMachineFeatures"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"advancedMachineFeatures\". This field is required.")
	}
	if _, ok := s.Cache.Load("gvnicConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"gvnicConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("spot"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"spot\". This field is required.")
	}
	if _, ok := s.Cache.Load("confidentialNodes"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config\" resource without a \"confidentialNodes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config].Register")
	switch name {
	case "id":
		return nil
	case "machineType":
		return nil
	case "diskSizeGb":
		return nil
	case "oauthScopes":
		return nil
	case "serviceAccount":
		return nil
	case "metadata":
		return nil
	case "imageType":
		return nil
	case "labels":
		return nil
	case "localSsdCount":
		return nil
	case "tags":
		return nil
	case "preemptible":
		return nil
	case "accelerators":
		return nil
	case "diskType":
		return nil
	case "minCpuPlatform":
		return nil
	case "workloadMetadataMode":
		return nil
	case "taints":
		return nil
	case "sandboxConfig":
		return nil
	case "shieldedInstanceConfig":
		return nil
	case "linuxNodeConfig":
		return nil
	case "kubeletConfig":
		return nil
	case "bootDiskKmsKey":
		return nil
	case "gcfsConfig":
		return nil
	case "advancedMachineFeatures":
		return nil
	case "gvnicConfig":
		return nil
	case "spot":
		return nil
	case "confidentialNodes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config].Field")
	switch name {
	case "id":
		return s.Id()
	case "machineType":
		return s.MachineType()
	case "diskSizeGb":
		return s.DiskSizeGb()
	case "oauthScopes":
		return s.OauthScopes()
	case "serviceAccount":
		return s.ServiceAccount()
	case "metadata":
		return s.Metadata()
	case "imageType":
		return s.ImageType()
	case "labels":
		return s.Labels()
	case "localSsdCount":
		return s.LocalSsdCount()
	case "tags":
		return s.Tags()
	case "preemptible":
		return s.Preemptible()
	case "accelerators":
		return s.Accelerators()
	case "diskType":
		return s.DiskType()
	case "minCpuPlatform":
		return s.MinCpuPlatform()
	case "workloadMetadataMode":
		return s.WorkloadMetadataMode()
	case "taints":
		return s.Taints()
	case "sandboxConfig":
		return s.SandboxConfig()
	case "shieldedInstanceConfig":
		return s.ShieldedInstanceConfig()
	case "linuxNodeConfig":
		return s.LinuxNodeConfig()
	case "kubeletConfig":
		return s.KubeletConfig()
	case "bootDiskKmsKey":
		return s.BootDiskKmsKey()
	case "gcfsConfig":
		return s.GcfsConfig()
	case "advancedMachineFeatures":
		return s.AdvancedMachineFeatures()
	case "gvnicConfig":
		return s.GvnicConfig()
	case "spot":
		return s.Spot()
	case "confidentialNodes":
		return s.ConfidentialNodes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MachineType accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) MachineType() (string, error) {
	res, ok := s.Cache.Load("machineType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"machineType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"machineType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DiskSizeGb accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) DiskSizeGb() (int64, error) {
	res, ok := s.Cache.Load("diskSizeGb")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"diskSizeGb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"diskSizeGb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// OauthScopes accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) OauthScopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("oauthScopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"oauthScopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"oauthScopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServiceAccount accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) ServiceAccount() (string, error) {
	res, ok := s.Cache.Load("serviceAccount")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"serviceAccount\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"serviceAccount\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ImageType accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) ImageType() (string, error) {
	res, ok := s.Cache.Load("imageType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"imageType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"imageType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// LocalSsdCount accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) LocalSsdCount() (int64, error) {
	res, ok := s.Cache.Load("localSsdCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"localSsdCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"localSsdCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Preemptible accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Preemptible() (bool, error) {
	res, ok := s.Cache.Load("preemptible")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"preemptible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"preemptible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Accelerators accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Accelerators() ([]interface{}, error) {
	res, ok := s.Cache.Load("accelerators")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"accelerators\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"accelerators\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DiskType accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) DiskType() (string, error) {
	res, ok := s.Cache.Load("diskType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"diskType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"diskType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MinCpuPlatform accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) MinCpuPlatform() (string, error) {
	res, ok := s.Cache.Load("minCpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"minCpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"minCpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// WorkloadMetadataMode accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) WorkloadMetadataMode() (string, error) {
	res, ok := s.Cache.Load("workloadMetadataMode")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"workloadMetadataMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"workloadMetadataMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Taints accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Taints() ([]interface{}, error) {
	res, ok := s.Cache.Load("taints")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"taints\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"taints\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// SandboxConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) SandboxConfig() (GcpProjectClusterNodepoolConfigSandboxConfig, error) {
	res, ok := s.Cache.Load("sandboxConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"sandboxConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigSandboxConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"sandboxConfig\" to the right type (GcpProjectClusterNodepoolConfigSandboxConfig): %#v", res)
	}
	return tres, nil
}

// ShieldedInstanceConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) ShieldedInstanceConfig() (GcpProjectClusterNodepoolConfigShieldedInstanceConfig, error) {
	res, ok := s.Cache.Load("shieldedInstanceConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"shieldedInstanceConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigShieldedInstanceConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"shieldedInstanceConfig\" to the right type (GcpProjectClusterNodepoolConfigShieldedInstanceConfig): %#v", res)
	}
	return tres, nil
}

// LinuxNodeConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) LinuxNodeConfig() (GcpProjectClusterNodepoolConfigLinuxNodeConfig, error) {
	res, ok := s.Cache.Load("linuxNodeConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"linuxNodeConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigLinuxNodeConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"linuxNodeConfig\" to the right type (GcpProjectClusterNodepoolConfigLinuxNodeConfig): %#v", res)
	}
	return tres, nil
}

// KubeletConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) KubeletConfig() (GcpProjectClusterNodepoolConfigKubeletConfig, error) {
	res, ok := s.Cache.Load("kubeletConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"kubeletConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigKubeletConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"kubeletConfig\" to the right type (GcpProjectClusterNodepoolConfigKubeletConfig): %#v", res)
	}
	return tres, nil
}

// BootDiskKmsKey accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) BootDiskKmsKey() (string, error) {
	res, ok := s.Cache.Load("bootDiskKmsKey")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"bootDiskKmsKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"bootDiskKmsKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GcfsConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) GcfsConfig() (GcpProjectClusterNodepoolConfigGcfsConfig, error) {
	res, ok := s.Cache.Load("gcfsConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"gcfsConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigGcfsConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"gcfsConfig\" to the right type (GcpProjectClusterNodepoolConfigGcfsConfig): %#v", res)
	}
	return tres, nil
}

// AdvancedMachineFeatures accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) AdvancedMachineFeatures() (GcpProjectClusterNodepoolConfigAdvancedMachineFeatures, error) {
	res, ok := s.Cache.Load("advancedMachineFeatures")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"advancedMachineFeatures\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigAdvancedMachineFeatures)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"advancedMachineFeatures\" to the right type (GcpProjectClusterNodepoolConfigAdvancedMachineFeatures): %#v", res)
	}
	return tres, nil
}

// GvnicConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) GvnicConfig() (GcpProjectClusterNodepoolConfigGvnicConfig, error) {
	res, ok := s.Cache.Load("gvnicConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"gvnicConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigGvnicConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"gvnicConfig\" to the right type (GcpProjectClusterNodepoolConfigGvnicConfig): %#v", res)
	}
	return tres, nil
}

// Spot accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Spot() (bool, error) {
	res, ok := s.Cache.Load("spot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"spot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"spot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ConfidentialNodes accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) ConfidentialNodes() (GcpProjectClusterNodepoolConfigConfidentialNodes, error) {
	res, ok := s.Cache.Load("confidentialNodes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config\" failed: no value provided for static field \"confidentialNodes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigConfidentialNodes)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config\" failed to cast field \"confidentialNodes\" to the right type (GcpProjectClusterNodepoolConfigConfidentialNodes): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config].Compute")
	switch name {
	case "id":
		return nil
	case "machineType":
		return nil
	case "diskSizeGb":
		return nil
	case "oauthScopes":
		return nil
	case "serviceAccount":
		return nil
	case "metadata":
		return nil
	case "imageType":
		return nil
	case "labels":
		return nil
	case "localSsdCount":
		return nil
	case "tags":
		return nil
	case "preemptible":
		return nil
	case "accelerators":
		return nil
	case "diskType":
		return nil
	case "minCpuPlatform":
		return nil
	case "workloadMetadataMode":
		return nil
	case "taints":
		return nil
	case "sandboxConfig":
		return nil
	case "shieldedInstanceConfig":
		return nil
	case "linuxNodeConfig":
		return nil
	case "kubeletConfig":
		return nil
	case "bootDiskKmsKey":
		return nil
	case "gcfsConfig":
		return nil
	case "advancedMachineFeatures":
		return nil
	case "gvnicConfig":
		return nil
	case "spot":
		return nil
	case "confidentialNodes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config\" resource")
	}
}

// GcpProjectClusterNodepoolConfigAccelerator resource interface
type GcpProjectClusterNodepoolConfigAccelerator interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Count() (int64, error)
	Type() (string, error)
	GpuPartitionSize() (string, error)
	GpuSharingConfig() (GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig, error)
}

// mqlGcpProjectClusterNodepoolConfigAccelerator for the gcp.project.cluster.nodepool.config.accelerator resource
type mqlGcpProjectClusterNodepoolConfigAccelerator struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.accelerator resource
func newGcpProjectClusterNodepoolConfigAccelerator(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigAccelerator{runtime.NewResource("gcp.project.cluster.nodepool.config.accelerator")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "count":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"count\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "gpuPartitionSize":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"gpuPartitionSize\" argument has the wrong type (expected type \"string\")")
			}
		case "gpuSharingConfig":
			if _, ok := val.(GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"gpuSharingConfig\" argument has the wrong type (expected type \"GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.accelerator with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("count"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator\" resource without a \"count\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("gpuPartitionSize"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator\" resource without a \"gpuPartitionSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("gpuSharingConfig"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator\" resource without a \"gpuSharingConfig\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator].Register")
	switch name {
	case "id":
		return nil
	case "count":
		return nil
	case "type":
		return nil
	case "gpuPartitionSize":
		return nil
	case "gpuSharingConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator].Field")
	switch name {
	case "id":
		return s.Id()
	case "count":
		return s.Count()
	case "type":
		return s.Type()
	case "gpuPartitionSize":
		return s.GpuPartitionSize()
	case "gpuSharingConfig":
		return s.GpuSharingConfig()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Count accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Count() (int64, error) {
	res, ok := s.Cache.Load("count")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"count\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator\" failed to cast field \"count\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GpuPartitionSize accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) GpuPartitionSize() (string, error) {
	res, ok := s.Cache.Load("gpuPartitionSize")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"gpuPartitionSize\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator\" failed to cast field \"gpuPartitionSize\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GpuSharingConfig accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) GpuSharingConfig() (GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig, error) {
	res, ok := s.Cache.Load("gpuSharingConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config.accelerator\" failed: no value provided for static field \"gpuSharingConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator\" failed to cast field \"gpuSharingConfig\" to the right type (GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAccelerator) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator].Compute")
	switch name {
	case "id":
		return nil
	case "count":
		return nil
	case "type":
		return nil
	case "gpuPartitionSize":
		return nil
	case "gpuSharingConfig":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator\" resource")
	}
}

// GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig resource interface
type GcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	MaxSharedClientsPerGpu() (int64, error)
	Strategy() (string, error)
}

// mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig for the gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig resource
type mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig resource
func newGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "maxSharedClientsPerGpu":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"maxSharedClientsPerGpu\" argument has the wrong type (expected type \"int64\")")
			}
		case "strategy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"strategy\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxSharedClientsPerGpu"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"maxSharedClientsPerGpu\". This field is required.")
	}
	if _, ok := s.Cache.Load("strategy"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource without a \"strategy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig].Register")
	switch name {
	case "id":
		return nil
	case "maxSharedClientsPerGpu":
		return nil
	case "strategy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "maxSharedClientsPerGpu":
		return s.MaxSharedClientsPerGpu()
	case "strategy":
		return s.Strategy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MaxSharedClientsPerGpu accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) MaxSharedClientsPerGpu() (int64, error) {
	res, ok := s.Cache.Load("maxSharedClientsPerGpu")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"maxSharedClientsPerGpu\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"maxSharedClientsPerGpu\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Strategy accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Strategy() (string, error) {
	res, ok := s.Cache.Load("strategy")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed: no value provided for static field \"strategy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" failed to cast field \"strategy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAcceleratorGpuSharingConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig].Compute")
	switch name {
	case "id":
		return nil
	case "maxSharedClientsPerGpu":
		return nil
	case "strategy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.accelerator.gpuSharingConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigNodeTaint resource interface
type GcpProjectClusterNodepoolConfigNodeTaint interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Key() (string, error)
	Value() (string, error)
	Effect() (string, error)
}

// mqlGcpProjectClusterNodepoolConfigNodeTaint for the gcp.project.cluster.nodepool.config.nodeTaint resource
type mqlGcpProjectClusterNodepoolConfigNodeTaint struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.nodeTaint resource
func newGcpProjectClusterNodepoolConfigNodeTaint(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigNodeTaint{runtime.NewResource("gcp.project.cluster.nodepool.config.nodeTaint")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.nodeTaint\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "key":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.nodeTaint\", its \"key\" argument has the wrong type (expected type \"string\")")
			}
		case "value":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.nodeTaint\", its \"value\" argument has the wrong type (expected type \"string\")")
			}
		case "effect":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.nodeTaint\", its \"effect\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.nodeTaint\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.nodeTaint with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.nodeTaint\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("key"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.nodeTaint\" resource without a \"key\". This field is required.")
	}
	if _, ok := s.Cache.Load("value"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.nodeTaint\" resource without a \"value\". This field is required.")
	}
	if _, ok := s.Cache.Load("effect"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.nodeTaint\" resource without a \"effect\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.nodeTaint].Register")
	switch name {
	case "id":
		return nil
	case "key":
		return nil
	case "value":
		return nil
	case "effect":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.nodeTaint].Field")
	switch name {
	case "id":
		return s.Id()
	case "key":
		return s.Key()
	case "value":
		return s.Value()
	case "effect":
		return s.Effect()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Key accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Key() (string, error) {
	res, ok := s.Cache.Load("key")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"key\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed to cast field \"key\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Value accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Value() (string, error) {
	res, ok := s.Cache.Load("value")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"value\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed to cast field \"value\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Effect accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Effect() (string, error) {
	res, ok := s.Cache.Load("effect")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed: no value provided for static field \"effect\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.nodeTaint\" failed to cast field \"effect\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigNodeTaint) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.nodeTaint].Compute")
	switch name {
	case "id":
		return nil
	case "key":
		return nil
	case "value":
		return nil
	case "effect":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.nodeTaint\" resource")
	}
}

// GcpProjectClusterNodepoolConfigSandboxConfig resource interface
type GcpProjectClusterNodepoolConfigSandboxConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Type() (string, error)
}

// mqlGcpProjectClusterNodepoolConfigSandboxConfig for the gcp.project.cluster.nodepool.config.sandboxConfig resource
type mqlGcpProjectClusterNodepoolConfigSandboxConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.sandboxConfig resource
func newGcpProjectClusterNodepoolConfigSandboxConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigSandboxConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.sandboxConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.sandboxConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.sandboxConfig\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.sandboxConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.sandboxConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.sandboxConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.sandboxConfig\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.sandboxConfig].Register")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.sandboxConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.sandboxConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.sandboxConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.sandboxConfig\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.sandboxConfig\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigSandboxConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.sandboxConfig].Compute")
	switch name {
	case "id":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.sandboxConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigShieldedInstanceConfig resource interface
type GcpProjectClusterNodepoolConfigShieldedInstanceConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	EnableSecureBoot() (bool, error)
	EnableIntegrityMonitoring() (bool, error)
}

// mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig for the gcp.project.cluster.nodepool.config.shieldedInstanceConfig resource
type mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.shieldedInstanceConfig resource
func newGcpProjectClusterNodepoolConfigShieldedInstanceConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.shieldedInstanceConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enableSecureBoot":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\", its \"enableSecureBoot\" argument has the wrong type (expected type \"bool\")")
			}
		case "enableIntegrityMonitoring":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\", its \"enableIntegrityMonitoring\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.shieldedInstanceConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableSecureBoot"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"enableSecureBoot\". This field is required.")
	}
	if _, ok := s.Cache.Load("enableIntegrityMonitoring"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource without a \"enableIntegrityMonitoring\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.shieldedInstanceConfig].Register")
	switch name {
	case "id":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.shieldedInstanceConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enableSecureBoot":
		return s.EnableSecureBoot()
	case "enableIntegrityMonitoring":
		return s.EnableIntegrityMonitoring()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EnableSecureBoot accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) EnableSecureBoot() (bool, error) {
	res, ok := s.Cache.Load("enableSecureBoot")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"enableSecureBoot\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"enableSecureBoot\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// EnableIntegrityMonitoring accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) EnableIntegrityMonitoring() (bool, error) {
	res, ok := s.Cache.Load("enableIntegrityMonitoring")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed: no value provided for static field \"enableIntegrityMonitoring\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" failed to cast field \"enableIntegrityMonitoring\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigShieldedInstanceConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.shieldedInstanceConfig].Compute")
	switch name {
	case "id":
		return nil
	case "enableSecureBoot":
		return nil
	case "enableIntegrityMonitoring":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.shieldedInstanceConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigLinuxNodeConfig resource interface
type GcpProjectClusterNodepoolConfigLinuxNodeConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Sysctls() (map[string]interface{}, error)
}

// mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig for the gcp.project.cluster.nodepool.config.linuxNodeConfig resource
type mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.linuxNodeConfig resource
func newGcpProjectClusterNodepoolConfigLinuxNodeConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.linuxNodeConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.linuxNodeConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "sysctls":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.linuxNodeConfig\", its \"sysctls\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.linuxNodeConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.linuxNodeConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.linuxNodeConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("sysctls"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.linuxNodeConfig\" resource without a \"sysctls\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.linuxNodeConfig].Register")
	switch name {
	case "id":
		return nil
	case "sysctls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.linuxNodeConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "sysctls":
		return s.Sysctls()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.linuxNodeConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.linuxNodeConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Sysctls accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Sysctls() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("sysctls")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.cluster.nodepool.config.linuxNodeConfig\" failed: no value provided for static field \"sysctls\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.cluster.nodepool.config.linuxNodeConfig\" failed to cast field \"sysctls\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigLinuxNodeConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.linuxNodeConfig].Compute")
	switch name {
	case "id":
		return nil
	case "sysctls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.linuxNodeConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigKubeletConfig resource interface
type GcpProjectClusterNodepoolConfigKubeletConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CpuManagerPolicy() (string, error)
	CpuCfsQuotaPeriod() (string, error)
	PodPidsLimit() (int64, error)
}

// mqlGcpProjectClusterNodepoolConfigKubeletConfig for the gcp.project.cluster.nodepool.config.kubeletConfig resource
type mqlGcpProjectClusterNodepoolConfigKubeletConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.kubeletConfig resource
func newGcpProjectClusterNodepoolConfigKubeletConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigKubeletConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.kubeletConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.kubeletConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuManagerPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.kubeletConfig\", its \"cpuManagerPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuCfsQuotaPeriod":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.kubeletConfig\", its \"cpuCfsQuotaPeriod\" argument has the wrong type (expected type \"string\")")
			}
		case "podPidsLimit":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.kubeletConfig\", its \"podPidsLimit\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.kubeletConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.kubeletConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuManagerPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource without a \"cpuManagerPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuCfsQuotaPeriod"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource without a \"cpuCfsQuotaPeriod\". This field is required.")
	}
	if _, ok := s.Cache.Load("podPidsLimit"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource without a \"podPidsLimit\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.kubeletConfig].Register")
	switch name {
	case "id":
		return nil
	case "cpuManagerPolicy":
		return nil
	case "cpuCfsQuotaPeriod":
		return nil
	case "podPidsLimit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.kubeletConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "cpuManagerPolicy":
		return s.CpuManagerPolicy()
	case "cpuCfsQuotaPeriod":
		return s.CpuCfsQuotaPeriod()
	case "podPidsLimit":
		return s.PodPidsLimit()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuManagerPolicy accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) CpuManagerPolicy() (string, error) {
	res, ok := s.Cache.Load("cpuManagerPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"cpuManagerPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed to cast field \"cpuManagerPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuCfsQuotaPeriod accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) CpuCfsQuotaPeriod() (string, error) {
	res, ok := s.Cache.Load("cpuCfsQuotaPeriod")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"cpuCfsQuotaPeriod\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed to cast field \"cpuCfsQuotaPeriod\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PodPidsLimit accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) PodPidsLimit() (int64, error) {
	res, ok := s.Cache.Load("podPidsLimit")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed: no value provided for static field \"podPidsLimit\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config.kubeletConfig\" failed to cast field \"podPidsLimit\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigKubeletConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.kubeletConfig].Compute")
	switch name {
	case "id":
		return nil
	case "cpuManagerPolicy":
		return nil
	case "cpuCfsQuotaPeriod":
		return nil
	case "podPidsLimit":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.kubeletConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigGcfsConfig resource interface
type GcpProjectClusterNodepoolConfigGcfsConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectClusterNodepoolConfigGcfsConfig for the gcp.project.cluster.nodepool.config.gcfsConfig resource
type mqlGcpProjectClusterNodepoolConfigGcfsConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.gcfsConfig resource
func newGcpProjectClusterNodepoolConfigGcfsConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigGcfsConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.gcfsConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gcfsConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gcfsConfig\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gcfsConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.gcfsConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.gcfsConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.gcfsConfig\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gcfsConfig].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gcfsConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.gcfsConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.gcfsConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config.gcfsConfig\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config.gcfsConfig\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGcfsConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gcfsConfig].Compute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gcfsConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigAdvancedMachineFeatures resource interface
type GcpProjectClusterNodepoolConfigAdvancedMachineFeatures interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ThreadsPerCore() (int64, error)
}

// mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures for the gcp.project.cluster.nodepool.config.advancedMachineFeatures resource
type mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.advancedMachineFeatures resource
func newGcpProjectClusterNodepoolConfigAdvancedMachineFeatures(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures{runtime.NewResource("gcp.project.cluster.nodepool.config.advancedMachineFeatures")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "threadsPerCore":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\", its \"threadsPerCore\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.advancedMachineFeatures with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("threadsPerCore"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" resource without a \"threadsPerCore\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.advancedMachineFeatures].Register")
	switch name {
	case "id":
		return nil
	case "threadsPerCore":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.advancedMachineFeatures].Field")
	switch name {
	case "id":
		return s.Id()
	case "threadsPerCore":
		return s.ThreadsPerCore()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ThreadsPerCore accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) ThreadsPerCore() (int64, error) {
	res, ok := s.Cache.Load("threadsPerCore")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" failed: no value provided for static field \"threadsPerCore\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" failed to cast field \"threadsPerCore\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigAdvancedMachineFeatures) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.advancedMachineFeatures].Compute")
	switch name {
	case "id":
		return nil
	case "threadsPerCore":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.advancedMachineFeatures\" resource")
	}
}

// GcpProjectClusterNodepoolConfigGvnicConfig resource interface
type GcpProjectClusterNodepoolConfigGvnicConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectClusterNodepoolConfigGvnicConfig for the gcp.project.cluster.nodepool.config.gvnicConfig resource
type mqlGcpProjectClusterNodepoolConfigGvnicConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.gvnicConfig resource
func newGcpProjectClusterNodepoolConfigGvnicConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigGvnicConfig{runtime.NewResource("gcp.project.cluster.nodepool.config.gvnicConfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gvnicConfig\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gvnicConfig\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.gvnicConfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.gvnicConfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.gvnicConfig\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.gvnicConfig\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gvnicConfig].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gvnicConfig].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.gvnicConfig\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.gvnicConfig\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config.gvnicConfig\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config.gvnicConfig\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigGvnicConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.gvnicConfig].Compute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.gvnicConfig\" resource")
	}
}

// GcpProjectClusterNodepoolConfigConfidentialNodes resource interface
type GcpProjectClusterNodepoolConfigConfidentialNodes interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Enabled() (bool, error)
}

// mqlGcpProjectClusterNodepoolConfigConfidentialNodes for the gcp.project.cluster.nodepool.config.confidentialNodes resource
type mqlGcpProjectClusterNodepoolConfigConfidentialNodes struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.cluster.nodepool.config.confidentialNodes resource
func newGcpProjectClusterNodepoolConfigConfidentialNodes(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectClusterNodepoolConfigConfidentialNodes{runtime.NewResource("gcp.project.cluster.nodepool.config.confidentialNodes")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.confidentialNodes\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "enabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.confidentialNodes\", its \"enabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.cluster.nodepool.config.confidentialNodes\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.cluster.nodepool.config.confidentialNodes with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.confidentialNodes\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("enabled"); !ok {
		return errors.New("Initialized \"gcp.project.cluster.nodepool.config.confidentialNodes\" resource without a \"enabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.confidentialNodes].Register")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.confidentialNodes].Field")
	switch name {
	case "id":
		return s.Id()
	case "enabled":
		return s.Enabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.cluster.nodepool.config.confidentialNodes\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.cluster.nodepool.config.confidentialNodes\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Enabled accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Enabled() (bool, error) {
	res, ok := s.Cache.Load("enabled")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.cluster.nodepool.config.confidentialNodes\" failed: no value provided for static field \"enabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.cluster.nodepool.config.confidentialNodes\" failed to cast field \"enabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectClusterNodepoolConfigConfidentialNodes) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.cluster.nodepool.config.confidentialNodes].Compute")
	switch name {
	case "id":
		return nil
	case "enabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.cluster.nodepool.config.confidentialNodes\" resource")
	}
}

// GcpProjectPubsubService resource interface
type GcpProjectPubsubService interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Topics() ([]interface{}, error)
	Subscriptions() ([]interface{}, error)
	Snapshots() ([]interface{}, error)
}

// mqlGcpProjectPubsubService for the gcp.project.pubsubService resource
type mqlGcpProjectPubsubService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService resource
func newGcpProjectPubsubService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubService{runtime.NewResource("gcp.project.pubsubService")}
	var existing GcpProjectPubsubService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "topics":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"topics\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "subscriptions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"subscriptions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "snapshots":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"snapshots\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].Register")
	switch name {
	case "projectId":
		return nil
	case "topics":
		return nil
	case "subscriptions":
		return nil
	case "snapshots":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "topics":
		return s.Topics()
	case "subscriptions":
		return s.Subscriptions()
	case "snapshots":
		return s.Snapshots()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topics accessor autogenerated
func (s *mqlGcpProjectPubsubService) Topics() ([]interface{}, error) {
	res, ok := s.Cache.Load("topics")
	if !ok || !res.Valid {
		if err := s.ComputeTopics(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("topics")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"topics\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "topics")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"topics\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Subscriptions accessor autogenerated
func (s *mqlGcpProjectPubsubService) Subscriptions() ([]interface{}, error) {
	res, ok := s.Cache.Load("subscriptions")
	if !ok || !res.Valid {
		if err := s.ComputeSubscriptions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("subscriptions")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"subscriptions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "subscriptions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"subscriptions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Snapshots accessor autogenerated
func (s *mqlGcpProjectPubsubService) Snapshots() ([]interface{}, error) {
	res, ok := s.Cache.Load("snapshots")
	if !ok || !res.Valid {
		if err := s.ComputeSnapshots(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("snapshots")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService\" calculated \"snapshots\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "snapshots")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService\" failed to cast field \"snapshots\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubService) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService].Compute")
	switch name {
	case "projectId":
		return nil
	case "topics":
		return s.ComputeTopics()
	case "subscriptions":
		return s.ComputeSubscriptions()
	case "snapshots":
		return s.ComputeSnapshots()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService\" resource")
	}
}

// ComputeTopics computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeTopics() error {
	var err error
	if _, ok := s.Cache.Load("topics"); ok {
		return nil
	}
	vres, err := s.GetTopics()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("topics", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSubscriptions computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeSubscriptions() error {
	var err error
	if _, ok := s.Cache.Load("subscriptions"); ok {
		return nil
	}
	vres, err := s.GetSubscriptions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("subscriptions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSnapshots computer autogenerated
func (s *mqlGcpProjectPubsubService) ComputeSnapshots() error {
	var err error
	if _, ok := s.Cache.Load("snapshots"); ok {
		return nil
	}
	vres, err := s.GetSnapshots()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("snapshots", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceTopic resource interface
type GcpProjectPubsubServiceTopic interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Config() (GcpProjectPubsubServiceTopicConfig, error)
}

// mqlGcpProjectPubsubServiceTopic for the gcp.project.pubsubService.topic resource
type mqlGcpProjectPubsubServiceTopic struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopic) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic resource
func newGcpProjectPubsubServiceTopic(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopic{runtime.NewResource("gcp.project.pubsubService.topic")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectPubsubServiceTopicConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"config\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopicConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopic) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Config() (GcpProjectPubsubServiceTopicConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		if err := s.ComputeConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("config")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService.topic\" calculated \"config\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "config")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopicConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic\" failed to cast field \"config\" to the right type (GcpProjectPubsubServiceTopicConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic].Compute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return s.ComputeConfig()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic\" resource")
	}
}

// ComputeConfig computer autogenerated
func (s *mqlGcpProjectPubsubServiceTopic) ComputeConfig() error {
	var err error
	if _, ok := s.Cache.Load("config"); ok {
		return nil
	}
	vres, err := s.GetConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("config", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceTopicConfig resource interface
type GcpProjectPubsubServiceTopicConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	TopicName() (string, error)
	Labels() (map[string]interface{}, error)
	KmsKeyName() (string, error)
	MessageStoragePolicy() (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy, error)
}

// mqlGcpProjectPubsubServiceTopicConfig for the gcp.project.pubsubService.topic.config resource
type mqlGcpProjectPubsubServiceTopicConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopicConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic.config resource
func newGcpProjectPubsubServiceTopicConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopicConfig{runtime.NewResource("gcp.project.pubsubService.topic.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "topicName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"topicName\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "kmsKeyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"kmsKeyName\" argument has the wrong type (expected type \"string\")")
			}
		case "messageStoragePolicy":
			if _, ok := val.(GcpProjectPubsubServiceTopicConfigMessagestoragepolicy); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"messageStoragePolicy\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopicConfigMessagestoragepolicy\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopicConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("topicName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"topicName\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("kmsKeyName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"kmsKeyName\". This field is required.")
	}
	if _, ok := s.Cache.Load("messageStoragePolicy"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config\" resource without a \"messageStoragePolicy\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].Register")
	switch name {
	case "projectId":
		return nil
	case "topicName":
		return nil
	case "labels":
		return nil
	case "kmsKeyName":
		return nil
	case "messageStoragePolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "topicName":
		return s.TopicName()
	case "labels":
		return s.Labels()
	case "kmsKeyName":
		return s.KmsKeyName()
	case "messageStoragePolicy":
		return s.MessageStoragePolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// TopicName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) TopicName() (string, error) {
	res, ok := s.Cache.Load("topicName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"topicName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"topicName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// KmsKeyName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) KmsKeyName() (string, error) {
	res, ok := s.Cache.Load("kmsKeyName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"kmsKeyName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"kmsKeyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// MessageStoragePolicy accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) MessageStoragePolicy() (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy, error) {
	res, ok := s.Cache.Load("messageStoragePolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config\" failed: no value provided for static field \"messageStoragePolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopicConfigMessagestoragepolicy)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config\" failed to cast field \"messageStoragePolicy\" to the right type (GcpProjectPubsubServiceTopicConfigMessagestoragepolicy): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config].Compute")
	switch name {
	case "projectId":
		return nil
	case "topicName":
		return nil
	case "labels":
		return nil
	case "kmsKeyName":
		return nil
	case "messageStoragePolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config\" resource")
	}
}

// GcpProjectPubsubServiceTopicConfigMessagestoragepolicy resource interface
type GcpProjectPubsubServiceTopicConfigMessagestoragepolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ConfigId() (string, error)
	AllowedPersistenceRegions() ([]interface{}, error)
}

// mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy for the gcp.project.pubsubService.topic.config.messagestoragepolicy resource
type mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.topic.config.messagestoragepolicy resource
func newGcpProjectPubsubServiceTopicConfigMessagestoragepolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy{runtime.NewResource("gcp.project.pubsubService.topic.config.messagestoragepolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "configId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"configId\" argument has the wrong type (expected type \"string\")")
			}
		case "allowedPersistenceRegions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"allowedPersistenceRegions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.topic.config.messagestoragepolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.topic.config.messagestoragepolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("configId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource without a \"configId\". This field is required.")
	}
	if _, ok := s.Cache.Load("allowedPersistenceRegions"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource without a \"allowedPersistenceRegions\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].Register")
	switch name {
	case "configId":
		return nil
	case "allowedPersistenceRegions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].Field")
	switch name {
	case "configId":
		return s.ConfigId()
	case "allowedPersistenceRegions":
		return s.AllowedPersistenceRegions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// ConfigId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) ConfigId() (string, error) {
	res, ok := s.Cache.Load("configId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed: no value provided for static field \"configId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed to cast field \"configId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllowedPersistenceRegions accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) AllowedPersistenceRegions() ([]interface{}, error) {
	res, ok := s.Cache.Load("allowedPersistenceRegions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed: no value provided for static field \"allowedPersistenceRegions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.topic.config.messagestoragepolicy\" failed to cast field \"allowedPersistenceRegions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.topic.config.messagestoragepolicy].Compute")
	switch name {
	case "configId":
		return nil
	case "allowedPersistenceRegions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.topic.config.messagestoragepolicy\" resource")
	}
}

// GcpProjectPubsubServiceSubscription resource interface
type GcpProjectPubsubServiceSubscription interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Config() (GcpProjectPubsubServiceSubscriptionConfig, error)
}

// mqlGcpProjectPubsubServiceSubscription for the gcp.project.pubsubService.subscription resource
type mqlGcpProjectPubsubServiceSubscription struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscription) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription resource
func newGcpProjectPubsubServiceSubscription(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscription{runtime.NewResource("gcp.project.pubsubService.subscription")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "config":
			if _, ok := val.(GcpProjectPubsubServiceSubscriptionConfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"config\" argument has the wrong type (expected type \"GcpProjectPubsubServiceSubscriptionConfig\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscription) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "config":
		return s.Config()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Config accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Config() (GcpProjectPubsubServiceSubscriptionConfig, error) {
	res, ok := s.Cache.Load("config")
	if !ok || !res.Valid {
		if err := s.ComputeConfig(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("config")
		if !ok {
			return nil, errors.New("\"gcp.project.pubsubService.subscription\" calculated \"config\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "config")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceSubscriptionConfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription\" failed to cast field \"config\" to the right type (GcpProjectPubsubServiceSubscriptionConfig): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription].Compute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "config":
		return s.ComputeConfig()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription\" resource")
	}
}

// ComputeConfig computer autogenerated
func (s *mqlGcpProjectPubsubServiceSubscription) ComputeConfig() error {
	var err error
	if _, ok := s.Cache.Load("config"); ok {
		return nil
	}
	vres, err := s.GetConfig()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("config", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectPubsubServiceSubscriptionConfig resource interface
type GcpProjectPubsubServiceSubscriptionConfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	SubscriptionName() (string, error)
	Topic() (GcpProjectPubsubServiceTopic, error)
	PushConfig() (GcpProjectPubsubServiceSubscriptionConfigPushconfig, error)
	AckDeadline() (*time.Time, error)
	RetainAckedMessages() (bool, error)
	RetentionDuration() (*time.Time, error)
	ExpirationPolicy() (*time.Time, error)
	Labels() (map[string]interface{}, error)
}

// mqlGcpProjectPubsubServiceSubscriptionConfig for the gcp.project.pubsubService.subscription.config resource
type mqlGcpProjectPubsubServiceSubscriptionConfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription.config resource
func newGcpProjectPubsubServiceSubscriptionConfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscriptionConfig{runtime.NewResource("gcp.project.pubsubService.subscription.config")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "subscriptionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"subscriptionName\" argument has the wrong type (expected type \"string\")")
			}
		case "topic":
			if _, ok := val.(GcpProjectPubsubServiceTopic); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"topic\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopic\")")
			}
		case "pushConfig":
			if _, ok := val.(GcpProjectPubsubServiceSubscriptionConfigPushconfig); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"pushConfig\" argument has the wrong type (expected type \"GcpProjectPubsubServiceSubscriptionConfigPushconfig\")")
			}
		case "ackDeadline":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"ackDeadline\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "retainAckedMessages":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"retainAckedMessages\" argument has the wrong type (expected type \"bool\")")
			}
		case "retentionDuration":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"retentionDuration\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "expirationPolicy":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"expirationPolicy\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription.config with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("subscriptionName"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"subscriptionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("topic"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"topic\". This field is required.")
	}
	if _, ok := s.Cache.Load("pushConfig"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"pushConfig\". This field is required.")
	}
	if _, ok := s.Cache.Load("ackDeadline"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"ackDeadline\". This field is required.")
	}
	if _, ok := s.Cache.Load("retainAckedMessages"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"retainAckedMessages\". This field is required.")
	}
	if _, ok := s.Cache.Load("retentionDuration"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"retentionDuration\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationPolicy"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"expirationPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config\" resource without a \"labels\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].Register")
	switch name {
	case "projectId":
		return nil
	case "subscriptionName":
		return nil
	case "topic":
		return nil
	case "pushConfig":
		return nil
	case "ackDeadline":
		return nil
	case "retainAckedMessages":
		return nil
	case "retentionDuration":
		return nil
	case "expirationPolicy":
		return nil
	case "labels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "subscriptionName":
		return s.SubscriptionName()
	case "topic":
		return s.Topic()
	case "pushConfig":
		return s.PushConfig()
	case "ackDeadline":
		return s.AckDeadline()
	case "retainAckedMessages":
		return s.RetainAckedMessages()
	case "retentionDuration":
		return s.RetentionDuration()
	case "expirationPolicy":
		return s.ExpirationPolicy()
	case "labels":
		return s.Labels()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SubscriptionName accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) SubscriptionName() (string, error) {
	res, ok := s.Cache.Load("subscriptionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"subscriptionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"subscriptionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topic accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Topic() (GcpProjectPubsubServiceTopic, error) {
	res, ok := s.Cache.Load("topic")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"topic\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopic)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"topic\" to the right type (GcpProjectPubsubServiceTopic): %#v", res)
	}
	return tres, nil
}

// PushConfig accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) PushConfig() (GcpProjectPubsubServiceSubscriptionConfigPushconfig, error) {
	res, ok := s.Cache.Load("pushConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"pushConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceSubscriptionConfigPushconfig)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"pushConfig\" to the right type (GcpProjectPubsubServiceSubscriptionConfigPushconfig): %#v", res)
	}
	return tres, nil
}

// AckDeadline accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) AckDeadline() (*time.Time, error) {
	res, ok := s.Cache.Load("ackDeadline")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"ackDeadline\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"ackDeadline\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// RetainAckedMessages accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) RetainAckedMessages() (bool, error) {
	res, ok := s.Cache.Load("retainAckedMessages")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"retainAckedMessages\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"retainAckedMessages\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RetentionDuration accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) RetentionDuration() (*time.Time, error) {
	res, ok := s.Cache.Load("retentionDuration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"retentionDuration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"retentionDuration\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ExpirationPolicy accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) ExpirationPolicy() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationPolicy")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"expirationPolicy\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"expirationPolicy\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config].Compute")
	switch name {
	case "projectId":
		return nil
	case "subscriptionName":
		return nil
	case "topic":
		return nil
	case "pushConfig":
		return nil
	case "ackDeadline":
		return nil
	case "retainAckedMessages":
		return nil
	case "retentionDuration":
		return nil
	case "expirationPolicy":
		return nil
	case "labels":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config\" resource")
	}
}

// GcpProjectPubsubServiceSubscriptionConfigPushconfig resource interface
type GcpProjectPubsubServiceSubscriptionConfigPushconfig interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ConfigId() (string, error)
	Endpoint() (string, error)
	Attributes() (map[string]interface{}, error)
}

// mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig for the gcp.project.pubsubService.subscription.config.pushconfig resource
type mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.subscription.config.pushconfig resource
func newGcpProjectPubsubServiceSubscriptionConfigPushconfig(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig{runtime.NewResource("gcp.project.pubsubService.subscription.config.pushconfig")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "configId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"configId\" argument has the wrong type (expected type \"string\")")
			}
		case "endpoint":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"endpoint\" argument has the wrong type (expected type \"string\")")
			}
		case "attributes":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"attributes\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.subscription.config.pushconfig\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.subscription.config.pushconfig with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("configId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"configId\". This field is required.")
	}
	if _, ok := s.Cache.Load("endpoint"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"endpoint\". This field is required.")
	}
	if _, ok := s.Cache.Load("attributes"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.subscription.config.pushconfig\" resource without a \"attributes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].Register")
	switch name {
	case "configId":
		return nil
	case "endpoint":
		return nil
	case "attributes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].Field")
	switch name {
	case "configId":
		return s.ConfigId()
	case "endpoint":
		return s.Endpoint()
	case "attributes":
		return s.Attributes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// ConfigId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) ConfigId() (string, error) {
	res, ok := s.Cache.Load("configId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"configId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"configId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Endpoint accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Endpoint() (string, error) {
	res, ok := s.Cache.Load("endpoint")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"endpoint\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"endpoint\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attributes accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Attributes() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("attributes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed: no value provided for static field \"attributes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.subscription.config.pushconfig\" failed to cast field \"attributes\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.subscription.config.pushconfig].Compute")
	switch name {
	case "configId":
		return nil
	case "endpoint":
		return nil
	case "attributes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.subscription.config.pushconfig\" resource")
	}
}

// GcpProjectPubsubServiceSnapshot resource interface
type GcpProjectPubsubServiceSnapshot interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Name() (string, error)
	Topic() (GcpProjectPubsubServiceTopic, error)
	Expiration() (*time.Time, error)
}

// mqlGcpProjectPubsubServiceSnapshot for the gcp.project.pubsubService.snapshot resource
type mqlGcpProjectPubsubServiceSnapshot struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectPubsubServiceSnapshot) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.pubsubService.snapshot resource
func newGcpProjectPubsubServiceSnapshot(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectPubsubServiceSnapshot{runtime.NewResource("gcp.project.pubsubService.snapshot")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "topic":
			if _, ok := val.(GcpProjectPubsubServiceTopic); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"topic\" argument has the wrong type (expected type \"GcpProjectPubsubServiceTopic\")")
			}
		case "expiration":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"expiration\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.pubsubService.snapshot\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.pubsubService.snapshot with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectPubsubServiceSnapshot) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("topic"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"topic\". This field is required.")
	}
	if _, ok := s.Cache.Load("expiration"); !ok {
		return errors.New("Initialized \"gcp.project.pubsubService.snapshot\" resource without a \"expiration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].Register")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "topic":
		return nil
	case "expiration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "topic":
		return s.Topic()
	case "expiration":
		return s.Expiration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Topic accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Topic() (GcpProjectPubsubServiceTopic, error) {
	res, ok := s.Cache.Load("topic")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"topic\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectPubsubServiceTopic)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"topic\" to the right type (GcpProjectPubsubServiceTopic): %#v", res)
	}
	return tres, nil
}

// Expiration accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Expiration() (*time.Time, error) {
	res, ok := s.Cache.Load("expiration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.pubsubService.snapshot\" failed: no value provided for static field \"expiration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.pubsubService.snapshot\" failed to cast field \"expiration\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectPubsubServiceSnapshot) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.pubsubService.snapshot].Compute")
	switch name {
	case "projectId":
		return nil
	case "name":
		return nil
	case "topic":
		return nil
	case "expiration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.pubsubService.snapshot\" resource")
	}
}

// GcpProjectKmsService resource interface
type GcpProjectKmsService interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Locations() ([]interface{}, error)
	Keyrings() ([]interface{}, error)
}

// mqlGcpProjectKmsService for the gcp.project.kmsService resource
type mqlGcpProjectKmsService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService resource
func newGcpProjectKmsService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsService{runtime.NewResource("gcp.project.kmsService")}
	var existing GcpProjectKmsService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "locations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"locations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "keyrings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"keyrings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].Register")
	switch name {
	case "projectId":
		return nil
	case "locations":
		return nil
	case "keyrings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "locations":
		return s.Locations()
	case "keyrings":
		return s.Keyrings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectKmsService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Locations accessor autogenerated
func (s *mqlGcpProjectKmsService) Locations() ([]interface{}, error) {
	res, ok := s.Cache.Load("locations")
	if !ok || !res.Valid {
		if err := s.ComputeLocations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("locations")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService\" calculated \"locations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "locations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"locations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Keyrings accessor autogenerated
func (s *mqlGcpProjectKmsService) Keyrings() ([]interface{}, error) {
	res, ok := s.Cache.Load("keyrings")
	if !ok || !res.Valid {
		if err := s.ComputeKeyrings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("keyrings")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService\" calculated \"keyrings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "keyrings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService\" failed to cast field \"keyrings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsService) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService].Compute")
	switch name {
	case "projectId":
		return nil
	case "locations":
		return s.ComputeLocations()
	case "keyrings":
		return s.ComputeKeyrings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService\" resource")
	}
}

// ComputeLocations computer autogenerated
func (s *mqlGcpProjectKmsService) ComputeLocations() error {
	var err error
	if _, ok := s.Cache.Load("locations"); ok {
		return nil
	}
	vres, err := s.GetLocations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("locations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeKeyrings computer autogenerated
func (s *mqlGcpProjectKmsService) ComputeKeyrings() error {
	var err error
	if _, ok := s.Cache.Load("keyrings"); ok {
		return nil
	}
	vres, err := s.GetKeyrings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("keyrings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyring resource interface
type GcpProjectKmsServiceKeyring interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	ResourcePath() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	Location() (string, error)
	Cryptokeys() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyring for the gcp.project.kmsService.keyring resource
type mqlGcpProjectKmsServiceKeyring struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyring) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring resource
func newGcpProjectKmsServiceKeyring(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyring{runtime.NewResource("gcp.project.kmsService.keyring")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "cryptokeys":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"cryptokeys\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyring) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring\" resource without a \"location\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].Register")
	switch name {
	case "projectId":
		return nil
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "location":
		return nil
	case "cryptokeys":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "location":
		return s.Location()
	case "cryptokeys":
		return s.Cryptokeys()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Cryptokeys accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Cryptokeys() ([]interface{}, error) {
	res, ok := s.Cache.Load("cryptokeys")
	if !ok || !res.Valid {
		if err := s.ComputeCryptokeys(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cryptokeys")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService.keyring\" calculated \"cryptokeys\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cryptokeys")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring\" failed to cast field \"cryptokeys\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring].Compute")
	switch name {
	case "projectId":
		return nil
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "location":
		return nil
	case "cryptokeys":
		return s.ComputeCryptokeys()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring\" resource")
	}
}

// ComputeCryptokeys computer autogenerated
func (s *mqlGcpProjectKmsServiceKeyring) ComputeCryptokeys() error {
	var err error
	if _, ok := s.Cache.Load("cryptokeys"); ok {
		return nil
	}
	vres, err := s.GetCryptokeys()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cryptokeys", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyringCryptokey resource interface
type GcpProjectKmsServiceKeyringCryptokey interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Name() (string, error)
	Primary() (GcpProjectKmsServiceKeyringCryptokeyVersion, error)
	Purpose() (string, error)
	Versions() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokey for the gcp.project.kmsService.keyring.cryptokey resource
type mqlGcpProjectKmsServiceKeyringCryptokey struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey resource
func newGcpProjectKmsServiceKeyringCryptokey(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokey{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "primary":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersion); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"primary\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersion\")")
			}
		case "purpose":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"purpose\" argument has the wrong type (expected type \"string\")")
			}
		case "versions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"versions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("primary"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"primary\". This field is required.")
	}
	if _, ok := s.Cache.Load("purpose"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey\" resource without a \"purpose\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].Register")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "primary":
		return nil
	case "purpose":
		return nil
	case "versions":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "primary":
		return s.Primary()
	case "purpose":
		return s.Purpose()
	case "versions":
		return s.Versions()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Primary accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Primary() (GcpProjectKmsServiceKeyringCryptokeyVersion, error) {
	res, ok := s.Cache.Load("primary")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"primary\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersion)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"primary\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersion): %#v", res)
	}
	return tres, nil
}

// Purpose accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Purpose() (string, error) {
	res, ok := s.Cache.Load("purpose")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey\" failed: no value provided for static field \"purpose\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"purpose\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Versions accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Versions() ([]interface{}, error) {
	res, ok := s.Cache.Load("versions")
	if !ok || !res.Valid {
		if err := s.ComputeVersions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("versions")
		if !ok {
			return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey\" calculated \"versions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "versions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey\" failed to cast field \"versions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey].Compute")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "primary":
		return nil
	case "purpose":
		return nil
	case "versions":
		return s.ComputeVersions()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey\" resource")
	}
}

// ComputeVersions computer autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokey) ComputeVersions() error {
	var err error
	if _, ok := s.Cache.Load("versions"); ok {
		return nil
	}
	vres, err := s.GetVersions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("versions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProjectKmsServiceKeyringCryptokeyVersion resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersion interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Name() (string, error)
	State() (string, error)
	ProtectionLevel() (string, error)
	Algorithm() (string, error)
	Attestation() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation, error)
	Created() (*time.Time, error)
	Generated() (*time.Time, error)
	Destroyed() (*time.Time, error)
	DestroyEventTime() (*time.Time, error)
	ImportJob() (string, error)
	ImportTime() (*time.Time, error)
	ImportFailureReason() (string, error)
	ExternalProtectionLevelOptions() (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions, error)
	ReimportEligible() (bool, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersion for the gcp.project.kmsService.keyring.cryptokey.version resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version resource
func newGcpProjectKmsServiceKeyringCryptokeyVersion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersion{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "protectionLevel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"protectionLevel\" argument has the wrong type (expected type \"string\")")
			}
		case "algorithm":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"algorithm\" argument has the wrong type (expected type \"string\")")
			}
		case "attestation":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestation); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"attestation\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionAttestation\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "generated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"generated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "destroyed":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"destroyed\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "destroyEventTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"destroyEventTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "importJob":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importJob\" argument has the wrong type (expected type \"string\")")
			}
		case "importTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "importFailureReason":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"importFailureReason\" argument has the wrong type (expected type \"string\")")
			}
		case "externalProtectionLevelOptions":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"externalProtectionLevelOptions\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions\")")
			}
		case "reimportEligible":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"reimportEligible\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("protectionLevel"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"protectionLevel\". This field is required.")
	}
	if _, ok := s.Cache.Load("algorithm"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"algorithm\". This field is required.")
	}
	if _, ok := s.Cache.Load("attestation"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"attestation\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("generated"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"generated\". This field is required.")
	}
	if _, ok := s.Cache.Load("destroyed"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"destroyed\". This field is required.")
	}
	if _, ok := s.Cache.Load("destroyEventTime"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"destroyEventTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("importJob"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importJob\". This field is required.")
	}
	if _, ok := s.Cache.Load("importTime"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("importFailureReason"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"importFailureReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalProtectionLevelOptions"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"externalProtectionLevelOptions\". This field is required.")
	}
	if _, ok := s.Cache.Load("reimportEligible"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version\" resource without a \"reimportEligible\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].Register")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "state":
		return nil
	case "protectionLevel":
		return nil
	case "algorithm":
		return nil
	case "attestation":
		return nil
	case "created":
		return nil
	case "generated":
		return nil
	case "destroyed":
		return nil
	case "destroyEventTime":
		return nil
	case "importJob":
		return nil
	case "importTime":
		return nil
	case "importFailureReason":
		return nil
	case "externalProtectionLevelOptions":
		return nil
	case "reimportEligible":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "name":
		return s.Name()
	case "state":
		return s.State()
	case "protectionLevel":
		return s.ProtectionLevel()
	case "algorithm":
		return s.Algorithm()
	case "attestation":
		return s.Attestation()
	case "created":
		return s.Created()
	case "generated":
		return s.Generated()
	case "destroyed":
		return s.Destroyed()
	case "destroyEventTime":
		return s.DestroyEventTime()
	case "importJob":
		return s.ImportJob()
	case "importTime":
		return s.ImportTime()
	case "importFailureReason":
		return s.ImportFailureReason()
	case "externalProtectionLevelOptions":
		return s.ExternalProtectionLevelOptions()
	case "reimportEligible":
		return s.ReimportEligible()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProtectionLevel accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ProtectionLevel() (string, error) {
	res, ok := s.Cache.Load("protectionLevel")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"protectionLevel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"protectionLevel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Algorithm accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Algorithm() (string, error) {
	res, ok := s.Cache.Load("algorithm")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"algorithm\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"algorithm\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Attestation accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Attestation() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation, error) {
	res, ok := s.Cache.Load("attestation")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"attestation\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestation)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"attestation\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionAttestation): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Generated accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Generated() (*time.Time, error) {
	res, ok := s.Cache.Load("generated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"generated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"generated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Destroyed accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Destroyed() (*time.Time, error) {
	res, ok := s.Cache.Load("destroyed")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"destroyed\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"destroyed\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// DestroyEventTime accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) DestroyEventTime() (*time.Time, error) {
	res, ok := s.Cache.Load("destroyEventTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"destroyEventTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"destroyEventTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ImportJob accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportJob() (string, error) {
	res, ok := s.Cache.Load("importJob")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importJob\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importJob\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ImportTime accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportTime() (*time.Time, error) {
	res, ok := s.Cache.Load("importTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ImportFailureReason accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ImportFailureReason() (string, error) {
	res, ok := s.Cache.Load("importFailureReason")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"importFailureReason\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"importFailureReason\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExternalProtectionLevelOptions accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ExternalProtectionLevelOptions() (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions, error) {
	res, ok := s.Cache.Load("externalProtectionLevelOptions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"externalProtectionLevelOptions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"externalProtectionLevelOptions\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions): %#v", res)
	}
	return tres, nil
}

// ReimportEligible accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) ReimportEligible() (bool, error) {
	res, ok := s.Cache.Load("reimportEligible")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version\" failed: no value provided for static field \"reimportEligible\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version\" failed to cast field \"reimportEligible\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version].Compute")
	switch name {
	case "resourcePath":
		return nil
	case "name":
		return nil
	case "state":
		return nil
	case "protectionLevel":
		return nil
	case "algorithm":
		return nil
	case "attestation":
		return nil
	case "created":
		return nil
	case "generated":
		return nil
	case "destroyed":
		return nil
	case "destroyEventTime":
		return nil
	case "importJob":
		return nil
	case "importTime":
		return nil
	case "importFailureReason":
		return nil
	case "externalProtectionLevelOptions":
		return nil
	case "reimportEligible":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionAttestation resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionAttestation interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	Format() (string, error)
	CertificateChains() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation for the gcp.project.kmsService.keyring.cryptokey.version.attestation resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.attestation resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionAttestation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.attestation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "format":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"format\" argument has the wrong type (expected type \"string\")")
			}
		case "certificateChains":
			if _, ok := val.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"certificateChains\" argument has the wrong type (expected type \"GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.attestation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("format"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"format\". This field is required.")
	}
	if _, ok := s.Cache.Load("certificateChains"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource without a \"certificateChains\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "format":
		return nil
	case "certificateChains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "format":
		return s.Format()
	case "certificateChains":
		return s.CertificateChains()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Format accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Format() (string, error) {
	res, ok := s.Cache.Load("format")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"format\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"format\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CertificateChains accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) CertificateChains() (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains, error) {
	res, ok := s.Cache.Load("certificateChains")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed: no value provided for static field \"certificateChains\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation\" failed to cast field \"certificateChains\" to the right type (GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation].Compute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "format":
		return nil
	case "certificateChains":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	CaviumCerts() ([]interface{}, error)
	GoogleCardCerts() ([]interface{}, error)
	GooglePartitionCerts() ([]interface{}, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains for the gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "caviumCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"caviumCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "googleCardCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"googleCardCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "googlePartitionCerts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"googlePartitionCerts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("caviumCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"caviumCerts\". This field is required.")
	}
	if _, ok := s.Cache.Load("googleCardCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"googleCardCerts\". This field is required.")
	}
	if _, ok := s.Cache.Load("googlePartitionCerts"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource without a \"googlePartitionCerts\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "caviumCerts":
		return nil
	case "googleCardCerts":
		return nil
	case "googlePartitionCerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "caviumCerts":
		return s.CaviumCerts()
	case "googleCardCerts":
		return s.GoogleCardCerts()
	case "googlePartitionCerts":
		return s.GooglePartitionCerts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CaviumCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) CaviumCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("caviumCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"caviumCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"caviumCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// GoogleCardCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GoogleCardCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("googleCardCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"googleCardCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"googleCardCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// GooglePartitionCerts accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GooglePartitionCerts() ([]interface{}, error) {
	res, ok := s.Cache.Load("googlePartitionCerts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed: no value provided for static field \"googlePartitionCerts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" failed to cast field \"googlePartitionCerts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains].Compute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "caviumCerts":
		return nil
	case "googleCardCerts":
		return nil
	case "googlePartitionCerts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains\" resource")
	}
}

// GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions resource interface
type GcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CryptoKeyVersionName() (string, error)
	ExternalKeyUri() (string, error)
	EkmConnectionKeyPath() (string, error)
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions for the gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions resource
func newGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions{runtime.NewResource("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "cryptoKeyVersionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"cryptoKeyVersionName\" argument has the wrong type (expected type \"string\")")
			}
		case "externalKeyUri":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"externalKeyUri\" argument has the wrong type (expected type \"string\")")
			}
		case "ekmConnectionKeyPath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"ekmConnectionKeyPath\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("cryptoKeyVersionName"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"cryptoKeyVersionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("externalKeyUri"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"externalKeyUri\". This field is required.")
	}
	if _, ok := s.Cache.Load("ekmConnectionKeyPath"); !ok {
		return errors.New("Initialized \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource without a \"ekmConnectionKeyPath\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].Register")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "externalKeyUri":
		return nil
	case "ekmConnectionKeyPath":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].Field")
	switch name {
	case "cryptoKeyVersionName":
		return s.CryptoKeyVersionName()
	case "externalKeyUri":
		return s.ExternalKeyUri()
	case "ekmConnectionKeyPath":
		return s.EkmConnectionKeyPath()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// CryptoKeyVersionName accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) CryptoKeyVersionName() (string, error) {
	res, ok := s.Cache.Load("cryptoKeyVersionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"cryptoKeyVersionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"cryptoKeyVersionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExternalKeyUri accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) ExternalKeyUri() (string, error) {
	res, ok := s.Cache.Load("externalKeyUri")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"externalKeyUri\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"externalKeyUri\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EkmConnectionKeyPath accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) EkmConnectionKeyPath() (string, error) {
	res, ok := s.Cache.Load("ekmConnectionKeyPath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed: no value provided for static field \"ekmConnectionKeyPath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" failed to cast field \"ekmConnectionKeyPath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions].Compute")
	switch name {
	case "cryptoKeyVersionName":
		return nil
	case "externalKeyUri":
		return nil
	case "ekmConnectionKeyPath":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions\" resource")
	}
}

// GcpEssentialContact resource interface
type GcpEssentialContact interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ResourcePath() (string, error)
	Email() (string, error)
	LanguageTag() (string, error)
	NotificationCategorySubscriptions() ([]interface{}, error)
	Validated() (*time.Time, error)
	ValidationState() (string, error)
}

// mqlGcpEssentialContact for the gcp.essentialContact resource
type mqlGcpEssentialContact struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpEssentialContact) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.essentialContact resource
func newGcpEssentialContact(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpEssentialContact{runtime.NewResource("gcp.essentialContact")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "resourcePath":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"resourcePath\" argument has the wrong type (expected type \"string\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "languageTag":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"languageTag\" argument has the wrong type (expected type \"string\")")
			}
		case "notificationCategorySubscriptions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"notificationCategorySubscriptions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "validated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"validated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "validationState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"validationState\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.essentialContact\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.essentialContact with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpEssentialContact) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("resourcePath"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"resourcePath\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("languageTag"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"languageTag\". This field is required.")
	}
	if _, ok := s.Cache.Load("notificationCategorySubscriptions"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"notificationCategorySubscriptions\". This field is required.")
	}
	if _, ok := s.Cache.Load("validated"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"validated\". This field is required.")
	}
	if _, ok := s.Cache.Load("validationState"); !ok {
		return errors.New("Initialized \"gcp.essentialContact\" resource without a \"validationState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpEssentialContact) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].Register")
	switch name {
	case "resourcePath":
		return nil
	case "email":
		return nil
	case "languageTag":
		return nil
	case "notificationCategorySubscriptions":
		return nil
	case "validated":
		return nil
	case "validationState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpEssentialContact) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].Field")
	switch name {
	case "resourcePath":
		return s.ResourcePath()
	case "email":
		return s.Email()
	case "languageTag":
		return s.LanguageTag()
	case "notificationCategorySubscriptions":
		return s.NotificationCategorySubscriptions()
	case "validated":
		return s.Validated()
	case "validationState":
		return s.ValidationState()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

// ResourcePath accessor autogenerated
func (s *mqlGcpEssentialContact) ResourcePath() (string, error) {
	res, ok := s.Cache.Load("resourcePath")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"resourcePath\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"resourcePath\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlGcpEssentialContact) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LanguageTag accessor autogenerated
func (s *mqlGcpEssentialContact) LanguageTag() (string, error) {
	res, ok := s.Cache.Load("languageTag")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"languageTag\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"languageTag\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NotificationCategorySubscriptions accessor autogenerated
func (s *mqlGcpEssentialContact) NotificationCategorySubscriptions() ([]interface{}, error) {
	res, ok := s.Cache.Load("notificationCategorySubscriptions")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"notificationCategorySubscriptions\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"notificationCategorySubscriptions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Validated accessor autogenerated
func (s *mqlGcpEssentialContact) Validated() (*time.Time, error) {
	res, ok := s.Cache.Load("validated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"validated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"validated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// ValidationState accessor autogenerated
func (s *mqlGcpEssentialContact) ValidationState() (string, error) {
	res, ok := s.Cache.Load("validationState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.essentialContact\" failed: no value provided for static field \"validationState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.essentialContact\" failed to cast field \"validationState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpEssentialContact) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.essentialContact].Compute")
	switch name {
	case "resourcePath":
		return nil
	case "email":
		return nil
	case "languageTag":
		return nil
	case "notificationCategorySubscriptions":
		return nil
	case "validated":
		return nil
	case "validationState":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.essentialContact\" resource")
	}
}

