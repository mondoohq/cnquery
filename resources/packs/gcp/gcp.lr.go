// Code generated by resources. DO NOT EDIT.
package gcp

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("gcp.organization", newGcpOrganization)
	registry.AddFactory("gcp.project", newGcpProject)
	registry.AddFactory("gcp.service", newGcpService)
	registry.AddFactory("gcp.recommendation", newGcpRecommendation)
	registry.AddFactory("gcp.resourcemanager.binding", newGcpResourcemanagerBinding)
	registry.AddFactory("gcp.compute", newGcpCompute)
	registry.AddFactory("gcp.compute.region", newGcpComputeRegion)
	registry.AddFactory("gcp.compute.zone", newGcpComputeZone)
	registry.AddFactory("gcp.compute.instance", newGcpComputeInstance)
	registry.AddFactory("gcp.compute.serviceaccount", newGcpComputeServiceaccount)
	registry.AddFactory("gcp.storage", newGcpStorage)
	registry.AddFactory("gcp.storage.bucket", newGcpStorageBucket)
	registry.AddFactory("gcp.sql", newGcpSql)
	registry.AddFactory("gcp.sql.instance", newGcpSqlInstance)
	registry.AddFactory("gcp.bigquery", newGcpBigquery)
	registry.AddFactory("gcp.bigquery.dataset", newGcpBigqueryDataset)
	registry.AddFactory("gcp.bigquery.table", newGcpBigqueryTable)
	registry.AddFactory("gcp.bigquery.model", newGcpBigqueryModel)
	registry.AddFactory("gcp.bigquery.routine", newGcpBigqueryRoutine)
}

// GcpOrganization resource interface
type GcpOrganization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	LifecycleState() (string, error)
	IamPolicy() ([]interface{}, error)
}

// mqlGcpOrganization for the gcp.organization resource
type mqlGcpOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.organization resource
func newGcpOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpOrganization{runtime.NewResource("gcp.organization")}
	var existing GcpOrganization
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("lifecycleState"); !ok {
		return errors.New("Initialized \"gcp.organization\" resource without a \"lifecycleState\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "lifecycleState":
		return s.LifecycleState()
	case "iamPolicy":
		return s.IamPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpOrganization) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpOrganization) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.organization\" failed: no value provided for static field \"lifecycleState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.organization\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpOrganization) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.organization\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.organization\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpOrganization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.organization].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.organization\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpOrganization) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpProject resource interface
type GcpProject interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Number() (string, error)
	State() (string, error)
	LifecycleState() (string, error)
	CreateTime() (*time.Time, error)
	Labels() (map[string]interface{}, error)
	IamPolicy() ([]interface{}, error)
	Services() ([]interface{}, error)
	Recommendations() ([]interface{}, error)
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.project resource
func newGcpProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpProject{runtime.NewResource("gcp.project")}
	var existing GcpProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "number":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"number\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "createTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"createTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "services":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"services\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "recommendations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"recommendations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpProject) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "number":
		return nil
	case "state":
		return nil
	case "lifecycleState":
		return nil
	case "createTime":
		return nil
	case "labels":
		return nil
	case "iamPolicy":
		return nil
	case "services":
		return nil
	case "recommendations":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.project].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "number":
		return s.Number()
	case "state":
		return s.State()
	case "lifecycleState":
		return s.LifecycleState()
	case "createTime":
		return s.CreateTime()
	case "labels":
		return s.Labels()
	case "iamPolicy":
		return s.IamPolicy()
	case "services":
		return s.Services()
	case "recommendations":
		return s.Recommendations()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpProject) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpProject) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Number accessor autogenerated
func (s *mqlGcpProject) Number() (string, error) {
	res, ok := s.Cache.Load("number")
	if !ok || !res.Valid {
		if err := s.ComputeNumber(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("number")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"number\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "number")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"number\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpProject) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		if err := s.ComputeState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("state")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"state\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "state")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcpProject) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		if err := s.ComputeLifecycleState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("lifecycleState")
		if !ok {
			return "", errors.New("\"gcp.project\" calculated \"lifecycleState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "lifecycleState")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.project\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateTime accessor autogenerated
func (s *mqlGcpProject) CreateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createTime")
	if !ok || !res.Valid {
		if err := s.ComputeCreateTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createTime")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"createTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"createTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpProject) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpProject) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Services accessor autogenerated
func (s *mqlGcpProject) Services() ([]interface{}, error) {
	res, ok := s.Cache.Load("services")
	if !ok || !res.Valid {
		if err := s.ComputeServices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("services")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"services\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "services")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"services\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Recommendations accessor autogenerated
func (s *mqlGcpProject) Recommendations() ([]interface{}, error) {
	res, ok := s.Cache.Load("recommendations")
	if !ok || !res.Valid {
		if err := s.ComputeRecommendations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("recommendations")
		if !ok {
			return nil, errors.New("\"gcp.project\" calculated \"recommendations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "recommendations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.project\" failed to cast field \"recommendations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpProject) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.project].Compute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "number":
		return s.ComputeNumber()
	case "state":
		return s.ComputeState()
	case "lifecycleState":
		return s.ComputeLifecycleState()
	case "createTime":
		return s.ComputeCreateTime()
	case "labels":
		return s.ComputeLabels()
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "services":
		return s.ComputeServices()
	case "recommendations":
		return s.ComputeRecommendations()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.project\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlGcpProject) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlGcpProject) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNumber computer autogenerated
func (s *mqlGcpProject) ComputeNumber() error {
	var err error
	if _, ok := s.Cache.Load("number"); ok {
		return nil
	}
	vres, err := s.GetNumber()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("number", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeState computer autogenerated
func (s *mqlGcpProject) ComputeState() error {
	var err error
	if _, ok := s.Cache.Load("state"); ok {
		return nil
	}
	vres, err := s.GetState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("state", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLifecycleState computer autogenerated
func (s *mqlGcpProject) ComputeLifecycleState() error {
	var err error
	if _, ok := s.Cache.Load("lifecycleState"); ok {
		return nil
	}
	vres, err := s.GetLifecycleState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("lifecycleState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCreateTime computer autogenerated
func (s *mqlGcpProject) ComputeCreateTime() error {
	var err error
	if _, ok := s.Cache.Load("createTime"); ok {
		return nil
	}
	vres, err := s.GetCreateTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLabels computer autogenerated
func (s *mqlGcpProject) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpProject) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServices computer autogenerated
func (s *mqlGcpProject) ComputeServices() error {
	var err error
	if _, ok := s.Cache.Load("services"); ok {
		return nil
	}
	vres, err := s.GetServices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("services", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRecommendations computer autogenerated
func (s *mqlGcpProject) ComputeRecommendations() error {
	var err error
	if _, ok := s.Cache.Load("recommendations"); ok {
		return nil
	}
	vres, err := s.GetRecommendations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("recommendations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpService resource interface
type GcpService interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Parent() (string, error)
	Title() (string, error)
	State() (string, error)
}

// mqlGcpService for the gcp.service resource
type mqlGcpService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.service resource
func newGcpService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpService{runtime.NewResource("gcp.service")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "parent":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"parent\" argument has the wrong type (expected type \"string\")")
			}
		case "title":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"title\" argument has the wrong type (expected type \"string\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.service\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.service with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("parent"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"parent\". This field is required.")
	}
	if _, ok := s.Cache.Load("title"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"title\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.service\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].Register")
	switch name {
	case "name":
		return nil
	case "parent":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.service].Field")
	switch name {
	case "name":
		return s.Name()
	case "parent":
		return s.Parent()
	case "title":
		return s.Title()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcpService) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Parent accessor autogenerated
func (s *mqlGcpService) Parent() (string, error) {
	res, ok := s.Cache.Load("parent")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"parent\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"parent\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Title accessor autogenerated
func (s *mqlGcpService) Title() (string, error) {
	res, ok := s.Cache.Load("title")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"title\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"title\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpService) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.service\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.service\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpService) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.service].Compute")
	switch name {
	case "name":
		return nil
	case "parent":
		return nil
	case "title":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.service\" resource")
	}
}

// GcpRecommendation resource interface
type GcpRecommendation interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	PrimaryImpact() (interface{}, error)
	AdditionalImpact() ([]interface{}, error)
	Content() (interface{}, error)
	Category() (string, error)
	Priority() (string, error)
	LastRefreshTime() (*time.Time, error)
	State() (interface{}, error)
}

// mqlGcpRecommendation for the gcp.recommendation resource
type mqlGcpRecommendation struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpRecommendation) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.recommendation resource
func newGcpRecommendation(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpRecommendation{runtime.NewResource("gcp.recommendation")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "primaryImpact":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"primaryImpact\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "additionalImpact":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"additionalImpact\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "content":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"content\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "category":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"category\" argument has the wrong type (expected type \"string\")")
			}
		case "priority":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"priority\" argument has the wrong type (expected type \"string\")")
			}
		case "lastRefreshTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"lastRefreshTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "state":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"state\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.recommendation\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.recommendation with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpRecommendation) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("primaryImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"primaryImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("additionalImpact"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"additionalImpact\". This field is required.")
	}
	if _, ok := s.Cache.Load("content"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"content\". This field is required.")
	}
	if _, ok := s.Cache.Load("category"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"category\". This field is required.")
	}
	if _, ok := s.Cache.Load("priority"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"priority\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastRefreshTime"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"lastRefreshTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.recommendation\" resource without a \"state\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpRecommendation) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpRecommendation) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "primaryImpact":
		return s.PrimaryImpact()
	case "additionalImpact":
		return s.AdditionalImpact()
	case "content":
		return s.Content()
	case "category":
		return s.Category()
	case "priority":
		return s.Priority()
	case "lastRefreshTime":
		return s.LastRefreshTime()
	case "state":
		return s.State()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpRecommendation) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpRecommendation) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrimaryImpact accessor autogenerated
func (s *mqlGcpRecommendation) PrimaryImpact() (interface{}, error) {
	res, ok := s.Cache.Load("primaryImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"primaryImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"primaryImpact\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AdditionalImpact accessor autogenerated
func (s *mqlGcpRecommendation) AdditionalImpact() ([]interface{}, error) {
	res, ok := s.Cache.Load("additionalImpact")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"additionalImpact\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"additionalImpact\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Content accessor autogenerated
func (s *mqlGcpRecommendation) Content() (interface{}, error) {
	res, ok := s.Cache.Load("content")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"content\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"content\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Category accessor autogenerated
func (s *mqlGcpRecommendation) Category() (string, error) {
	res, ok := s.Cache.Load("category")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"category\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"category\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Priority accessor autogenerated
func (s *mqlGcpRecommendation) Priority() (string, error) {
	res, ok := s.Cache.Load("priority")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.recommendation\" failed: no value provided for static field \"priority\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.recommendation\" failed to cast field \"priority\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LastRefreshTime accessor autogenerated
func (s *mqlGcpRecommendation) LastRefreshTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastRefreshTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"lastRefreshTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"lastRefreshTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpRecommendation) State() (interface{}, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.recommendation\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.recommendation\" failed to cast field \"state\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpRecommendation) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.recommendation].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "primaryImpact":
		return nil
	case "additionalImpact":
		return nil
	case "content":
		return nil
	case "category":
		return nil
	case "priority":
		return nil
	case "lastRefreshTime":
		return nil
	case "state":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.recommendation\" resource")
	}
}

// GcpResourcemanagerBinding resource interface
type GcpResourcemanagerBinding interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Members() ([]interface{}, error)
	Role() (string, error)
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpResourcemanagerBinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.resourcemanager.binding resource
func newGcpResourcemanagerBinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpResourcemanagerBinding{runtime.NewResource("gcp.resourcemanager.binding")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.resourcemanager.binding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.resourcemanager.binding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpResourcemanagerBinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("members"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"members\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcp.resourcemanager.binding\" resource without a \"role\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Register")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Field")
	switch name {
	case "id":
		return s.Id()
	case "members":
		return s.Members()
	case "role":
		return s.Role()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"members\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.resourcemanager.binding\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.resourcemanager.binding\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpResourcemanagerBinding) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.resourcemanager.binding].Compute")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.resourcemanager.binding\" resource")
	}
}

// GcpCompute resource interface
type GcpCompute interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Instances() ([]interface{}, error)
	Regions() ([]interface{}, error)
	Zones() ([]interface{}, error)
}

// mqlGcpCompute for the gcp.compute resource
type mqlGcpCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute resource
func newGcpCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpCompute{runtime.NewResource("gcp.compute")}
	var existing GcpCompute
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "regions":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"regions\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "zones":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"zones\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpCompute) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.compute\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute].Register")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return nil
	case "regions":
		return nil
	case "zones":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instances":
		return s.Instances()
	case "regions":
		return s.Regions()
	case "zones":
		return s.Zones()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlGcpCompute) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlGcpCompute) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Regions accessor autogenerated
func (s *mqlGcpCompute) Regions() ([]interface{}, error) {
	res, ok := s.Cache.Load("regions")
	if !ok || !res.Valid {
		if err := s.ComputeRegions(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("regions")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"regions\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "regions")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"regions\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Zones accessor autogenerated
func (s *mqlGcpCompute) Zones() ([]interface{}, error) {
	res, ok := s.Cache.Load("zones")
	if !ok || !res.Valid {
		if err := s.ComputeZones(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("zones")
		if !ok {
			return nil, errors.New("\"gcp.compute\" calculated \"zones\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "zones")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute\" failed to cast field \"zones\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpCompute) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute].Compute")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return s.ComputeInstances()
	case "regions":
		return s.ComputeRegions()
	case "zones":
		return s.ComputeZones()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpCompute) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRegions computer autogenerated
func (s *mqlGcpCompute) ComputeRegions() error {
	var err error
	if _, ok := s.Cache.Load("regions"); ok {
		return nil
	}
	vres, err := s.GetRegions()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("regions", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeZones computer autogenerated
func (s *mqlGcpCompute) ComputeZones() error {
	var err error
	if _, ok := s.Cache.Load("zones"); ok {
		return nil
	}
	vres, err := s.GetZones()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("zones", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpComputeRegion resource interface
type GcpComputeRegion interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Status() (string, error)
	Created() (*time.Time, error)
	Quotas() (map[string]interface{}, error)
	Deprecated() (interface{}, error)
}

// mqlGcpComputeRegion for the gcp.compute.region resource
type mqlGcpComputeRegion struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeRegion) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.region resource
func newGcpComputeRegion(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeRegion{runtime.NewResource("gcp.compute.region")}
	var existing GcpComputeRegion
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "quotas":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"quotas\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "deprecated":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"deprecated\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.region\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.region with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeRegion) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("quotas"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"quotas\". This field is required.")
	}
	if _, ok := s.Cache.Load("deprecated"); !ok {
		return errors.New("Initialized \"gcp.compute.region\" resource without a \"deprecated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeRegion) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeRegion) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	case "quotas":
		return s.Quotas()
	case "deprecated":
		return s.Deprecated()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeRegion) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeRegion) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeRegion) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeRegion) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.region\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.region\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeRegion) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Quotas accessor autogenerated
func (s *mqlGcpComputeRegion) Quotas() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("quotas")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"quotas\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"quotas\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Deprecated accessor autogenerated
func (s *mqlGcpComputeRegion) Deprecated() (interface{}, error) {
	res, ok := s.Cache.Load("deprecated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.region\" failed: no value provided for static field \"deprecated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.region\" failed to cast field \"deprecated\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeRegion) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.region].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	case "quotas":
		return nil
	case "deprecated":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.region\" resource")
	}
}

// GcpComputeZone resource interface
type GcpComputeZone interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Region() (GcpComputeRegion, error)
	Status() (string, error)
	Created() (*time.Time, error)
}

// mqlGcpComputeZone for the gcp.compute.zone resource
type mqlGcpComputeZone struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeZone) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.zone resource
func newGcpComputeZone(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeZone{runtime.NewResource("gcp.compute.zone")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(GcpComputeRegion); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"region\" argument has the wrong type (expected type \"GcpComputeRegion\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.zone\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.zone with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeZone) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.compute.zone\" resource without a \"created\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeZone) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "region":
		return nil
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeZone) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "region":
		return s.Region()
	case "status":
		return s.Status()
	case "created":
		return s.Created()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeZone) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeZone) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeZone) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpComputeZone) Region() (GcpComputeRegion, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		if err := s.ComputeRegion(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("region")
		if !ok {
			return nil, errors.New("\"gcp.compute.zone\" calculated \"region\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "region")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GcpComputeRegion)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"region\" to the right type (GcpComputeRegion): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeZone) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpComputeZone) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.zone\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.zone\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeZone) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.zone].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "region":
		return s.ComputeRegion()
	case "status":
		return nil
	case "created":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.zone\" resource")
	}
}

// ComputeRegion computer autogenerated
func (s *mqlGcpComputeZone) ComputeRegion() error {
	var err error
	if _, ok := s.Cache.Load("region"); ok {
		return nil
	}
	vres, err := s.GetRegion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("region", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpComputeInstance resource interface
type GcpComputeInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	CpuPlatform() (string, error)
	DeletionProtection() (bool, error)
	Description() (string, error)
	Hostname() (string, error)
	Labels() (map[string]interface{}, error)
	Status() (string, error)
	StatusMessage() (string, error)
	Tags() ([]interface{}, error)
	Metadata() (map[string]interface{}, error)
	ServiceAccounts() ([]interface{}, error)
}

// mqlGcpComputeInstance for the gcp.compute.instance resource
type mqlGcpComputeInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.instance resource
func newGcpComputeInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeInstance{runtime.NewResource("gcp.compute.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"cpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "deletionProtection":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"deletionProtection\" argument has the wrong type (expected type \"bool\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusMessage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"statusMessage\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "serviceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"serviceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuPlatform"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"cpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtection"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"deletionProtection\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostname"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"hostname\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusMessage"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"statusMessage\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccounts"); !ok {
		return errors.New("Initialized \"gcp.compute.instance\" resource without a \"serviceAccounts\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "cpuPlatform":
		return nil
	case "deletionProtection":
		return nil
	case "description":
		return nil
	case "hostname":
		return nil
	case "labels":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "tags":
		return nil
	case "metadata":
		return nil
	case "serviceAccounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "cpuPlatform":
		return s.CpuPlatform()
	case "deletionProtection":
		return s.DeletionProtection()
	case "description":
		return s.Description()
	case "hostname":
		return s.Hostname()
	case "labels":
		return s.Labels()
	case "status":
		return s.Status()
	case "statusMessage":
		return s.StatusMessage()
	case "tags":
		return s.Tags()
	case "metadata":
		return s.Metadata()
	case "serviceAccounts":
		return s.ServiceAccounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpComputeInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpComputeInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuPlatform accessor autogenerated
func (s *mqlGcpComputeInstance) CpuPlatform() (string, error) {
	res, ok := s.Cache.Load("cpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"cpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"cpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DeletionProtection accessor autogenerated
func (s *mqlGcpComputeInstance) DeletionProtection() (bool, error) {
	res, ok := s.Cache.Load("deletionProtection")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"deletionProtection\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"deletionProtection\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpComputeInstance) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlGcpComputeInstance) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"hostname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpComputeInstance) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcpComputeInstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusMessage accessor autogenerated
func (s *mqlGcpComputeInstance) StatusMessage() (string, error) {
	res, ok := s.Cache.Load("statusMessage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"statusMessage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"statusMessage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpComputeInstance) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcpComputeInstance) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ServiceAccounts accessor autogenerated
func (s *mqlGcpComputeInstance) ServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.instance\" failed: no value provided for static field \"serviceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.instance\" failed to cast field \"serviceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.instance].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "cpuPlatform":
		return nil
	case "deletionProtection":
		return nil
	case "description":
		return nil
	case "hostname":
		return nil
	case "labels":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "tags":
		return nil
	case "metadata":
		return nil
	case "serviceAccounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.instance\" resource")
	}
}

// GcpComputeServiceaccount resource interface
type GcpComputeServiceaccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Email() (string, error)
	Scopes() ([]interface{}, error)
}

// mqlGcpComputeServiceaccount for the gcp.compute.serviceaccount resource
type mqlGcpComputeServiceaccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpComputeServiceaccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.compute.serviceaccount resource
func newGcpComputeServiceaccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpComputeServiceaccount{runtime.NewResource("gcp.compute.serviceaccount")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.compute.serviceaccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.compute.serviceaccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpComputeServiceaccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcp.compute.serviceaccount\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"gcp.compute.serviceaccount\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Register")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Field")
	switch name {
	case "email":
		return s.Email()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// Email accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.compute.serviceaccount\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.compute.serviceaccount\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.compute.serviceaccount\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.compute.serviceaccount\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpComputeServiceaccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.compute.serviceaccount].Compute")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.compute.serviceaccount\" resource")
	}
}

// GcpStorage resource interface
type GcpStorage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Buckets() ([]interface{}, error)
}

// mqlGcpStorage for the gcp.storage resource
type mqlGcpStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage resource
func newGcpStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorage{runtime.NewResource("gcp.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].Register")
	switch name {
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage].Field")
	switch name {
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// Buckets accessor autogenerated
func (s *mqlGcpStorage) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"gcp.storage\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage].Compute")
	switch name {
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlGcpStorage) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpStorageBucket resource interface
type GcpStorageBucket interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Labels() (map[string]interface{}, error)
	Location() (string, error)
	LocationType() (string, error)
	ProjectNumber() (string, error)
	StorageClass() (string, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	IamPolicy() ([]interface{}, error)
	IamConfiguration() (interface{}, error)
}

// mqlGcpStorageBucket for the gcp.storage.bucket resource
type mqlGcpStorageBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpStorageBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.storage.bucket resource
func newGcpStorageBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpStorageBucket{runtime.NewResource("gcp.storage.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "locationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"locationType\" argument has the wrong type (expected type \"string\")")
			}
		case "projectNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"projectNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "storageClass":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"storageClass\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "iamConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"iamConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.storage.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.storage.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpStorageBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationType"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"locationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectNumber"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"projectNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageClass"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"storageClass\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("iamConfiguration"); !ok {
		return errors.New("Initialized \"gcp.storage.bucket\" resource without a \"iamConfiguration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpStorageBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return nil
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpStorageBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "labels":
		return s.Labels()
	case "location":
		return s.Location()
	case "locationType":
		return s.LocationType()
	case "projectNumber":
		return s.ProjectNumber()
	case "storageClass":
		return s.StorageClass()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "iamPolicy":
		return s.IamPolicy()
	case "iamConfiguration":
		return s.IamConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpStorageBucket) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpStorageBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpStorageBucket) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpStorageBucket) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LocationType accessor autogenerated
func (s *mqlGcpStorageBucket) LocationType() (string, error) {
	res, ok := s.Cache.Load("locationType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"locationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"locationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectNumber accessor autogenerated
func (s *mqlGcpStorageBucket) ProjectNumber() (string, error) {
	res, ok := s.Cache.Load("projectNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"projectNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"projectNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageClass accessor autogenerated
func (s *mqlGcpStorageBucket) StorageClass() (string, error) {
	res, ok := s.Cache.Load("storageClass")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"storageClass\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"storageClass\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpStorageBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcpStorageBucket) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcpStorageBucket) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcp.storage.bucket\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IamConfiguration accessor autogenerated
func (s *mqlGcpStorageBucket) IamConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("iamConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.storage.bucket\" failed: no value provided for static field \"iamConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.storage.bucket\" failed to cast field \"iamConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpStorageBucket) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.storage.bucket].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.storage.bucket\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcpStorageBucket) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpSql resource interface
type GcpSql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
}

// mqlGcpSql for the gcp.sql resource
type mqlGcpSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.sql resource
func newGcpSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpSql{runtime.NewResource("gcp.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql].Register")
	switch name {
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.sql].Field")
	switch name {
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlGcpSql) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcp.sql\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.sql\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpSql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql].Compute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcpSql) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpSqlInstance resource interface
type GcpSqlInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	BackendType() (string, error)
	ConnectionName() (string, error)
	DatabaseVersion() (string, error)
	GceZone() (string, error)
	InstanceType() (string, error)
	Kind() (string, error)
	CurrentDiskSize() (int64, error)
	MaxDiskSize() (int64, error)
	State() (string, error)
	Project() (string, error)
	Region() (string, error)
	ServiceAccountEmailAddress() (string, error)
	Settings() (interface{}, error)
}

// mqlGcpSqlInstance for the gcp.sql.instance resource
type mqlGcpSqlInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpSqlInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.sql.instance resource
func newGcpSqlInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpSqlInstance{runtime.NewResource("gcp.sql.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "backendType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"backendType\" argument has the wrong type (expected type \"string\")")
			}
		case "connectionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"connectionName\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"databaseVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "gceZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"gceZone\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"instanceType\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "currentDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"currentDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "maxDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"maxDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "project":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"project\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccountEmailAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"serviceAccountEmailAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.sql.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.sql.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpSqlInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("backendType"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"backendType\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionName"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"connectionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseVersion"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"databaseVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("gceZone"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"gceZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceType"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"instanceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentDiskSize"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"currentDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxDiskSize"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"maxDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("project"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"project\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccountEmailAddress"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"serviceAccountEmailAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"gcp.sql.instance\" resource without a \"settings\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpSqlInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Register")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpSqlInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Field")
	switch name {
	case "name":
		return s.Name()
	case "backendType":
		return s.BackendType()
	case "connectionName":
		return s.ConnectionName()
	case "databaseVersion":
		return s.DatabaseVersion()
	case "gceZone":
		return s.GceZone()
	case "instanceType":
		return s.InstanceType()
	case "kind":
		return s.Kind()
	case "currentDiskSize":
		return s.CurrentDiskSize()
	case "maxDiskSize":
		return s.MaxDiskSize()
	case "state":
		return s.State()
	case "project":
		return s.Project()
	case "region":
		return s.Region()
	case "serviceAccountEmailAddress":
		return s.ServiceAccountEmailAddress()
	case "settings":
		return s.Settings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcpSqlInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackendType accessor autogenerated
func (s *mqlGcpSqlInstance) BackendType() (string, error) {
	res, ok := s.Cache.Load("backendType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"backendType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"backendType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectionName accessor autogenerated
func (s *mqlGcpSqlInstance) ConnectionName() (string, error) {
	res, ok := s.Cache.Load("connectionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"connectionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"connectionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseVersion accessor autogenerated
func (s *mqlGcpSqlInstance) DatabaseVersion() (string, error) {
	res, ok := s.Cache.Load("databaseVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"databaseVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"databaseVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GceZone accessor autogenerated
func (s *mqlGcpSqlInstance) GceZone() (string, error) {
	res, ok := s.Cache.Load("gceZone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"gceZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"gceZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceType accessor autogenerated
func (s *mqlGcpSqlInstance) InstanceType() (string, error) {
	res, ok := s.Cache.Load("instanceType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"instanceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"instanceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlGcpSqlInstance) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentDiskSize accessor autogenerated
func (s *mqlGcpSqlInstance) CurrentDiskSize() (int64, error) {
	res, ok := s.Cache.Load("currentDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"currentDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"currentDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaxDiskSize accessor autogenerated
func (s *mqlGcpSqlInstance) MaxDiskSize() (int64, error) {
	res, ok := s.Cache.Load("maxDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"maxDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"maxDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcpSqlInstance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Project accessor autogenerated
func (s *mqlGcpSqlInstance) Project() (string, error) {
	res, ok := s.Cache.Load("project")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"project\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"project\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcpSqlInstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccountEmailAddress accessor autogenerated
func (s *mqlGcpSqlInstance) ServiceAccountEmailAddress() (string, error) {
	res, ok := s.Cache.Load("serviceAccountEmailAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"serviceAccountEmailAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"serviceAccountEmailAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlGcpSqlInstance) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.sql.instance\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.sql.instance\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpSqlInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.sql.instance].Compute")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.sql.instance\" resource")
	}
}

// GcpBigquery resource interface
type GcpBigquery interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Datasets() ([]interface{}, error)
}

// mqlGcpBigquery for the gcp.bigquery resource
type mqlGcpBigquery struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigquery) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery resource
func newGcpBigquery(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigquery{runtime.NewResource("gcp.bigquery")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "datasets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"datasets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigquery) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigquery) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Register")
	switch name {
	case "datasets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigquery) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Field")
	switch name {
	case "datasets":
		return s.Datasets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// Datasets accessor autogenerated
func (s *mqlGcpBigquery) Datasets() ([]interface{}, error) {
	res, ok := s.Cache.Load("datasets")
	if !ok || !res.Valid {
		if err := s.ComputeDatasets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("datasets")
		if !ok {
			return nil, errors.New("\"gcp.bigquery\" calculated \"datasets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "datasets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery\" failed to cast field \"datasets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigquery) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery].Compute")
	switch name {
	case "datasets":
		return s.ComputeDatasets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery\" resource")
	}
}

// ComputeDatasets computer autogenerated
func (s *mqlGcpBigquery) ComputeDatasets() error {
	var err error
	if _, ok := s.Cache.Load("datasets"); ok {
		return nil
	}
	vres, err := s.GetDatasets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("datasets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryDataset resource interface
type GcpBigqueryDataset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Description() (string, error)
	Location() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Tags() (map[string]interface{}, error)
	DefaultEncryptionConfig() (interface{}, error)
	Tables() ([]interface{}, error)
	Models() ([]interface{}, error)
	Routines() ([]interface{}, error)
}

// mqlGcpBigqueryDataset for the gcp.bigquery.dataset resource
type mqlGcpBigqueryDataset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryDataset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.dataset resource
func newGcpBigqueryDataset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryDataset{runtime.NewResource("gcp.bigquery.dataset")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "tags":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tags\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "defaultEncryptionConfig":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"defaultEncryptionConfig\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "tables":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"tables\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "models":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"models\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "routines":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"routines\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.dataset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.dataset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryDataset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("defaultEncryptionConfig"); !ok {
		return errors.New("Initialized \"gcp.bigquery.dataset\" resource without a \"defaultEncryptionConfig\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryDataset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "defaultEncryptionConfig":
		return nil
	case "tables":
		return nil
	case "models":
		return nil
	case "routines":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryDataset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "description":
		return s.Description()
	case "location":
		return s.Location()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "tags":
		return s.Tags()
	case "defaultEncryptionConfig":
		return s.DefaultEncryptionConfig()
	case "tables":
		return s.Tables()
	case "models":
		return s.Models()
	case "routines":
		return s.Routines()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryDataset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryDataset) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryDataset) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryDataset) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryDataset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryDataset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryDataset) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tags() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tags\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// DefaultEncryptionConfig accessor autogenerated
func (s *mqlGcpBigqueryDataset) DefaultEncryptionConfig() (interface{}, error) {
	res, ok := s.Cache.Load("defaultEncryptionConfig")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.dataset\" failed: no value provided for static field \"defaultEncryptionConfig\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"defaultEncryptionConfig\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Tables accessor autogenerated
func (s *mqlGcpBigqueryDataset) Tables() ([]interface{}, error) {
	res, ok := s.Cache.Load("tables")
	if !ok || !res.Valid {
		if err := s.ComputeTables(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tables")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"tables\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tables")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"tables\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Models accessor autogenerated
func (s *mqlGcpBigqueryDataset) Models() ([]interface{}, error) {
	res, ok := s.Cache.Load("models")
	if !ok || !res.Valid {
		if err := s.ComputeModels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("models")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"models\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "models")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"models\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Routines accessor autogenerated
func (s *mqlGcpBigqueryDataset) Routines() ([]interface{}, error) {
	res, ok := s.Cache.Load("routines")
	if !ok || !res.Valid {
		if err := s.ComputeRoutines(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("routines")
		if !ok {
			return nil, errors.New("\"gcp.bigquery.dataset\" calculated \"routines\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "routines")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.dataset\" failed to cast field \"routines\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryDataset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.dataset].Compute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "description":
		return nil
	case "location":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "tags":
		return nil
	case "defaultEncryptionConfig":
		return nil
	case "tables":
		return s.ComputeTables()
	case "models":
		return s.ComputeModels()
	case "routines":
		return s.ComputeRoutines()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.dataset\" resource")
	}
}

// ComputeTables computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeTables() error {
	var err error
	if _, ok := s.Cache.Load("tables"); ok {
		return nil
	}
	vres, err := s.GetTables()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tables", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeModels computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeModels() error {
	var err error
	if _, ok := s.Cache.Load("models"); ok {
		return nil
	}
	vres, err := s.GetModels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("models", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoutines computer autogenerated
func (s *mqlGcpBigqueryDataset) ComputeRoutines() error {
	var err error
	if _, ok := s.Cache.Load("routines"); ok {
		return nil
	}
	vres, err := s.GetRoutines()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("routines", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcpBigqueryTable resource interface
type GcpBigqueryTable interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	FullQualifiedName() (string, error)
	Labels() (map[string]interface{}, error)
	UseLegacySQL() (bool, error)
	UseStandardSQL() (bool, error)
	RequirePartitionFilter() (bool, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	NumBytes() (int64, error)
	NumLongTermBytes() (int64, error)
	NumRows() (int64, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
}

// mqlGcpBigqueryTable for the gcp.bigquery.table resource
type mqlGcpBigqueryTable struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryTable) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.table resource
func newGcpBigqueryTable(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryTable{runtime.NewResource("gcp.bigquery.table")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "fullQualifiedName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"fullQualifiedName\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "useLegacySQL":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"useLegacySQL\" argument has the wrong type (expected type \"bool\")")
			}
		case "useStandardSQL":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"useStandardSQL\" argument has the wrong type (expected type \"bool\")")
			}
		case "requirePartitionFilter":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"requirePartitionFilter\" argument has the wrong type (expected type \"bool\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "numBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numLongTermBytes":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numLongTermBytes\" argument has the wrong type (expected type \"int64\")")
			}
		case "numRows":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"numRows\" argument has the wrong type (expected type \"int64\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.table\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.table with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryTable) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("fullQualifiedName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"fullQualifiedName\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("useLegacySQL"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"useLegacySQL\". This field is required.")
	}
	if _, ok := s.Cache.Load("useStandardSQL"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"useStandardSQL\". This field is required.")
	}
	if _, ok := s.Cache.Load("requirePartitionFilter"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"requirePartitionFilter\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("numBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numLongTermBytes"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numLongTermBytes\". This field is required.")
	}
	if _, ok := s.Cache.Load("numRows"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"numRows\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.table\" resource without a \"expirationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryTable) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Register")
	switch name {
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "fullQualifiedName":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "useStandardSQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryTable) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Field")
	switch name {
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "fullQualifiedName":
		return s.FullQualifiedName()
	case "labels":
		return s.Labels()
	case "useLegacySQL":
		return s.UseLegacySQL()
	case "useStandardSQL":
		return s.UseStandardSQL()
	case "requirePartitionFilter":
		return s.RequirePartitionFilter()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "numBytes":
		return s.NumBytes()
	case "numLongTermBytes":
		return s.NumLongTermBytes()
	case "numRows":
		return s.NumRows()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryTable) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryTable) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryTable) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FullQualifiedName accessor autogenerated
func (s *mqlGcpBigqueryTable) FullQualifiedName() (string, error) {
	res, ok := s.Cache.Load("fullQualifiedName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"fullQualifiedName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"fullQualifiedName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryTable) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// UseLegacySQL accessor autogenerated
func (s *mqlGcpBigqueryTable) UseLegacySQL() (bool, error) {
	res, ok := s.Cache.Load("useLegacySQL")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"useLegacySQL\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"useLegacySQL\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// UseStandardSQL accessor autogenerated
func (s *mqlGcpBigqueryTable) UseStandardSQL() (bool, error) {
	res, ok := s.Cache.Load("useStandardSQL")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"useStandardSQL\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"useStandardSQL\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// RequirePartitionFilter accessor autogenerated
func (s *mqlGcpBigqueryTable) RequirePartitionFilter() (bool, error) {
	res, ok := s.Cache.Load("requirePartitionFilter")
	if !ok || !res.Valid {
		return false, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"requirePartitionFilter\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"requirePartitionFilter\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryTable) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryTable) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// NumBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumBytes() (int64, error) {
	res, ok := s.Cache.Load("numBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumLongTermBytes accessor autogenerated
func (s *mqlGcpBigqueryTable) NumLongTermBytes() (int64, error) {
	res, ok := s.Cache.Load("numLongTermBytes")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numLongTermBytes\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numLongTermBytes\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumRows accessor autogenerated
func (s *mqlGcpBigqueryTable) NumRows() (int64, error) {
	res, ok := s.Cache.Load("numRows")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"numRows\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"numRows\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryTable) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryTable) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.table\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.table\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryTable) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.table].Compute")
	switch name {
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "fullQualifiedName":
		return nil
	case "labels":
		return nil
	case "useLegacySQL":
		return nil
	case "useStandardSQL":
		return nil
	case "requirePartitionFilter":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "numBytes":
		return nil
	case "numLongTermBytes":
		return nil
	case "numRows":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.table\" resource")
	}
}

// GcpBigqueryModel resource interface
type GcpBigqueryModel interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Location() (string, error)
	Description() (string, error)
	FullQualifiedName() (string, error)
	Labels() (map[string]interface{}, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
	ExpirationTime() (*time.Time, error)
}

// mqlGcpBigqueryModel for the gcp.bigquery.model resource
type mqlGcpBigqueryModel struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryModel) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.model resource
func newGcpBigqueryModel(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryModel{runtime.NewResource("gcp.bigquery.model")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "fullQualifiedName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"fullQualifiedName\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "expirationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"expirationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.model\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.model with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryModel) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("fullQualifiedName"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"fullQualifiedName\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("expirationTime"); !ok {
		return errors.New("Initialized \"gcp.bigquery.model\" resource without a \"expirationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryModel) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "fullQualifiedName":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryModel) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "location":
		return s.Location()
	case "description":
		return s.Description()
	case "fullQualifiedName":
		return s.FullQualifiedName()
	case "labels":
		return s.Labels()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	case "expirationTime":
		return s.ExpirationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryModel) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryModel) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryModel) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcpBigqueryModel) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcpBigqueryModel) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryModel) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FullQualifiedName accessor autogenerated
func (s *mqlGcpBigqueryModel) FullQualifiedName() (string, error) {
	res, ok := s.Cache.Load("fullQualifiedName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"fullQualifiedName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"fullQualifiedName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcpBigqueryModel) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryModel) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryModel) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryModel) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ExpirationTime accessor autogenerated
func (s *mqlGcpBigqueryModel) ExpirationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("expirationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.model\" failed: no value provided for static field \"expirationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.model\" failed to cast field \"expirationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryModel) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.model].Compute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "location":
		return nil
	case "description":
		return nil
	case "fullQualifiedName":
		return nil
	case "labels":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	case "expirationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.model\" resource")
	}
}

// GcpBigqueryRoutine resource interface
type GcpBigqueryRoutine interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	DatasetId() (string, error)
	ProjectId() (string, error)
	Language() (string, error)
	Description() (string, error)
	Created() (*time.Time, error)
	Modified() (*time.Time, error)
	Type() (string, error)
}

// mqlGcpBigqueryRoutine for the gcp.bigquery.routine resource
type mqlGcpBigqueryRoutine struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcpBigqueryRoutine) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcp.bigquery.routine resource
func newGcpBigqueryRoutine(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcpBigqueryRoutine{runtime.NewResource("gcp.bigquery.routine")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "datasetId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"datasetId\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "language":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"language\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "modified":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"modified\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcp.bigquery.routine\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcp.bigquery.routine with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcpBigqueryRoutine) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("datasetId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"datasetId\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("language"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"language\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("modified"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"modified\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"gcp.bigquery.routine\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Register")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Field")
	switch name {
	case "id":
		return s.Id()
	case "datasetId":
		return s.DatasetId()
	case "projectId":
		return s.ProjectId()
	case "language":
		return s.Language()
	case "description":
		return s.Description()
	case "created":
		return s.Created()
	case "modified":
		return s.Modified()
	case "type":
		return s.Type()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatasetId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) DatasetId() (string, error) {
	res, ok := s.Cache.Load("datasetId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"datasetId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"datasetId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlGcpBigqueryRoutine) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Language accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Language() (string, error) {
	res, ok := s.Cache.Load("language")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"language\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"language\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Modified accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Modified() (*time.Time, error) {
	res, ok := s.Cache.Load("modified")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"modified\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"modified\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"gcp.bigquery.routine\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcp.bigquery.routine\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcpBigqueryRoutine) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcp.bigquery.routine].Compute")
	switch name {
	case "id":
		return nil
	case "datasetId":
		return nil
	case "projectId":
		return nil
	case "language":
		return nil
	case "description":
		return nil
	case "created":
		return nil
	case "modified":
		return nil
	case "type":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcp.bigquery.routine\" resource")
	}
}

