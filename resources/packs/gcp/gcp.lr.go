// Code generated by resources. DO NOT EDIT.
package gcp

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("gcloud.organization", newGcloudOrganization)
	registry.AddFactory("gcloud.project", newGcloudProject)
	registry.AddFactory("gcloud.resourcemanager.binding", newGcloudResourcemanagerBinding)
	registry.AddFactory("gcloud.compute", newGcloudCompute)
	registry.AddFactory("gcloud.compute.instance", newGcloudComputeInstance)
	registry.AddFactory("gcloud.compute.serviceaccount", newGcloudComputeServiceaccount)
	registry.AddFactory("gcloud.storage", newGcloudStorage)
	registry.AddFactory("gcloud.storage.bucket", newGcloudStorageBucket)
	registry.AddFactory("gcloud.sql", newGcloudSql)
	registry.AddFactory("gcloud.sql.instance", newGcloudSqlInstance)
}

// GcloudOrganization resource interface
type GcloudOrganization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	LifecycleState() (string, error)
	IamPolicy() ([]interface{}, error)
}

// mqlGcloudOrganization for the gcloud.organization resource
type mqlGcloudOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.organization resource
func newGcloudOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudOrganization{runtime.NewResource("gcloud.organization")}
	var existing GcloudOrganization
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.organization\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.organization\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.organization\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudOrganization) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.organization].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "lifecycleState":
		return nil
	case "iamPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "lifecycleState":
		return s.LifecycleState()
	case "iamPolicy":
		return s.IamPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcloudOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"gcloud.organization\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcloudOrganization) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"gcloud.organization\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.organization\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcloudOrganization) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		if err := s.ComputeLifecycleState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("lifecycleState")
		if !ok {
			return "", errors.New("\"gcloud.organization\" calculated \"lifecycleState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "lifecycleState")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.organization\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcloudOrganization) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcloud.organization\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.organization\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudOrganization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.organization].Compute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "lifecycleState":
		return s.ComputeLifecycleState()
	case "iamPolicy":
		return s.ComputeIamPolicy()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.organization\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlGcloudOrganization) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlGcloudOrganization) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLifecycleState computer autogenerated
func (s *mqlGcloudOrganization) ComputeLifecycleState() error {
	var err error
	if _, ok := s.Cache.Load("lifecycleState"); ok {
		return nil
	}
	vres, err := s.GetLifecycleState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("lifecycleState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcloudOrganization) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudProject resource interface
type GcloudProject interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Number() (string, error)
	LifecycleState() (string, error)
	CreateTime() (*time.Time, error)
	Labels() (map[string]interface{}, error)
	IamPolicy() ([]interface{}, error)
}

// mqlGcloudProject for the gcloud.project resource
type mqlGcloudProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.project resource
func newGcloudProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudProject{runtime.NewResource("gcloud.project")}
	var existing GcloudProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "number":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"number\" argument has the wrong type (expected type \"string\")")
			}
		case "lifecycleState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"lifecycleState\" argument has the wrong type (expected type \"string\")")
			}
		case "createTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"createTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudProject) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.project].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "number":
		return nil
	case "lifecycleState":
		return nil
	case "createTime":
		return nil
	case "labels":
		return nil
	case "iamPolicy":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.project].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "number":
		return s.Number()
	case "lifecycleState":
		return s.LifecycleState()
	case "createTime":
		return s.CreateTime()
	case "labels":
		return s.Labels()
	case "iamPolicy":
		return s.IamPolicy()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.project\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcloudProject) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"gcloud.project\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.project\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcloudProject) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		if err := s.ComputeName(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("name")
		if !ok {
			return "", errors.New("\"gcloud.project\" calculated \"name\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "name")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.project\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Number accessor autogenerated
func (s *mqlGcloudProject) Number() (string, error) {
	res, ok := s.Cache.Load("number")
	if !ok || !res.Valid {
		if err := s.ComputeNumber(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("number")
		if !ok {
			return "", errors.New("\"gcloud.project\" calculated \"number\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "number")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.project\" failed to cast field \"number\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LifecycleState accessor autogenerated
func (s *mqlGcloudProject) LifecycleState() (string, error) {
	res, ok := s.Cache.Load("lifecycleState")
	if !ok || !res.Valid {
		if err := s.ComputeLifecycleState(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("lifecycleState")
		if !ok {
			return "", errors.New("\"gcloud.project\" calculated \"lifecycleState\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "lifecycleState")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.project\" failed to cast field \"lifecycleState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CreateTime accessor autogenerated
func (s *mqlGcloudProject) CreateTime() (*time.Time, error) {
	res, ok := s.Cache.Load("createTime")
	if !ok || !res.Valid {
		if err := s.ComputeCreateTime(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("createTime")
		if !ok {
			return nil, errors.New("\"gcloud.project\" calculated \"createTime\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "createTime")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcloud.project\" failed to cast field \"createTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcloudProject) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"gcloud.project\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.project\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcloudProject) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcloud.project\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.project\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudProject) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.project].Compute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return s.ComputeName()
	case "number":
		return s.ComputeNumber()
	case "lifecycleState":
		return s.ComputeLifecycleState()
	case "createTime":
		return s.ComputeCreateTime()
	case "labels":
		return s.ComputeLabels()
	case "iamPolicy":
		return s.ComputeIamPolicy()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.project\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlGcloudProject) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeName computer autogenerated
func (s *mqlGcloudProject) ComputeName() error {
	var err error
	if _, ok := s.Cache.Load("name"); ok {
		return nil
	}
	vres, err := s.GetName()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("name", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNumber computer autogenerated
func (s *mqlGcloudProject) ComputeNumber() error {
	var err error
	if _, ok := s.Cache.Load("number"); ok {
		return nil
	}
	vres, err := s.GetNumber()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("number", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLifecycleState computer autogenerated
func (s *mqlGcloudProject) ComputeLifecycleState() error {
	var err error
	if _, ok := s.Cache.Load("lifecycleState"); ok {
		return nil
	}
	vres, err := s.GetLifecycleState()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("lifecycleState", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCreateTime computer autogenerated
func (s *mqlGcloudProject) ComputeCreateTime() error {
	var err error
	if _, ok := s.Cache.Load("createTime"); ok {
		return nil
	}
	vres, err := s.GetCreateTime()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("createTime", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLabels computer autogenerated
func (s *mqlGcloudProject) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcloudProject) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudResourcemanagerBinding resource interface
type GcloudResourcemanagerBinding interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Members() ([]interface{}, error)
	Role() (string, error)
}

// mqlGcloudResourcemanagerBinding for the gcloud.resourcemanager.binding resource
type mqlGcloudResourcemanagerBinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudResourcemanagerBinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.resourcemanager.binding resource
func newGcloudResourcemanagerBinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudResourcemanagerBinding{runtime.NewResource("gcloud.resourcemanager.binding")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.resourcemanager.binding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.resourcemanager.binding\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "role":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.resourcemanager.binding\", its \"role\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.resourcemanager.binding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.resourcemanager.binding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudResourcemanagerBinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcloud.resourcemanager.binding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("members"); !ok {
		return errors.New("Initialized \"gcloud.resourcemanager.binding\" resource without a \"members\". This field is required.")
	}
	if _, ok := s.Cache.Load("role"); !ok {
		return errors.New("Initialized \"gcloud.resourcemanager.binding\" resource without a \"role\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.resourcemanager.binding].Register")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.resourcemanager.binding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.resourcemanager.binding].Field")
	switch name {
	case "id":
		return s.Id()
	case "members":
		return s.Members()
	case "role":
		return s.Role()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.resourcemanager.binding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.resourcemanager.binding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.resourcemanager.binding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.resourcemanager.binding\" failed: no value provided for static field \"members\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.resourcemanager.binding\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Role accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Role() (string, error) {
	res, ok := s.Cache.Load("role")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.resourcemanager.binding\" failed: no value provided for static field \"role\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.resourcemanager.binding\" failed to cast field \"role\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudResourcemanagerBinding) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.resourcemanager.binding].Compute")
	switch name {
	case "id":
		return nil
	case "members":
		return nil
	case "role":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.resourcemanager.binding\" resource")
	}
}

// GcloudCompute resource interface
type GcloudCompute interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
}

// mqlGcloudCompute for the gcloud.compute resource
type mqlGcloudCompute struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudCompute) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.compute resource
func newGcloudCompute(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudCompute{runtime.NewResource("gcloud.compute")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.compute with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudCompute) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudCompute) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute].Register")
	switch name {
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudCompute) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.compute].Field")
	switch name {
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.compute\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlGcloudCompute) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcloud.compute\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudCompute) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute].Compute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcloudCompute) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudComputeInstance resource interface
type GcloudComputeInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	CpuPlatform() (string, error)
	DeletionProtection() (bool, error)
	Description() (string, error)
	Hostname() (string, error)
	Labels() (map[string]interface{}, error)
	Status() (string, error)
	StatusMessage() (string, error)
	Tags() ([]interface{}, error)
	Metadata() (map[string]interface{}, error)
	ServiceAccounts() ([]interface{}, error)
}

// mqlGcloudComputeInstance for the gcloud.compute.instance resource
type mqlGcloudComputeInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudComputeInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.compute.instance resource
func newGcloudComputeInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudComputeInstance{runtime.NewResource("gcloud.compute.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "cpuPlatform":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"cpuPlatform\" argument has the wrong type (expected type \"string\")")
			}
		case "deletionProtection":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"deletionProtection\" argument has the wrong type (expected type \"bool\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "statusMessage":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"statusMessage\" argument has the wrong type (expected type \"string\")")
			}
		case "tags":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"tags\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "serviceAccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"serviceAccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.compute.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudComputeInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuPlatform"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"cpuPlatform\". This field is required.")
	}
	if _, ok := s.Cache.Load("deletionProtection"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"deletionProtection\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostname"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"hostname\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("statusMessage"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"statusMessage\". This field is required.")
	}
	if _, ok := s.Cache.Load("tags"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"tags\". This field is required.")
	}
	if _, ok := s.Cache.Load("metadata"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"metadata\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccounts"); !ok {
		return errors.New("Initialized \"gcloud.compute.instance\" resource without a \"serviceAccounts\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudComputeInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute.instance].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "cpuPlatform":
		return nil
	case "deletionProtection":
		return nil
	case "description":
		return nil
	case "hostname":
		return nil
	case "labels":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "tags":
		return nil
	case "metadata":
		return nil
	case "serviceAccounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudComputeInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.compute.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "cpuPlatform":
		return s.CpuPlatform()
	case "deletionProtection":
		return s.DeletionProtection()
	case "description":
		return s.Description()
	case "hostname":
		return s.Hostname()
	case "labels":
		return s.Labels()
	case "status":
		return s.Status()
	case "statusMessage":
		return s.StatusMessage()
	case "tags":
		return s.Tags()
	case "metadata":
		return s.Metadata()
	case "serviceAccounts":
		return s.ServiceAccounts()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.compute.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcloudComputeInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcloudComputeInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CpuPlatform accessor autogenerated
func (s *mqlGcloudComputeInstance) CpuPlatform() (string, error) {
	res, ok := s.Cache.Load("cpuPlatform")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"cpuPlatform\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"cpuPlatform\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DeletionProtection accessor autogenerated
func (s *mqlGcloudComputeInstance) DeletionProtection() (bool, error) {
	res, ok := s.Cache.Load("deletionProtection")
	if !ok || !res.Valid {
		return false, errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"deletionProtection\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"deletionProtection\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGcloudComputeInstance) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlGcloudComputeInstance) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"hostname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcloudComputeInstance) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGcloudComputeInstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StatusMessage accessor autogenerated
func (s *mqlGcloudComputeInstance) StatusMessage() (string, error) {
	res, ok := s.Cache.Load("statusMessage")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"statusMessage\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"statusMessage\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tags accessor autogenerated
func (s *mqlGcloudComputeInstance) Tags() ([]interface{}, error) {
	res, ok := s.Cache.Load("tags")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"tags\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"tags\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlGcloudComputeInstance) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"metadata\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ServiceAccounts accessor autogenerated
func (s *mqlGcloudComputeInstance) ServiceAccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceAccounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.compute.instance\" failed: no value provided for static field \"serviceAccounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute.instance\" failed to cast field \"serviceAccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudComputeInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute.instance].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "cpuPlatform":
		return nil
	case "deletionProtection":
		return nil
	case "description":
		return nil
	case "hostname":
		return nil
	case "labels":
		return nil
	case "status":
		return nil
	case "statusMessage":
		return nil
	case "tags":
		return nil
	case "metadata":
		return nil
	case "serviceAccounts":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute.instance\" resource")
	}
}

// GcloudComputeServiceaccount resource interface
type GcloudComputeServiceaccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Email() (string, error)
	Scopes() ([]interface{}, error)
}

// mqlGcloudComputeServiceaccount for the gcloud.compute.serviceaccount resource
type mqlGcloudComputeServiceaccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudComputeServiceaccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.compute.serviceaccount resource
func newGcloudComputeServiceaccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudComputeServiceaccount{runtime.NewResource("gcloud.compute.serviceaccount")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.serviceaccount\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.serviceaccount\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.compute.serviceaccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.compute.serviceaccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudComputeServiceaccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"gcloud.compute.serviceaccount\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"gcloud.compute.serviceaccount\" resource without a \"scopes\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudComputeServiceaccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute.serviceaccount].Register")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute.serviceaccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudComputeServiceaccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.compute.serviceaccount].Field")
	switch name {
	case "email":
		return s.Email()
	case "scopes":
		return s.Scopes()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.compute.serviceaccount\" resource")
	}
}

// Email accessor autogenerated
func (s *mqlGcloudComputeServiceaccount) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.compute.serviceaccount\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.compute.serviceaccount\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlGcloudComputeServiceaccount) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.compute.serviceaccount\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.compute.serviceaccount\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudComputeServiceaccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.compute.serviceaccount].Compute")
	switch name {
	case "email":
		return nil
	case "scopes":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.compute.serviceaccount\" resource")
	}
}

// GcloudStorage resource interface
type GcloudStorage interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Buckets() ([]interface{}, error)
}

// mqlGcloudStorage for the gcloud.storage resource
type mqlGcloudStorage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudStorage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.storage resource
func newGcloudStorage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudStorage{runtime.NewResource("gcloud.storage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "buckets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage\", its \"buckets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.storage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudStorage) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudStorage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.storage].Register")
	switch name {
	case "buckets":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.storage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudStorage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.storage].Field")
	switch name {
	case "buckets":
		return s.Buckets()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.storage\" resource")
	}
}

// Buckets accessor autogenerated
func (s *mqlGcloudStorage) Buckets() ([]interface{}, error) {
	res, ok := s.Cache.Load("buckets")
	if !ok || !res.Valid {
		if err := s.ComputeBuckets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("buckets")
		if !ok {
			return nil, errors.New("\"gcloud.storage\" calculated \"buckets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "buckets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage\" failed to cast field \"buckets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudStorage) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.storage].Compute")
	switch name {
	case "buckets":
		return s.ComputeBuckets()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.storage\" resource")
	}
}

// ComputeBuckets computer autogenerated
func (s *mqlGcloudStorage) ComputeBuckets() error {
	var err error
	if _, ok := s.Cache.Load("buckets"); ok {
		return nil
	}
	vres, err := s.GetBuckets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("buckets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudStorageBucket resource interface
type GcloudStorageBucket interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Labels() (map[string]interface{}, error)
	Location() (string, error)
	LocationType() (string, error)
	ProjectNumber() (string, error)
	StorageClass() (string, error)
	Created() (*time.Time, error)
	Updated() (*time.Time, error)
	IamPolicy() ([]interface{}, error)
	IamConfiguration() (interface{}, error)
}

// mqlGcloudStorageBucket for the gcloud.storage.bucket resource
type mqlGcloudStorageBucket struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudStorageBucket) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.storage.bucket resource
func newGcloudStorageBucket(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudStorageBucket{runtime.NewResource("gcloud.storage.bucket")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "location":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"location\" argument has the wrong type (expected type \"string\")")
			}
		case "locationType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"locationType\" argument has the wrong type (expected type \"string\")")
			}
		case "projectNumber":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"projectNumber\" argument has the wrong type (expected type \"string\")")
			}
		case "storageClass":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"storageClass\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "updated":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"updated\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "iamPolicy":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"iamPolicy\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "iamConfiguration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"iamConfiguration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.storage.bucket\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.storage.bucket with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudStorageBucket) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("labels"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"labels\". This field is required.")
	}
	if _, ok := s.Cache.Load("location"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"location\". This field is required.")
	}
	if _, ok := s.Cache.Load("locationType"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"locationType\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectNumber"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"projectNumber\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageClass"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"storageClass\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("updated"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"updated\". This field is required.")
	}
	if _, ok := s.Cache.Load("iamConfiguration"); !ok {
		return errors.New("Initialized \"gcloud.storage.bucket\" resource without a \"iamConfiguration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudStorageBucket) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.storage.bucket].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return nil
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.storage.bucket\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudStorageBucket) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.storage.bucket].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "labels":
		return s.Labels()
	case "location":
		return s.Location()
	case "locationType":
		return s.LocationType()
	case "projectNumber":
		return s.ProjectNumber()
	case "storageClass":
		return s.StorageClass()
	case "created":
		return s.Created()
	case "updated":
		return s.Updated()
	case "iamPolicy":
		return s.IamPolicy()
	case "iamConfiguration":
		return s.IamConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.storage.bucket\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGcloudStorageBucket) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGcloudStorageBucket) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlGcloudStorageBucket) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"labels\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Location accessor autogenerated
func (s *mqlGcloudStorageBucket) Location() (string, error) {
	res, ok := s.Cache.Load("location")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"location\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"location\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LocationType accessor autogenerated
func (s *mqlGcloudStorageBucket) LocationType() (string, error) {
	res, ok := s.Cache.Load("locationType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"locationType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"locationType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectNumber accessor autogenerated
func (s *mqlGcloudStorageBucket) ProjectNumber() (string, error) {
	res, ok := s.Cache.Load("projectNumber")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"projectNumber\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"projectNumber\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// StorageClass accessor autogenerated
func (s *mqlGcloudStorageBucket) StorageClass() (string, error) {
	res, ok := s.Cache.Load("storageClass")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"storageClass\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"storageClass\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlGcloudStorageBucket) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Updated accessor autogenerated
func (s *mqlGcloudStorageBucket) Updated() (*time.Time, error) {
	res, ok := s.Cache.Load("updated")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"updated\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"updated\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// IamPolicy accessor autogenerated
func (s *mqlGcloudStorageBucket) IamPolicy() ([]interface{}, error) {
	res, ok := s.Cache.Load("iamPolicy")
	if !ok || !res.Valid {
		if err := s.ComputeIamPolicy(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("iamPolicy")
		if !ok {
			return nil, errors.New("\"gcloud.storage.bucket\" calculated \"iamPolicy\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "iamPolicy")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"iamPolicy\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// IamConfiguration accessor autogenerated
func (s *mqlGcloudStorageBucket) IamConfiguration() (interface{}, error) {
	res, ok := s.Cache.Load("iamConfiguration")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.storage.bucket\" failed: no value provided for static field \"iamConfiguration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.storage.bucket\" failed to cast field \"iamConfiguration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudStorageBucket) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.storage.bucket].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "labels":
		return nil
	case "location":
		return nil
	case "locationType":
		return nil
	case "projectNumber":
		return nil
	case "storageClass":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	case "iamPolicy":
		return s.ComputeIamPolicy()
	case "iamConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.storage.bucket\" resource")
	}
}

// ComputeIamPolicy computer autogenerated
func (s *mqlGcloudStorageBucket) ComputeIamPolicy() error {
	var err error
	if _, ok := s.Cache.Load("iamPolicy"); ok {
		return nil
	}
	vres, err := s.GetIamPolicy()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("iamPolicy", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudSql resource interface
type GcloudSql interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Instances() ([]interface{}, error)
}

// mqlGcloudSql for the gcloud.sql resource
type mqlGcloudSql struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudSql) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.sql resource
func newGcloudSql(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudSql{runtime.NewResource("gcloud.sql")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.sql with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudSql) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudSql) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.sql].Register")
	switch name {
	case "instances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.sql\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudSql) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.sql].Field")
	switch name {
	case "instances":
		return s.Instances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.sql\" resource")
	}
}

// Instances accessor autogenerated
func (s *mqlGcloudSql) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"gcloud.sql\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.sql\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudSql) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.sql].Compute")
	switch name {
	case "instances":
		return s.ComputeInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.sql\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlGcloudSql) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GcloudSqlInstance resource interface
type GcloudSqlInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	BackendType() (string, error)
	ConnectionName() (string, error)
	DatabaseVersion() (string, error)
	GceZone() (string, error)
	InstanceType() (string, error)
	Kind() (string, error)
	CurrentDiskSize() (int64, error)
	MaxDiskSize() (int64, error)
	State() (string, error)
	Project() (string, error)
	Region() (string, error)
	ServiceAccountEmailAddress() (string, error)
	Settings() (interface{}, error)
}

// mqlGcloudSqlInstance for the gcloud.sql.instance resource
type mqlGcloudSqlInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGcloudSqlInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the gcloud.sql.instance resource
func newGcloudSqlInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGcloudSqlInstance{runtime.NewResource("gcloud.sql.instance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "backendType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"backendType\" argument has the wrong type (expected type \"string\")")
			}
		case "connectionName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"connectionName\" argument has the wrong type (expected type \"string\")")
			}
		case "databaseVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"databaseVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "gceZone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"gceZone\" argument has the wrong type (expected type \"string\")")
			}
		case "instanceType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"instanceType\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "currentDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"currentDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "maxDiskSize":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"maxDiskSize\" argument has the wrong type (expected type \"int64\")")
			}
		case "state":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"state\" argument has the wrong type (expected type \"string\")")
			}
		case "project":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"project\" argument has the wrong type (expected type \"string\")")
			}
		case "region":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"region\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceAccountEmailAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"serviceAccountEmailAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"gcloud.sql.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized gcloud.sql.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGcloudSqlInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("backendType"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"backendType\". This field is required.")
	}
	if _, ok := s.Cache.Load("connectionName"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"connectionName\". This field is required.")
	}
	if _, ok := s.Cache.Load("databaseVersion"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"databaseVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("gceZone"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"gceZone\". This field is required.")
	}
	if _, ok := s.Cache.Load("instanceType"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"instanceType\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("currentDiskSize"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"currentDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("maxDiskSize"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"maxDiskSize\". This field is required.")
	}
	if _, ok := s.Cache.Load("state"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"state\". This field is required.")
	}
	if _, ok := s.Cache.Load("project"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"project\". This field is required.")
	}
	if _, ok := s.Cache.Load("region"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"region\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceAccountEmailAddress"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"serviceAccountEmailAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("settings"); !ok {
		return errors.New("Initialized \"gcloud.sql.instance\" resource without a \"settings\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGcloudSqlInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.sql.instance].Register")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.sql.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGcloudSqlInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[gcloud.sql.instance].Field")
	switch name {
	case "name":
		return s.Name()
	case "backendType":
		return s.BackendType()
	case "connectionName":
		return s.ConnectionName()
	case "databaseVersion":
		return s.DatabaseVersion()
	case "gceZone":
		return s.GceZone()
	case "instanceType":
		return s.InstanceType()
	case "kind":
		return s.Kind()
	case "currentDiskSize":
		return s.CurrentDiskSize()
	case "maxDiskSize":
		return s.MaxDiskSize()
	case "state":
		return s.State()
	case "project":
		return s.Project()
	case "region":
		return s.Region()
	case "serviceAccountEmailAddress":
		return s.ServiceAccountEmailAddress()
	case "settings":
		return s.Settings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"gcloud.sql.instance\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlGcloudSqlInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BackendType accessor autogenerated
func (s *mqlGcloudSqlInstance) BackendType() (string, error) {
	res, ok := s.Cache.Load("backendType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"backendType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"backendType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ConnectionName accessor autogenerated
func (s *mqlGcloudSqlInstance) ConnectionName() (string, error) {
	res, ok := s.Cache.Load("connectionName")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"connectionName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"connectionName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DatabaseVersion accessor autogenerated
func (s *mqlGcloudSqlInstance) DatabaseVersion() (string, error) {
	res, ok := s.Cache.Load("databaseVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"databaseVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"databaseVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GceZone accessor autogenerated
func (s *mqlGcloudSqlInstance) GceZone() (string, error) {
	res, ok := s.Cache.Load("gceZone")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"gceZone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"gceZone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// InstanceType accessor autogenerated
func (s *mqlGcloudSqlInstance) InstanceType() (string, error) {
	res, ok := s.Cache.Load("instanceType")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"instanceType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"instanceType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlGcloudSqlInstance) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CurrentDiskSize accessor autogenerated
func (s *mqlGcloudSqlInstance) CurrentDiskSize() (int64, error) {
	res, ok := s.Cache.Load("currentDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"currentDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"currentDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MaxDiskSize accessor autogenerated
func (s *mqlGcloudSqlInstance) MaxDiskSize() (int64, error) {
	res, ok := s.Cache.Load("maxDiskSize")
	if !ok || !res.Valid {
		return 0, errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"maxDiskSize\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"maxDiskSize\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// State accessor autogenerated
func (s *mqlGcloudSqlInstance) State() (string, error) {
	res, ok := s.Cache.Load("state")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"state\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"state\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Project accessor autogenerated
func (s *mqlGcloudSqlInstance) Project() (string, error) {
	res, ok := s.Cache.Load("project")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"project\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"project\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Region accessor autogenerated
func (s *mqlGcloudSqlInstance) Region() (string, error) {
	res, ok := s.Cache.Load("region")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"region\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"region\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceAccountEmailAddress accessor autogenerated
func (s *mqlGcloudSqlInstance) ServiceAccountEmailAddress() (string, error) {
	res, ok := s.Cache.Load("serviceAccountEmailAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"serviceAccountEmailAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"serviceAccountEmailAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlGcloudSqlInstance) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		return nil, errors.New("\"gcloud.sql.instance\" failed: no value provided for static field \"settings\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"gcloud.sql.instance\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGcloudSqlInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[gcloud.sql.instance].Compute")
	switch name {
	case "name":
		return nil
	case "backendType":
		return nil
	case "connectionName":
		return nil
	case "databaseVersion":
		return nil
	case "gceZone":
		return nil
	case "instanceType":
		return nil
	case "kind":
		return nil
	case "currentDiskSize":
		return nil
	case "maxDiskSize":
		return nil
	case "state":
		return nil
	case "project":
		return nil
	case "region":
		return nil
	case "serviceAccountEmailAddress":
		return nil
	case "settings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"gcloud.sql.instance\" resource")
	}
}

