// Code generated by resources. DO NOT EDIT.
package k8s

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
	"go.mondoo.com/cnquery/resources/packs/os"
	"go.mondoo.com/cnquery/resources/packs/core"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("k8s", newK8s)
	registry.AddFactory("k8s.apiresource", newK8sApiresource)
	registry.AddFactory("k8s.node", newK8sNode)
	registry.AddFactory("k8s.kubelet", newK8sKubelet)
	registry.AddFactory("k8s.namespace", newK8sNamespace)
	registry.AddFactory("k8s.pod", newK8sPod)
	registry.AddFactory("k8s.container", newK8sContainer)
	registry.AddFactory("k8s.initContainer", newK8sInitContainer)
	registry.AddFactory("k8s.ephemeralContainer", newK8sEphemeralContainer)
	registry.AddFactory("k8s.deployment", newK8sDeployment)
	registry.AddFactory("k8s.daemonset", newK8sDaemonset)
	registry.AddFactory("k8s.statefulset", newK8sStatefulset)
	registry.AddFactory("k8s.replicaset", newK8sReplicaset)
	registry.AddFactory("k8s.job", newK8sJob)
	registry.AddFactory("k8s.cronjob", newK8sCronjob)
	registry.AddFactory("k8s.secret", newK8sSecret)
	registry.AddFactory("k8s.podsecuritypolicy", newK8sPodsecuritypolicy)
	registry.AddFactory("k8s.configmap", newK8sConfigmap)
	registry.AddFactory("k8s.service", newK8sService)
	registry.AddFactory("k8s.ingressresourceref", newK8sIngressresourceref)
	registry.AddFactory("k8s.ingressservicebackend", newK8sIngressservicebackend)
	registry.AddFactory("k8s.ingressbackend", newK8sIngressbackend)
	registry.AddFactory("k8s.ingresshttprulepath", newK8sIngresshttprulepath)
	registry.AddFactory("k8s.ingressrule", newK8sIngressrule)
	registry.AddFactory("k8s.ingresstls", newK8sIngresstls)
	registry.AddFactory("k8s.ingress", newK8sIngress)
	registry.AddFactory("k8s.networkpolicy", newK8sNetworkpolicy)
	registry.AddFactory("k8s.serviceaccount", newK8sServiceaccount)
	registry.AddFactory("k8s.rbac.clusterrole", newK8sRbacClusterrole)
	registry.AddFactory("k8s.rbac.role", newK8sRbacRole)
	registry.AddFactory("k8s.rbac.clusterrolebinding", newK8sRbacClusterrolebinding)
	registry.AddFactory("k8s.rbac.rolebinding", newK8sRbacRolebinding)
	registry.AddFactory("k8s.customresource", newK8sCustomresource)
	registry.AddFactory("k8s.admissionreview", newK8sAdmissionreview)
	registry.AddFactory("k8s.admissionrequest", newK8sAdmissionrequest)
	registry.AddFactory("k8s.userinfo", newK8sUserinfo)
}

// K8s resource interface
type K8s interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ApiResources() ([]interface{}, error)
	Nodes() ([]interface{}, error)
	Namespaces() ([]interface{}, error)
	Pods() ([]interface{}, error)
	Deployments() ([]interface{}, error)
	Daemonsets() ([]interface{}, error)
	Statefulsets() ([]interface{}, error)
	Replicasets() ([]interface{}, error)
	Jobs() ([]interface{}, error)
	Cronjobs() ([]interface{}, error)
	Secrets() ([]interface{}, error)
	ServerVersion() (interface{}, error)
	PodSecurityPolicies() ([]interface{}, error)
	Configmaps() ([]interface{}, error)
	Services() ([]interface{}, error)
	NetworkPolicies() ([]interface{}, error)
	Serviceaccounts() ([]interface{}, error)
	Clusterroles() ([]interface{}, error)
	Roles() ([]interface{}, error)
	Clusterrolebindings() ([]interface{}, error)
	Rolebindings() ([]interface{}, error)
	Customresources() ([]interface{}, error)
	Ingresses() ([]interface{}, error)
}

// mqlK8s for the k8s resource
type mqlK8s struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8s) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s resource
func newK8s(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8s{runtime.NewResource("k8s")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "apiResources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"apiResources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "nodes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"nodes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "namespaces":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"namespaces\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "pods":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"pods\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "deployments":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"deployments\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "daemonsets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"daemonsets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "statefulsets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"statefulsets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "replicasets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"replicasets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "jobs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"jobs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "cronjobs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"cronjobs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serverVersion":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"serverVersion\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSecurityPolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"podSecurityPolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "configmaps":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"configmaps\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "services":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"services\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networkPolicies":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"networkPolicies\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serviceaccounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"serviceaccounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "clusterroles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"clusterroles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "clusterrolebindings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"clusterrolebindings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "rolebindings":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"rolebindings\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "customresources":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"customresources\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "ingresses":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"ingresses\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8s) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlK8s) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s].Register")
	switch name {
	case "apiResources":
		return nil
	case "nodes":
		return nil
	case "namespaces":
		return nil
	case "pods":
		return nil
	case "deployments":
		return nil
	case "daemonsets":
		return nil
	case "statefulsets":
		return nil
	case "replicasets":
		return nil
	case "jobs":
		return nil
	case "cronjobs":
		return nil
	case "secrets":
		return nil
	case "serverVersion":
		return nil
	case "podSecurityPolicies":
		return nil
	case "configmaps":
		return nil
	case "services":
		return nil
	case "networkPolicies":
		return nil
	case "serviceaccounts":
		return nil
	case "clusterroles":
		return nil
	case "roles":
		return nil
	case "clusterrolebindings":
		return nil
	case "rolebindings":
		return nil
	case "customresources":
		return nil
	case "ingresses":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8s) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s].Field")
	switch name {
	case "apiResources":
		return s.ApiResources()
	case "nodes":
		return s.Nodes()
	case "namespaces":
		return s.Namespaces()
	case "pods":
		return s.Pods()
	case "deployments":
		return s.Deployments()
	case "daemonsets":
		return s.Daemonsets()
	case "statefulsets":
		return s.Statefulsets()
	case "replicasets":
		return s.Replicasets()
	case "jobs":
		return s.Jobs()
	case "cronjobs":
		return s.Cronjobs()
	case "secrets":
		return s.Secrets()
	case "serverVersion":
		return s.ServerVersion()
	case "podSecurityPolicies":
		return s.PodSecurityPolicies()
	case "configmaps":
		return s.Configmaps()
	case "services":
		return s.Services()
	case "networkPolicies":
		return s.NetworkPolicies()
	case "serviceaccounts":
		return s.Serviceaccounts()
	case "clusterroles":
		return s.Clusterroles()
	case "roles":
		return s.Roles()
	case "clusterrolebindings":
		return s.Clusterrolebindings()
	case "rolebindings":
		return s.Rolebindings()
	case "customresources":
		return s.Customresources()
	case "ingresses":
		return s.Ingresses()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s\" resource")
	}
}

// ApiResources accessor autogenerated
func (s *mqlK8s) ApiResources() ([]interface{}, error) {
	res, ok := s.Cache.Load("apiResources")
	if !ok || !res.Valid {
		if err := s.ComputeApiResources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("apiResources")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"apiResources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "apiResources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"apiResources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Nodes accessor autogenerated
func (s *mqlK8s) Nodes() ([]interface{}, error) {
	res, ok := s.Cache.Load("nodes")
	if !ok || !res.Valid {
		if err := s.ComputeNodes(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("nodes")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"nodes\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "nodes")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"nodes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Namespaces accessor autogenerated
func (s *mqlK8s) Namespaces() ([]interface{}, error) {
	res, ok := s.Cache.Load("namespaces")
	if !ok || !res.Valid {
		if err := s.ComputeNamespaces(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("namespaces")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"namespaces\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "namespaces")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"namespaces\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Pods accessor autogenerated
func (s *mqlK8s) Pods() ([]interface{}, error) {
	res, ok := s.Cache.Load("pods")
	if !ok || !res.Valid {
		if err := s.ComputePods(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("pods")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"pods\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "pods")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"pods\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Deployments accessor autogenerated
func (s *mqlK8s) Deployments() ([]interface{}, error) {
	res, ok := s.Cache.Load("deployments")
	if !ok || !res.Valid {
		if err := s.ComputeDeployments(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("deployments")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"deployments\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "deployments")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"deployments\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Daemonsets accessor autogenerated
func (s *mqlK8s) Daemonsets() ([]interface{}, error) {
	res, ok := s.Cache.Load("daemonsets")
	if !ok || !res.Valid {
		if err := s.ComputeDaemonsets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("daemonsets")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"daemonsets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "daemonsets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"daemonsets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Statefulsets accessor autogenerated
func (s *mqlK8s) Statefulsets() ([]interface{}, error) {
	res, ok := s.Cache.Load("statefulsets")
	if !ok || !res.Valid {
		if err := s.ComputeStatefulsets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("statefulsets")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"statefulsets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "statefulsets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"statefulsets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Replicasets accessor autogenerated
func (s *mqlK8s) Replicasets() ([]interface{}, error) {
	res, ok := s.Cache.Load("replicasets")
	if !ok || !res.Valid {
		if err := s.ComputeReplicasets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("replicasets")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"replicasets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "replicasets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"replicasets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Jobs accessor autogenerated
func (s *mqlK8s) Jobs() ([]interface{}, error) {
	res, ok := s.Cache.Load("jobs")
	if !ok || !res.Valid {
		if err := s.ComputeJobs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("jobs")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"jobs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "jobs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"jobs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Cronjobs accessor autogenerated
func (s *mqlK8s) Cronjobs() ([]interface{}, error) {
	res, ok := s.Cache.Load("cronjobs")
	if !ok || !res.Valid {
		if err := s.ComputeCronjobs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("cronjobs")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"cronjobs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "cronjobs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"cronjobs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlK8s) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		if err := s.ComputeSecrets(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("secrets")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"secrets\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "secrets")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServerVersion accessor autogenerated
func (s *mqlK8s) ServerVersion() (interface{}, error) {
	res, ok := s.Cache.Load("serverVersion")
	if !ok || !res.Valid {
		if err := s.ComputeServerVersion(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serverVersion")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"serverVersion\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serverVersion")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"serverVersion\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSecurityPolicies accessor autogenerated
func (s *mqlK8s) PodSecurityPolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("podSecurityPolicies")
	if !ok || !res.Valid {
		if err := s.ComputePodSecurityPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("podSecurityPolicies")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"podSecurityPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "podSecurityPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"podSecurityPolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Configmaps accessor autogenerated
func (s *mqlK8s) Configmaps() ([]interface{}, error) {
	res, ok := s.Cache.Load("configmaps")
	if !ok || !res.Valid {
		if err := s.ComputeConfigmaps(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configmaps")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"configmaps\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configmaps")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"configmaps\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Services accessor autogenerated
func (s *mqlK8s) Services() ([]interface{}, error) {
	res, ok := s.Cache.Load("services")
	if !ok || !res.Valid {
		if err := s.ComputeServices(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("services")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"services\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "services")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"services\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkPolicies accessor autogenerated
func (s *mqlK8s) NetworkPolicies() ([]interface{}, error) {
	res, ok := s.Cache.Load("networkPolicies")
	if !ok || !res.Valid {
		if err := s.ComputeNetworkPolicies(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("networkPolicies")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"networkPolicies\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "networkPolicies")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"networkPolicies\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Serviceaccounts accessor autogenerated
func (s *mqlK8s) Serviceaccounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("serviceaccounts")
	if !ok || !res.Valid {
		if err := s.ComputeServiceaccounts(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serviceaccounts")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"serviceaccounts\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serviceaccounts")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"serviceaccounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Clusterroles accessor autogenerated
func (s *mqlK8s) Clusterroles() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusterroles")
	if !ok || !res.Valid {
		if err := s.ComputeClusterroles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusterroles")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"clusterroles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusterroles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"clusterroles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlK8s) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Clusterrolebindings accessor autogenerated
func (s *mqlK8s) Clusterrolebindings() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusterrolebindings")
	if !ok || !res.Valid {
		if err := s.ComputeClusterrolebindings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusterrolebindings")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"clusterrolebindings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusterrolebindings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"clusterrolebindings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Rolebindings accessor autogenerated
func (s *mqlK8s) Rolebindings() ([]interface{}, error) {
	res, ok := s.Cache.Load("rolebindings")
	if !ok || !res.Valid {
		if err := s.ComputeRolebindings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("rolebindings")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"rolebindings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "rolebindings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"rolebindings\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Customresources accessor autogenerated
func (s *mqlK8s) Customresources() ([]interface{}, error) {
	res, ok := s.Cache.Load("customresources")
	if !ok || !res.Valid {
		if err := s.ComputeCustomresources(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("customresources")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"customresources\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "customresources")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"customresources\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Ingresses accessor autogenerated
func (s *mqlK8s) Ingresses() ([]interface{}, error) {
	res, ok := s.Cache.Load("ingresses")
	if !ok || !res.Valid {
		if err := s.ComputeIngresses(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ingresses")
		if !ok {
			return nil, errors.New("\"k8s\" calculated \"ingresses\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ingresses")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s\" failed to cast field \"ingresses\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8s) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s].Compute")
	switch name {
	case "apiResources":
		return s.ComputeApiResources()
	case "nodes":
		return s.ComputeNodes()
	case "namespaces":
		return s.ComputeNamespaces()
	case "pods":
		return s.ComputePods()
	case "deployments":
		return s.ComputeDeployments()
	case "daemonsets":
		return s.ComputeDaemonsets()
	case "statefulsets":
		return s.ComputeStatefulsets()
	case "replicasets":
		return s.ComputeReplicasets()
	case "jobs":
		return s.ComputeJobs()
	case "cronjobs":
		return s.ComputeCronjobs()
	case "secrets":
		return s.ComputeSecrets()
	case "serverVersion":
		return s.ComputeServerVersion()
	case "podSecurityPolicies":
		return s.ComputePodSecurityPolicies()
	case "configmaps":
		return s.ComputeConfigmaps()
	case "services":
		return s.ComputeServices()
	case "networkPolicies":
		return s.ComputeNetworkPolicies()
	case "serviceaccounts":
		return s.ComputeServiceaccounts()
	case "clusterroles":
		return s.ComputeClusterroles()
	case "roles":
		return s.ComputeRoles()
	case "clusterrolebindings":
		return s.ComputeClusterrolebindings()
	case "rolebindings":
		return s.ComputeRolebindings()
	case "customresources":
		return s.ComputeCustomresources()
	case "ingresses":
		return s.ComputeIngresses()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s\" resource")
	}
}

// ComputeApiResources computer autogenerated
func (s *mqlK8s) ComputeApiResources() error {
	var err error
	if _, ok := s.Cache.Load("apiResources"); ok {
		return nil
	}
	vres, err := s.GetApiResources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("apiResources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNodes computer autogenerated
func (s *mqlK8s) ComputeNodes() error {
	var err error
	if _, ok := s.Cache.Load("nodes"); ok {
		return nil
	}
	vres, err := s.GetNodes()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("nodes", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNamespaces computer autogenerated
func (s *mqlK8s) ComputeNamespaces() error {
	var err error
	if _, ok := s.Cache.Load("namespaces"); ok {
		return nil
	}
	vres, err := s.GetNamespaces()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("namespaces", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePods computer autogenerated
func (s *mqlK8s) ComputePods() error {
	var err error
	if _, ok := s.Cache.Load("pods"); ok {
		return nil
	}
	vres, err := s.GetPods()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("pods", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDeployments computer autogenerated
func (s *mqlK8s) ComputeDeployments() error {
	var err error
	if _, ok := s.Cache.Load("deployments"); ok {
		return nil
	}
	vres, err := s.GetDeployments()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("deployments", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDaemonsets computer autogenerated
func (s *mqlK8s) ComputeDaemonsets() error {
	var err error
	if _, ok := s.Cache.Load("daemonsets"); ok {
		return nil
	}
	vres, err := s.GetDaemonsets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("daemonsets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeStatefulsets computer autogenerated
func (s *mqlK8s) ComputeStatefulsets() error {
	var err error
	if _, ok := s.Cache.Load("statefulsets"); ok {
		return nil
	}
	vres, err := s.GetStatefulsets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("statefulsets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeReplicasets computer autogenerated
func (s *mqlK8s) ComputeReplicasets() error {
	var err error
	if _, ok := s.Cache.Load("replicasets"); ok {
		return nil
	}
	vres, err := s.GetReplicasets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("replicasets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeJobs computer autogenerated
func (s *mqlK8s) ComputeJobs() error {
	var err error
	if _, ok := s.Cache.Load("jobs"); ok {
		return nil
	}
	vres, err := s.GetJobs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("jobs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCronjobs computer autogenerated
func (s *mqlK8s) ComputeCronjobs() error {
	var err error
	if _, ok := s.Cache.Load("cronjobs"); ok {
		return nil
	}
	vres, err := s.GetCronjobs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("cronjobs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecrets computer autogenerated
func (s *mqlK8s) ComputeSecrets() error {
	var err error
	if _, ok := s.Cache.Load("secrets"); ok {
		return nil
	}
	vres, err := s.GetSecrets()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("secrets", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServerVersion computer autogenerated
func (s *mqlK8s) ComputeServerVersion() error {
	var err error
	if _, ok := s.Cache.Load("serverVersion"); ok {
		return nil
	}
	vres, err := s.GetServerVersion()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serverVersion", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputePodSecurityPolicies computer autogenerated
func (s *mqlK8s) ComputePodSecurityPolicies() error {
	var err error
	if _, ok := s.Cache.Load("podSecurityPolicies"); ok {
		return nil
	}
	vres, err := s.GetPodSecurityPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("podSecurityPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConfigmaps computer autogenerated
func (s *mqlK8s) ComputeConfigmaps() error {
	var err error
	if _, ok := s.Cache.Load("configmaps"); ok {
		return nil
	}
	vres, err := s.GetConfigmaps()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configmaps", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServices computer autogenerated
func (s *mqlK8s) ComputeServices() error {
	var err error
	if _, ok := s.Cache.Load("services"); ok {
		return nil
	}
	vres, err := s.GetServices()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("services", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetworkPolicies computer autogenerated
func (s *mqlK8s) ComputeNetworkPolicies() error {
	var err error
	if _, ok := s.Cache.Load("networkPolicies"); ok {
		return nil
	}
	vres, err := s.GetNetworkPolicies()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("networkPolicies", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServiceaccounts computer autogenerated
func (s *mqlK8s) ComputeServiceaccounts() error {
	var err error
	if _, ok := s.Cache.Load("serviceaccounts"); ok {
		return nil
	}
	vres, err := s.GetServiceaccounts()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serviceaccounts", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeClusterroles computer autogenerated
func (s *mqlK8s) ComputeClusterroles() error {
	var err error
	if _, ok := s.Cache.Load("clusterroles"); ok {
		return nil
	}
	vres, err := s.GetClusterroles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusterroles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoles computer autogenerated
func (s *mqlK8s) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeClusterrolebindings computer autogenerated
func (s *mqlK8s) ComputeClusterrolebindings() error {
	var err error
	if _, ok := s.Cache.Load("clusterrolebindings"); ok {
		return nil
	}
	vres, err := s.GetClusterrolebindings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusterrolebindings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRolebindings computer autogenerated
func (s *mqlK8s) ComputeRolebindings() error {
	var err error
	if _, ok := s.Cache.Load("rolebindings"); ok {
		return nil
	}
	vres, err := s.GetRolebindings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("rolebindings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCustomresources computer autogenerated
func (s *mqlK8s) ComputeCustomresources() error {
	var err error
	if _, ok := s.Cache.Load("customresources"); ok {
		return nil
	}
	vres, err := s.GetCustomresources()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("customresources", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeIngresses computer autogenerated
func (s *mqlK8s) ComputeIngresses() error {
	var err error
	if _, ok := s.Cache.Load("ingresses"); ok {
		return nil
	}
	vres, err := s.GetIngresses()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ingresses", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sApiresource resource interface
type K8sApiresource interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	SingularName() (string, error)
	Namespaced() (bool, error)
	Group() (string, error)
	Version() (string, error)
	Kind() (string, error)
	ShortNames() ([]interface{}, error)
	Categories() ([]interface{}, error)
}

// mqlK8sApiresource for the k8s.apiresource resource
type mqlK8sApiresource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sApiresource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.apiresource resource
func newK8sApiresource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sApiresource{runtime.NewResource("k8s.apiresource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "singularName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"singularName\" argument has the wrong type (expected type \"string\")")
			}
		case "namespaced":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"namespaced\" argument has the wrong type (expected type \"bool\")")
			}
		case "group":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"group\" argument has the wrong type (expected type \"string\")")
			}
		case "version":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"version\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "shortNames":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"shortNames\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "categories":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"categories\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.apiresource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.apiresource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sApiresource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("singularName"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"singularName\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespaced"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"namespaced\". This field is required.")
	}
	if _, ok := s.Cache.Load("group"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"group\". This field is required.")
	}
	if _, ok := s.Cache.Load("version"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"version\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("shortNames"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"shortNames\". This field is required.")
	}
	if _, ok := s.Cache.Load("categories"); !ok {
		return errors.New("Initialized \"k8s.apiresource\" resource without a \"categories\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sApiresource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.apiresource].Register")
	switch name {
	case "name":
		return nil
	case "singularName":
		return nil
	case "namespaced":
		return nil
	case "group":
		return nil
	case "version":
		return nil
	case "kind":
		return nil
	case "shortNames":
		return nil
	case "categories":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.apiresource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sApiresource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.apiresource].Field")
	switch name {
	case "name":
		return s.Name()
	case "singularName":
		return s.SingularName()
	case "namespaced":
		return s.Namespaced()
	case "group":
		return s.Group()
	case "version":
		return s.Version()
	case "kind":
		return s.Kind()
	case "shortNames":
		return s.ShortNames()
	case "categories":
		return s.Categories()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.apiresource\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlK8sApiresource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.apiresource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.apiresource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SingularName accessor autogenerated
func (s *mqlK8sApiresource) SingularName() (string, error) {
	res, ok := s.Cache.Load("singularName")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.apiresource\" failed: no value provided for static field \"singularName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.apiresource\" failed to cast field \"singularName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespaced accessor autogenerated
func (s *mqlK8sApiresource) Namespaced() (bool, error) {
	res, ok := s.Cache.Load("namespaced")
	if !ok || !res.Valid {
		return false, errors.New("\"k8s.apiresource\" failed: no value provided for static field \"namespaced\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"k8s.apiresource\" failed to cast field \"namespaced\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Group accessor autogenerated
func (s *mqlK8sApiresource) Group() (string, error) {
	res, ok := s.Cache.Load("group")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.apiresource\" failed: no value provided for static field \"group\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.apiresource\" failed to cast field \"group\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Version accessor autogenerated
func (s *mqlK8sApiresource) Version() (string, error) {
	res, ok := s.Cache.Load("version")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.apiresource\" failed: no value provided for static field \"version\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.apiresource\" failed to cast field \"version\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sApiresource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.apiresource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.apiresource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ShortNames accessor autogenerated
func (s *mqlK8sApiresource) ShortNames() ([]interface{}, error) {
	res, ok := s.Cache.Load("shortNames")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.apiresource\" failed: no value provided for static field \"shortNames\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.apiresource\" failed to cast field \"shortNames\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Categories accessor autogenerated
func (s *mqlK8sApiresource) Categories() ([]interface{}, error) {
	res, ok := s.Cache.Load("categories")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.apiresource\" failed: no value provided for static field \"categories\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.apiresource\" failed to cast field \"categories\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sApiresource) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.apiresource].Compute")
	switch name {
	case "name":
		return nil
	case "singularName":
		return nil
	case "namespaced":
		return nil
	case "group":
		return nil
	case "version":
		return nil
	case "kind":
		return nil
	case "shortNames":
		return nil
	case "categories":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.apiresource\" resource")
	}
}

// K8sNode resource interface
type K8sNode interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	ResourceVersion() (string, error)
	Name() (string, error)
	Kind() (string, error)
}

// mqlK8sNode for the k8s.node resource
type mqlK8sNode struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sNode) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.node resource
func newK8sNode(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sNode{runtime.NewResource("k8s.node")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.node\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.node with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sNode) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.node\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.node\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.node\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.node\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.node\" resource without a \"kind\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sNode) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.node].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "resourceVersion":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.node\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sNode) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.node].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "resourceVersion":
		return s.ResourceVersion()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.node\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sNode) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.node\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.node\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sNode) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.node\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.node\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sNode) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.node\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.node\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sNode) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.node\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.node\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sNode) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.node\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.node\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sNode) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.node\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.node\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sNode) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.node\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.node\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sNode) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.node].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "resourceVersion":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.node\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sNode) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sNode) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sKubelet resource interface
type K8sKubelet interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ConfigFile() (core.File, error)
	Process() (core.Process, error)
	Configuration() (interface{}, error)
}

// mqlK8sKubelet for the k8s.kubelet resource
type mqlK8sKubelet struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sKubelet) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.kubelet resource
func newK8sKubelet(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sKubelet{runtime.NewResource("k8s.kubelet")}
	var existing K8sKubelet
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "configFile":
			if _, ok := val.(core.File); !ok {
				return nil, errors.New("Failed to initialize \"k8s.kubelet\", its \"configFile\" argument has the wrong type (expected type \"core.File\")")
			}
		case "process":
			if _, ok := val.(core.Process); !ok {
				return nil, errors.New("Failed to initialize \"k8s.kubelet\", its \"process\" argument has the wrong type (expected type \"core.Process\")")
			}
		case "configuration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.kubelet\", its \"configuration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.kubelet\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.kubelet with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sKubelet) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("configFile"); !ok {
		return errors.New("Initialized \"k8s.kubelet\" resource without a \"configFile\". This field is required.")
	}
	if _, ok := s.Cache.Load("process"); !ok {
		return errors.New("Initialized \"k8s.kubelet\" resource without a \"process\". This field is required.")
	}
	if _, ok := s.Cache.Load("configuration"); !ok {
		return errors.New("Initialized \"k8s.kubelet\" resource without a \"configuration\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sKubelet) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.kubelet].Register")
	switch name {
	case "configFile":
		return nil
	case "process":
		return nil
	case "configuration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.kubelet\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sKubelet) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.kubelet].Field")
	switch name {
	case "configFile":
		return s.ConfigFile()
	case "process":
		return s.Process()
	case "configuration":
		return s.Configuration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.kubelet\" resource")
	}
}

// ConfigFile accessor autogenerated
func (s *mqlK8sKubelet) ConfigFile() (core.File, error) {
	res, ok := s.Cache.Load("configFile")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.kubelet\" failed: no value provided for static field \"configFile\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(core.File)
	if !ok {
		return nil, fmt.Errorf("\"k8s.kubelet\" failed to cast field \"configFile\" to the right type (core.File): %#v", res)
	}
	return tres, nil
}

// Process accessor autogenerated
func (s *mqlK8sKubelet) Process() (core.Process, error) {
	res, ok := s.Cache.Load("process")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.kubelet\" failed: no value provided for static field \"process\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(core.Process)
	if !ok {
		return nil, fmt.Errorf("\"k8s.kubelet\" failed to cast field \"process\" to the right type (core.Process): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlK8sKubelet) Configuration() (interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.kubelet\" failed: no value provided for static field \"configuration\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.kubelet\" failed to cast field \"configuration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sKubelet) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.kubelet].Compute")
	switch name {
	case "configFile":
		return nil
	case "process":
		return nil
	case "configuration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.kubelet\" resource")
	}
}

// K8sNamespace resource interface
type K8sNamespace interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	Name() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
}

// mqlK8sNamespace for the k8s.namespace resource
type mqlK8sNamespace struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sNamespace) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.namespace resource
func newK8sNamespace(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sNamespace{runtime.NewResource("k8s.namespace")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.namespace\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.namespace with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sNamespace) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.namespace\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.namespace\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.namespace\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.namespace\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.namespace\" resource without a \"manifest\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sNamespace) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.namespace].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.namespace\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sNamespace) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.namespace].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "name":
		return s.Name()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.namespace\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sNamespace) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.namespace\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.namespace\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sNamespace) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.namespace\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.namespace\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sNamespace) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.namespace\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.namespace\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sNamespace) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.namespace\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.namespace\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sNamespace) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.namespace\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.namespace\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sNamespace) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.namespace].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "name":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.namespace\" resource")
	}
}

// K8sPod resource interface
type K8sPod interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	ApiVersion() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	EphemeralContainers() ([]interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
	Node() (K8sNode, error)
}

// mqlK8sPod for the k8s.pod resource
type mqlK8sPod struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sPod) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.pod resource
func newK8sPod(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sPod{runtime.NewResource("k8s.pod")}
	var existing K8sPod
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "apiVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"apiVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "ephemeralContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"ephemeralContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "node":
			if _, ok := val.(K8sNode); !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"node\" argument has the wrong type (expected type \"K8sNode\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.pod\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.pod with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sPod) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("apiVersion"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"apiVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.pod\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sPod) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.pod].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "apiVersion":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "ephemeralContainers":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	case "node":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.pod\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sPod) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.pod].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "apiVersion":
		return s.ApiVersion()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "ephemeralContainers":
		return s.EphemeralContainers()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	case "node":
		return s.Node()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.pod\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sPod) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sPod) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sPod) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sPod) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sPod) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sPod) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sPod) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ApiVersion accessor autogenerated
func (s *mqlK8sPod) ApiVersion() (string, error) {
	res, ok := s.Cache.Load("apiVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"apiVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"apiVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sPod) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.pod\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.pod\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sPod) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.pod\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sPod) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.pod\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sPod) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.pod\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EphemeralContainers accessor autogenerated
func (s *mqlK8sPod) EphemeralContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("ephemeralContainers")
	if !ok || !res.Valid {
		if err := s.ComputeEphemeralContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ephemeralContainers")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"ephemeralContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ephemeralContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"ephemeralContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sPod) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sPod) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Node accessor autogenerated
func (s *mqlK8sPod) Node() (K8sNode, error) {
	res, ok := s.Cache.Load("node")
	if !ok || !res.Valid {
		if err := s.ComputeNode(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("node")
		if !ok {
			return nil, errors.New("\"k8s.pod\" calculated \"node\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "node")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sNode)
	if !ok {
		return nil, fmt.Errorf("\"k8s.pod\" failed to cast field \"node\" to the right type (K8sNode): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sPod) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.pod].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "apiVersion":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "ephemeralContainers":
		return s.ComputeEphemeralContainers()
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	case "node":
		return s.ComputeNode()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.pod\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sPod) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sPod) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeEphemeralContainers computer autogenerated
func (s *mqlK8sPod) ComputeEphemeralContainers() error {
	var err error
	if _, ok := s.Cache.Load("ephemeralContainers"); ok {
		return nil
	}
	vres, err := s.GetEphemeralContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ephemeralContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sPod) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sPod) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNode computer autogenerated
func (s *mqlK8sPod) ComputeNode() error {
	var err error
	if _, ok := s.Cache.Load("node"); ok {
		return nil
	}
	vres, err := s.GetNode()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("node", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sContainer resource interface
type K8sContainer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Uid() (string, error)
	Name() (string, error)
	ImageName() (string, error)
	Image() (string, error)
	ContainerImage() (os.ContainerImage, error)
	Command() ([]interface{}, error)
	Args() ([]interface{}, error)
	Resources() (interface{}, error)
	VolumeMounts() ([]interface{}, error)
	VolumeDevices() ([]interface{}, error)
	LivenessProbe() (interface{}, error)
	ReadinessProbe() (interface{}, error)
	ImagePullPolicy() (string, error)
	SecurityContext() (interface{}, error)
	WorkingDir() (string, error)
	Tty() (bool, error)
	Env() (interface{}, error)
	EnvFrom() (interface{}, error)
}

// mqlK8sContainer for the k8s.container resource
type mqlK8sContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.container resource
func newK8sContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sContainer{runtime.NewResource("k8s.container")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "imageName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"imageName\" argument has the wrong type (expected type \"string\")")
			}
		case "image":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"image\" argument has the wrong type (expected type \"string\")")
			}
		case "containerImage":
			if _, ok := val.(os.ContainerImage); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"containerImage\" argument has the wrong type (expected type \"os.ContainerImage\")")
			}
		case "command":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"command\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "args":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"args\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "resources":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"resources\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "volumeMounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"volumeMounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "volumeDevices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"volumeDevices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "livenessProbe":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"livenessProbe\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "readinessProbe":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"readinessProbe\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "imagePullPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"imagePullPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "securityContext":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"securityContext\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "workingDir":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"workingDir\" argument has the wrong type (expected type \"string\")")
			}
		case "tty":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"tty\" argument has the wrong type (expected type \"bool\")")
			}
		case "env":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"env\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "envFrom":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"envFrom\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.container\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.container with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("imageName"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"imageName\". This field is required.")
	}
	if _, ok := s.Cache.Load("image"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"image\". This field is required.")
	}
	if _, ok := s.Cache.Load("command"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"command\". This field is required.")
	}
	if _, ok := s.Cache.Load("args"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"args\". This field is required.")
	}
	if _, ok := s.Cache.Load("resources"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"resources\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeMounts"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"volumeMounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeDevices"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"volumeDevices\". This field is required.")
	}
	if _, ok := s.Cache.Load("livenessProbe"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"livenessProbe\". This field is required.")
	}
	if _, ok := s.Cache.Load("readinessProbe"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"readinessProbe\". This field is required.")
	}
	if _, ok := s.Cache.Load("imagePullPolicy"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"imagePullPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityContext"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"securityContext\". This field is required.")
	}
	if _, ok := s.Cache.Load("workingDir"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"workingDir\". This field is required.")
	}
	if _, ok := s.Cache.Load("tty"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"tty\". This field is required.")
	}
	if _, ok := s.Cache.Load("env"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"env\". This field is required.")
	}
	if _, ok := s.Cache.Load("envFrom"); !ok {
		return errors.New("Initialized \"k8s.container\" resource without a \"envFrom\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.container].Register")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return nil
	case "command":
		return nil
	case "args":
		return nil
	case "resources":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "livenessProbe":
		return nil
	case "readinessProbe":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.container\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.container].Field")
	switch name {
	case "uid":
		return s.Uid()
	case "name":
		return s.Name()
	case "imageName":
		return s.ImageName()
	case "image":
		return s.Image()
	case "containerImage":
		return s.ContainerImage()
	case "command":
		return s.Command()
	case "args":
		return s.Args()
	case "resources":
		return s.Resources()
	case "volumeMounts":
		return s.VolumeMounts()
	case "volumeDevices":
		return s.VolumeDevices()
	case "livenessProbe":
		return s.LivenessProbe()
	case "readinessProbe":
		return s.ReadinessProbe()
	case "imagePullPolicy":
		return s.ImagePullPolicy()
	case "securityContext":
		return s.SecurityContext()
	case "workingDir":
		return s.WorkingDir()
	case "tty":
		return s.Tty()
	case "env":
		return s.Env()
	case "envFrom":
		return s.EnvFrom()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.container\" resource")
	}
}

// Uid accessor autogenerated
func (s *mqlK8sContainer) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ImageName accessor autogenerated
func (s *mqlK8sContainer) ImageName() (string, error) {
	res, ok := s.Cache.Load("imageName")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"imageName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"imageName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Image accessor autogenerated
func (s *mqlK8sContainer) Image() (string, error) {
	res, ok := s.Cache.Load("image")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"image\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"image\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ContainerImage accessor autogenerated
func (s *mqlK8sContainer) ContainerImage() (os.ContainerImage, error) {
	res, ok := s.Cache.Load("containerImage")
	if !ok || !res.Valid {
		if err := s.ComputeContainerImage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containerImage")
		if !ok {
			return nil, errors.New("\"k8s.container\" calculated \"containerImage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containerImage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(os.ContainerImage)
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"containerImage\" to the right type (os.ContainerImage): %#v", res)
	}
	return tres, nil
}

// Command accessor autogenerated
func (s *mqlK8sContainer) Command() ([]interface{}, error) {
	res, ok := s.Cache.Load("command")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"command\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"command\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Args accessor autogenerated
func (s *mqlK8sContainer) Args() ([]interface{}, error) {
	res, ok := s.Cache.Load("args")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"args\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"args\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Resources accessor autogenerated
func (s *mqlK8sContainer) Resources() (interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"resources\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"resources\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeMounts accessor autogenerated
func (s *mqlK8sContainer) VolumeMounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeMounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"volumeMounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"volumeMounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeDevices accessor autogenerated
func (s *mqlK8sContainer) VolumeDevices() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeDevices")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"volumeDevices\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"volumeDevices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// LivenessProbe accessor autogenerated
func (s *mqlK8sContainer) LivenessProbe() (interface{}, error) {
	res, ok := s.Cache.Load("livenessProbe")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"livenessProbe\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"livenessProbe\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ReadinessProbe accessor autogenerated
func (s *mqlK8sContainer) ReadinessProbe() (interface{}, error) {
	res, ok := s.Cache.Load("readinessProbe")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"readinessProbe\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"readinessProbe\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// ImagePullPolicy accessor autogenerated
func (s *mqlK8sContainer) ImagePullPolicy() (string, error) {
	res, ok := s.Cache.Load("imagePullPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"imagePullPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"imagePullPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityContext accessor autogenerated
func (s *mqlK8sContainer) SecurityContext() (interface{}, error) {
	res, ok := s.Cache.Load("securityContext")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"securityContext\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"securityContext\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// WorkingDir accessor autogenerated
func (s *mqlK8sContainer) WorkingDir() (string, error) {
	res, ok := s.Cache.Load("workingDir")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.container\" failed: no value provided for static field \"workingDir\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.container\" failed to cast field \"workingDir\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tty accessor autogenerated
func (s *mqlK8sContainer) Tty() (bool, error) {
	res, ok := s.Cache.Load("tty")
	if !ok || !res.Valid {
		return false, errors.New("\"k8s.container\" failed: no value provided for static field \"tty\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"k8s.container\" failed to cast field \"tty\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Env accessor autogenerated
func (s *mqlK8sContainer) Env() (interface{}, error) {
	res, ok := s.Cache.Load("env")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"env\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"env\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnvFrom accessor autogenerated
func (s *mqlK8sContainer) EnvFrom() (interface{}, error) {
	res, ok := s.Cache.Load("envFrom")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.container\" failed: no value provided for static field \"envFrom\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.container\" failed to cast field \"envFrom\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sContainer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.container].Compute")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return s.ComputeContainerImage()
	case "command":
		return nil
	case "args":
		return nil
	case "resources":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "livenessProbe":
		return nil
	case "readinessProbe":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.container\" resource")
	}
}

// ComputeContainerImage computer autogenerated
func (s *mqlK8sContainer) ComputeContainerImage() error {
	var err error
	if _, ok := s.Cache.Load("containerImage"); ok {
		return nil
	}
	vres, err := s.GetContainerImage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containerImage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sInitContainer resource interface
type K8sInitContainer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Uid() (string, error)
	Name() (string, error)
	ImageName() (string, error)
	Image() (string, error)
	ContainerImage() (os.ContainerImage, error)
	Command() ([]interface{}, error)
	Args() ([]interface{}, error)
	Resources() (interface{}, error)
	VolumeMounts() ([]interface{}, error)
	VolumeDevices() ([]interface{}, error)
	ImagePullPolicy() (string, error)
	SecurityContext() (interface{}, error)
	WorkingDir() (string, error)
	Tty() (bool, error)
	Env() (interface{}, error)
	EnvFrom() (interface{}, error)
}

// mqlK8sInitContainer for the k8s.initContainer resource
type mqlK8sInitContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sInitContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.initContainer resource
func newK8sInitContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sInitContainer{runtime.NewResource("k8s.initContainer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "imageName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"imageName\" argument has the wrong type (expected type \"string\")")
			}
		case "image":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"image\" argument has the wrong type (expected type \"string\")")
			}
		case "containerImage":
			if _, ok := val.(os.ContainerImage); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"containerImage\" argument has the wrong type (expected type \"os.ContainerImage\")")
			}
		case "command":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"command\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "args":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"args\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "resources":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"resources\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "volumeMounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"volumeMounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "volumeDevices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"volumeDevices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "imagePullPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"imagePullPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "securityContext":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"securityContext\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "workingDir":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"workingDir\" argument has the wrong type (expected type \"string\")")
			}
		case "tty":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"tty\" argument has the wrong type (expected type \"bool\")")
			}
		case "env":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"env\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "envFrom":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"envFrom\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.initContainer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.initContainer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sInitContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("imageName"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"imageName\". This field is required.")
	}
	if _, ok := s.Cache.Load("image"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"image\". This field is required.")
	}
	if _, ok := s.Cache.Load("command"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"command\". This field is required.")
	}
	if _, ok := s.Cache.Load("args"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"args\". This field is required.")
	}
	if _, ok := s.Cache.Load("resources"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"resources\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeMounts"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"volumeMounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeDevices"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"volumeDevices\". This field is required.")
	}
	if _, ok := s.Cache.Load("imagePullPolicy"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"imagePullPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityContext"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"securityContext\". This field is required.")
	}
	if _, ok := s.Cache.Load("workingDir"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"workingDir\". This field is required.")
	}
	if _, ok := s.Cache.Load("tty"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"tty\". This field is required.")
	}
	if _, ok := s.Cache.Load("env"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"env\". This field is required.")
	}
	if _, ok := s.Cache.Load("envFrom"); !ok {
		return errors.New("Initialized \"k8s.initContainer\" resource without a \"envFrom\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sInitContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.initContainer].Register")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return nil
	case "command":
		return nil
	case "args":
		return nil
	case "resources":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.initContainer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sInitContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.initContainer].Field")
	switch name {
	case "uid":
		return s.Uid()
	case "name":
		return s.Name()
	case "imageName":
		return s.ImageName()
	case "image":
		return s.Image()
	case "containerImage":
		return s.ContainerImage()
	case "command":
		return s.Command()
	case "args":
		return s.Args()
	case "resources":
		return s.Resources()
	case "volumeMounts":
		return s.VolumeMounts()
	case "volumeDevices":
		return s.VolumeDevices()
	case "imagePullPolicy":
		return s.ImagePullPolicy()
	case "securityContext":
		return s.SecurityContext()
	case "workingDir":
		return s.WorkingDir()
	case "tty":
		return s.Tty()
	case "env":
		return s.Env()
	case "envFrom":
		return s.EnvFrom()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.initContainer\" resource")
	}
}

// Uid accessor autogenerated
func (s *mqlK8sInitContainer) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sInitContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ImageName accessor autogenerated
func (s *mqlK8sInitContainer) ImageName() (string, error) {
	res, ok := s.Cache.Load("imageName")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"imageName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"imageName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Image accessor autogenerated
func (s *mqlK8sInitContainer) Image() (string, error) {
	res, ok := s.Cache.Load("image")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"image\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"image\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ContainerImage accessor autogenerated
func (s *mqlK8sInitContainer) ContainerImage() (os.ContainerImage, error) {
	res, ok := s.Cache.Load("containerImage")
	if !ok || !res.Valid {
		if err := s.ComputeContainerImage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containerImage")
		if !ok {
			return nil, errors.New("\"k8s.initContainer\" calculated \"containerImage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containerImage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(os.ContainerImage)
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"containerImage\" to the right type (os.ContainerImage): %#v", res)
	}
	return tres, nil
}

// Command accessor autogenerated
func (s *mqlK8sInitContainer) Command() ([]interface{}, error) {
	res, ok := s.Cache.Load("command")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"command\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"command\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Args accessor autogenerated
func (s *mqlK8sInitContainer) Args() ([]interface{}, error) {
	res, ok := s.Cache.Load("args")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"args\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"args\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Resources accessor autogenerated
func (s *mqlK8sInitContainer) Resources() (interface{}, error) {
	res, ok := s.Cache.Load("resources")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"resources\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"resources\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeMounts accessor autogenerated
func (s *mqlK8sInitContainer) VolumeMounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeMounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"volumeMounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"volumeMounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeDevices accessor autogenerated
func (s *mqlK8sInitContainer) VolumeDevices() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeDevices")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"volumeDevices\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"volumeDevices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ImagePullPolicy accessor autogenerated
func (s *mqlK8sInitContainer) ImagePullPolicy() (string, error) {
	res, ok := s.Cache.Load("imagePullPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"imagePullPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"imagePullPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityContext accessor autogenerated
func (s *mqlK8sInitContainer) SecurityContext() (interface{}, error) {
	res, ok := s.Cache.Load("securityContext")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"securityContext\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"securityContext\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// WorkingDir accessor autogenerated
func (s *mqlK8sInitContainer) WorkingDir() (string, error) {
	res, ok := s.Cache.Load("workingDir")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.initContainer\" failed: no value provided for static field \"workingDir\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.initContainer\" failed to cast field \"workingDir\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tty accessor autogenerated
func (s *mqlK8sInitContainer) Tty() (bool, error) {
	res, ok := s.Cache.Load("tty")
	if !ok || !res.Valid {
		return false, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"tty\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"tty\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Env accessor autogenerated
func (s *mqlK8sInitContainer) Env() (interface{}, error) {
	res, ok := s.Cache.Load("env")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"env\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"env\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnvFrom accessor autogenerated
func (s *mqlK8sInitContainer) EnvFrom() (interface{}, error) {
	res, ok := s.Cache.Load("envFrom")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.initContainer\" failed: no value provided for static field \"envFrom\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.initContainer\" failed to cast field \"envFrom\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sInitContainer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.initContainer].Compute")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return s.ComputeContainerImage()
	case "command":
		return nil
	case "args":
		return nil
	case "resources":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.initContainer\" resource")
	}
}

// ComputeContainerImage computer autogenerated
func (s *mqlK8sInitContainer) ComputeContainerImage() error {
	var err error
	if _, ok := s.Cache.Load("containerImage"); ok {
		return nil
	}
	vres, err := s.GetContainerImage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containerImage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sEphemeralContainer resource interface
type K8sEphemeralContainer interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Uid() (string, error)
	Name() (string, error)
	ImageName() (string, error)
	Image() (string, error)
	ContainerImage() (os.ContainerImage, error)
	Command() ([]interface{}, error)
	Args() ([]interface{}, error)
	VolumeMounts() ([]interface{}, error)
	VolumeDevices() ([]interface{}, error)
	ImagePullPolicy() (string, error)
	SecurityContext() (interface{}, error)
	WorkingDir() (string, error)
	Tty() (bool, error)
	Env() (interface{}, error)
	EnvFrom() (interface{}, error)
}

// mqlK8sEphemeralContainer for the k8s.ephemeralContainer resource
type mqlK8sEphemeralContainer struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sEphemeralContainer) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ephemeralContainer resource
func newK8sEphemeralContainer(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sEphemeralContainer{runtime.NewResource("k8s.ephemeralContainer")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "imageName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"imageName\" argument has the wrong type (expected type \"string\")")
			}
		case "image":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"image\" argument has the wrong type (expected type \"string\")")
			}
		case "containerImage":
			if _, ok := val.(os.ContainerImage); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"containerImage\" argument has the wrong type (expected type \"os.ContainerImage\")")
			}
		case "command":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"command\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "args":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"args\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "volumeMounts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"volumeMounts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "volumeDevices":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"volumeDevices\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "imagePullPolicy":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"imagePullPolicy\" argument has the wrong type (expected type \"string\")")
			}
		case "securityContext":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"securityContext\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "workingDir":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"workingDir\" argument has the wrong type (expected type \"string\")")
			}
		case "tty":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"tty\" argument has the wrong type (expected type \"bool\")")
			}
		case "env":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"env\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "envFrom":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"envFrom\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ephemeralContainer\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ephemeralContainer with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sEphemeralContainer) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("imageName"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"imageName\". This field is required.")
	}
	if _, ok := s.Cache.Load("image"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"image\". This field is required.")
	}
	if _, ok := s.Cache.Load("command"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"command\". This field is required.")
	}
	if _, ok := s.Cache.Load("args"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"args\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeMounts"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"volumeMounts\". This field is required.")
	}
	if _, ok := s.Cache.Load("volumeDevices"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"volumeDevices\". This field is required.")
	}
	if _, ok := s.Cache.Load("imagePullPolicy"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"imagePullPolicy\". This field is required.")
	}
	if _, ok := s.Cache.Load("securityContext"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"securityContext\". This field is required.")
	}
	if _, ok := s.Cache.Load("workingDir"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"workingDir\". This field is required.")
	}
	if _, ok := s.Cache.Load("tty"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"tty\". This field is required.")
	}
	if _, ok := s.Cache.Load("env"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"env\". This field is required.")
	}
	if _, ok := s.Cache.Load("envFrom"); !ok {
		return errors.New("Initialized \"k8s.ephemeralContainer\" resource without a \"envFrom\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sEphemeralContainer) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ephemeralContainer].Register")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return nil
	case "command":
		return nil
	case "args":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ephemeralContainer\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sEphemeralContainer) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ephemeralContainer].Field")
	switch name {
	case "uid":
		return s.Uid()
	case "name":
		return s.Name()
	case "imageName":
		return s.ImageName()
	case "image":
		return s.Image()
	case "containerImage":
		return s.ContainerImage()
	case "command":
		return s.Command()
	case "args":
		return s.Args()
	case "volumeMounts":
		return s.VolumeMounts()
	case "volumeDevices":
		return s.VolumeDevices()
	case "imagePullPolicy":
		return s.ImagePullPolicy()
	case "securityContext":
		return s.SecurityContext()
	case "workingDir":
		return s.WorkingDir()
	case "tty":
		return s.Tty()
	case "env":
		return s.Env()
	case "envFrom":
		return s.EnvFrom()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ephemeralContainer\" resource")
	}
}

// Uid accessor autogenerated
func (s *mqlK8sEphemeralContainer) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sEphemeralContainer) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ImageName accessor autogenerated
func (s *mqlK8sEphemeralContainer) ImageName() (string, error) {
	res, ok := s.Cache.Load("imageName")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"imageName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"imageName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Image accessor autogenerated
func (s *mqlK8sEphemeralContainer) Image() (string, error) {
	res, ok := s.Cache.Load("image")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"image\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"image\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ContainerImage accessor autogenerated
func (s *mqlK8sEphemeralContainer) ContainerImage() (os.ContainerImage, error) {
	res, ok := s.Cache.Load("containerImage")
	if !ok || !res.Valid {
		if err := s.ComputeContainerImage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containerImage")
		if !ok {
			return nil, errors.New("\"k8s.ephemeralContainer\" calculated \"containerImage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containerImage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(os.ContainerImage)
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"containerImage\" to the right type (os.ContainerImage): %#v", res)
	}
	return tres, nil
}

// Command accessor autogenerated
func (s *mqlK8sEphemeralContainer) Command() ([]interface{}, error) {
	res, ok := s.Cache.Load("command")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"command\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"command\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Args accessor autogenerated
func (s *mqlK8sEphemeralContainer) Args() ([]interface{}, error) {
	res, ok := s.Cache.Load("args")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"args\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"args\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeMounts accessor autogenerated
func (s *mqlK8sEphemeralContainer) VolumeMounts() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeMounts")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"volumeMounts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"volumeMounts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VolumeDevices accessor autogenerated
func (s *mqlK8sEphemeralContainer) VolumeDevices() ([]interface{}, error) {
	res, ok := s.Cache.Load("volumeDevices")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"volumeDevices\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"volumeDevices\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ImagePullPolicy accessor autogenerated
func (s *mqlK8sEphemeralContainer) ImagePullPolicy() (string, error) {
	res, ok := s.Cache.Load("imagePullPolicy")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"imagePullPolicy\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"imagePullPolicy\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// SecurityContext accessor autogenerated
func (s *mqlK8sEphemeralContainer) SecurityContext() (interface{}, error) {
	res, ok := s.Cache.Load("securityContext")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"securityContext\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"securityContext\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// WorkingDir accessor autogenerated
func (s *mqlK8sEphemeralContainer) WorkingDir() (string, error) {
	res, ok := s.Cache.Load("workingDir")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"workingDir\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"workingDir\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Tty accessor autogenerated
func (s *mqlK8sEphemeralContainer) Tty() (bool, error) {
	res, ok := s.Cache.Load("tty")
	if !ok || !res.Valid {
		return false, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"tty\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"tty\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Env accessor autogenerated
func (s *mqlK8sEphemeralContainer) Env() (interface{}, error) {
	res, ok := s.Cache.Load("env")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"env\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"env\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// EnvFrom accessor autogenerated
func (s *mqlK8sEphemeralContainer) EnvFrom() (interface{}, error) {
	res, ok := s.Cache.Load("envFrom")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ephemeralContainer\" failed: no value provided for static field \"envFrom\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ephemeralContainer\" failed to cast field \"envFrom\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sEphemeralContainer) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ephemeralContainer].Compute")
	switch name {
	case "uid":
		return nil
	case "name":
		return nil
	case "imageName":
		return nil
	case "image":
		return nil
	case "containerImage":
		return s.ComputeContainerImage()
	case "command":
		return nil
	case "args":
		return nil
	case "volumeMounts":
		return nil
	case "volumeDevices":
		return nil
	case "imagePullPolicy":
		return nil
	case "securityContext":
		return nil
	case "workingDir":
		return nil
	case "tty":
		return nil
	case "env":
		return nil
	case "envFrom":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ephemeralContainer\" resource")
	}
}

// ComputeContainerImage computer autogenerated
func (s *mqlK8sEphemeralContainer) ComputeContainerImage() error {
	var err error
	if _, ok := s.Cache.Load("containerImage"); ok {
		return nil
	}
	vres, err := s.GetContainerImage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containerImage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sDeployment resource interface
type K8sDeployment interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sDeployment for the k8s.deployment resource
type mqlK8sDeployment struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sDeployment) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.deployment resource
func newK8sDeployment(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sDeployment{runtime.NewResource("k8s.deployment")}
	var existing K8sDeployment
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.deployment\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.deployment with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sDeployment) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.deployment\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sDeployment) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.deployment].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.deployment\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sDeployment) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.deployment].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.deployment\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sDeployment) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sDeployment) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sDeployment) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sDeployment) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.deployment\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sDeployment) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.deployment\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sDeployment) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sDeployment) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sDeployment) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.deployment\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.deployment\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sDeployment) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.deployment\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sDeployment) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.deployment\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sDeployment) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.deployment\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sDeployment) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.deployment\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sDeployment) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.deployment\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.deployment\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sDeployment) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.deployment].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.deployment\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sDeployment) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sDeployment) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sDeployment) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sDeployment) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sDaemonset resource interface
type K8sDaemonset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sDaemonset for the k8s.daemonset resource
type mqlK8sDaemonset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sDaemonset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.daemonset resource
func newK8sDaemonset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sDaemonset{runtime.NewResource("k8s.daemonset")}
	var existing K8sDaemonset
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.daemonset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.daemonset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sDaemonset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.daemonset\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sDaemonset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.daemonset].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.daemonset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sDaemonset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.daemonset].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.daemonset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sDaemonset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sDaemonset) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sDaemonset) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sDaemonset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.daemonset\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sDaemonset) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.daemonset\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sDaemonset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sDaemonset) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sDaemonset) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.daemonset\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.daemonset\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sDaemonset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.daemonset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sDaemonset) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.daemonset\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sDaemonset) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.daemonset\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sDaemonset) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.daemonset\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sDaemonset) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.daemonset\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.daemonset\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sDaemonset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.daemonset].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.daemonset\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sDaemonset) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sDaemonset) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sDaemonset) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sDaemonset) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sStatefulset resource interface
type K8sStatefulset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sStatefulset for the k8s.statefulset resource
type mqlK8sStatefulset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sStatefulset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.statefulset resource
func newK8sStatefulset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sStatefulset{runtime.NewResource("k8s.statefulset")}
	var existing K8sStatefulset
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.statefulset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.statefulset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sStatefulset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.statefulset\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sStatefulset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.statefulset].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.statefulset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sStatefulset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.statefulset].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.statefulset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sStatefulset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sStatefulset) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sStatefulset) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sStatefulset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.statefulset\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sStatefulset) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.statefulset\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sStatefulset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sStatefulset) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sStatefulset) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.statefulset\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.statefulset\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sStatefulset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.statefulset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sStatefulset) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.statefulset\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sStatefulset) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.statefulset\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sStatefulset) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.statefulset\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sStatefulset) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.statefulset\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.statefulset\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sStatefulset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.statefulset].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.statefulset\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sStatefulset) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sStatefulset) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sStatefulset) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sStatefulset) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sReplicaset resource interface
type K8sReplicaset interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sReplicaset for the k8s.replicaset resource
type mqlK8sReplicaset struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sReplicaset) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.replicaset resource
func newK8sReplicaset(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sReplicaset{runtime.NewResource("k8s.replicaset")}
	var existing K8sReplicaset
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.replicaset\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.replicaset with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sReplicaset) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.replicaset\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sReplicaset) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.replicaset].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.replicaset\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sReplicaset) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.replicaset].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.replicaset\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sReplicaset) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sReplicaset) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sReplicaset) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sReplicaset) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.replicaset\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sReplicaset) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.replicaset\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sReplicaset) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sReplicaset) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sReplicaset) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.replicaset\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.replicaset\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sReplicaset) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.replicaset\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sReplicaset) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.replicaset\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sReplicaset) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.replicaset\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sReplicaset) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.replicaset\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sReplicaset) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.replicaset\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.replicaset\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sReplicaset) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.replicaset].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.replicaset\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sReplicaset) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sReplicaset) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sReplicaset) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sReplicaset) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sJob resource interface
type K8sJob interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sJob for the k8s.job resource
type mqlK8sJob struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sJob) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.job resource
func newK8sJob(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sJob{runtime.NewResource("k8s.job")}
	var existing K8sJob
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.job\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.job with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sJob) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.job\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sJob) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.job].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.job\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sJob) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.job].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.job\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sJob) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sJob) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sJob) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sJob) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.job\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sJob) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.job\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sJob) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sJob) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sJob) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.job\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.job\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sJob) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.job\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sJob) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.job\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sJob) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.job\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sJob) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.job\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sJob) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.job\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.job\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sJob) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.job].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.job\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sJob) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sJob) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sJob) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sJob) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sCronjob resource interface
type K8sCronjob interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	PodSpec() (interface{}, error)
	InitContainers() ([]interface{}, error)
	Containers() ([]interface{}, error)
}

// mqlK8sCronjob for the k8s.cronjob resource
type mqlK8sCronjob struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sCronjob) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.cronjob resource
func newK8sCronjob(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sCronjob{runtime.NewResource("k8s.cronjob")}
	var existing K8sCronjob
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "podSpec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"podSpec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "initContainers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"initContainers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "containers":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"containers\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.cronjob\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.cronjob with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sCronjob) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("podSpec"); !ok {
		return errors.New("Initialized \"k8s.cronjob\" resource without a \"podSpec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sCronjob) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.cronjob].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return nil
	case "containers":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.cronjob\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sCronjob) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.cronjob].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "podSpec":
		return s.PodSpec()
	case "initContainers":
		return s.InitContainers()
	case "containers":
		return s.Containers()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.cronjob\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sCronjob) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sCronjob) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sCronjob) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sCronjob) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.cronjob\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sCronjob) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.cronjob\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sCronjob) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sCronjob) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sCronjob) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.cronjob\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.cronjob\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sCronjob) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.cronjob\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sCronjob) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.cronjob\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// PodSpec accessor autogenerated
func (s *mqlK8sCronjob) PodSpec() (interface{}, error) {
	res, ok := s.Cache.Load("podSpec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.cronjob\" failed: no value provided for static field \"podSpec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"podSpec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// InitContainers accessor autogenerated
func (s *mqlK8sCronjob) InitContainers() ([]interface{}, error) {
	res, ok := s.Cache.Load("initContainers")
	if !ok || !res.Valid {
		if err := s.ComputeInitContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("initContainers")
		if !ok {
			return nil, errors.New("\"k8s.cronjob\" calculated \"initContainers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "initContainers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"initContainers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Containers accessor autogenerated
func (s *mqlK8sCronjob) Containers() ([]interface{}, error) {
	res, ok := s.Cache.Load("containers")
	if !ok || !res.Valid {
		if err := s.ComputeContainers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("containers")
		if !ok {
			return nil, errors.New("\"k8s.cronjob\" calculated \"containers\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "containers")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.cronjob\" failed to cast field \"containers\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sCronjob) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.cronjob].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "podSpec":
		return nil
	case "initContainers":
		return s.ComputeInitContainers()
	case "containers":
		return s.ComputeContainers()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.cronjob\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sCronjob) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sCronjob) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeInitContainers computer autogenerated
func (s *mqlK8sCronjob) ComputeInitContainers() error {
	var err error
	if _, ok := s.Cache.Load("initContainers"); ok {
		return nil
	}
	vres, err := s.GetInitContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("initContainers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeContainers computer autogenerated
func (s *mqlK8sCronjob) ComputeContainers() error {
	var err error
	if _, ok := s.Cache.Load("containers"); ok {
		return nil
	}
	vres, err := s.GetContainers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("containers", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sSecret resource interface
type K8sSecret interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Type() (string, error)
	Certificates() ([]interface{}, error)
}

// mqlK8sSecret for the k8s.secret resource
type mqlK8sSecret struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sSecret) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.secret resource
func newK8sSecret(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sSecret{runtime.NewResource("k8s.secret")}
	var existing K8sSecret
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.secret\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.secret with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sSecret) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"k8s.secret\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sSecret) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.secret].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "type":
		return nil
	case "certificates":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.secret\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sSecret) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.secret].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "type":
		return s.Type()
	case "certificates":
		return s.Certificates()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.secret\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sSecret) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sSecret) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sSecret) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sSecret) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.secret\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.secret\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sSecret) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.secret\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.secret\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sSecret) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sSecret) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sSecret) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sSecret) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.secret\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.secret\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sSecret) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.secret\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.secret\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlK8sSecret) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.secret\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.secret\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlK8sSecret) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		if err := s.ComputeCertificates(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("certificates")
		if !ok {
			return nil, errors.New("\"k8s.secret\" calculated \"certificates\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "certificates")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.secret\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sSecret) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.secret].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "type":
		return nil
	case "certificates":
		return s.ComputeCertificates()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.secret\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sSecret) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sSecret) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCertificates computer autogenerated
func (s *mqlK8sSecret) ComputeCertificates() error {
	var err error
	if _, ok := s.Cache.Load("certificates"); ok {
		return nil
	}
	vres, err := s.GetCertificates()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("certificates", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sPodsecuritypolicy resource interface
type K8sPodsecuritypolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Spec() (interface{}, error)
}

// mqlK8sPodsecuritypolicy for the k8s.podsecuritypolicy resource
type mqlK8sPodsecuritypolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sPodsecuritypolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.podsecuritypolicy resource
func newK8sPodsecuritypolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sPodsecuritypolicy{runtime.NewResource("k8s.podsecuritypolicy")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "spec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"spec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.podsecuritypolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.podsecuritypolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sPodsecuritypolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("spec"); !ok {
		return errors.New("Initialized \"k8s.podsecuritypolicy\" resource without a \"spec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.podsecuritypolicy].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.podsecuritypolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.podsecuritypolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "spec":
		return s.Spec()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.podsecuritypolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.podsecuritypolicy\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.podsecuritypolicy\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Spec accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Spec() (interface{}, error) {
	res, ok := s.Cache.Load("spec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.podsecuritypolicy\" failed: no value provided for static field \"spec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.podsecuritypolicy\" failed to cast field \"spec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sPodsecuritypolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.podsecuritypolicy].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.podsecuritypolicy\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sPodsecuritypolicy) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sPodsecuritypolicy) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sConfigmap resource interface
type K8sConfigmap interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Data() (map[string]interface{}, error)
}

// mqlK8sConfigmap for the k8s.configmap resource
type mqlK8sConfigmap struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sConfigmap) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.configmap resource
func newK8sConfigmap(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sConfigmap{runtime.NewResource("k8s.configmap")}
	var existing K8sConfigmap
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "data":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"data\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.configmap\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.configmap with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sConfigmap) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("data"); !ok {
		return errors.New("Initialized \"k8s.configmap\" resource without a \"data\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sConfigmap) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.configmap].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "data":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.configmap\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sConfigmap) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.configmap].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "data":
		return s.Data()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.configmap\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sConfigmap) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sConfigmap) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sConfigmap) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sConfigmap) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.configmap\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.configmap\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sConfigmap) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.configmap\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.configmap\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sConfigmap) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sConfigmap) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sConfigmap) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.configmap\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.configmap\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sConfigmap) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.configmap\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.configmap\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sConfigmap) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.configmap\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.configmap\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Data accessor autogenerated
func (s *mqlK8sConfigmap) Data() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("data")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.configmap\" failed: no value provided for static field \"data\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.configmap\" failed to cast field \"data\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sConfigmap) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.configmap].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "data":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.configmap\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sConfigmap) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sConfigmap) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sService resource interface
type K8sService interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Spec() (interface{}, error)
}

// mqlK8sService for the k8s.service resource
type mqlK8sService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.service resource
func newK8sService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sService{runtime.NewResource("k8s.service")}
	var existing K8sService
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "spec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"spec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.service\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.service with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("spec"); !ok {
		return errors.New("Initialized \"k8s.service\" resource without a \"spec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.service].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.service\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.service].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "spec":
		return s.Spec()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.service\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sService) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sService) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sService) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sService) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.service\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.service\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sService) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.service\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.service\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sService) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sService) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sService) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.service\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.service\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sService) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.service\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.service\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sService) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.service\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.service\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Spec accessor autogenerated
func (s *mqlK8sService) Spec() (interface{}, error) {
	res, ok := s.Cache.Load("spec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.service\" failed: no value provided for static field \"spec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.service\" failed to cast field \"spec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sService) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.service].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.service\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sService) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sService) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sIngressresourceref resource interface
type K8sIngressresourceref interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ApiGroup() (string, error)
	Kind() (string, error)
	Name() (string, error)
}

// mqlK8sIngressresourceref for the k8s.ingressresourceref resource
type mqlK8sIngressresourceref struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngressresourceref) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingressresourceref resource
func newK8sIngressresourceref(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngressresourceref{runtime.NewResource("k8s.ingressresourceref")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressresourceref\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "apiGroup":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressresourceref\", its \"apiGroup\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressresourceref\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressresourceref\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressresourceref\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingressresourceref with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngressresourceref) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingressresourceref\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("apiGroup"); !ok {
		return errors.New("Initialized \"k8s.ingressresourceref\" resource without a \"apiGroup\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.ingressresourceref\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.ingressresourceref\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngressresourceref) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressresourceref].Register")
	switch name {
	case "id":
		return nil
	case "apiGroup":
		return nil
	case "kind":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressresourceref\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngressresourceref) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingressresourceref].Field")
	switch name {
	case "id":
		return s.Id()
	case "apiGroup":
		return s.ApiGroup()
	case "kind":
		return s.Kind()
	case "name":
		return s.Name()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingressresourceref\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngressresourceref) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressresourceref\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressresourceref\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ApiGroup accessor autogenerated
func (s *mqlK8sIngressresourceref) ApiGroup() (string, error) {
	res, ok := s.Cache.Load("apiGroup")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressresourceref\" failed: no value provided for static field \"apiGroup\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressresourceref\" failed to cast field \"apiGroup\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sIngressresourceref) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressresourceref\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressresourceref\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sIngressresourceref) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressresourceref\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressresourceref\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngressresourceref) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressresourceref].Compute")
	switch name {
	case "id":
		return nil
	case "apiGroup":
		return nil
	case "kind":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressresourceref\" resource")
	}
}

// K8sIngressservicebackend resource interface
type K8sIngressservicebackend interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	PortName() (string, error)
	PortNumber() (int64, error)
}

// mqlK8sIngressservicebackend for the k8s.ingressservicebackend resource
type mqlK8sIngressservicebackend struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngressservicebackend) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingressservicebackend resource
func newK8sIngressservicebackend(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngressservicebackend{runtime.NewResource("k8s.ingressservicebackend")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressservicebackend\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressservicebackend\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "portName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressservicebackend\", its \"portName\" argument has the wrong type (expected type \"string\")")
			}
		case "portNumber":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressservicebackend\", its \"portNumber\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressservicebackend\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingressservicebackend with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngressservicebackend) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingressservicebackend\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.ingressservicebackend\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("portName"); !ok {
		return errors.New("Initialized \"k8s.ingressservicebackend\" resource without a \"portName\". This field is required.")
	}
	if _, ok := s.Cache.Load("portNumber"); !ok {
		return errors.New("Initialized \"k8s.ingressservicebackend\" resource without a \"portNumber\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngressservicebackend) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressservicebackend].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "portName":
		return nil
	case "portNumber":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressservicebackend\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngressservicebackend) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingressservicebackend].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "portName":
		return s.PortName()
	case "portNumber":
		return s.PortNumber()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingressservicebackend\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngressservicebackend) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressservicebackend\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressservicebackend\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sIngressservicebackend) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressservicebackend\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressservicebackend\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PortName accessor autogenerated
func (s *mqlK8sIngressservicebackend) PortName() (string, error) {
	res, ok := s.Cache.Load("portName")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressservicebackend\" failed: no value provided for static field \"portName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressservicebackend\" failed to cast field \"portName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PortNumber accessor autogenerated
func (s *mqlK8sIngressservicebackend) PortNumber() (int64, error) {
	res, ok := s.Cache.Load("portNumber")
	if !ok || !res.Valid {
		return 0, errors.New("\"k8s.ingressservicebackend\" failed: no value provided for static field \"portNumber\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"k8s.ingressservicebackend\" failed to cast field \"portNumber\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngressservicebackend) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressservicebackend].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "portName":
		return nil
	case "portNumber":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressservicebackend\" resource")
	}
}

// K8sIngressbackend resource interface
type K8sIngressbackend interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Service() (K8sIngressservicebackend, error)
	ResourceRef() (K8sIngressresourceref, error)
}

// mqlK8sIngressbackend for the k8s.ingressbackend resource
type mqlK8sIngressbackend struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngressbackend) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingressbackend resource
func newK8sIngressbackend(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngressbackend{runtime.NewResource("k8s.ingressbackend")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressbackend\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "service":
			if _, ok := val.(K8sIngressservicebackend); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressbackend\", its \"service\" argument has the wrong type (expected type \"K8sIngressservicebackend\")")
			}
		case "resourceRef":
			if _, ok := val.(K8sIngressresourceref); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressbackend\", its \"resourceRef\" argument has the wrong type (expected type \"K8sIngressresourceref\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressbackend\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingressbackend with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngressbackend) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingressbackend\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("service"); !ok {
		return errors.New("Initialized \"k8s.ingressbackend\" resource without a \"service\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceRef"); !ok {
		return errors.New("Initialized \"k8s.ingressbackend\" resource without a \"resourceRef\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngressbackend) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressbackend].Register")
	switch name {
	case "id":
		return nil
	case "service":
		return nil
	case "resourceRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressbackend\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngressbackend) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingressbackend].Field")
	switch name {
	case "id":
		return s.Id()
	case "service":
		return s.Service()
	case "resourceRef":
		return s.ResourceRef()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingressbackend\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngressbackend) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressbackend\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressbackend\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Service accessor autogenerated
func (s *mqlK8sIngressbackend) Service() (K8sIngressservicebackend, error) {
	res, ok := s.Cache.Load("service")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingressbackend\" failed: no value provided for static field \"service\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sIngressservicebackend)
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingressbackend\" failed to cast field \"service\" to the right type (K8sIngressservicebackend): %#v", res)
	}
	return tres, nil
}

// ResourceRef accessor autogenerated
func (s *mqlK8sIngressbackend) ResourceRef() (K8sIngressresourceref, error) {
	res, ok := s.Cache.Load("resourceRef")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingressbackend\" failed: no value provided for static field \"resourceRef\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sIngressresourceref)
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingressbackend\" failed to cast field \"resourceRef\" to the right type (K8sIngressresourceref): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngressbackend) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressbackend].Compute")
	switch name {
	case "id":
		return nil
	case "service":
		return nil
	case "resourceRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressbackend\" resource")
	}
}

// K8sIngresshttprulepath resource interface
type K8sIngresshttprulepath interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Path() (string, error)
	PathType() (string, error)
	Backend() (K8sIngressbackend, error)
}

// mqlK8sIngresshttprulepath for the k8s.ingresshttprulepath resource
type mqlK8sIngresshttprulepath struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngresshttprulepath) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingresshttprulepath resource
func newK8sIngresshttprulepath(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngresshttprulepath{runtime.NewResource("k8s.ingresshttprulepath")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresshttprulepath\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "path":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresshttprulepath\", its \"path\" argument has the wrong type (expected type \"string\")")
			}
		case "pathType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresshttprulepath\", its \"pathType\" argument has the wrong type (expected type \"string\")")
			}
		case "backend":
			if _, ok := val.(K8sIngressbackend); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresshttprulepath\", its \"backend\" argument has the wrong type (expected type \"K8sIngressbackend\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresshttprulepath\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingresshttprulepath with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngresshttprulepath) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingresshttprulepath\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("path"); !ok {
		return errors.New("Initialized \"k8s.ingresshttprulepath\" resource without a \"path\". This field is required.")
	}
	if _, ok := s.Cache.Load("pathType"); !ok {
		return errors.New("Initialized \"k8s.ingresshttprulepath\" resource without a \"pathType\". This field is required.")
	}
	if _, ok := s.Cache.Load("backend"); !ok {
		return errors.New("Initialized \"k8s.ingresshttprulepath\" resource without a \"backend\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingresshttprulepath].Register")
	switch name {
	case "id":
		return nil
	case "path":
		return nil
	case "pathType":
		return nil
	case "backend":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingresshttprulepath\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingresshttprulepath].Field")
	switch name {
	case "id":
		return s.Id()
	case "path":
		return s.Path()
	case "pathType":
		return s.PathType()
	case "backend":
		return s.Backend()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingresshttprulepath\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingresshttprulepath\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingresshttprulepath\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Path accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Path() (string, error) {
	res, ok := s.Cache.Load("path")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingresshttprulepath\" failed: no value provided for static field \"path\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingresshttprulepath\" failed to cast field \"path\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PathType accessor autogenerated
func (s *mqlK8sIngresshttprulepath) PathType() (string, error) {
	res, ok := s.Cache.Load("pathType")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingresshttprulepath\" failed: no value provided for static field \"pathType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingresshttprulepath\" failed to cast field \"pathType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Backend accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Backend() (K8sIngressbackend, error) {
	res, ok := s.Cache.Load("backend")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingresshttprulepath\" failed: no value provided for static field \"backend\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sIngressbackend)
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingresshttprulepath\" failed to cast field \"backend\" to the right type (K8sIngressbackend): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngresshttprulepath) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingresshttprulepath].Compute")
	switch name {
	case "id":
		return nil
	case "path":
		return nil
	case "pathType":
		return nil
	case "backend":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingresshttprulepath\" resource")
	}
}

// K8sIngressrule resource interface
type K8sIngressrule interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Host() (string, error)
	HttpPaths() ([]interface{}, error)
}

// mqlK8sIngressrule for the k8s.ingressrule resource
type mqlK8sIngressrule struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngressrule) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingressrule resource
func newK8sIngressrule(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngressrule{runtime.NewResource("k8s.ingressrule")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressrule\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "host":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressrule\", its \"host\" argument has the wrong type (expected type \"string\")")
			}
		case "httpPaths":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressrule\", its \"httpPaths\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingressrule\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingressrule with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngressrule) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingressrule\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("host"); !ok {
		return errors.New("Initialized \"k8s.ingressrule\" resource without a \"host\". This field is required.")
	}
	if _, ok := s.Cache.Load("httpPaths"); !ok {
		return errors.New("Initialized \"k8s.ingressrule\" resource without a \"httpPaths\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngressrule) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressrule].Register")
	switch name {
	case "id":
		return nil
	case "host":
		return nil
	case "httpPaths":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressrule\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngressrule) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingressrule].Field")
	switch name {
	case "id":
		return s.Id()
	case "host":
		return s.Host()
	case "httpPaths":
		return s.HttpPaths()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingressrule\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngressrule) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressrule\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressrule\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Host accessor autogenerated
func (s *mqlK8sIngressrule) Host() (string, error) {
	res, ok := s.Cache.Load("host")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingressrule\" failed: no value provided for static field \"host\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingressrule\" failed to cast field \"host\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HttpPaths accessor autogenerated
func (s *mqlK8sIngressrule) HttpPaths() ([]interface{}, error) {
	res, ok := s.Cache.Load("httpPaths")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingressrule\" failed: no value provided for static field \"httpPaths\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingressrule\" failed to cast field \"httpPaths\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngressrule) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingressrule].Compute")
	switch name {
	case "id":
		return nil
	case "host":
		return nil
	case "httpPaths":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingressrule\" resource")
	}
}

// K8sIngresstls resource interface
type K8sIngresstls interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Hosts() ([]interface{}, error)
	Certificates() ([]interface{}, error)
}

// mqlK8sIngresstls for the k8s.ingresstls resource
type mqlK8sIngresstls struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngresstls) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingresstls resource
func newK8sIngresstls(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngresstls{runtime.NewResource("k8s.ingresstls")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresstls\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "hosts":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresstls\", its \"hosts\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "certificates":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresstls\", its \"certificates\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingresstls\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingresstls with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngresstls) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingresstls\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("hosts"); !ok {
		return errors.New("Initialized \"k8s.ingresstls\" resource without a \"hosts\". This field is required.")
	}
	if _, ok := s.Cache.Load("certificates"); !ok {
		return errors.New("Initialized \"k8s.ingresstls\" resource without a \"certificates\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngresstls) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingresstls].Register")
	switch name {
	case "id":
		return nil
	case "hosts":
		return nil
	case "certificates":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingresstls\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngresstls) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingresstls].Field")
	switch name {
	case "id":
		return s.Id()
	case "hosts":
		return s.Hosts()
	case "certificates":
		return s.Certificates()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingresstls\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngresstls) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingresstls\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingresstls\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hosts accessor autogenerated
func (s *mqlK8sIngresstls) Hosts() ([]interface{}, error) {
	res, ok := s.Cache.Load("hosts")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingresstls\" failed: no value provided for static field \"hosts\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingresstls\" failed to cast field \"hosts\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Certificates accessor autogenerated
func (s *mqlK8sIngresstls) Certificates() ([]interface{}, error) {
	res, ok := s.Cache.Load("certificates")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingresstls\" failed: no value provided for static field \"certificates\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingresstls\" failed to cast field \"certificates\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngresstls) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingresstls].Compute")
	switch name {
	case "id":
		return nil
	case "hosts":
		return nil
	case "certificates":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingresstls\" resource")
	}
}

// K8sIngress resource interface
type K8sIngress interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Rules() ([]interface{}, error)
	Tls() ([]interface{}, error)
}

// mqlK8sIngress for the k8s.ingress resource
type mqlK8sIngress struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sIngress) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.ingress resource
func newK8sIngress(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sIngress{runtime.NewResource("k8s.ingress")}
	var existing K8sIngress
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "tls":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"tls\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.ingress\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.ingress with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sIngress) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("rules"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"rules\". This field is required.")
	}
	if _, ok := s.Cache.Load("tls"); !ok {
		return errors.New("Initialized \"k8s.ingress\" resource without a \"tls\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sIngress) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingress].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	case "tls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingress\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sIngress) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.ingress].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "rules":
		return s.Rules()
	case "tls":
		return s.Tls()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.ingress\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sIngress) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sIngress) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sIngress) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sIngress) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.ingress\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sIngress) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.ingress\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sIngress) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sIngress) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sIngress) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.ingress\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.ingress\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sIngress) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingress\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sIngress) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingress\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlK8sIngress) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingress\" failed: no value provided for static field \"rules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Tls accessor autogenerated
func (s *mqlK8sIngress) Tls() ([]interface{}, error) {
	res, ok := s.Cache.Load("tls")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.ingress\" failed: no value provided for static field \"tls\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.ingress\" failed to cast field \"tls\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sIngress) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.ingress].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	case "tls":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.ingress\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sIngress) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sIngress) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sNetworkpolicy resource interface
type K8sNetworkpolicy interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Spec() (interface{}, error)
}

// mqlK8sNetworkpolicy for the k8s.networkpolicy resource
type mqlK8sNetworkpolicy struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sNetworkpolicy) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.networkpolicy resource
func newK8sNetworkpolicy(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sNetworkpolicy{runtime.NewResource("k8s.networkpolicy")}
	var existing K8sNetworkpolicy
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "spec":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"spec\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.networkpolicy\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.networkpolicy with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sNetworkpolicy) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("spec"); !ok {
		return errors.New("Initialized \"k8s.networkpolicy\" resource without a \"spec\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sNetworkpolicy) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.networkpolicy].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.networkpolicy\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sNetworkpolicy) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.networkpolicy].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "spec":
		return s.Spec()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.networkpolicy\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sNetworkpolicy) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sNetworkpolicy) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sNetworkpolicy) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sNetworkpolicy) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.networkpolicy\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sNetworkpolicy) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.networkpolicy\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sNetworkpolicy) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sNetworkpolicy) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sNetworkpolicy) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sNetworkpolicy) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sNetworkpolicy) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Spec accessor autogenerated
func (s *mqlK8sNetworkpolicy) Spec() (interface{}, error) {
	res, ok := s.Cache.Load("spec")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.networkpolicy\" failed: no value provided for static field \"spec\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.networkpolicy\" failed to cast field \"spec\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sNetworkpolicy) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.networkpolicy].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "spec":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.networkpolicy\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sNetworkpolicy) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sNetworkpolicy) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sServiceaccount resource interface
type K8sServiceaccount interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Secrets() ([]interface{}, error)
	ImagePullSecrets() ([]interface{}, error)
	AutomountServiceAccountToken() (bool, error)
}

// mqlK8sServiceaccount for the k8s.serviceaccount resource
type mqlK8sServiceaccount struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sServiceaccount) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.serviceaccount resource
func newK8sServiceaccount(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sServiceaccount{runtime.NewResource("k8s.serviceaccount")}
	var existing K8sServiceaccount
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "secrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"secrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "imagePullSecrets":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"imagePullSecrets\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "automountServiceAccountToken":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"automountServiceAccountToken\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.serviceaccount\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.serviceaccount with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sServiceaccount) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("secrets"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"secrets\". This field is required.")
	}
	if _, ok := s.Cache.Load("imagePullSecrets"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"imagePullSecrets\". This field is required.")
	}
	if _, ok := s.Cache.Load("automountServiceAccountToken"); !ok {
		return errors.New("Initialized \"k8s.serviceaccount\" resource without a \"automountServiceAccountToken\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sServiceaccount) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.serviceaccount].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "secrets":
		return nil
	case "imagePullSecrets":
		return nil
	case "automountServiceAccountToken":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.serviceaccount\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sServiceaccount) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.serviceaccount].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "secrets":
		return s.Secrets()
	case "imagePullSecrets":
		return s.ImagePullSecrets()
	case "automountServiceAccountToken":
		return s.AutomountServiceAccountToken()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.serviceaccount\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sServiceaccount) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sServiceaccount) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sServiceaccount) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sServiceaccount) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.serviceaccount\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sServiceaccount) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.serviceaccount\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sServiceaccount) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sServiceaccount) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sServiceaccount) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sServiceaccount) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sServiceaccount) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Secrets accessor autogenerated
func (s *mqlK8sServiceaccount) Secrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("secrets")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"secrets\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"secrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ImagePullSecrets accessor autogenerated
func (s *mqlK8sServiceaccount) ImagePullSecrets() ([]interface{}, error) {
	res, ok := s.Cache.Load("imagePullSecrets")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"imagePullSecrets\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"imagePullSecrets\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AutomountServiceAccountToken accessor autogenerated
func (s *mqlK8sServiceaccount) AutomountServiceAccountToken() (bool, error) {
	res, ok := s.Cache.Load("automountServiceAccountToken")
	if !ok || !res.Valid {
		return false, errors.New("\"k8s.serviceaccount\" failed: no value provided for static field \"automountServiceAccountToken\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"k8s.serviceaccount\" failed to cast field \"automountServiceAccountToken\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sServiceaccount) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.serviceaccount].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "secrets":
		return nil
	case "imagePullSecrets":
		return nil
	case "automountServiceAccountToken":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.serviceaccount\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sServiceaccount) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sServiceaccount) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sRbacClusterrole resource interface
type K8sRbacClusterrole interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Rules() ([]interface{}, error)
	AggregationRule() (interface{}, error)
}

// mqlK8sRbacClusterrole for the k8s.rbac.clusterrole resource
type mqlK8sRbacClusterrole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sRbacClusterrole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.rbac.clusterrole resource
func newK8sRbacClusterrole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sRbacClusterrole{runtime.NewResource("k8s.rbac.clusterrole")}
	var existing K8sRbacClusterrole
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "aggregationRule":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"aggregationRule\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrole\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.rbac.clusterrole with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sRbacClusterrole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("rules"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"rules\". This field is required.")
	}
	if _, ok := s.Cache.Load("aggregationRule"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrole\" resource without a \"aggregationRule\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sRbacClusterrole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrole].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	case "aggregationRule":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.clusterrole\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sRbacClusterrole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrole].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "rules":
		return s.Rules()
	case "aggregationRule":
		return s.AggregationRule()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.rbac.clusterrole\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sRbacClusterrole) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sRbacClusterrole) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sRbacClusterrole) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sRbacClusterrole) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.rbac.clusterrole\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sRbacClusterrole) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.rbac.clusterrole\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sRbacClusterrole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sRbacClusterrole) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sRbacClusterrole) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sRbacClusterrole) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlK8sRbacClusterrole) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"rules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// AggregationRule accessor autogenerated
func (s *mqlK8sRbacClusterrole) AggregationRule() (interface{}, error) {
	res, ok := s.Cache.Load("aggregationRule")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrole\" failed: no value provided for static field \"aggregationRule\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrole\" failed to cast field \"aggregationRule\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sRbacClusterrole) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrole].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	case "aggregationRule":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.clusterrole\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sRbacClusterrole) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sRbacClusterrole) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sRbacRole resource interface
type K8sRbacRole interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Rules() ([]interface{}, error)
}

// mqlK8sRbacRole for the k8s.rbac.role resource
type mqlK8sRbacRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sRbacRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.rbac.role resource
func newK8sRbacRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sRbacRole{runtime.NewResource("k8s.rbac.role")}
	var existing K8sRbacRole
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "rules":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"rules\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.rbac.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sRbacRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("rules"); !ok {
		return errors.New("Initialized \"k8s.rbac.role\" resource without a \"rules\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sRbacRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.role].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sRbacRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.rbac.role].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "rules":
		return s.Rules()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.rbac.role\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sRbacRole) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sRbacRole) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sRbacRole) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sRbacRole) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.rbac.role\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sRbacRole) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.rbac.role\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sRbacRole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sRbacRole) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sRbacRole) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sRbacRole) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sRbacRole) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Rules accessor autogenerated
func (s *mqlK8sRbacRole) Rules() ([]interface{}, error) {
	res, ok := s.Cache.Load("rules")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.role\" failed: no value provided for static field \"rules\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.role\" failed to cast field \"rules\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sRbacRole) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.role].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "rules":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.role\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sRbacRole) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sRbacRole) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sRbacClusterrolebinding resource interface
type K8sRbacClusterrolebinding interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Subjects() ([]interface{}, error)
	RoleRef() (interface{}, error)
}

// mqlK8sRbacClusterrolebinding for the k8s.rbac.clusterrolebinding resource
type mqlK8sRbacClusterrolebinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sRbacClusterrolebinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.rbac.clusterrolebinding resource
func newK8sRbacClusterrolebinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sRbacClusterrolebinding{runtime.NewResource("k8s.rbac.clusterrolebinding")}
	var existing K8sRbacClusterrolebinding
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "subjects":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"subjects\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roleRef":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"roleRef\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.clusterrolebinding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.rbac.clusterrolebinding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sRbacClusterrolebinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("subjects"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"subjects\". This field is required.")
	}
	if _, ok := s.Cache.Load("roleRef"); !ok {
		return errors.New("Initialized \"k8s.rbac.clusterrolebinding\" resource without a \"roleRef\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrolebinding].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "subjects":
		return nil
	case "roleRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.clusterrolebinding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrolebinding].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "subjects":
		return s.Subjects()
	case "roleRef":
		return s.RoleRef()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.rbac.clusterrolebinding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.rbac.clusterrolebinding\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.rbac.clusterrolebinding\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Subjects accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Subjects() ([]interface{}, error) {
	res, ok := s.Cache.Load("subjects")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"subjects\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"subjects\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RoleRef accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) RoleRef() (interface{}, error) {
	res, ok := s.Cache.Load("roleRef")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.clusterrolebinding\" failed: no value provided for static field \"roleRef\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.clusterrolebinding\" failed to cast field \"roleRef\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sRbacClusterrolebinding) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.clusterrolebinding].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "subjects":
		return nil
	case "roleRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.clusterrolebinding\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sRbacClusterrolebinding) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sRbacClusterrolebinding) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sRbacRolebinding resource interface
type K8sRbacRolebinding interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
	Subjects() ([]interface{}, error)
	RoleRef() (interface{}, error)
}

// mqlK8sRbacRolebinding for the k8s.rbac.rolebinding resource
type mqlK8sRbacRolebinding struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sRbacRolebinding) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.rbac.rolebinding resource
func newK8sRbacRolebinding(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sRbacRolebinding{runtime.NewResource("k8s.rbac.rolebinding")}
	var existing K8sRbacRolebinding
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "subjects":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"subjects\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roleRef":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"roleRef\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.rbac.rolebinding\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.rbac.rolebinding with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sRbacRolebinding) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"manifest\". This field is required.")
	}
	if _, ok := s.Cache.Load("subjects"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"subjects\". This field is required.")
	}
	if _, ok := s.Cache.Load("roleRef"); !ok {
		return errors.New("Initialized \"k8s.rbac.rolebinding\" resource without a \"roleRef\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sRbacRolebinding) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.rolebinding].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "subjects":
		return nil
	case "roleRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.rolebinding\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sRbacRolebinding) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.rbac.rolebinding].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	case "subjects":
		return s.Subjects()
	case "roleRef":
		return s.RoleRef()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.rbac.rolebinding\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sRbacRolebinding) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sRbacRolebinding) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sRbacRolebinding) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sRbacRolebinding) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.rbac.rolebinding\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sRbacRolebinding) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.rbac.rolebinding\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sRbacRolebinding) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sRbacRolebinding) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sRbacRolebinding) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sRbacRolebinding) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sRbacRolebinding) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Subjects accessor autogenerated
func (s *mqlK8sRbacRolebinding) Subjects() ([]interface{}, error) {
	res, ok := s.Cache.Load("subjects")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"subjects\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"subjects\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// RoleRef accessor autogenerated
func (s *mqlK8sRbacRolebinding) RoleRef() (interface{}, error) {
	res, ok := s.Cache.Load("roleRef")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.rbac.rolebinding\" failed: no value provided for static field \"roleRef\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.rbac.rolebinding\" failed to cast field \"roleRef\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sRbacRolebinding) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.rbac.rolebinding].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	case "subjects":
		return nil
	case "roleRef":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.rbac.rolebinding\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sRbacRolebinding) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sRbacRolebinding) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sCustomresource resource interface
type K8sCustomresource interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Uid() (string, error)
	ResourceVersion() (string, error)
	Labels() (map[string]interface{}, error)
	Annotations() (map[string]interface{}, error)
	Name() (string, error)
	Namespace() (string, error)
	Kind() (string, error)
	Created() (*time.Time, error)
	Manifest() (interface{}, error)
}

// mqlK8sCustomresource for the k8s.customresource resource
type mqlK8sCustomresource struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sCustomresource) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.customresource resource
func newK8sCustomresource(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sCustomresource{runtime.NewResource("k8s.customresource")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "resourceVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"resourceVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "labels":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"labels\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "annotations":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"annotations\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "kind":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"kind\" argument has the wrong type (expected type \"string\")")
			}
		case "created":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"created\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "manifest":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"manifest\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.customresource\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.customresource with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sCustomresource) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"uid\". This field is required.")
	}
	if _, ok := s.Cache.Load("resourceVersion"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"resourceVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("kind"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"kind\". This field is required.")
	}
	if _, ok := s.Cache.Load("created"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"created\". This field is required.")
	}
	if _, ok := s.Cache.Load("manifest"); !ok {
		return errors.New("Initialized \"k8s.customresource\" resource without a \"manifest\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sCustomresource) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.customresource].Register")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return nil
	case "annotations":
		return nil
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.customresource\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sCustomresource) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.customresource].Field")
	switch name {
	case "id":
		return s.Id()
	case "uid":
		return s.Uid()
	case "resourceVersion":
		return s.ResourceVersion()
	case "labels":
		return s.Labels()
	case "annotations":
		return s.Annotations()
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "kind":
		return s.Kind()
	case "created":
		return s.Created()
	case "manifest":
		return s.Manifest()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.customresource\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlK8sCustomresource) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sCustomresource) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ResourceVersion accessor autogenerated
func (s *mqlK8sCustomresource) ResourceVersion() (string, error) {
	res, ok := s.Cache.Load("resourceVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"resourceVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"resourceVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Labels accessor autogenerated
func (s *mqlK8sCustomresource) Labels() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("labels")
	if !ok || !res.Valid {
		if err := s.ComputeLabels(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("labels")
		if !ok {
			return nil, errors.New("\"k8s.customresource\" calculated \"labels\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "labels")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.customresource\" failed to cast field \"labels\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Annotations accessor autogenerated
func (s *mqlK8sCustomresource) Annotations() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("annotations")
	if !ok || !res.Valid {
		if err := s.ComputeAnnotations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("annotations")
		if !ok {
			return nil, errors.New("\"k8s.customresource\" calculated \"annotations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "annotations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.customresource\" failed to cast field \"annotations\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlK8sCustomresource) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sCustomresource) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Kind accessor autogenerated
func (s *mqlK8sCustomresource) Kind() (string, error) {
	res, ok := s.Cache.Load("kind")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.customresource\" failed: no value provided for static field \"kind\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.customresource\" failed to cast field \"kind\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Created accessor autogenerated
func (s *mqlK8sCustomresource) Created() (*time.Time, error) {
	res, ok := s.Cache.Load("created")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.customresource\" failed: no value provided for static field \"created\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"k8s.customresource\" failed to cast field \"created\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Manifest accessor autogenerated
func (s *mqlK8sCustomresource) Manifest() (interface{}, error) {
	res, ok := s.Cache.Load("manifest")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.customresource\" failed: no value provided for static field \"manifest\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.customresource\" failed to cast field \"manifest\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sCustomresource) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.customresource].Compute")
	switch name {
	case "id":
		return nil
	case "uid":
		return nil
	case "resourceVersion":
		return nil
	case "labels":
		return s.ComputeLabels()
	case "annotations":
		return s.ComputeAnnotations()
	case "name":
		return nil
	case "namespace":
		return nil
	case "kind":
		return nil
	case "created":
		return nil
	case "manifest":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.customresource\" resource")
	}
}

// ComputeLabels computer autogenerated
func (s *mqlK8sCustomresource) ComputeLabels() error {
	var err error
	if _, ok := s.Cache.Load("labels"); ok {
		return nil
	}
	vres, err := s.GetLabels()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("labels", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAnnotations computer autogenerated
func (s *mqlK8sCustomresource) ComputeAnnotations() error {
	var err error
	if _, ok := s.Cache.Load("annotations"); ok {
		return nil
	}
	vres, err := s.GetAnnotations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("annotations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sAdmissionreview resource interface
type K8sAdmissionreview interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Request() (K8sAdmissionrequest, error)
}

// mqlK8sAdmissionreview for the k8s.admissionreview resource
type mqlK8sAdmissionreview struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sAdmissionreview) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.admissionreview resource
func newK8sAdmissionreview(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sAdmissionreview{runtime.NewResource("k8s.admissionreview")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "request":
			if _, ok := val.(K8sAdmissionrequest); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionreview\", its \"request\" argument has the wrong type (expected type \"K8sAdmissionrequest\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionreview\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.admissionreview with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sAdmissionreview) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sAdmissionreview) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.admissionreview].Register")
	switch name {
	case "request":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.admissionreview\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sAdmissionreview) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.admissionreview].Field")
	switch name {
	case "request":
		return s.Request()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.admissionreview\" resource")
	}
}

// Request accessor autogenerated
func (s *mqlK8sAdmissionreview) Request() (K8sAdmissionrequest, error) {
	res, ok := s.Cache.Load("request")
	if !ok || !res.Valid {
		if err := s.ComputeRequest(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("request")
		if !ok {
			return nil, errors.New("\"k8s.admissionreview\" calculated \"request\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "request")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sAdmissionrequest)
	if !ok {
		return nil, fmt.Errorf("\"k8s.admissionreview\" failed to cast field \"request\" to the right type (K8sAdmissionrequest): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sAdmissionreview) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.admissionreview].Compute")
	switch name {
	case "request":
		return s.ComputeRequest()
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.admissionreview\" resource")
	}
}

// ComputeRequest computer autogenerated
func (s *mqlK8sAdmissionreview) ComputeRequest() error {
	var err error
	if _, ok := s.Cache.Load("request"); ok {
		return nil
	}
	vres, err := s.GetRequest()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("request", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sAdmissionrequest resource interface
type K8sAdmissionrequest interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Namespace() (string, error)
	Operation() (string, error)
	UserInfo() (K8sUserinfo, error)
	Object() (interface{}, error)
	OldObject() (interface{}, error)
}

// mqlK8sAdmissionrequest for the k8s.admissionrequest resource
type mqlK8sAdmissionrequest struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sAdmissionrequest) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.admissionrequest resource
func newK8sAdmissionrequest(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sAdmissionrequest{runtime.NewResource("k8s.admissionrequest")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "namespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"namespace\" argument has the wrong type (expected type \"string\")")
			}
		case "operation":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"operation\" argument has the wrong type (expected type \"string\")")
			}
		case "userInfo":
			if _, ok := val.(K8sUserinfo); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"userInfo\" argument has the wrong type (expected type \"K8sUserinfo\")")
			}
		case "object":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"object\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "oldObject":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"oldObject\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.admissionrequest\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.admissionrequest with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sAdmissionrequest) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"k8s.admissionrequest\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("namespace"); !ok {
		return errors.New("Initialized \"k8s.admissionrequest\" resource without a \"namespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("operation"); !ok {
		return errors.New("Initialized \"k8s.admissionrequest\" resource without a \"operation\". This field is required.")
	}
	if _, ok := s.Cache.Load("object"); !ok {
		return errors.New("Initialized \"k8s.admissionrequest\" resource without a \"object\". This field is required.")
	}
	if _, ok := s.Cache.Load("oldObject"); !ok {
		return errors.New("Initialized \"k8s.admissionrequest\" resource without a \"oldObject\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sAdmissionrequest) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.admissionrequest].Register")
	switch name {
	case "name":
		return nil
	case "namespace":
		return nil
	case "operation":
		return nil
	case "userInfo":
		return nil
	case "object":
		return nil
	case "oldObject":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.admissionrequest\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sAdmissionrequest) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.admissionrequest].Field")
	switch name {
	case "name":
		return s.Name()
	case "namespace":
		return s.Namespace()
	case "operation":
		return s.Operation()
	case "userInfo":
		return s.UserInfo()
	case "object":
		return s.Object()
	case "oldObject":
		return s.OldObject()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.admissionrequest\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlK8sAdmissionrequest) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.admissionrequest\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Namespace accessor autogenerated
func (s *mqlK8sAdmissionrequest) Namespace() (string, error) {
	res, ok := s.Cache.Load("namespace")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.admissionrequest\" failed: no value provided for static field \"namespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"namespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Operation accessor autogenerated
func (s *mqlK8sAdmissionrequest) Operation() (string, error) {
	res, ok := s.Cache.Load("operation")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.admissionrequest\" failed: no value provided for static field \"operation\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"operation\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserInfo accessor autogenerated
func (s *mqlK8sAdmissionrequest) UserInfo() (K8sUserinfo, error) {
	res, ok := s.Cache.Load("userInfo")
	if !ok || !res.Valid {
		if err := s.ComputeUserInfo(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("userInfo")
		if !ok {
			return nil, errors.New("\"k8s.admissionrequest\" calculated \"userInfo\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "userInfo")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(K8sUserinfo)
	if !ok {
		return nil, fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"userInfo\" to the right type (K8sUserinfo): %#v", res)
	}
	return tres, nil
}

// Object accessor autogenerated
func (s *mqlK8sAdmissionrequest) Object() (interface{}, error) {
	res, ok := s.Cache.Load("object")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.admissionrequest\" failed: no value provided for static field \"object\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"object\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// OldObject accessor autogenerated
func (s *mqlK8sAdmissionrequest) OldObject() (interface{}, error) {
	res, ok := s.Cache.Load("oldObject")
	if !ok || !res.Valid {
		return nil, errors.New("\"k8s.admissionrequest\" failed: no value provided for static field \"oldObject\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"k8s.admissionrequest\" failed to cast field \"oldObject\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sAdmissionrequest) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.admissionrequest].Compute")
	switch name {
	case "name":
		return nil
	case "namespace":
		return nil
	case "operation":
		return nil
	case "userInfo":
		return s.ComputeUserInfo()
	case "object":
		return nil
	case "oldObject":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.admissionrequest\" resource")
	}
}

// ComputeUserInfo computer autogenerated
func (s *mqlK8sAdmissionrequest) ComputeUserInfo() error {
	var err error
	if _, ok := s.Cache.Load("userInfo"); ok {
		return nil
	}
	vres, err := s.GetUserInfo()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("userInfo", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// K8sUserinfo resource interface
type K8sUserinfo interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Username() (string, error)
	Uid() (string, error)
}

// mqlK8sUserinfo for the k8s.userinfo resource
type mqlK8sUserinfo struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlK8sUserinfo) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the k8s.userinfo resource
func newK8sUserinfo(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlK8sUserinfo{runtime.NewResource("k8s.userinfo")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "username":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.userinfo\", its \"username\" argument has the wrong type (expected type \"string\")")
			}
		case "uid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"k8s.userinfo\", its \"uid\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"k8s.userinfo\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized k8s.userinfo with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlK8sUserinfo) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("username"); !ok {
		return errors.New("Initialized \"k8s.userinfo\" resource without a \"username\". This field is required.")
	}
	if _, ok := s.Cache.Load("uid"); !ok {
		return errors.New("Initialized \"k8s.userinfo\" resource without a \"uid\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlK8sUserinfo) Register(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.userinfo].Register")
	switch name {
	case "username":
		return nil
	case "uid":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.userinfo\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlK8sUserinfo) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[k8s.userinfo].Field")
	switch name {
	case "username":
		return s.Username()
	case "uid":
		return s.Uid()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"k8s.userinfo\" resource")
	}
}

// Username accessor autogenerated
func (s *mqlK8sUserinfo) Username() (string, error) {
	res, ok := s.Cache.Load("username")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.userinfo\" failed: no value provided for static field \"username\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.userinfo\" failed to cast field \"username\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uid accessor autogenerated
func (s *mqlK8sUserinfo) Uid() (string, error) {
	res, ok := s.Cache.Load("uid")
	if !ok || !res.Valid {
		return "", errors.New("\"k8s.userinfo\" failed: no value provided for static field \"uid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"k8s.userinfo\" failed to cast field \"uid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlK8sUserinfo) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[k8s.userinfo].Compute")
	switch name {
	case "username":
		return nil
	case "uid":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"k8s.userinfo\" resource")
	}
}

