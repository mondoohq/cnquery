// Code generated by resources. DO NOT EDIT.
package googleworkspace

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("googleworkspace", newGoogleworkspace)
	registry.AddFactory("googleworkspace.orgUnit", newGoogleworkspaceOrgUnit)
	registry.AddFactory("googleworkspace.domain", newGoogleworkspaceDomain)
	registry.AddFactory("googleworkspace.user", newGoogleworkspaceUser)
	registry.AddFactory("googleworkspace.token", newGoogleworkspaceToken)
	registry.AddFactory("googleworkspace.group", newGoogleworkspaceGroup)
	registry.AddFactory("googleworkspace.member", newGoogleworkspaceMember)
	registry.AddFactory("googleworkspace.role", newGoogleworkspaceRole)
	registry.AddFactory("googleworkspace.report.apps", newGoogleworkspaceReportApps)
	registry.AddFactory("googleworkspace.report.activity", newGoogleworkspaceReportActivity)
	registry.AddFactory("googleworkspace.report.users", newGoogleworkspaceReportUsers)
	registry.AddFactory("googleworkspace.report.usage", newGoogleworkspaceReportUsage)
}

// Googleworkspace resource interface
type Googleworkspace interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	OrgUnits() ([]interface{}, error)
	Users() ([]interface{}, error)
	Domains() ([]interface{}, error)
	Groups() ([]interface{}, error)
	Roles() ([]interface{}, error)
}

// mqlGoogleworkspace for the googleworkspace resource
type mqlGoogleworkspace struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspace) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace resource
func newGoogleworkspace(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspace{runtime.NewResource("googleworkspace")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "orgUnits":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"orgUnits\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "users":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"users\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "domains":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"domains\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "groups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"groups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspace) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspace) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace].Register")
	switch name {
	case "orgUnits":
		return nil
	case "users":
		return nil
	case "domains":
		return nil
	case "groups":
		return nil
	case "roles":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspace) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace].Field")
	switch name {
	case "orgUnits":
		return s.OrgUnits()
	case "users":
		return s.Users()
	case "domains":
		return s.Domains()
	case "groups":
		return s.Groups()
	case "roles":
		return s.Roles()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace\" resource")
	}
}

// OrgUnits accessor autogenerated
func (s *mqlGoogleworkspace) OrgUnits() ([]interface{}, error) {
	res, ok := s.Cache.Load("orgUnits")
	if !ok || !res.Valid {
		if err := s.ComputeOrgUnits(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("orgUnits")
		if !ok {
			return nil, errors.New("\"googleworkspace\" calculated \"orgUnits\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "orgUnits")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace\" failed to cast field \"orgUnits\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Users accessor autogenerated
func (s *mqlGoogleworkspace) Users() ([]interface{}, error) {
	res, ok := s.Cache.Load("users")
	if !ok || !res.Valid {
		if err := s.ComputeUsers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("users")
		if !ok {
			return nil, errors.New("\"googleworkspace\" calculated \"users\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "users")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace\" failed to cast field \"users\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Domains accessor autogenerated
func (s *mqlGoogleworkspace) Domains() ([]interface{}, error) {
	res, ok := s.Cache.Load("domains")
	if !ok || !res.Valid {
		if err := s.ComputeDomains(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("domains")
		if !ok {
			return nil, errors.New("\"googleworkspace\" calculated \"domains\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "domains")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace\" failed to cast field \"domains\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Groups accessor autogenerated
func (s *mqlGoogleworkspace) Groups() ([]interface{}, error) {
	res, ok := s.Cache.Load("groups")
	if !ok || !res.Valid {
		if err := s.ComputeGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("groups")
		if !ok {
			return nil, errors.New("\"googleworkspace\" calculated \"groups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "groups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace\" failed to cast field \"groups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlGoogleworkspace) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"googleworkspace\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspace) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace].MqlCompute")
	switch name {
	case "orgUnits":
		return s.ComputeOrgUnits()
	case "users":
		return s.ComputeUsers()
	case "domains":
		return s.ComputeDomains()
	case "groups":
		return s.ComputeGroups()
	case "roles":
		return s.ComputeRoles()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace\" resource")
	}
}

// ComputeOrgUnits computer autogenerated
func (s *mqlGoogleworkspace) ComputeOrgUnits() error {
	var err error
	if _, ok := s.Cache.Load("orgUnits"); ok {
		return nil
	}
	vres, err := s.GetOrgUnits()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("orgUnits", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeUsers computer autogenerated
func (s *mqlGoogleworkspace) ComputeUsers() error {
	var err error
	if _, ok := s.Cache.Load("users"); ok {
		return nil
	}
	vres, err := s.GetUsers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("users", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDomains computer autogenerated
func (s *mqlGoogleworkspace) ComputeDomains() error {
	var err error
	if _, ok := s.Cache.Load("domains"); ok {
		return nil
	}
	vres, err := s.GetDomains()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("domains", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGroups computer autogenerated
func (s *mqlGoogleworkspace) ComputeGroups() error {
	var err error
	if _, ok := s.Cache.Load("groups"); ok {
		return nil
	}
	vres, err := s.GetGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("groups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoles computer autogenerated
func (s *mqlGoogleworkspace) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceOrgUnit resource interface
type GoogleworkspaceOrgUnit interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
}

// mqlGoogleworkspaceOrgUnit for the googleworkspace.orgUnit resource
type mqlGoogleworkspaceOrgUnit struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceOrgUnit) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.orgUnit resource
func newGoogleworkspaceOrgUnit(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceOrgUnit{runtime.NewResource("googleworkspace.orgUnit")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.orgUnit\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.orgUnit\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.orgUnit\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.orgUnit\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.orgUnit with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceOrgUnit) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.orgUnit\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"googleworkspace.orgUnit\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"googleworkspace.orgUnit\" resource without a \"description\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.orgUnit].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.orgUnit\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.orgUnit].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.orgUnit\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.orgUnit\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.orgUnit\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.orgUnit\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.orgUnit\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.orgUnit\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.orgUnit\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceOrgUnit) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.orgUnit].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.orgUnit\" resource")
	}
}

// GoogleworkspaceDomain resource interface
type GoogleworkspaceDomain interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	DomainName() (string, error)
	IsPrimary() (bool, error)
	Verified() (bool, error)
	CreationTime() (*time.Time, error)
}

// mqlGoogleworkspaceDomain for the googleworkspace.domain resource
type mqlGoogleworkspaceDomain struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceDomain) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.domain resource
func newGoogleworkspaceDomain(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceDomain{runtime.NewResource("googleworkspace.domain")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "domainName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.domain\", its \"domainName\" argument has the wrong type (expected type \"string\")")
			}
		case "isPrimary":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.domain\", its \"isPrimary\" argument has the wrong type (expected type \"bool\")")
			}
		case "verified":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.domain\", its \"verified\" argument has the wrong type (expected type \"bool\")")
			}
		case "creationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.domain\", its \"creationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.domain\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.domain with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceDomain) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("domainName"); !ok {
		return errors.New("Initialized \"googleworkspace.domain\" resource without a \"domainName\". This field is required.")
	}
	if _, ok := s.Cache.Load("isPrimary"); !ok {
		return errors.New("Initialized \"googleworkspace.domain\" resource without a \"isPrimary\". This field is required.")
	}
	if _, ok := s.Cache.Load("verified"); !ok {
		return errors.New("Initialized \"googleworkspace.domain\" resource without a \"verified\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationTime"); !ok {
		return errors.New("Initialized \"googleworkspace.domain\" resource without a \"creationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceDomain) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.domain].Register")
	switch name {
	case "domainName":
		return nil
	case "isPrimary":
		return nil
	case "verified":
		return nil
	case "creationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.domain\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceDomain) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.domain].Field")
	switch name {
	case "domainName":
		return s.DomainName()
	case "isPrimary":
		return s.IsPrimary()
	case "verified":
		return s.Verified()
	case "creationTime":
		return s.CreationTime()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.domain\" resource")
	}
}

// DomainName accessor autogenerated
func (s *mqlGoogleworkspaceDomain) DomainName() (string, error) {
	res, ok := s.Cache.Load("domainName")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.domain\" failed: no value provided for static field \"domainName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.domain\" failed to cast field \"domainName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsPrimary accessor autogenerated
func (s *mqlGoogleworkspaceDomain) IsPrimary() (bool, error) {
	res, ok := s.Cache.Load("isPrimary")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.domain\" failed: no value provided for static field \"isPrimary\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.domain\" failed to cast field \"isPrimary\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Verified accessor autogenerated
func (s *mqlGoogleworkspaceDomain) Verified() (bool, error) {
	res, ok := s.Cache.Load("verified")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.domain\" failed: no value provided for static field \"verified\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.domain\" failed to cast field \"verified\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// CreationTime accessor autogenerated
func (s *mqlGoogleworkspaceDomain) CreationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("creationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.domain\" failed: no value provided for static field \"creationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.domain\" failed to cast field \"creationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceDomain) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.domain].MqlCompute")
	switch name {
	case "domainName":
		return nil
	case "isPrimary":
		return nil
	case "verified":
		return nil
	case "creationTime":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.domain\" resource")
	}
}

// GoogleworkspaceUser resource interface
type GoogleworkspaceUser interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	FamilyName() (string, error)
	GivenName() (string, error)
	FullName() (string, error)
	PrimaryEmail() (string, error)
	RecoveryEmail() (string, error)
	RecoveryPhone() (string, error)
	AgreedToTerms() (bool, error)
	Aliases() ([]interface{}, error)
	Suspended() (bool, error)
	SuspensionReason() (string, error)
	Archived() (bool, error)
	IsAdmin() (bool, error)
	IsEnforcedIn2Sv() (bool, error)
	IsEnrolledIn2Sv() (bool, error)
	IsMailboxSetup() (bool, error)
	LastLoginTime() (*time.Time, error)
	CreationTime() (*time.Time, error)
	UsageReport() (GoogleworkspaceReportUsage, error)
	Tokens() ([]interface{}, error)
}

// mqlGoogleworkspaceUser for the googleworkspace.user resource
type mqlGoogleworkspaceUser struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceUser) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.user resource
func newGoogleworkspaceUser(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceUser{runtime.NewResource("googleworkspace.user")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "familyName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"familyName\" argument has the wrong type (expected type \"string\")")
			}
		case "givenName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"givenName\" argument has the wrong type (expected type \"string\")")
			}
		case "fullName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"fullName\" argument has the wrong type (expected type \"string\")")
			}
		case "primaryEmail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"primaryEmail\" argument has the wrong type (expected type \"string\")")
			}
		case "recoveryEmail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"recoveryEmail\" argument has the wrong type (expected type \"string\")")
			}
		case "recoveryPhone":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"recoveryPhone\" argument has the wrong type (expected type \"string\")")
			}
		case "agreedToTerms":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"agreedToTerms\" argument has the wrong type (expected type \"bool\")")
			}
		case "aliases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"aliases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "suspended":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"suspended\" argument has the wrong type (expected type \"bool\")")
			}
		case "suspensionReason":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"suspensionReason\" argument has the wrong type (expected type \"string\")")
			}
		case "archived":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"archived\" argument has the wrong type (expected type \"bool\")")
			}
		case "isAdmin":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"isAdmin\" argument has the wrong type (expected type \"bool\")")
			}
		case "isEnforcedIn2Sv":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"isEnforcedIn2Sv\" argument has the wrong type (expected type \"bool\")")
			}
		case "isEnrolledIn2Sv":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"isEnrolledIn2Sv\" argument has the wrong type (expected type \"bool\")")
			}
		case "isMailboxSetup":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"isMailboxSetup\" argument has the wrong type (expected type \"bool\")")
			}
		case "lastLoginTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"lastLoginTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "creationTime":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"creationTime\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "usageReport":
			if _, ok := val.(GoogleworkspaceReportUsage); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"usageReport\" argument has the wrong type (expected type \"GoogleworkspaceReportUsage\")")
			}
		case "tokens":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"tokens\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.user\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.user with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceUser) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("familyName"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"familyName\". This field is required.")
	}
	if _, ok := s.Cache.Load("givenName"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"givenName\". This field is required.")
	}
	if _, ok := s.Cache.Load("fullName"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"fullName\". This field is required.")
	}
	if _, ok := s.Cache.Load("primaryEmail"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"primaryEmail\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryEmail"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"recoveryEmail\". This field is required.")
	}
	if _, ok := s.Cache.Load("recoveryPhone"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"recoveryPhone\". This field is required.")
	}
	if _, ok := s.Cache.Load("agreedToTerms"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"agreedToTerms\". This field is required.")
	}
	if _, ok := s.Cache.Load("aliases"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"aliases\". This field is required.")
	}
	if _, ok := s.Cache.Load("suspended"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"suspended\". This field is required.")
	}
	if _, ok := s.Cache.Load("suspensionReason"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"suspensionReason\". This field is required.")
	}
	if _, ok := s.Cache.Load("archived"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"archived\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAdmin"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"isAdmin\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnforcedIn2Sv"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"isEnforcedIn2Sv\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnrolledIn2Sv"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"isEnrolledIn2Sv\". This field is required.")
	}
	if _, ok := s.Cache.Load("isMailboxSetup"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"isMailboxSetup\". This field is required.")
	}
	if _, ok := s.Cache.Load("lastLoginTime"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"lastLoginTime\". This field is required.")
	}
	if _, ok := s.Cache.Load("creationTime"); !ok {
		return errors.New("Initialized \"googleworkspace.user\" resource without a \"creationTime\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceUser) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.user].Register")
	switch name {
	case "id":
		return nil
	case "familyName":
		return nil
	case "givenName":
		return nil
	case "fullName":
		return nil
	case "primaryEmail":
		return nil
	case "recoveryEmail":
		return nil
	case "recoveryPhone":
		return nil
	case "agreedToTerms":
		return nil
	case "aliases":
		return nil
	case "suspended":
		return nil
	case "suspensionReason":
		return nil
	case "archived":
		return nil
	case "isAdmin":
		return nil
	case "isEnforcedIn2Sv":
		return nil
	case "isEnrolledIn2Sv":
		return nil
	case "isMailboxSetup":
		return nil
	case "lastLoginTime":
		return nil
	case "creationTime":
		return nil
	case "usageReport":
		return nil
	case "tokens":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.user\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceUser) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.user].Field")
	switch name {
	case "id":
		return s.Id()
	case "familyName":
		return s.FamilyName()
	case "givenName":
		return s.GivenName()
	case "fullName":
		return s.FullName()
	case "primaryEmail":
		return s.PrimaryEmail()
	case "recoveryEmail":
		return s.RecoveryEmail()
	case "recoveryPhone":
		return s.RecoveryPhone()
	case "agreedToTerms":
		return s.AgreedToTerms()
	case "aliases":
		return s.Aliases()
	case "suspended":
		return s.Suspended()
	case "suspensionReason":
		return s.SuspensionReason()
	case "archived":
		return s.Archived()
	case "isAdmin":
		return s.IsAdmin()
	case "isEnforcedIn2Sv":
		return s.IsEnforcedIn2Sv()
	case "isEnrolledIn2Sv":
		return s.IsEnrolledIn2Sv()
	case "isMailboxSetup":
		return s.IsMailboxSetup()
	case "lastLoginTime":
		return s.LastLoginTime()
	case "creationTime":
		return s.CreationTime()
	case "usageReport":
		return s.UsageReport()
	case "tokens":
		return s.Tokens()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.user\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceUser) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FamilyName accessor autogenerated
func (s *mqlGoogleworkspaceUser) FamilyName() (string, error) {
	res, ok := s.Cache.Load("familyName")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"familyName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"familyName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GivenName accessor autogenerated
func (s *mqlGoogleworkspaceUser) GivenName() (string, error) {
	res, ok := s.Cache.Load("givenName")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"givenName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"givenName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FullName accessor autogenerated
func (s *mqlGoogleworkspaceUser) FullName() (string, error) {
	res, ok := s.Cache.Load("fullName")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"fullName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"fullName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// PrimaryEmail accessor autogenerated
func (s *mqlGoogleworkspaceUser) PrimaryEmail() (string, error) {
	res, ok := s.Cache.Load("primaryEmail")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"primaryEmail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"primaryEmail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecoveryEmail accessor autogenerated
func (s *mqlGoogleworkspaceUser) RecoveryEmail() (string, error) {
	res, ok := s.Cache.Load("recoveryEmail")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"recoveryEmail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"recoveryEmail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RecoveryPhone accessor autogenerated
func (s *mqlGoogleworkspaceUser) RecoveryPhone() (string, error) {
	res, ok := s.Cache.Load("recoveryPhone")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"recoveryPhone\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"recoveryPhone\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AgreedToTerms accessor autogenerated
func (s *mqlGoogleworkspaceUser) AgreedToTerms() (bool, error) {
	res, ok := s.Cache.Load("agreedToTerms")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"agreedToTerms\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"agreedToTerms\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Aliases accessor autogenerated
func (s *mqlGoogleworkspaceUser) Aliases() ([]interface{}, error) {
	res, ok := s.Cache.Load("aliases")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"aliases\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"aliases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Suspended accessor autogenerated
func (s *mqlGoogleworkspaceUser) Suspended() (bool, error) {
	res, ok := s.Cache.Load("suspended")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"suspended\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"suspended\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// SuspensionReason accessor autogenerated
func (s *mqlGoogleworkspaceUser) SuspensionReason() (string, error) {
	res, ok := s.Cache.Load("suspensionReason")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.user\" failed: no value provided for static field \"suspensionReason\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.user\" failed to cast field \"suspensionReason\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Archived accessor autogenerated
func (s *mqlGoogleworkspaceUser) Archived() (bool, error) {
	res, ok := s.Cache.Load("archived")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"archived\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"archived\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsAdmin accessor autogenerated
func (s *mqlGoogleworkspaceUser) IsAdmin() (bool, error) {
	res, ok := s.Cache.Load("isAdmin")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"isAdmin\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"isAdmin\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsEnforcedIn2Sv accessor autogenerated
func (s *mqlGoogleworkspaceUser) IsEnforcedIn2Sv() (bool, error) {
	res, ok := s.Cache.Load("isEnforcedIn2Sv")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"isEnforcedIn2Sv\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"isEnforcedIn2Sv\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsEnrolledIn2Sv accessor autogenerated
func (s *mqlGoogleworkspaceUser) IsEnrolledIn2Sv() (bool, error) {
	res, ok := s.Cache.Load("isEnrolledIn2Sv")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"isEnrolledIn2Sv\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"isEnrolledIn2Sv\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsMailboxSetup accessor autogenerated
func (s *mqlGoogleworkspaceUser) IsMailboxSetup() (bool, error) {
	res, ok := s.Cache.Load("isMailboxSetup")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"isMailboxSetup\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"isMailboxSetup\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// LastLoginTime accessor autogenerated
func (s *mqlGoogleworkspaceUser) LastLoginTime() (*time.Time, error) {
	res, ok := s.Cache.Load("lastLoginTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"lastLoginTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"lastLoginTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// CreationTime accessor autogenerated
func (s *mqlGoogleworkspaceUser) CreationTime() (*time.Time, error) {
	res, ok := s.Cache.Load("creationTime")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.user\" failed: no value provided for static field \"creationTime\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"creationTime\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// UsageReport accessor autogenerated
func (s *mqlGoogleworkspaceUser) UsageReport() (GoogleworkspaceReportUsage, error) {
	res, ok := s.Cache.Load("usageReport")
	if !ok || !res.Valid {
		if err := s.ComputeUsageReport(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("usageReport")
		if !ok {
			return nil, errors.New("\"googleworkspace.user\" calculated \"usageReport\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "usageReport")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GoogleworkspaceReportUsage)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"usageReport\" to the right type (GoogleworkspaceReportUsage): %#v", res)
	}
	return tres, nil
}

// Tokens accessor autogenerated
func (s *mqlGoogleworkspaceUser) Tokens() ([]interface{}, error) {
	res, ok := s.Cache.Load("tokens")
	if !ok || !res.Valid {
		if err := s.ComputeTokens(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("tokens")
		if !ok {
			return nil, errors.New("\"googleworkspace.user\" calculated \"tokens\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "tokens")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.user\" failed to cast field \"tokens\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceUser) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.user].MqlCompute")
	switch name {
	case "id":
		return nil
	case "familyName":
		return nil
	case "givenName":
		return nil
	case "fullName":
		return nil
	case "primaryEmail":
		return nil
	case "recoveryEmail":
		return nil
	case "recoveryPhone":
		return nil
	case "agreedToTerms":
		return nil
	case "aliases":
		return nil
	case "suspended":
		return nil
	case "suspensionReason":
		return nil
	case "archived":
		return nil
	case "isAdmin":
		return nil
	case "isEnforcedIn2Sv":
		return nil
	case "isEnrolledIn2Sv":
		return nil
	case "isMailboxSetup":
		return nil
	case "lastLoginTime":
		return nil
	case "creationTime":
		return nil
	case "usageReport":
		return s.ComputeUsageReport()
	case "tokens":
		return s.ComputeTokens()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.user\" resource")
	}
}

// ComputeUsageReport computer autogenerated
func (s *mqlGoogleworkspaceUser) ComputeUsageReport() error {
	var err error
	if _, ok := s.Cache.Load("usageReport"); ok {
		return nil
	}
	vres, err := s.GetUsageReport()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("usageReport", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeTokens computer autogenerated
func (s *mqlGoogleworkspaceUser) ComputeTokens() error {
	var err error
	if _, ok := s.Cache.Load("tokens"); ok {
		return nil
	}
	vres, err := s.GetTokens()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("tokens", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceToken resource interface
type GoogleworkspaceToken interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Anonymous() (bool, error)
	ClientId() (string, error)
	DisplayText() (string, error)
	NativeApp() (bool, error)
	Scopes() ([]interface{}, error)
	UserKey() (string, error)
}

// mqlGoogleworkspaceToken for the googleworkspace.token resource
type mqlGoogleworkspaceToken struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceToken) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.token resource
func newGoogleworkspaceToken(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceToken{runtime.NewResource("googleworkspace.token")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "anonymous":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"anonymous\" argument has the wrong type (expected type \"bool\")")
			}
		case "clientId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"clientId\" argument has the wrong type (expected type \"string\")")
			}
		case "displayText":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"displayText\" argument has the wrong type (expected type \"string\")")
			}
		case "nativeApp":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"nativeApp\" argument has the wrong type (expected type \"bool\")")
			}
		case "scopes":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"scopes\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "userKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"userKey\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.token\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.token with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceToken) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("anonymous"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"anonymous\". This field is required.")
	}
	if _, ok := s.Cache.Load("clientId"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"clientId\". This field is required.")
	}
	if _, ok := s.Cache.Load("displayText"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"displayText\". This field is required.")
	}
	if _, ok := s.Cache.Load("nativeApp"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"nativeApp\". This field is required.")
	}
	if _, ok := s.Cache.Load("scopes"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"scopes\". This field is required.")
	}
	if _, ok := s.Cache.Load("userKey"); !ok {
		return errors.New("Initialized \"googleworkspace.token\" resource without a \"userKey\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceToken) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.token].Register")
	switch name {
	case "anonymous":
		return nil
	case "clientId":
		return nil
	case "displayText":
		return nil
	case "nativeApp":
		return nil
	case "scopes":
		return nil
	case "userKey":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.token\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceToken) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.token].Field")
	switch name {
	case "anonymous":
		return s.Anonymous()
	case "clientId":
		return s.ClientId()
	case "displayText":
		return s.DisplayText()
	case "nativeApp":
		return s.NativeApp()
	case "scopes":
		return s.Scopes()
	case "userKey":
		return s.UserKey()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.token\" resource")
	}
}

// Anonymous accessor autogenerated
func (s *mqlGoogleworkspaceToken) Anonymous() (bool, error) {
	res, ok := s.Cache.Load("anonymous")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.token\" failed: no value provided for static field \"anonymous\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.token\" failed to cast field \"anonymous\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ClientId accessor autogenerated
func (s *mqlGoogleworkspaceToken) ClientId() (string, error) {
	res, ok := s.Cache.Load("clientId")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.token\" failed: no value provided for static field \"clientId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.token\" failed to cast field \"clientId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// DisplayText accessor autogenerated
func (s *mqlGoogleworkspaceToken) DisplayText() (string, error) {
	res, ok := s.Cache.Load("displayText")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.token\" failed: no value provided for static field \"displayText\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.token\" failed to cast field \"displayText\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NativeApp accessor autogenerated
func (s *mqlGoogleworkspaceToken) NativeApp() (bool, error) {
	res, ok := s.Cache.Load("nativeApp")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.token\" failed: no value provided for static field \"nativeApp\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.token\" failed to cast field \"nativeApp\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Scopes accessor autogenerated
func (s *mqlGoogleworkspaceToken) Scopes() ([]interface{}, error) {
	res, ok := s.Cache.Load("scopes")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.token\" failed: no value provided for static field \"scopes\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.token\" failed to cast field \"scopes\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// UserKey accessor autogenerated
func (s *mqlGoogleworkspaceToken) UserKey() (string, error) {
	res, ok := s.Cache.Load("userKey")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.token\" failed: no value provided for static field \"userKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.token\" failed to cast field \"userKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceToken) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.token].MqlCompute")
	switch name {
	case "anonymous":
		return nil
	case "clientId":
		return nil
	case "displayText":
		return nil
	case "nativeApp":
		return nil
	case "scopes":
		return nil
	case "userKey":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.token\" resource")
	}
}

// GoogleworkspaceGroup resource interface
type GoogleworkspaceGroup interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Email() (string, error)
	Description() (string, error)
	Aliases() ([]interface{}, error)
	DirectMembersCount() (int64, error)
	AdminCreated() (bool, error)
	Members() ([]interface{}, error)
	Settings() (interface{}, error)
	SecuritySettings() (interface{}, error)
}

// mqlGoogleworkspaceGroup for the googleworkspace.group resource
type mqlGoogleworkspaceGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.group resource
func newGoogleworkspaceGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceGroup{runtime.NewResource("googleworkspace.group")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "aliases":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"aliases\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "directMembersCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"directMembersCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "adminCreated":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"adminCreated\" argument has the wrong type (expected type \"bool\")")
			}
		case "members":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"members\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "securitySettings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"securitySettings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.group\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.group with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("aliases"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"aliases\". This field is required.")
	}
	if _, ok := s.Cache.Load("directMembersCount"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"directMembersCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("adminCreated"); !ok {
		return errors.New("Initialized \"googleworkspace.group\" resource without a \"adminCreated\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.group].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "email":
		return nil
	case "description":
		return nil
	case "aliases":
		return nil
	case "directMembersCount":
		return nil
	case "adminCreated":
		return nil
	case "members":
		return nil
	case "settings":
		return nil
	case "securitySettings":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.group\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.group].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "email":
		return s.Email()
	case "description":
		return s.Description()
	case "aliases":
		return s.Aliases()
	case "directMembersCount":
		return s.DirectMembersCount()
	case "adminCreated":
		return s.AdminCreated()
	case "members":
		return s.Members()
	case "settings":
		return s.Settings()
	case "securitySettings":
		return s.SecuritySettings()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.group\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.group\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.group\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.group\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.group\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.group\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.group\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.group\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.group\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Aliases accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Aliases() ([]interface{}, error) {
	res, ok := s.Cache.Load("aliases")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.group\" failed: no value provided for static field \"aliases\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"aliases\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// DirectMembersCount accessor autogenerated
func (s *mqlGoogleworkspaceGroup) DirectMembersCount() (int64, error) {
	res, ok := s.Cache.Load("directMembersCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"googleworkspace.group\" failed: no value provided for static field \"directMembersCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"directMembersCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// AdminCreated accessor autogenerated
func (s *mqlGoogleworkspaceGroup) AdminCreated() (bool, error) {
	res, ok := s.Cache.Load("adminCreated")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.group\" failed: no value provided for static field \"adminCreated\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"adminCreated\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Members accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Members() ([]interface{}, error) {
	res, ok := s.Cache.Load("members")
	if !ok || !res.Valid {
		if err := s.ComputeMembers(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("members")
		if !ok {
			return nil, errors.New("\"googleworkspace.group\" calculated \"members\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "members")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"members\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlGoogleworkspaceGroup) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		if err := s.ComputeSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("settings")
		if !ok {
			return nil, errors.New("\"googleworkspace.group\" calculated \"settings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "settings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// SecuritySettings accessor autogenerated
func (s *mqlGoogleworkspaceGroup) SecuritySettings() (interface{}, error) {
	res, ok := s.Cache.Load("securitySettings")
	if !ok || !res.Valid {
		if err := s.ComputeSecuritySettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("securitySettings")
		if !ok {
			return nil, errors.New("\"googleworkspace.group\" calculated \"securitySettings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "securitySettings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.group\" failed to cast field \"securitySettings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceGroup) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.group].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "email":
		return nil
	case "description":
		return nil
	case "aliases":
		return nil
	case "directMembersCount":
		return nil
	case "adminCreated":
		return nil
	case "members":
		return s.ComputeMembers()
	case "settings":
		return s.ComputeSettings()
	case "securitySettings":
		return s.ComputeSecuritySettings()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.group\" resource")
	}
}

// ComputeMembers computer autogenerated
func (s *mqlGoogleworkspaceGroup) ComputeMembers() error {
	var err error
	if _, ok := s.Cache.Load("members"); ok {
		return nil
	}
	vres, err := s.GetMembers()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("members", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSettings computer autogenerated
func (s *mqlGoogleworkspaceGroup) ComputeSettings() error {
	var err error
	if _, ok := s.Cache.Load("settings"); ok {
		return nil
	}
	vres, err := s.GetSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("settings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecuritySettings computer autogenerated
func (s *mqlGoogleworkspaceGroup) ComputeSecuritySettings() error {
	var err error
	if _, ok := s.Cache.Load("securitySettings"); ok {
		return nil
	}
	vres, err := s.GetSecuritySettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("securitySettings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceMember resource interface
type GoogleworkspaceMember interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Email() (string, error)
	Status() (string, error)
	Type() (string, error)
	User() (GoogleworkspaceUser, error)
}

// mqlGoogleworkspaceMember for the googleworkspace.member resource
type mqlGoogleworkspaceMember struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceMember) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.member resource
func newGoogleworkspaceMember(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceMember{runtime.NewResource("googleworkspace.member")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "email":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"email\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "user":
			if _, ok := val.(GoogleworkspaceUser); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"user\" argument has the wrong type (expected type \"GoogleworkspaceUser\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.member\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.member with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceMember) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.member\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("email"); !ok {
		return errors.New("Initialized \"googleworkspace.member\" resource without a \"email\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"googleworkspace.member\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"googleworkspace.member\" resource without a \"type\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceMember) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.member].Register")
	switch name {
	case "id":
		return nil
	case "email":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "user":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.member\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceMember) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.member].Field")
	switch name {
	case "id":
		return s.Id()
	case "email":
		return s.Email()
	case "status":
		return s.Status()
	case "type":
		return s.Type()
	case "user":
		return s.User()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.member\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceMember) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.member\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.member\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Email accessor autogenerated
func (s *mqlGoogleworkspaceMember) Email() (string, error) {
	res, ok := s.Cache.Load("email")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.member\" failed: no value provided for static field \"email\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.member\" failed to cast field \"email\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlGoogleworkspaceMember) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.member\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.member\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGoogleworkspaceMember) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.member\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.member\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// User accessor autogenerated
func (s *mqlGoogleworkspaceMember) User() (GoogleworkspaceUser, error) {
	res, ok := s.Cache.Load("user")
	if !ok || !res.Valid {
		if err := s.ComputeUser(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("user")
		if !ok {
			return nil, errors.New("\"googleworkspace.member\" calculated \"user\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "user")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(GoogleworkspaceUser)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.member\" failed to cast field \"user\" to the right type (GoogleworkspaceUser): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceMember) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.member].MqlCompute")
	switch name {
	case "id":
		return nil
	case "email":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "user":
		return s.ComputeUser()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.member\" resource")
	}
}

// ComputeUser computer autogenerated
func (s *mqlGoogleworkspaceMember) ComputeUser() error {
	var err error
	if _, ok := s.Cache.Load("user"); ok {
		return nil
	}
	vres, err := s.GetUser()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("user", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceRole resource interface
type GoogleworkspaceRole interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (int64, error)
	Name() (string, error)
	Description() (string, error)
	IsSystemRole() (bool, error)
	IsSuperAdminRole() (bool, error)
	Privileges() ([]interface{}, error)
}

// mqlGoogleworkspaceRole for the googleworkspace.role resource
type mqlGoogleworkspaceRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.role resource
func newGoogleworkspaceRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceRole{runtime.NewResource("googleworkspace.role")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"id\" argument has the wrong type (expected type \"int64\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "isSystemRole":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"isSystemRole\" argument has the wrong type (expected type \"bool\")")
			}
		case "isSuperAdminRole":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"isSuperAdminRole\" argument has the wrong type (expected type \"bool\")")
			}
		case "privileges":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"privileges\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("isSystemRole"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"isSystemRole\". This field is required.")
	}
	if _, ok := s.Cache.Load("isSuperAdminRole"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"isSuperAdminRole\". This field is required.")
	}
	if _, ok := s.Cache.Load("privileges"); !ok {
		return errors.New("Initialized \"googleworkspace.role\" resource without a \"privileges\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.role].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "isSystemRole":
		return nil
	case "isSuperAdminRole":
		return nil
	case "privileges":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.role].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "isSystemRole":
		return s.IsSystemRole()
	case "isSuperAdminRole":
		return s.IsSuperAdminRole()
	case "privileges":
		return s.Privileges()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.role\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceRole) Id() (int64, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return 0, errors.New("\"googleworkspace.role\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"googleworkspace.role\" failed to cast field \"id\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlGoogleworkspaceRole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.role\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.role\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlGoogleworkspaceRole) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.role\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.role\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsSystemRole accessor autogenerated
func (s *mqlGoogleworkspaceRole) IsSystemRole() (bool, error) {
	res, ok := s.Cache.Load("isSystemRole")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.role\" failed: no value provided for static field \"isSystemRole\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.role\" failed to cast field \"isSystemRole\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsSuperAdminRole accessor autogenerated
func (s *mqlGoogleworkspaceRole) IsSuperAdminRole() (bool, error) {
	res, ok := s.Cache.Load("isSuperAdminRole")
	if !ok || !res.Valid {
		return false, errors.New("\"googleworkspace.role\" failed: no value provided for static field \"isSuperAdminRole\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"googleworkspace.role\" failed to cast field \"isSuperAdminRole\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Privileges accessor autogenerated
func (s *mqlGoogleworkspaceRole) Privileges() ([]interface{}, error) {
	res, ok := s.Cache.Load("privileges")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.role\" failed: no value provided for static field \"privileges\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.role\" failed to cast field \"privileges\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceRole) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.role].MqlCompute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "isSystemRole":
		return nil
	case "isSuperAdminRole":
		return nil
	case "privileges":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.role\" resource")
	}
}

// GoogleworkspaceReportApps resource interface
type GoogleworkspaceReportApps interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Drive() ([]interface{}, error)
}

// mqlGoogleworkspaceReportApps for the googleworkspace.report.apps resource
type mqlGoogleworkspaceReportApps struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceReportApps) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.report.apps resource
func newGoogleworkspaceReportApps(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceReportApps{runtime.NewResource("googleworkspace.report.apps")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "drive":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.apps\", its \"drive\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.apps\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.report.apps with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceReportApps) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceReportApps) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.apps].Register")
	switch name {
	case "drive":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.apps\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceReportApps) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.apps].Field")
	switch name {
	case "drive":
		return s.Drive()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.report.apps\" resource")
	}
}

// Drive accessor autogenerated
func (s *mqlGoogleworkspaceReportApps) Drive() ([]interface{}, error) {
	res, ok := s.Cache.Load("drive")
	if !ok || !res.Valid {
		if err := s.ComputeDrive(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("drive")
		if !ok {
			return nil, errors.New("\"googleworkspace.report.apps\" calculated \"drive\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "drive")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.apps\" failed to cast field \"drive\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceReportApps) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.apps].MqlCompute")
	switch name {
	case "drive":
		return s.ComputeDrive()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.apps\" resource")
	}
}

// ComputeDrive computer autogenerated
func (s *mqlGoogleworkspaceReportApps) ComputeDrive() error {
	var err error
	if _, ok := s.Cache.Load("drive"); ok {
		return nil
	}
	vres, err := s.GetDrive()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("drive", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceReportActivity resource interface
type GoogleworkspaceReportActivity interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (int64, error)
	IpAddress() (string, error)
	OwnerDomain() (string, error)
	Actor() (interface{}, error)
	Events() ([]interface{}, error)
}

// mqlGoogleworkspaceReportActivity for the googleworkspace.report.activity resource
type mqlGoogleworkspaceReportActivity struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceReportActivity) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.report.activity resource
func newGoogleworkspaceReportActivity(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceReportActivity{runtime.NewResource("googleworkspace.report.activity")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"id\" argument has the wrong type (expected type \"int64\")")
			}
		case "ipAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"ipAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "ownerDomain":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"ownerDomain\" argument has the wrong type (expected type \"string\")")
			}
		case "actor":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"actor\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "events":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"events\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.activity\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.report.activity with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceReportActivity) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"googleworkspace.report.activity\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddress"); !ok {
		return errors.New("Initialized \"googleworkspace.report.activity\" resource without a \"ipAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("ownerDomain"); !ok {
		return errors.New("Initialized \"googleworkspace.report.activity\" resource without a \"ownerDomain\". This field is required.")
	}
	if _, ok := s.Cache.Load("actor"); !ok {
		return errors.New("Initialized \"googleworkspace.report.activity\" resource without a \"actor\". This field is required.")
	}
	if _, ok := s.Cache.Load("events"); !ok {
		return errors.New("Initialized \"googleworkspace.report.activity\" resource without a \"events\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.activity].Register")
	switch name {
	case "id":
		return nil
	case "ipAddress":
		return nil
	case "ownerDomain":
		return nil
	case "actor":
		return nil
	case "events":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.activity\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.activity].Field")
	switch name {
	case "id":
		return s.Id()
	case "ipAddress":
		return s.IpAddress()
	case "ownerDomain":
		return s.OwnerDomain()
	case "actor":
		return s.Actor()
	case "events":
		return s.Events()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.report.activity\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) Id() (int64, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return 0, errors.New("\"googleworkspace.report.activity\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"googleworkspace.report.activity\" failed to cast field \"id\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IpAddress accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) IpAddress() (string, error) {
	res, ok := s.Cache.Load("ipAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.activity\" failed: no value provided for static field \"ipAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.activity\" failed to cast field \"ipAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OwnerDomain accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) OwnerDomain() (string, error) {
	res, ok := s.Cache.Load("ownerDomain")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.activity\" failed: no value provided for static field \"ownerDomain\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.activity\" failed to cast field \"ownerDomain\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Actor accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) Actor() (interface{}, error) {
	res, ok := s.Cache.Load("actor")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.report.activity\" failed: no value provided for static field \"actor\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.activity\" failed to cast field \"actor\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Events accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) Events() ([]interface{}, error) {
	res, ok := s.Cache.Load("events")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.report.activity\" failed: no value provided for static field \"events\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.activity\" failed to cast field \"events\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceReportActivity) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.activity].MqlCompute")
	switch name {
	case "id":
		return nil
	case "ipAddress":
		return nil
	case "ownerDomain":
		return nil
	case "actor":
		return nil
	case "events":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.activity\" resource")
	}
}

// GoogleworkspaceReportUsers resource interface
type GoogleworkspaceReportUsers interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	List() ([]interface{}, error)
}

// mqlGoogleworkspaceReportUsers for the googleworkspace.report.users resource
type mqlGoogleworkspaceReportUsers struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceReportUsers) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.report.users resource
func newGoogleworkspaceReportUsers(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceReportUsers{runtime.NewResource("googleworkspace.report.users")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "list":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.users\", its \"list\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.users\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.report.users with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceReportUsers) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceReportUsers) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.users].Register")
	switch name {
	case "list":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.users\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceReportUsers) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.users].Field")
	switch name {
	case "list":
		return s.List()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.report.users\" resource")
	}
}

// List accessor autogenerated
func (s *mqlGoogleworkspaceReportUsers) List() ([]interface{}, error) {
	res, ok := s.Cache.Load("list")
	if !ok || !res.Valid {
		if err := s.ComputeList(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("list")
		if !ok {
			return nil, errors.New("\"googleworkspace.report.users\" calculated \"list\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "list")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.users\" failed to cast field \"list\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceReportUsers) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.users].MqlCompute")
	switch name {
	case "list":
		return s.ComputeList()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.users\" resource")
	}
}

// ComputeList computer autogenerated
func (s *mqlGoogleworkspaceReportUsers) ComputeList() error {
	var err error
	if _, ok := s.Cache.Load("list"); ok {
		return nil
	}
	vres, err := s.GetList()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("list", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// GoogleworkspaceReportUsage resource interface
type GoogleworkspaceReportUsage interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	CustomerId() (string, error)
	EntityId() (string, error)
	ProfileId() (string, error)
	Type() (string, error)
	UserEmail() (string, error)
	Date() (*time.Time, error)
	Parameters() ([]interface{}, error)
	Account() (interface{}, error)
	Security() (interface{}, error)
	AppUsage() (interface{}, error)
}

// mqlGoogleworkspaceReportUsage for the googleworkspace.report.usage resource
type mqlGoogleworkspaceReportUsage struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlGoogleworkspaceReportUsage) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the googleworkspace.report.usage resource
func newGoogleworkspaceReportUsage(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlGoogleworkspaceReportUsage{runtime.NewResource("googleworkspace.report.usage")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "customerId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"customerId\" argument has the wrong type (expected type \"string\")")
			}
		case "entityId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"entityId\" argument has the wrong type (expected type \"string\")")
			}
		case "profileId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"profileId\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "userEmail":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"userEmail\" argument has the wrong type (expected type \"string\")")
			}
		case "date":
			if _, ok := val.(*time.Time); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"date\" argument has the wrong type (expected type \"*time.Time\")")
			}
		case "parameters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"parameters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "account":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"account\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "security":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"security\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "appUsage":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"appUsage\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"googleworkspace.report.usage\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized googleworkspace.report.usage with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlGoogleworkspaceReportUsage) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("customerId"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"customerId\". This field is required.")
	}
	if _, ok := s.Cache.Load("entityId"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"entityId\". This field is required.")
	}
	if _, ok := s.Cache.Load("profileId"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"profileId\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("userEmail"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"userEmail\". This field is required.")
	}
	if _, ok := s.Cache.Load("date"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"date\". This field is required.")
	}
	if _, ok := s.Cache.Load("parameters"); !ok {
		return errors.New("Initialized \"googleworkspace.report.usage\" resource without a \"parameters\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Register(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.usage].Register")
	switch name {
	case "customerId":
		return nil
	case "entityId":
		return nil
	case "profileId":
		return nil
	case "type":
		return nil
	case "userEmail":
		return nil
	case "date":
		return nil
	case "parameters":
		return nil
	case "account":
		return nil
	case "security":
		return nil
	case "appUsage":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.usage\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.usage].Field")
	switch name {
	case "customerId":
		return s.CustomerId()
	case "entityId":
		return s.EntityId()
	case "profileId":
		return s.ProfileId()
	case "type":
		return s.Type()
	case "userEmail":
		return s.UserEmail()
	case "date":
		return s.Date()
	case "parameters":
		return s.Parameters()
	case "account":
		return s.Account()
	case "security":
		return s.Security()
	case "appUsage":
		return s.AppUsage()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"googleworkspace.report.usage\" resource")
	}
}

// CustomerId accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) CustomerId() (string, error) {
	res, ok := s.Cache.Load("customerId")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"customerId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"customerId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// EntityId accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) EntityId() (string, error) {
	res, ok := s.Cache.Load("entityId")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"entityId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"entityId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProfileId accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) ProfileId() (string, error) {
	res, ok := s.Cache.Load("profileId")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"profileId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"profileId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserEmail accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) UserEmail() (string, error) {
	res, ok := s.Cache.Load("userEmail")
	if !ok || !res.Valid {
		return "", errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"userEmail\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"userEmail\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Date accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Date() (*time.Time, error) {
	res, ok := s.Cache.Load("date")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"date\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(*time.Time)
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"date\" to the right type (*time.Time): %#v", res)
	}
	return tres, nil
}

// Parameters accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Parameters() ([]interface{}, error) {
	res, ok := s.Cache.Load("parameters")
	if !ok || !res.Valid {
		return nil, errors.New("\"googleworkspace.report.usage\" failed: no value provided for static field \"parameters\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"parameters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Account accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Account() (interface{}, error) {
	res, ok := s.Cache.Load("account")
	if !ok || !res.Valid {
		if err := s.ComputeAccount(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("account")
		if !ok {
			return nil, errors.New("\"googleworkspace.report.usage\" calculated \"account\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "account")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"account\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Security accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) Security() (interface{}, error) {
	res, ok := s.Cache.Load("security")
	if !ok || !res.Valid {
		if err := s.ComputeSecurity(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("security")
		if !ok {
			return nil, errors.New("\"googleworkspace.report.usage\" calculated \"security\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "security")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"security\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// AppUsage accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) AppUsage() (interface{}, error) {
	res, ok := s.Cache.Load("appUsage")
	if !ok || !res.Valid {
		if err := s.ComputeAppUsage(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("appUsage")
		if !ok {
			return nil, errors.New("\"googleworkspace.report.usage\" calculated \"appUsage\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "appUsage")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"googleworkspace.report.usage\" failed to cast field \"appUsage\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlGoogleworkspaceReportUsage) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[googleworkspace.report.usage].MqlCompute")
	switch name {
	case "customerId":
		return nil
	case "entityId":
		return nil
	case "profileId":
		return nil
	case "type":
		return nil
	case "userEmail":
		return nil
	case "date":
		return nil
	case "parameters":
		return nil
	case "account":
		return s.ComputeAccount()
	case "security":
		return s.ComputeSecurity()
	case "appUsage":
		return s.ComputeAppUsage()
	default:
		return errors.New("Cannot find field '" + name + "' in \"googleworkspace.report.usage\" resource")
	}
}

// ComputeAccount computer autogenerated
func (s *mqlGoogleworkspaceReportUsage) ComputeAccount() error {
	var err error
	if _, ok := s.Cache.Load("account"); ok {
		return nil
	}
	vres, err := s.GetAccount()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("account", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSecurity computer autogenerated
func (s *mqlGoogleworkspaceReportUsage) ComputeSecurity() error {
	var err error
	if _, ok := s.Cache.Load("security"); ok {
		return nil
	}
	vres, err := s.GetSecurity()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("security", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeAppUsage computer autogenerated
func (s *mqlGoogleworkspaceReportUsage) ComputeAppUsage() error {
	var err error
	if _, ok := s.Cache.Load("appUsage"); ok {
		return nil
	}
	vres, err := s.GetAppUsage()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("appUsage", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

