// Code generated by resources. DO NOT EDIT.
package vcd

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("vcd", newVcd)
	registry.AddFactory("vcd.organization", newVcdOrganization)
	registry.AddFactory("vcd.organization.ldapSettings", newVcdOrganizationLdapSettings)
	registry.AddFactory("vcd.vdcProvider", newVcdVdcProvider)
	registry.AddFactory("vcd.networkPool", newVcdNetworkPool)
	registry.AddFactory("vcd.externalNetwork", newVcdExternalNetwork)
	registry.AddFactory("vcd.vm", newVcdVm)
	registry.AddFactory("vcd.serverInstance", newVcdServerInstance)
	registry.AddFactory("vcd.right", newVcdRight)
	registry.AddFactory("vcd.role", newVcdRole)
	registry.AddFactory("vcd.vdc", newVcdVdc)
	registry.AddFactory("vcd.vdcGroup", newVcdVdcGroup)
}

// Vcd resource interface
type Vcd interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Organizations() ([]interface{}, error)
	ProviderVDCs() ([]interface{}, error)
	NetworkPools() ([]interface{}, error)
	ExternalNetworks() ([]interface{}, error)
	ServerInstances() ([]interface{}, error)
}

// mqlVcd for the vcd resource
type mqlVcd struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcd) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd resource
func newVcd(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcd{runtime.NewResource("vcd")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "organizations":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"organizations\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "providerVDCs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"providerVDCs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "networkPools":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"networkPools\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "externalNetworks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"externalNetworks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "serverInstances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"serverInstances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcd) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlVcd) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd].Register")
	switch name {
	case "organizations":
		return nil
	case "providerVDCs":
		return nil
	case "networkPools":
		return nil
	case "externalNetworks":
		return nil
	case "serverInstances":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcd) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd].Field")
	switch name {
	case "organizations":
		return s.Organizations()
	case "providerVDCs":
		return s.ProviderVDCs()
	case "networkPools":
		return s.NetworkPools()
	case "externalNetworks":
		return s.ExternalNetworks()
	case "serverInstances":
		return s.ServerInstances()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd\" resource")
	}
}

// Organizations accessor autogenerated
func (s *mqlVcd) Organizations() ([]interface{}, error) {
	res, ok := s.Cache.Load("organizations")
	if !ok || !res.Valid {
		if err := s.ComputeOrganizations(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("organizations")
		if !ok {
			return nil, errors.New("\"vcd\" calculated \"organizations\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "organizations")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd\" failed to cast field \"organizations\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ProviderVDCs accessor autogenerated
func (s *mqlVcd) ProviderVDCs() ([]interface{}, error) {
	res, ok := s.Cache.Load("providerVDCs")
	if !ok || !res.Valid {
		if err := s.ComputeProviderVDCs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("providerVDCs")
		if !ok {
			return nil, errors.New("\"vcd\" calculated \"providerVDCs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "providerVDCs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd\" failed to cast field \"providerVDCs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// NetworkPools accessor autogenerated
func (s *mqlVcd) NetworkPools() ([]interface{}, error) {
	res, ok := s.Cache.Load("networkPools")
	if !ok || !res.Valid {
		if err := s.ComputeNetworkPools(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("networkPools")
		if !ok {
			return nil, errors.New("\"vcd\" calculated \"networkPools\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "networkPools")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd\" failed to cast field \"networkPools\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ExternalNetworks accessor autogenerated
func (s *mqlVcd) ExternalNetworks() ([]interface{}, error) {
	res, ok := s.Cache.Load("externalNetworks")
	if !ok || !res.Valid {
		if err := s.ComputeExternalNetworks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("externalNetworks")
		if !ok {
			return nil, errors.New("\"vcd\" calculated \"externalNetworks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "externalNetworks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd\" failed to cast field \"externalNetworks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// ServerInstances accessor autogenerated
func (s *mqlVcd) ServerInstances() ([]interface{}, error) {
	res, ok := s.Cache.Load("serverInstances")
	if !ok || !res.Valid {
		if err := s.ComputeServerInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("serverInstances")
		if !ok {
			return nil, errors.New("\"vcd\" calculated \"serverInstances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "serverInstances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd\" failed to cast field \"serverInstances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcd) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd].Compute")
	switch name {
	case "organizations":
		return s.ComputeOrganizations()
	case "providerVDCs":
		return s.ComputeProviderVDCs()
	case "networkPools":
		return s.ComputeNetworkPools()
	case "externalNetworks":
		return s.ComputeExternalNetworks()
	case "serverInstances":
		return s.ComputeServerInstances()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd\" resource")
	}
}

// ComputeOrganizations computer autogenerated
func (s *mqlVcd) ComputeOrganizations() error {
	var err error
	if _, ok := s.Cache.Load("organizations"); ok {
		return nil
	}
	vres, err := s.GetOrganizations()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("organizations", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeProviderVDCs computer autogenerated
func (s *mqlVcd) ComputeProviderVDCs() error {
	var err error
	if _, ok := s.Cache.Load("providerVDCs"); ok {
		return nil
	}
	vres, err := s.GetProviderVDCs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("providerVDCs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeNetworkPools computer autogenerated
func (s *mqlVcd) ComputeNetworkPools() error {
	var err error
	if _, ok := s.Cache.Load("networkPools"); ok {
		return nil
	}
	vres, err := s.GetNetworkPools()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("networkPools", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeExternalNetworks computer autogenerated
func (s *mqlVcd) ComputeExternalNetworks() error {
	var err error
	if _, ok := s.Cache.Load("externalNetworks"); ok {
		return nil
	}
	vres, err := s.GetExternalNetworks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("externalNetworks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeServerInstances computer autogenerated
func (s *mqlVcd) ComputeServerInstances() error {
	var err error
	if _, ok := s.Cache.Load("serverInstances"); ok {
		return nil
	}
	vres, err := s.GetServerInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("serverInstances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VcdOrganization resource interface
type VcdOrganization interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	FullName() (string, error)
	IsEnabled() (bool, error)
	Description() (string, error)
	Vms() ([]interface{}, error)
	Rights() ([]interface{}, error)
	Vdcs() ([]interface{}, error)
	VdcGroups() ([]interface{}, error)
	Roles() ([]interface{}, error)
	Settings() (interface{}, error)
	LdapConfiguration() (VcdOrganizationLdapSettings, error)
}

// mqlVcdOrganization for the vcd.organization resource
type mqlVcdOrganization struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdOrganization) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.organization resource
func newVcdOrganization(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdOrganization{runtime.NewResource("vcd.organization")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "fullName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"fullName\" argument has the wrong type (expected type \"string\")")
			}
		case "isEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"isEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "vms":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"vms\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "rights":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"rights\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "vdcs":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"vdcs\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "vdcGroups":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"vdcGroups\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "roles":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"roles\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "settings":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"settings\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "ldapConfiguration":
			if _, ok := val.(VcdOrganizationLdapSettings); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"ldapConfiguration\" argument has the wrong type (expected type \"VcdOrganizationLdapSettings\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.organization with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdOrganization) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.organization\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.organization\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("fullName"); !ok {
		return errors.New("Initialized \"vcd.organization\" resource without a \"fullName\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnabled"); !ok {
		return errors.New("Initialized \"vcd.organization\" resource without a \"isEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"vcd.organization\" resource without a \"description\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdOrganization) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.organization].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "fullName":
		return nil
	case "isEnabled":
		return nil
	case "description":
		return nil
	case "vms":
		return nil
	case "rights":
		return nil
	case "vdcs":
		return nil
	case "vdcGroups":
		return nil
	case "roles":
		return nil
	case "settings":
		return nil
	case "ldapConfiguration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.organization\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdOrganization) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.organization].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "fullName":
		return s.FullName()
	case "isEnabled":
		return s.IsEnabled()
	case "description":
		return s.Description()
	case "vms":
		return s.Vms()
	case "rights":
		return s.Rights()
	case "vdcs":
		return s.Vdcs()
	case "vdcGroups":
		return s.VdcGroups()
	case "roles":
		return s.Roles()
	case "settings":
		return s.Settings()
	case "ldapConfiguration":
		return s.LdapConfiguration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.organization\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdOrganization) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdOrganization) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// FullName accessor autogenerated
func (s *mqlVcdOrganization) FullName() (string, error) {
	res, ok := s.Cache.Load("fullName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization\" failed: no value provided for static field \"fullName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization\" failed to cast field \"fullName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsEnabled accessor autogenerated
func (s *mqlVcdOrganization) IsEnabled() (bool, error) {
	res, ok := s.Cache.Load("isEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.organization\" failed: no value provided for static field \"isEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.organization\" failed to cast field \"isEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdOrganization) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Vms accessor autogenerated
func (s *mqlVcdOrganization) Vms() ([]interface{}, error) {
	res, ok := s.Cache.Load("vms")
	if !ok || !res.Valid {
		if err := s.ComputeVms(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vms")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"vms\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vms")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"vms\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Rights accessor autogenerated
func (s *mqlVcdOrganization) Rights() ([]interface{}, error) {
	res, ok := s.Cache.Load("rights")
	if !ok || !res.Valid {
		if err := s.ComputeRights(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("rights")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"rights\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "rights")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"rights\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Vdcs accessor autogenerated
func (s *mqlVcdOrganization) Vdcs() ([]interface{}, error) {
	res, ok := s.Cache.Load("vdcs")
	if !ok || !res.Valid {
		if err := s.ComputeVdcs(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vdcs")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"vdcs\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vdcs")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"vdcs\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// VdcGroups accessor autogenerated
func (s *mqlVcdOrganization) VdcGroups() ([]interface{}, error) {
	res, ok := s.Cache.Load("vdcGroups")
	if !ok || !res.Valid {
		if err := s.ComputeVdcGroups(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("vdcGroups")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"vdcGroups\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "vdcGroups")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"vdcGroups\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Roles accessor autogenerated
func (s *mqlVcdOrganization) Roles() ([]interface{}, error) {
	res, ok := s.Cache.Load("roles")
	if !ok || !res.Valid {
		if err := s.ComputeRoles(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("roles")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"roles\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "roles")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"roles\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Settings accessor autogenerated
func (s *mqlVcdOrganization) Settings() (interface{}, error) {
	res, ok := s.Cache.Load("settings")
	if !ok || !res.Valid {
		if err := s.ComputeSettings(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("settings")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"settings\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "settings")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"settings\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// LdapConfiguration accessor autogenerated
func (s *mqlVcdOrganization) LdapConfiguration() (VcdOrganizationLdapSettings, error) {
	res, ok := s.Cache.Load("ldapConfiguration")
	if !ok || !res.Valid {
		if err := s.ComputeLdapConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("ldapConfiguration")
		if !ok {
			return nil, errors.New("\"vcd.organization\" calculated \"ldapConfiguration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "ldapConfiguration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(VcdOrganizationLdapSettings)
	if !ok {
		return nil, fmt.Errorf("\"vcd.organization\" failed to cast field \"ldapConfiguration\" to the right type (VcdOrganizationLdapSettings): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdOrganization) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.organization].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "fullName":
		return nil
	case "isEnabled":
		return nil
	case "description":
		return nil
	case "vms":
		return s.ComputeVms()
	case "rights":
		return s.ComputeRights()
	case "vdcs":
		return s.ComputeVdcs()
	case "vdcGroups":
		return s.ComputeVdcGroups()
	case "roles":
		return s.ComputeRoles()
	case "settings":
		return s.ComputeSettings()
	case "ldapConfiguration":
		return s.ComputeLdapConfiguration()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.organization\" resource")
	}
}

// ComputeVms computer autogenerated
func (s *mqlVcdOrganization) ComputeVms() error {
	var err error
	if _, ok := s.Cache.Load("vms"); ok {
		return nil
	}
	vres, err := s.GetVms()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vms", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRights computer autogenerated
func (s *mqlVcdOrganization) ComputeRights() error {
	var err error
	if _, ok := s.Cache.Load("rights"); ok {
		return nil
	}
	vres, err := s.GetRights()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("rights", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVdcs computer autogenerated
func (s *mqlVcdOrganization) ComputeVdcs() error {
	var err error
	if _, ok := s.Cache.Load("vdcs"); ok {
		return nil
	}
	vres, err := s.GetVdcs()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vdcs", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeVdcGroups computer autogenerated
func (s *mqlVcdOrganization) ComputeVdcGroups() error {
	var err error
	if _, ok := s.Cache.Load("vdcGroups"); ok {
		return nil
	}
	vres, err := s.GetVdcGroups()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("vdcGroups", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeRoles computer autogenerated
func (s *mqlVcdOrganization) ComputeRoles() error {
	var err error
	if _, ok := s.Cache.Load("roles"); ok {
		return nil
	}
	vres, err := s.GetRoles()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("roles", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeSettings computer autogenerated
func (s *mqlVcdOrganization) ComputeSettings() error {
	var err error
	if _, ok := s.Cache.Load("settings"); ok {
		return nil
	}
	vres, err := s.GetSettings()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("settings", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeLdapConfiguration computer autogenerated
func (s *mqlVcdOrganization) ComputeLdapConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("ldapConfiguration"); ok {
		return nil
	}
	vres, err := s.GetLdapConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("ldapConfiguration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VcdOrganizationLdapSettings resource interface
type VcdOrganizationLdapSettings interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	CustomUsersOu() (string, error)
	OrgLdapMode() (string, error)
	Hostname() (string, error)
	Username() (string, error)
	Realm() (string, error)
}

// mqlVcdOrganizationLdapSettings for the vcd.organization.ldapSettings resource
type mqlVcdOrganizationLdapSettings struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdOrganizationLdapSettings) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.organization.ldapSettings resource
func newVcdOrganizationLdapSettings(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdOrganizationLdapSettings{runtime.NewResource("vcd.organization.ldapSettings")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "customUsersOu":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"customUsersOu\" argument has the wrong type (expected type \"string\")")
			}
		case "orgLdapMode":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"orgLdapMode\" argument has the wrong type (expected type \"string\")")
			}
		case "hostname":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"hostname\" argument has the wrong type (expected type \"string\")")
			}
		case "username":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"username\" argument has the wrong type (expected type \"string\")")
			}
		case "realm":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"realm\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.organization.ldapSettings\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.organization.ldapSettings with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdOrganizationLdapSettings) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("customUsersOu"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"customUsersOu\". This field is required.")
	}
	if _, ok := s.Cache.Load("orgLdapMode"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"orgLdapMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostname"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"hostname\". This field is required.")
	}
	if _, ok := s.Cache.Load("username"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"username\". This field is required.")
	}
	if _, ok := s.Cache.Load("realm"); !ok {
		return errors.New("Initialized \"vcd.organization.ldapSettings\" resource without a \"realm\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.organization.ldapSettings].Register")
	switch name {
	case "id":
		return nil
	case "customUsersOu":
		return nil
	case "orgLdapMode":
		return nil
	case "hostname":
		return nil
	case "username":
		return nil
	case "realm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.organization.ldapSettings\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.organization.ldapSettings].Field")
	switch name {
	case "id":
		return s.Id()
	case "customUsersOu":
		return s.CustomUsersOu()
	case "orgLdapMode":
		return s.OrgLdapMode()
	case "hostname":
		return s.Hostname()
	case "username":
		return s.Username()
	case "realm":
		return s.Realm()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.organization.ldapSettings\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// CustomUsersOu accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) CustomUsersOu() (string, error) {
	res, ok := s.Cache.Load("customUsersOu")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"customUsersOu\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"customUsersOu\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OrgLdapMode accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) OrgLdapMode() (string, error) {
	res, ok := s.Cache.Load("orgLdapMode")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"orgLdapMode\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"orgLdapMode\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Hostname accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Hostname() (string, error) {
	res, ok := s.Cache.Load("hostname")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"hostname\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"hostname\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Username accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Username() (string, error) {
	res, ok := s.Cache.Load("username")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"username\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"username\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Realm accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Realm() (string, error) {
	res, ok := s.Cache.Load("realm")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.organization.ldapSettings\" failed: no value provided for static field \"realm\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.organization.ldapSettings\" failed to cast field \"realm\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdOrganizationLdapSettings) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.organization.ldapSettings].Compute")
	switch name {
	case "id":
		return nil
	case "customUsersOu":
		return nil
	case "orgLdapMode":
		return nil
	case "hostname":
		return nil
	case "username":
		return nil
	case "realm":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.organization.ldapSettings\" resource")
	}
}

// VcdVdcProvider resource interface
type VcdVdcProvider interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Status() (string, error)
	IsBusy() (bool, error)
	IsDeleted() (bool, error)
	IsEnabled() (bool, error)
	CpuAllocationMhz() (int64, error)
	CpuLimitMhz() (int64, error)
	CpuUsedMhz() (int64, error)
	NumberOfDatastores() (int64, error)
	NumberOfStorageProfiles() (int64, error)
	NumberOfVdcs() (int64, error)
	MemoryAllocationMB() (int64, error)
	MemoryLimitMB() (int64, error)
	MemoryUsedMB() (int64, error)
	StorageAllocationMB() (int64, error)
	StorageLimitMB() (int64, error)
	StorageUsedMB() (int64, error)
	CpuOverheadMhz() (int64, error)
	StorageOverheadMB() (int64, error)
	MemoryOverheadMB() (int64, error)
	Metadata() (map[string]interface{}, error)
}

// mqlVcdVdcProvider for the vcd.vdcProvider resource
type mqlVcdVdcProvider struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdVdcProvider) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.vdcProvider resource
func newVcdVdcProvider(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdVdcProvider{runtime.NewResource("vcd.vdcProvider")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "isBusy":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"isBusy\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDeleted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"isDeleted\" argument has the wrong type (expected type \"bool\")")
			}
		case "isEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"isEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "cpuAllocationMhz":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"cpuAllocationMhz\" argument has the wrong type (expected type \"int64\")")
			}
		case "cpuLimitMhz":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"cpuLimitMhz\" argument has the wrong type (expected type \"int64\")")
			}
		case "cpuUsedMhz":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"cpuUsedMhz\" argument has the wrong type (expected type \"int64\")")
			}
		case "numberOfDatastores":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"numberOfDatastores\" argument has the wrong type (expected type \"int64\")")
			}
		case "numberOfStorageProfiles":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"numberOfStorageProfiles\" argument has the wrong type (expected type \"int64\")")
			}
		case "numberOfVdcs":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"numberOfVdcs\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryAllocationMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"memoryAllocationMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryLimitMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"memoryLimitMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryUsedMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"memoryUsedMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageAllocationMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"storageAllocationMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageLimitMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"storageLimitMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageUsedMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"storageUsedMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "cpuOverheadMhz":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"cpuOverheadMhz\" argument has the wrong type (expected type \"int64\")")
			}
		case "storageOverheadMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"storageOverheadMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryOverheadMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"memoryOverheadMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "metadata":
			if _, ok := val.(map[string]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"metadata\" argument has the wrong type (expected type \"map[string]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcProvider\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.vdcProvider with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdVdcProvider) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBusy"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"isBusy\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDeleted"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"isDeleted\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnabled"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"isEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuAllocationMhz"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"cpuAllocationMhz\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuLimitMhz"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"cpuLimitMhz\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuUsedMhz"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"cpuUsedMhz\". This field is required.")
	}
	if _, ok := s.Cache.Load("numberOfDatastores"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"numberOfDatastores\". This field is required.")
	}
	if _, ok := s.Cache.Load("numberOfStorageProfiles"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"numberOfStorageProfiles\". This field is required.")
	}
	if _, ok := s.Cache.Load("numberOfVdcs"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"numberOfVdcs\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryAllocationMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"memoryAllocationMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryLimitMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"memoryLimitMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryUsedMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"memoryUsedMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageAllocationMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"storageAllocationMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageLimitMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"storageLimitMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageUsedMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"storageUsedMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("cpuOverheadMhz"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"cpuOverheadMhz\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageOverheadMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"storageOverheadMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryOverheadMB"); !ok {
		return errors.New("Initialized \"vcd.vdcProvider\" resource without a \"memoryOverheadMB\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdVdcProvider) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdcProvider].Register")
	switch name {
	case "name":
		return nil
	case "status":
		return nil
	case "isBusy":
		return nil
	case "isDeleted":
		return nil
	case "isEnabled":
		return nil
	case "cpuAllocationMhz":
		return nil
	case "cpuLimitMhz":
		return nil
	case "cpuUsedMhz":
		return nil
	case "numberOfDatastores":
		return nil
	case "numberOfStorageProfiles":
		return nil
	case "numberOfVdcs":
		return nil
	case "memoryAllocationMB":
		return nil
	case "memoryLimitMB":
		return nil
	case "memoryUsedMB":
		return nil
	case "storageAllocationMB":
		return nil
	case "storageLimitMB":
		return nil
	case "storageUsedMB":
		return nil
	case "cpuOverheadMhz":
		return nil
	case "storageOverheadMB":
		return nil
	case "memoryOverheadMB":
		return nil
	case "metadata":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdcProvider\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdVdcProvider) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.vdcProvider].Field")
	switch name {
	case "name":
		return s.Name()
	case "status":
		return s.Status()
	case "isBusy":
		return s.IsBusy()
	case "isDeleted":
		return s.IsDeleted()
	case "isEnabled":
		return s.IsEnabled()
	case "cpuAllocationMhz":
		return s.CpuAllocationMhz()
	case "cpuLimitMhz":
		return s.CpuLimitMhz()
	case "cpuUsedMhz":
		return s.CpuUsedMhz()
	case "numberOfDatastores":
		return s.NumberOfDatastores()
	case "numberOfStorageProfiles":
		return s.NumberOfStorageProfiles()
	case "numberOfVdcs":
		return s.NumberOfVdcs()
	case "memoryAllocationMB":
		return s.MemoryAllocationMB()
	case "memoryLimitMB":
		return s.MemoryLimitMB()
	case "memoryUsedMB":
		return s.MemoryUsedMB()
	case "storageAllocationMB":
		return s.StorageAllocationMB()
	case "storageLimitMB":
		return s.StorageLimitMB()
	case "storageUsedMB":
		return s.StorageUsedMB()
	case "cpuOverheadMhz":
		return s.CpuOverheadMhz()
	case "storageOverheadMB":
		return s.StorageOverheadMB()
	case "memoryOverheadMB":
		return s.MemoryOverheadMB()
	case "metadata":
		return s.Metadata()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.vdcProvider\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVcdVdcProvider) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlVcdVdcProvider) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsBusy accessor autogenerated
func (s *mqlVcdVdcProvider) IsBusy() (bool, error) {
	res, ok := s.Cache.Load("isBusy")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"isBusy\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"isBusy\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDeleted accessor autogenerated
func (s *mqlVcdVdcProvider) IsDeleted() (bool, error) {
	res, ok := s.Cache.Load("isDeleted")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"isDeleted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"isDeleted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsEnabled accessor autogenerated
func (s *mqlVcdVdcProvider) IsEnabled() (bool, error) {
	res, ok := s.Cache.Load("isEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"isEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"isEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// CpuAllocationMhz accessor autogenerated
func (s *mqlVcdVdcProvider) CpuAllocationMhz() (int64, error) {
	res, ok := s.Cache.Load("cpuAllocationMhz")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"cpuAllocationMhz\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"cpuAllocationMhz\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CpuLimitMhz accessor autogenerated
func (s *mqlVcdVdcProvider) CpuLimitMhz() (int64, error) {
	res, ok := s.Cache.Load("cpuLimitMhz")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"cpuLimitMhz\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"cpuLimitMhz\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CpuUsedMhz accessor autogenerated
func (s *mqlVcdVdcProvider) CpuUsedMhz() (int64, error) {
	res, ok := s.Cache.Load("cpuUsedMhz")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"cpuUsedMhz\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"cpuUsedMhz\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumberOfDatastores accessor autogenerated
func (s *mqlVcdVdcProvider) NumberOfDatastores() (int64, error) {
	res, ok := s.Cache.Load("numberOfDatastores")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"numberOfDatastores\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"numberOfDatastores\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumberOfStorageProfiles accessor autogenerated
func (s *mqlVcdVdcProvider) NumberOfStorageProfiles() (int64, error) {
	res, ok := s.Cache.Load("numberOfStorageProfiles")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"numberOfStorageProfiles\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"numberOfStorageProfiles\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NumberOfVdcs accessor autogenerated
func (s *mqlVcdVdcProvider) NumberOfVdcs() (int64, error) {
	res, ok := s.Cache.Load("numberOfVdcs")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"numberOfVdcs\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"numberOfVdcs\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryAllocationMB accessor autogenerated
func (s *mqlVcdVdcProvider) MemoryAllocationMB() (int64, error) {
	res, ok := s.Cache.Load("memoryAllocationMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"memoryAllocationMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"memoryAllocationMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryLimitMB accessor autogenerated
func (s *mqlVcdVdcProvider) MemoryLimitMB() (int64, error) {
	res, ok := s.Cache.Load("memoryLimitMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"memoryLimitMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"memoryLimitMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryUsedMB accessor autogenerated
func (s *mqlVcdVdcProvider) MemoryUsedMB() (int64, error) {
	res, ok := s.Cache.Load("memoryUsedMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"memoryUsedMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"memoryUsedMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageAllocationMB accessor autogenerated
func (s *mqlVcdVdcProvider) StorageAllocationMB() (int64, error) {
	res, ok := s.Cache.Load("storageAllocationMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"storageAllocationMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"storageAllocationMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageLimitMB accessor autogenerated
func (s *mqlVcdVdcProvider) StorageLimitMB() (int64, error) {
	res, ok := s.Cache.Load("storageLimitMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"storageLimitMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"storageLimitMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageUsedMB accessor autogenerated
func (s *mqlVcdVdcProvider) StorageUsedMB() (int64, error) {
	res, ok := s.Cache.Load("storageUsedMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"storageUsedMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"storageUsedMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// CpuOverheadMhz accessor autogenerated
func (s *mqlVcdVdcProvider) CpuOverheadMhz() (int64, error) {
	res, ok := s.Cache.Load("cpuOverheadMhz")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"cpuOverheadMhz\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"cpuOverheadMhz\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// StorageOverheadMB accessor autogenerated
func (s *mqlVcdVdcProvider) StorageOverheadMB() (int64, error) {
	res, ok := s.Cache.Load("storageOverheadMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"storageOverheadMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"storageOverheadMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryOverheadMB accessor autogenerated
func (s *mqlVcdVdcProvider) MemoryOverheadMB() (int64, error) {
	res, ok := s.Cache.Load("memoryOverheadMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdcProvider\" failed: no value provided for static field \"memoryOverheadMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"memoryOverheadMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Metadata accessor autogenerated
func (s *mqlVcdVdcProvider) Metadata() (map[string]interface{}, error) {
	res, ok := s.Cache.Load("metadata")
	if !ok || !res.Valid {
		if err := s.ComputeMetadata(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("metadata")
		if !ok {
			return nil, errors.New("\"vcd.vdcProvider\" calculated \"metadata\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "metadata")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.vdcProvider\" failed to cast field \"metadata\" to the right type (map[string]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdVdcProvider) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdcProvider].Compute")
	switch name {
	case "name":
		return nil
	case "status":
		return nil
	case "isBusy":
		return nil
	case "isDeleted":
		return nil
	case "isEnabled":
		return nil
	case "cpuAllocationMhz":
		return nil
	case "cpuLimitMhz":
		return nil
	case "cpuUsedMhz":
		return nil
	case "numberOfDatastores":
		return nil
	case "numberOfStorageProfiles":
		return nil
	case "numberOfVdcs":
		return nil
	case "memoryAllocationMB":
		return nil
	case "memoryLimitMB":
		return nil
	case "memoryUsedMB":
		return nil
	case "storageAllocationMB":
		return nil
	case "storageLimitMB":
		return nil
	case "storageUsedMB":
		return nil
	case "cpuOverheadMhz":
		return nil
	case "storageOverheadMB":
		return nil
	case "memoryOverheadMB":
		return nil
	case "metadata":
		return s.ComputeMetadata()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdcProvider\" resource")
	}
}

// ComputeMetadata computer autogenerated
func (s *mqlVcdVdcProvider) ComputeMetadata() error {
	var err error
	if _, ok := s.Cache.Load("metadata"); ok {
		return nil
	}
	vres, err := s.GetMetadata()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("metadata", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VcdNetworkPool resource interface
type VcdNetworkPool interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsBusy() (bool, error)
	NetworkPoolType() (int64, error)
}

// mqlVcdNetworkPool for the vcd.networkPool resource
type mqlVcdNetworkPool struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdNetworkPool) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.networkPool resource
func newVcdNetworkPool(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdNetworkPool{runtime.NewResource("vcd.networkPool")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.networkPool\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isBusy":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.networkPool\", its \"isBusy\" argument has the wrong type (expected type \"bool\")")
			}
		case "networkPoolType":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.networkPool\", its \"networkPoolType\" argument has the wrong type (expected type \"int64\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.networkPool\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.networkPool with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdNetworkPool) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.networkPool\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBusy"); !ok {
		return errors.New("Initialized \"vcd.networkPool\" resource without a \"isBusy\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkPoolType"); !ok {
		return errors.New("Initialized \"vcd.networkPool\" resource without a \"networkPoolType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdNetworkPool) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.networkPool].Register")
	switch name {
	case "name":
		return nil
	case "isBusy":
		return nil
	case "networkPoolType":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.networkPool\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdNetworkPool) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.networkPool].Field")
	switch name {
	case "name":
		return s.Name()
	case "isBusy":
		return s.IsBusy()
	case "networkPoolType":
		return s.NetworkPoolType()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.networkPool\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVcdNetworkPool) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.networkPool\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.networkPool\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsBusy accessor autogenerated
func (s *mqlVcdNetworkPool) IsBusy() (bool, error) {
	res, ok := s.Cache.Load("isBusy")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.networkPool\" failed: no value provided for static field \"isBusy\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.networkPool\" failed to cast field \"isBusy\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// NetworkPoolType accessor autogenerated
func (s *mqlVcdNetworkPool) NetworkPoolType() (int64, error) {
	res, ok := s.Cache.Load("networkPoolType")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.networkPool\" failed: no value provided for static field \"networkPoolType\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.networkPool\" failed to cast field \"networkPoolType\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdNetworkPool) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.networkPool].Compute")
	switch name {
	case "name":
		return nil
	case "isBusy":
		return nil
	case "networkPoolType":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.networkPool\" resource")
	}
}

// VcdExternalNetwork resource interface
type VcdExternalNetwork interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	Configuration() (interface{}, error)
}

// mqlVcdExternalNetwork for the vcd.externalNetwork resource
type mqlVcdExternalNetwork struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdExternalNetwork) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.externalNetwork resource
func newVcdExternalNetwork(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdExternalNetwork{runtime.NewResource("vcd.externalNetwork")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.externalNetwork\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.externalNetwork\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.externalNetwork\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "configuration":
			if _, ok := val.(interface{}); !ok {
				return nil, errors.New("Failed to initialize \"vcd.externalNetwork\", its \"configuration\" argument has the wrong type (expected type \"interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.externalNetwork\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.externalNetwork with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdExternalNetwork) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.externalNetwork\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdExternalNetwork) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.externalNetwork].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "configuration":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.externalNetwork\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdExternalNetwork) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.externalNetwork].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "configuration":
		return s.Configuration()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.externalNetwork\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdExternalNetwork) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"vcd.externalNetwork\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.externalNetwork\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdExternalNetwork) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.externalNetwork\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.externalNetwork\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdExternalNetwork) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		if err := s.ComputeDescription(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("description")
		if !ok {
			return "", errors.New("\"vcd.externalNetwork\" calculated \"description\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "description")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.externalNetwork\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Configuration accessor autogenerated
func (s *mqlVcdExternalNetwork) Configuration() (interface{}, error) {
	res, ok := s.Cache.Load("configuration")
	if !ok || !res.Valid {
		if err := s.ComputeConfiguration(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("configuration")
		if !ok {
			return nil, errors.New("\"vcd.externalNetwork\" calculated \"configuration\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "configuration")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(interface{})
	if !ok {
		return nil, fmt.Errorf("\"vcd.externalNetwork\" failed to cast field \"configuration\" to the right type (interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdExternalNetwork) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.externalNetwork].Compute")
	switch name {
	case "id":
		return s.ComputeId()
	case "name":
		return nil
	case "description":
		return s.ComputeDescription()
	case "configuration":
		return s.ComputeConfiguration()
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.externalNetwork\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlVcdExternalNetwork) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDescription computer autogenerated
func (s *mqlVcdExternalNetwork) ComputeDescription() error {
	var err error
	if _, ok := s.Cache.Load("description"); ok {
		return nil
	}
	vres, err := s.GetDescription()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("description", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeConfiguration computer autogenerated
func (s *mqlVcdExternalNetwork) ComputeConfiguration() error {
	var err error
	if _, ok := s.Cache.Load("configuration"); ok {
		return nil
	}
	vres, err := s.GetConfiguration()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("configuration", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// VcdVm resource interface
type VcdVm interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	ContainerName() (string, error)
	ContainerID() (string, error)
	OwnerId() (string, error)
	OwnerName() (string, error)
	IsDeleted() (bool, error)
	GuestOs() (string, error)
	NumberOfCpus() (int64, error)
	MemoryMB() (int64, error)
	Status() (string, error)
	NetworkName() (string, error)
	IpAddress() (string, error)
	IsBusy() (bool, error)
	IsDeployed() (bool, error)
	IsPublished() (bool, error)
	CatalogName() (string, error)
	HardwareVersion() (int64, error)
	VmToolsStatus() (string, error)
	IsInMaintenanceMode() (bool, error)
	IsAutoNature() (bool, error)
	StorageProfileName() (string, error)
	GcStatus() (string, error)
	IsComputePolicyCompliant() (bool, error)
	Encrypted() (bool, error)
	TotalStorageAllocatedMb() (int64, error)
	IsExpired() (bool, error)
	HostName() (string, error)
}

// mqlVcdVm for the vcd.vm resource
type mqlVcdVm struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdVm) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.vm resource
func newVcdVm(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdVm{runtime.NewResource("vcd.vm")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "containerName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"containerName\" argument has the wrong type (expected type \"string\")")
			}
		case "containerID":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"containerID\" argument has the wrong type (expected type \"string\")")
			}
		case "ownerId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"ownerId\" argument has the wrong type (expected type \"string\")")
			}
		case "ownerName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"ownerName\" argument has the wrong type (expected type \"string\")")
			}
		case "isDeleted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isDeleted\" argument has the wrong type (expected type \"bool\")")
			}
		case "guestOs":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"guestOs\" argument has the wrong type (expected type \"string\")")
			}
		case "numberOfCpus":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"numberOfCpus\" argument has the wrong type (expected type \"int64\")")
			}
		case "memoryMB":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"memoryMB\" argument has the wrong type (expected type \"int64\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "networkName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"networkName\" argument has the wrong type (expected type \"string\")")
			}
		case "ipAddress":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"ipAddress\" argument has the wrong type (expected type \"string\")")
			}
		case "isBusy":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isBusy\" argument has the wrong type (expected type \"bool\")")
			}
		case "isDeployed":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isDeployed\" argument has the wrong type (expected type \"bool\")")
			}
		case "isPublished":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isPublished\" argument has the wrong type (expected type \"bool\")")
			}
		case "catalogName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"catalogName\" argument has the wrong type (expected type \"string\")")
			}
		case "hardwareVersion":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"hardwareVersion\" argument has the wrong type (expected type \"int64\")")
			}
		case "vmToolsStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"vmToolsStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "isInMaintenanceMode":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isInMaintenanceMode\" argument has the wrong type (expected type \"bool\")")
			}
		case "isAutoNature":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isAutoNature\" argument has the wrong type (expected type \"bool\")")
			}
		case "storageProfileName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"storageProfileName\" argument has the wrong type (expected type \"string\")")
			}
		case "gcStatus":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"gcStatus\" argument has the wrong type (expected type \"string\")")
			}
		case "isComputePolicyCompliant":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isComputePolicyCompliant\" argument has the wrong type (expected type \"bool\")")
			}
		case "encrypted":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"encrypted\" argument has the wrong type (expected type \"bool\")")
			}
		case "totalStorageAllocatedMb":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"totalStorageAllocatedMb\" argument has the wrong type (expected type \"int64\")")
			}
		case "isExpired":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"isExpired\" argument has the wrong type (expected type \"bool\")")
			}
		case "hostName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"hostName\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.vm\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.vm with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdVm) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"containerName\". This field is required.")
	}
	if _, ok := s.Cache.Load("containerID"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"containerID\". This field is required.")
	}
	if _, ok := s.Cache.Load("ownerId"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"ownerId\". This field is required.")
	}
	if _, ok := s.Cache.Load("ownerName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"ownerName\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDeleted"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isDeleted\". This field is required.")
	}
	if _, ok := s.Cache.Load("guestOs"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"guestOs\". This field is required.")
	}
	if _, ok := s.Cache.Load("numberOfCpus"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"numberOfCpus\". This field is required.")
	}
	if _, ok := s.Cache.Load("memoryMB"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"memoryMB\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"networkName\". This field is required.")
	}
	if _, ok := s.Cache.Load("ipAddress"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"ipAddress\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBusy"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isBusy\". This field is required.")
	}
	if _, ok := s.Cache.Load("isDeployed"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isDeployed\". This field is required.")
	}
	if _, ok := s.Cache.Load("isPublished"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isPublished\". This field is required.")
	}
	if _, ok := s.Cache.Load("catalogName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"catalogName\". This field is required.")
	}
	if _, ok := s.Cache.Load("hardwareVersion"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"hardwareVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("vmToolsStatus"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"vmToolsStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("isInMaintenanceMode"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isInMaintenanceMode\". This field is required.")
	}
	if _, ok := s.Cache.Load("isAutoNature"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isAutoNature\". This field is required.")
	}
	if _, ok := s.Cache.Load("storageProfileName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"storageProfileName\". This field is required.")
	}
	if _, ok := s.Cache.Load("gcStatus"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"gcStatus\". This field is required.")
	}
	if _, ok := s.Cache.Load("isComputePolicyCompliant"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isComputePolicyCompliant\". This field is required.")
	}
	if _, ok := s.Cache.Load("encrypted"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"encrypted\". This field is required.")
	}
	if _, ok := s.Cache.Load("totalStorageAllocatedMb"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"totalStorageAllocatedMb\". This field is required.")
	}
	if _, ok := s.Cache.Load("isExpired"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"isExpired\". This field is required.")
	}
	if _, ok := s.Cache.Load("hostName"); !ok {
		return errors.New("Initialized \"vcd.vm\" resource without a \"hostName\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdVm) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vm].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "containerName":
		return nil
	case "containerID":
		return nil
	case "ownerId":
		return nil
	case "ownerName":
		return nil
	case "isDeleted":
		return nil
	case "guestOs":
		return nil
	case "numberOfCpus":
		return nil
	case "memoryMB":
		return nil
	case "status":
		return nil
	case "networkName":
		return nil
	case "ipAddress":
		return nil
	case "isBusy":
		return nil
	case "isDeployed":
		return nil
	case "isPublished":
		return nil
	case "catalogName":
		return nil
	case "hardwareVersion":
		return nil
	case "vmToolsStatus":
		return nil
	case "isInMaintenanceMode":
		return nil
	case "isAutoNature":
		return nil
	case "storageProfileName":
		return nil
	case "gcStatus":
		return nil
	case "isComputePolicyCompliant":
		return nil
	case "encrypted":
		return nil
	case "totalStorageAllocatedMb":
		return nil
	case "isExpired":
		return nil
	case "hostName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vm\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdVm) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.vm].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "containerName":
		return s.ContainerName()
	case "containerID":
		return s.ContainerID()
	case "ownerId":
		return s.OwnerId()
	case "ownerName":
		return s.OwnerName()
	case "isDeleted":
		return s.IsDeleted()
	case "guestOs":
		return s.GuestOs()
	case "numberOfCpus":
		return s.NumberOfCpus()
	case "memoryMB":
		return s.MemoryMB()
	case "status":
		return s.Status()
	case "networkName":
		return s.NetworkName()
	case "ipAddress":
		return s.IpAddress()
	case "isBusy":
		return s.IsBusy()
	case "isDeployed":
		return s.IsDeployed()
	case "isPublished":
		return s.IsPublished()
	case "catalogName":
		return s.CatalogName()
	case "hardwareVersion":
		return s.HardwareVersion()
	case "vmToolsStatus":
		return s.VmToolsStatus()
	case "isInMaintenanceMode":
		return s.IsInMaintenanceMode()
	case "isAutoNature":
		return s.IsAutoNature()
	case "storageProfileName":
		return s.StorageProfileName()
	case "gcStatus":
		return s.GcStatus()
	case "isComputePolicyCompliant":
		return s.IsComputePolicyCompliant()
	case "encrypted":
		return s.Encrypted()
	case "totalStorageAllocatedMb":
		return s.TotalStorageAllocatedMb()
	case "isExpired":
		return s.IsExpired()
	case "hostName":
		return s.HostName()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.vm\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdVm) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdVm) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ContainerName accessor autogenerated
func (s *mqlVcdVm) ContainerName() (string, error) {
	res, ok := s.Cache.Load("containerName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"containerName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"containerName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ContainerID accessor autogenerated
func (s *mqlVcdVm) ContainerID() (string, error) {
	res, ok := s.Cache.Load("containerID")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"containerID\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"containerID\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OwnerId accessor autogenerated
func (s *mqlVcdVm) OwnerId() (string, error) {
	res, ok := s.Cache.Load("ownerId")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"ownerId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"ownerId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// OwnerName accessor autogenerated
func (s *mqlVcdVm) OwnerName() (string, error) {
	res, ok := s.Cache.Load("ownerName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"ownerName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"ownerName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsDeleted accessor autogenerated
func (s *mqlVcdVm) IsDeleted() (bool, error) {
	res, ok := s.Cache.Load("isDeleted")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isDeleted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isDeleted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// GuestOs accessor autogenerated
func (s *mqlVcdVm) GuestOs() (string, error) {
	res, ok := s.Cache.Load("guestOs")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"guestOs\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"guestOs\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NumberOfCpus accessor autogenerated
func (s *mqlVcdVm) NumberOfCpus() (int64, error) {
	res, ok := s.Cache.Load("numberOfCpus")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vm\" failed: no value provided for static field \"numberOfCpus\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vm\" failed to cast field \"numberOfCpus\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// MemoryMB accessor autogenerated
func (s *mqlVcdVm) MemoryMB() (int64, error) {
	res, ok := s.Cache.Load("memoryMB")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vm\" failed: no value provided for static field \"memoryMB\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vm\" failed to cast field \"memoryMB\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlVcdVm) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NetworkName accessor autogenerated
func (s *mqlVcdVm) NetworkName() (string, error) {
	res, ok := s.Cache.Load("networkName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"networkName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"networkName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IpAddress accessor autogenerated
func (s *mqlVcdVm) IpAddress() (string, error) {
	res, ok := s.Cache.Load("ipAddress")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"ipAddress\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"ipAddress\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsBusy accessor autogenerated
func (s *mqlVcdVm) IsBusy() (bool, error) {
	res, ok := s.Cache.Load("isBusy")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isBusy\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isBusy\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsDeployed accessor autogenerated
func (s *mqlVcdVm) IsDeployed() (bool, error) {
	res, ok := s.Cache.Load("isDeployed")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isDeployed\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isDeployed\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsPublished accessor autogenerated
func (s *mqlVcdVm) IsPublished() (bool, error) {
	res, ok := s.Cache.Load("isPublished")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isPublished\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isPublished\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// CatalogName accessor autogenerated
func (s *mqlVcdVm) CatalogName() (string, error) {
	res, ok := s.Cache.Load("catalogName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"catalogName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"catalogName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// HardwareVersion accessor autogenerated
func (s *mqlVcdVm) HardwareVersion() (int64, error) {
	res, ok := s.Cache.Load("hardwareVersion")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vm\" failed: no value provided for static field \"hardwareVersion\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vm\" failed to cast field \"hardwareVersion\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// VmToolsStatus accessor autogenerated
func (s *mqlVcdVm) VmToolsStatus() (string, error) {
	res, ok := s.Cache.Load("vmToolsStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"vmToolsStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"vmToolsStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsInMaintenanceMode accessor autogenerated
func (s *mqlVcdVm) IsInMaintenanceMode() (bool, error) {
	res, ok := s.Cache.Load("isInMaintenanceMode")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isInMaintenanceMode\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isInMaintenanceMode\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsAutoNature accessor autogenerated
func (s *mqlVcdVm) IsAutoNature() (bool, error) {
	res, ok := s.Cache.Load("isAutoNature")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isAutoNature\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isAutoNature\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// StorageProfileName accessor autogenerated
func (s *mqlVcdVm) StorageProfileName() (string, error) {
	res, ok := s.Cache.Load("storageProfileName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"storageProfileName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"storageProfileName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// GcStatus accessor autogenerated
func (s *mqlVcdVm) GcStatus() (string, error) {
	res, ok := s.Cache.Load("gcStatus")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"gcStatus\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"gcStatus\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsComputePolicyCompliant accessor autogenerated
func (s *mqlVcdVm) IsComputePolicyCompliant() (bool, error) {
	res, ok := s.Cache.Load("isComputePolicyCompliant")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isComputePolicyCompliant\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isComputePolicyCompliant\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Encrypted accessor autogenerated
func (s *mqlVcdVm) Encrypted() (bool, error) {
	res, ok := s.Cache.Load("encrypted")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"encrypted\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"encrypted\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// TotalStorageAllocatedMb accessor autogenerated
func (s *mqlVcdVm) TotalStorageAllocatedMb() (int64, error) {
	res, ok := s.Cache.Load("totalStorageAllocatedMb")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vm\" failed: no value provided for static field \"totalStorageAllocatedMb\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vm\" failed to cast field \"totalStorageAllocatedMb\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsExpired accessor autogenerated
func (s *mqlVcdVm) IsExpired() (bool, error) {
	res, ok := s.Cache.Load("isExpired")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vm\" failed: no value provided for static field \"isExpired\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vm\" failed to cast field \"isExpired\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// HostName accessor autogenerated
func (s *mqlVcdVm) HostName() (string, error) {
	res, ok := s.Cache.Load("hostName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vm\" failed: no value provided for static field \"hostName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vm\" failed to cast field \"hostName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdVm) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vm].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "containerName":
		return nil
	case "containerID":
		return nil
	case "ownerId":
		return nil
	case "ownerName":
		return nil
	case "isDeleted":
		return nil
	case "guestOs":
		return nil
	case "numberOfCpus":
		return nil
	case "memoryMB":
		return nil
	case "status":
		return nil
	case "networkName":
		return nil
	case "ipAddress":
		return nil
	case "isBusy":
		return nil
	case "isDeployed":
		return nil
	case "isPublished":
		return nil
	case "catalogName":
		return nil
	case "hardwareVersion":
		return nil
	case "vmToolsStatus":
		return nil
	case "isInMaintenanceMode":
		return nil
	case "isAutoNature":
		return nil
	case "storageProfileName":
		return nil
	case "gcStatus":
		return nil
	case "isComputePolicyCompliant":
		return nil
	case "encrypted":
		return nil
	case "totalStorageAllocatedMb":
		return nil
	case "isExpired":
		return nil
	case "hostName":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vm\" resource")
	}
}

// VcdServerInstance resource interface
type VcdServerInstance interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	IsBusy() (bool, error)
	IsEnabled() (bool, error)
	IsSupported() (bool, error)
	ListenerState() (string, error)
	Status() (string, error)
	UserName() (string, error)
	VcVersion() (string, error)
	Uuid() (string, error)
	VsmIP() (string, error)
}

// mqlVcdServerInstance for the vcd.serverInstance resource
type mqlVcdServerInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdServerInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.serverInstance resource
func newVcdServerInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdServerInstance{runtime.NewResource("vcd.serverInstance")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "isBusy":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"isBusy\" argument has the wrong type (expected type \"bool\")")
			}
		case "isEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"isEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "isSupported":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"isSupported\" argument has the wrong type (expected type \"bool\")")
			}
		case "listenerState":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"listenerState\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "userName":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"userName\" argument has the wrong type (expected type \"string\")")
			}
		case "vcVersion":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"vcVersion\" argument has the wrong type (expected type \"string\")")
			}
		case "uuid":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"uuid\" argument has the wrong type (expected type \"string\")")
			}
		case "vsmIP":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"vsmIP\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.serverInstance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.serverInstance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdServerInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("isBusy"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"isBusy\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnabled"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"isEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("isSupported"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"isSupported\". This field is required.")
	}
	if _, ok := s.Cache.Load("listenerState"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"listenerState\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("userName"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"userName\". This field is required.")
	}
	if _, ok := s.Cache.Load("vcVersion"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"vcVersion\". This field is required.")
	}
	if _, ok := s.Cache.Load("uuid"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"uuid\". This field is required.")
	}
	if _, ok := s.Cache.Load("vsmIP"); !ok {
		return errors.New("Initialized \"vcd.serverInstance\" resource without a \"vsmIP\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdServerInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.serverInstance].Register")
	switch name {
	case "name":
		return nil
	case "isBusy":
		return nil
	case "isEnabled":
		return nil
	case "isSupported":
		return nil
	case "listenerState":
		return nil
	case "status":
		return nil
	case "userName":
		return nil
	case "vcVersion":
		return nil
	case "uuid":
		return nil
	case "vsmIP":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.serverInstance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdServerInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.serverInstance].Field")
	switch name {
	case "name":
		return s.Name()
	case "isBusy":
		return s.IsBusy()
	case "isEnabled":
		return s.IsEnabled()
	case "isSupported":
		return s.IsSupported()
	case "listenerState":
		return s.ListenerState()
	case "status":
		return s.Status()
	case "userName":
		return s.UserName()
	case "vcVersion":
		return s.VcVersion()
	case "uuid":
		return s.Uuid()
	case "vsmIP":
		return s.VsmIP()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.serverInstance\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVcdServerInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// IsBusy accessor autogenerated
func (s *mqlVcdServerInstance) IsBusy() (bool, error) {
	res, ok := s.Cache.Load("isBusy")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"isBusy\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"isBusy\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsEnabled accessor autogenerated
func (s *mqlVcdServerInstance) IsEnabled() (bool, error) {
	res, ok := s.Cache.Load("isEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"isEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"isEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// IsSupported accessor autogenerated
func (s *mqlVcdServerInstance) IsSupported() (bool, error) {
	res, ok := s.Cache.Load("isSupported")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"isSupported\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"isSupported\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// ListenerState accessor autogenerated
func (s *mqlVcdServerInstance) ListenerState() (string, error) {
	res, ok := s.Cache.Load("listenerState")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"listenerState\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"listenerState\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlVcdServerInstance) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UserName accessor autogenerated
func (s *mqlVcdServerInstance) UserName() (string, error) {
	res, ok := s.Cache.Load("userName")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"userName\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"userName\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VcVersion accessor autogenerated
func (s *mqlVcdServerInstance) VcVersion() (string, error) {
	res, ok := s.Cache.Load("vcVersion")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"vcVersion\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"vcVersion\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Uuid accessor autogenerated
func (s *mqlVcdServerInstance) Uuid() (string, error) {
	res, ok := s.Cache.Load("uuid")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"uuid\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"uuid\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// VsmIP accessor autogenerated
func (s *mqlVcdServerInstance) VsmIP() (string, error) {
	res, ok := s.Cache.Load("vsmIP")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.serverInstance\" failed: no value provided for static field \"vsmIP\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.serverInstance\" failed to cast field \"vsmIP\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdServerInstance) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.serverInstance].Compute")
	switch name {
	case "name":
		return nil
	case "isBusy":
		return nil
	case "isEnabled":
		return nil
	case "isSupported":
		return nil
	case "listenerState":
		return nil
	case "status":
		return nil
	case "userName":
		return nil
	case "vcVersion":
		return nil
	case "uuid":
		return nil
	case "vsmIP":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.serverInstance\" resource")
	}
}

// VcdRight resource interface
type VcdRight interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
	BundleKey() (string, error)
	Category() (string, error)
	ServiceNamespace() (string, error)
	RightType() (string, error)
}

// mqlVcdRight for the vcd.right resource
type mqlVcdRight struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdRight) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.right resource
func newVcdRight(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdRight{runtime.NewResource("vcd.right")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "bundleKey":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"bundleKey\" argument has the wrong type (expected type \"string\")")
			}
		case "category":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"category\" argument has the wrong type (expected type \"string\")")
			}
		case "serviceNamespace":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"serviceNamespace\" argument has the wrong type (expected type \"string\")")
			}
		case "rightType":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"rightType\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.right\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.right with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdRight) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("bundleKey"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"bundleKey\". This field is required.")
	}
	if _, ok := s.Cache.Load("category"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"category\". This field is required.")
	}
	if _, ok := s.Cache.Load("serviceNamespace"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"serviceNamespace\". This field is required.")
	}
	if _, ok := s.Cache.Load("rightType"); !ok {
		return errors.New("Initialized \"vcd.right\" resource without a \"rightType\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdRight) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.right].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bundleKey":
		return nil
	case "category":
		return nil
	case "serviceNamespace":
		return nil
	case "rightType":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.right\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdRight) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.right].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "bundleKey":
		return s.BundleKey()
	case "category":
		return s.Category()
	case "serviceNamespace":
		return s.ServiceNamespace()
	case "rightType":
		return s.RightType()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.right\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdRight) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdRight) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdRight) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// BundleKey accessor autogenerated
func (s *mqlVcdRight) BundleKey() (string, error) {
	res, ok := s.Cache.Load("bundleKey")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"bundleKey\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"bundleKey\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Category accessor autogenerated
func (s *mqlVcdRight) Category() (string, error) {
	res, ok := s.Cache.Load("category")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"category\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"category\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ServiceNamespace accessor autogenerated
func (s *mqlVcdRight) ServiceNamespace() (string, error) {
	res, ok := s.Cache.Load("serviceNamespace")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"serviceNamespace\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"serviceNamespace\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// RightType accessor autogenerated
func (s *mqlVcdRight) RightType() (string, error) {
	res, ok := s.Cache.Load("rightType")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.right\" failed: no value provided for static field \"rightType\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.right\" failed to cast field \"rightType\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdRight) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.right].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	case "bundleKey":
		return nil
	case "category":
		return nil
	case "serviceNamespace":
		return nil
	case "rightType":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.right\" resource")
	}
}

// VcdRole resource interface
type VcdRole interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Description() (string, error)
}

// mqlVcdRole for the vcd.role resource
type mqlVcdRole struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdRole) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.role resource
func newVcdRole(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdRole{runtime.NewResource("vcd.role")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.role\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.role\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.role\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.role\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.role with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdRole) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.role\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.role\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"vcd.role\" resource without a \"description\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdRole) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.role].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.role\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdRole) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.role].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.role\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdRole) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.role\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.role\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdRole) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.role\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.role\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdRole) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.role\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.role\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdRole) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.role].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "description":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.role\" resource")
	}
}

// VcdVdc resource interface
type VcdVdc interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Name() (string, error)
	Status() (int64, error)
	Description() (string, error)
	AllocationModel() (string, error)
	NicQuota() (int64, error)
	NetworkQuota() (int64, error)
	UsedNetworkCount() (int64, error)
	VmQuota() (int64, error)
	IsEnabled() (bool, error)
}

// mqlVcdVdc for the vcd.vdc resource
type mqlVcdVdc struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdVdc) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.vdc resource
func newVcdVdc(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdVdc{runtime.NewResource("vcd.vdc")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "status":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"status\" argument has the wrong type (expected type \"int64\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "allocationModel":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"allocationModel\" argument has the wrong type (expected type \"string\")")
			}
		case "nicQuota":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"nicQuota\" argument has the wrong type (expected type \"int64\")")
			}
		case "networkQuota":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"networkQuota\" argument has the wrong type (expected type \"int64\")")
			}
		case "usedNetworkCount":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"usedNetworkCount\" argument has the wrong type (expected type \"int64\")")
			}
		case "vmQuota":
			if _, ok := val.(int64); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"vmQuota\" argument has the wrong type (expected type \"int64\")")
			}
		case "isEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"isEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdc\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.vdc with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdVdc) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("allocationModel"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"allocationModel\". This field is required.")
	}
	if _, ok := s.Cache.Load("nicQuota"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"nicQuota\". This field is required.")
	}
	if _, ok := s.Cache.Load("networkQuota"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"networkQuota\". This field is required.")
	}
	if _, ok := s.Cache.Load("usedNetworkCount"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"usedNetworkCount\". This field is required.")
	}
	if _, ok := s.Cache.Load("vmQuota"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"vmQuota\". This field is required.")
	}
	if _, ok := s.Cache.Load("isEnabled"); !ok {
		return errors.New("Initialized \"vcd.vdc\" resource without a \"isEnabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdVdc) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdc].Register")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "status":
		return nil
	case "description":
		return nil
	case "allocationModel":
		return nil
	case "nicQuota":
		return nil
	case "networkQuota":
		return nil
	case "usedNetworkCount":
		return nil
	case "vmQuota":
		return nil
	case "isEnabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdc\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdVdc) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.vdc].Field")
	switch name {
	case "id":
		return s.Id()
	case "name":
		return s.Name()
	case "status":
		return s.Status()
	case "description":
		return s.Description()
	case "allocationModel":
		return s.AllocationModel()
	case "nicQuota":
		return s.NicQuota()
	case "networkQuota":
		return s.NetworkQuota()
	case "usedNetworkCount":
		return s.UsedNetworkCount()
	case "vmQuota":
		return s.VmQuota()
	case "isEnabled":
		return s.IsEnabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.vdc\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlVcdVdc) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdc\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdc\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlVcdVdc) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdc\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdc\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlVcdVdc) Status() (int64, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdc\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdc\" failed to cast field \"status\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdVdc) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdc\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdc\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// AllocationModel accessor autogenerated
func (s *mqlVcdVdc) AllocationModel() (string, error) {
	res, ok := s.Cache.Load("allocationModel")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdc\" failed: no value provided for static field \"allocationModel\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdc\" failed to cast field \"allocationModel\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// NicQuota accessor autogenerated
func (s *mqlVcdVdc) NicQuota() (int64, error) {
	res, ok := s.Cache.Load("nicQuota")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdc\" failed: no value provided for static field \"nicQuota\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdc\" failed to cast field \"nicQuota\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// NetworkQuota accessor autogenerated
func (s *mqlVcdVdc) NetworkQuota() (int64, error) {
	res, ok := s.Cache.Load("networkQuota")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdc\" failed: no value provided for static field \"networkQuota\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdc\" failed to cast field \"networkQuota\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// UsedNetworkCount accessor autogenerated
func (s *mqlVcdVdc) UsedNetworkCount() (int64, error) {
	res, ok := s.Cache.Load("usedNetworkCount")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdc\" failed: no value provided for static field \"usedNetworkCount\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdc\" failed to cast field \"usedNetworkCount\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// VmQuota accessor autogenerated
func (s *mqlVcdVdc) VmQuota() (int64, error) {
	res, ok := s.Cache.Load("vmQuota")
	if !ok || !res.Valid {
		return 0, errors.New("\"vcd.vdc\" failed: no value provided for static field \"vmQuota\"")
	}
	if res.Error != nil {
		return 0, res.Error
	}
	tres, ok := res.Data.(int64)
	if !ok {
		return 0, fmt.Errorf("\"vcd.vdc\" failed to cast field \"vmQuota\" to the right type (int64): %#v", res)
	}
	return tres, nil
}

// IsEnabled accessor autogenerated
func (s *mqlVcdVdc) IsEnabled() (bool, error) {
	res, ok := s.Cache.Load("isEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdc\" failed: no value provided for static field \"isEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdc\" failed to cast field \"isEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdVdc) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdc].Compute")
	switch name {
	case "id":
		return nil
	case "name":
		return nil
	case "status":
		return nil
	case "description":
		return nil
	case "allocationModel":
		return nil
	case "nicQuota":
		return nil
	case "networkQuota":
		return nil
	case "usedNetworkCount":
		return nil
	case "vmQuota":
		return nil
	case "isEnabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdc\" resource")
	}
}

// VcdVdcGroup resource interface
type VcdVdcGroup interface {
	MqlResource() (*resources.Resource)
	Compute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Name() (string, error)
	Description() (string, error)
	LocalEgress() (bool, error)
	Status() (string, error)
	Type() (string, error)
	UniversalNetworkingEnabled() (bool, error)
	DfwEnabled() (bool, error)
}

// mqlVcdVdcGroup for the vcd.vdcGroup resource
type mqlVcdVdcGroup struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlVcdVdcGroup) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the vcd.vdcGroup resource
func newVcdVdcGroup(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlVcdVdcGroup{runtime.NewResource("vcd.vdcGroup")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "description":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"description\" argument has the wrong type (expected type \"string\")")
			}
		case "localEgress":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"localEgress\" argument has the wrong type (expected type \"bool\")")
			}
		case "status":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"status\" argument has the wrong type (expected type \"string\")")
			}
		case "type":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"type\" argument has the wrong type (expected type \"string\")")
			}
		case "universalNetworkingEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"universalNetworkingEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "dfwEnabled":
			if _, ok := val.(bool); !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"dfwEnabled\" argument has the wrong type (expected type \"bool\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"vcd.vdcGroup\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized vcd.vdcGroup with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlVcdVdcGroup) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("description"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"description\". This field is required.")
	}
	if _, ok := s.Cache.Load("localEgress"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"localEgress\". This field is required.")
	}
	if _, ok := s.Cache.Load("status"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"status\". This field is required.")
	}
	if _, ok := s.Cache.Load("type"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"type\". This field is required.")
	}
	if _, ok := s.Cache.Load("universalNetworkingEnabled"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"universalNetworkingEnabled\". This field is required.")
	}
	if _, ok := s.Cache.Load("dfwEnabled"); !ok {
		return errors.New("Initialized \"vcd.vdcGroup\" resource without a \"dfwEnabled\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlVcdVdcGroup) Register(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdcGroup].Register")
	switch name {
	case "name":
		return nil
	case "description":
		return nil
	case "localEgress":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "universalNetworkingEnabled":
		return nil
	case "dfwEnabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdcGroup\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlVcdVdcGroup) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[vcd.vdcGroup].Field")
	switch name {
	case "name":
		return s.Name()
	case "description":
		return s.Description()
	case "localEgress":
		return s.LocalEgress()
	case "status":
		return s.Status()
	case "type":
		return s.Type()
	case "universalNetworkingEnabled":
		return s.UniversalNetworkingEnabled()
	case "dfwEnabled":
		return s.DfwEnabled()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"vcd.vdcGroup\" resource")
	}
}

// Name accessor autogenerated
func (s *mqlVcdVdcGroup) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Description accessor autogenerated
func (s *mqlVcdVdcGroup) Description() (string, error) {
	res, ok := s.Cache.Load("description")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"description\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"description\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// LocalEgress accessor autogenerated
func (s *mqlVcdVdcGroup) LocalEgress() (bool, error) {
	res, ok := s.Cache.Load("localEgress")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"localEgress\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"localEgress\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Status accessor autogenerated
func (s *mqlVcdVdcGroup) Status() (string, error) {
	res, ok := s.Cache.Load("status")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"status\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"status\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Type accessor autogenerated
func (s *mqlVcdVdcGroup) Type() (string, error) {
	res, ok := s.Cache.Load("type")
	if !ok || !res.Valid {
		return "", errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"type\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"type\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// UniversalNetworkingEnabled accessor autogenerated
func (s *mqlVcdVdcGroup) UniversalNetworkingEnabled() (bool, error) {
	res, ok := s.Cache.Load("universalNetworkingEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"universalNetworkingEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"universalNetworkingEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// DfwEnabled accessor autogenerated
func (s *mqlVcdVdcGroup) DfwEnabled() (bool, error) {
	res, ok := s.Cache.Load("dfwEnabled")
	if !ok || !res.Valid {
		return false, errors.New("\"vcd.vdcGroup\" failed: no value provided for static field \"dfwEnabled\"")
	}
	if res.Error != nil {
		return false, res.Error
	}
	tres, ok := res.Data.(bool)
	if !ok {
		return false, fmt.Errorf("\"vcd.vdcGroup\" failed to cast field \"dfwEnabled\" to the right type (bool): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlVcdVdcGroup) Compute(name string) error {
	log.Trace().Str("field", name).Msg("[vcd.vdcGroup].Compute")
	switch name {
	case "name":
		return nil
	case "description":
		return nil
	case "localEgress":
		return nil
	case "status":
		return nil
	case "type":
		return nil
	case "universalNetworkingEnabled":
		return nil
	case "dfwEnabled":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"vcd.vdcGroup\" resource")
	}
}

