---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: no-tls-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: api.nexus.info
    http:
      paths:
      - backend:
          resource:
            apiGroup: k8s.example.io
            kind: MyKind
            name: my-resource
        path: /
        pathType: Prefix
  - host: alt.nexus.info
    http:
      paths:
      - backend:
          service:
            name: some-service
            port:
              name: a-service-name
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-with-tls
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: api.nexus.info
    http:
      paths:
      - backend:
          resource:
            apiGroup: k8s.example.io
            kind: MyKind
            name: my-resource
        path: /
        pathType: Prefix
  - host: alt.nexus.info
    http:
      paths:
      - backend:
          service:
            name: some-service
            port:
              name: a-service-name
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - api.example.com
    - altapi.example.com
    secretName: my-certificates
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-to-non-existent-secret
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: api.nexus.info
    http:
      paths:
      - backend:
          resource:
            apiGroup: k8s.example.io
            kind: MyKind
            name: my-resource
        path: /
        pathType: Prefix
  - host: alt.nexus.info
    http:
      paths:
      - backend:
          service:
            name: some-service
            port:
              name: a-service-name
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - api.example.com
    - altapi.example.com
    secretName: my-missing-certificates
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ3ekNDQXRlZ0F3SUJBZ0lVZFZqTmhXZTJmN2ZNd21PT0dBODgycTFETzFrd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZqRVVNQklHQTFVRUF3d0xWR1Z6ZENCSmMzTjFaWEl3SUJjTk1qSXhNakl4TWpFeE56UXlXaGdQTWpBMQpNREExTURneU1URTNOREphTUd3eEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUlEQUpPV1RFTU1Bb0dBMVVFCkJ3d0RUbGxETVJNd0VRWURWUVFLREFwTmVTQkRiMjF3WVc1NU1SZ3dGZ1lEVlFRTERBOU5lU0JQY21kaGJtbDYKWVhScGIyNHhFekFSQmdOVkJBTU1DazE1SUZObGNuWnBZMlV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQgpEd0F3Z2dFS0FvSUJBUUNseWlEcEI1dWpKUDAzQ1pDQytZdjU5NmZxS0hKaE5FTnRvdlBTem1iK2xjaWNHYXkwClNOUktVMWVFdk5OT1R0dWcvSkI2WG9EMlNJNHRKRGp3RjJKYmhrUHlRUWJ1TlVRL1lwY3FyNWhPOVkrNlZTblkKd0hhcHlXcXk4TkVYVzhiUktlSktKRTJ3WTlwNTc0NEtmckZUK2laUGh2YUp4QWF1UUV4aU1uZkpaRVNEa0wrSQp3SElBUzRwMEIvRTFRRUhqVWtSOTFZc0RlQW96ZTcrYU1DdXNBSk9vYWU2bms2MnRlQURXeDVDTmt2ZkhBNDVnCm0vWFFXUGdndWhMcjBlVngxUHZRcFRLNHRuN21XWGZwb2F0M3Q3SW1yaG5OZmhmM1FickZab1U0dHVpNW9TQW8KWWVXV1lLRWQwQ1Vlc0pnVW5mTVAxYktXRHB2SkRxa0VEaGdoQWdNQkFBR2pnZHd3Z2Rrd1VRWURWUjBqQkVvdwpTSUFVdU85R2xBMTl4cmlEMlJZWlcrNldaSnkrOWQraEdxUVlNQll4RkRBU0JnTlZCQU1NQzFSbGMzUWdTWE56CmRXVnlnaFFRbDNZOXVUY1BNcTVvNi9pWkozTkNyQ1lTK0RBSkJnTlZIUk1FQWpBQU1Bc0dBMVVkRHdRRUF3SUUKTURBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdMZ1lEVlIwUkJDY3dKWUlQWVhCcApMbVY0WVcxd2JHVXVZMjl0Z2hKaGJIUmhjR2t1WlhoaGJYQnNaUzVqYjIwd0hRWURWUjBPQkJZRUZNY3dOTEhWCkgzeXAzS1dsOUpCNzVWOEdrWDUyTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBK1p0NjBNYWxNcm5jbkVsYU4KaHVwZ2RrYzRmb1FNdEFNYTY2RE42ZWh3ODU2T0FZcVFORmpwTEcvT1Z1ZHpOQ2FMRCswZ0o3ZG5rV1BBYXc1SQp3TzJUVit0R0V0d203NStzdzc0T0tBZ216dnJLckxhVythNUNaWGhTR0VOZXFPaXE5VTVqbk1YSE5PUG9pS1Q1ClpWaG1tVENjdlNkRlJEaTlxWE84c1lFN1pNaEw3SzUwbDQzRVhEL09US1FweG9pa0IxMjByU3o2aEVrS0xZNU4KKzhWcWZnelFlUlZmbktMcnVydGYrWWVveTEzVDgrK0tOZGZyYWdzRDZSWDJhaTlHMUE1dlRDVS9DbzZFdWZaVwo0clhLS2tmVHVvNW10alpSYVVZVEk1STRMY2w3aHFodTlUdWxGcnFxbmZOQ214RXpMeFZkWXU2c1VnYUpxbitjClpDU2UKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ2x5aURwQjV1akpQMDMKQ1pDQytZdjU5NmZxS0hKaE5FTnRvdlBTem1iK2xjaWNHYXkwU05SS1UxZUV2Tk5PVHR1Zy9KQjZYb0QyU0k0dApKRGp3RjJKYmhrUHlRUWJ1TlVRL1lwY3FyNWhPOVkrNlZTbll3SGFweVdxeThORVhXOGJSS2VKS0pFMndZOXA1Cjc0NEtmckZUK2laUGh2YUp4QWF1UUV4aU1uZkpaRVNEa0wrSXdISUFTNHAwQi9FMVFFSGpVa1I5MVlzRGVBb3oKZTcrYU1DdXNBSk9vYWU2bms2MnRlQURXeDVDTmt2ZkhBNDVnbS9YUVdQZ2d1aExyMGVWeDFQdlFwVEs0dG43bQpXWGZwb2F0M3Q3SW1yaG5OZmhmM1FickZab1U0dHVpNW9TQW9ZZVdXWUtFZDBDVWVzSmdVbmZNUDFiS1dEcHZKCkRxa0VEaGdoQWdNQkFBRUNnZ0VBQWpaRzhrMEN4TmtRdnRhcGFnZEoySlBod1Q3NUV3dkhPRFBaSkhvb0IzbGoKVHBVM2NuQUQvY1RodS9pU3FpNjZWcDkxWkYzcW1HbE1sUDl3ejEvdktrWkpsYUVoVVBWKzBRaXYrSHdVeXhMbwpNQnN1ODlYU09pbUxrS2ZPdTdkNEE0dVhSRzE2YURlQTJmNTZBRVpZb29TZkttYjVnWitQQmtLcDNPZmhwTVhQClNkWnRTQlU3bWtHUEptWG1TVE1qMmFrU3RuOFF6SWhnZnFpVllwZy94TDRxaVpMTGRmM2pyMHpVWEZjdG8wdTIKMzZkNzJpeEtKYVVYc3pGSkxEeVRBYWZwdWdCWlNybEpOc3Q2ZE5OZWJJbFNES0hoRFByRzlWbFk1K3AwUitwbQpGZzYyRk1GU0diR2VhVjljQzRPSUxVZDh3M1VPK2pQRVBSbXYvSGE1OVFLQmdRRERUQXBLb0pPcmRvZzZ1ME9WCmZOWG52aFpNdzFORjE1YU40Z09pcGVKdXU1V05HN3ZKaWp6cm5Vcm8yNllyd1VXYlc3WUMvbVhUTjVnR3BGemgKdVFKcmdzWCtsckNseWFlN2Zsa0VFUEFZOHZ2ZHN3bEU3RnRaUk1PU1MvVCtJTDFMTTAwTUhUU1JYTXhSNENPSwpDREhOKzR4TmprVjMza2gyRVVuMWR0b3kvUUtCZ1FEWlVpY2FFcjVyNFo1bXlpWFI4ZEhCM2gxSjV3YURwZlkzCkY4dXZhRXdxK1JMazNDcXV4d1ErYUx2ZUx0ZFVnaUVPQzRNcTY0QjZNNjNXUDR2QjBaQmpHcFVXRm52ckF6eGIKQXVSbE4zcXR2OGJPMUd5WFY1dzJZSit6N005Zi82V3dPYzRNV0E2YlBhL2xkUVo4SS9iajBhN3lmdHZPZzFpZgpBcys2WE9nODlRS0JnUUNkV2EvVkR1bkx0WFh2ZEIvdzJxTHgwNnJkOEdZd21KSDZBUWNTemZyUll4d01sRExLCklESVRXQ2taMHBkaEc1aDhvdmpVRXFweDhwSHZrQkF4NGNGOFkrSW96THJJNk4vVzVlYk1xdVQ0QlJZL090Z1cKQ3lWU21GL0dpS0o4K2wzcHNBeTgzTzhVeTZMbnVPS0pmUzY3bXBnaGlLYVovS04vVlZDMGtDMGY5UUtCZ1FDcwo1WHRPZHhNZ2FVUElxNU1qVUt4OC9PVjRZbUVBWkExYkQ0ZHhhaDBQSTFJdzJpanJIRkw0QkFOVFpSalRseVFOCk5JT0twZ3AxTHFCakQvTjBvL0ducHdKdHJEMnlYOFNvODhnWjd1V2ZUakF4WlRkdndMZjdXeXd6elhlKy9Ia3AKbHhPakpudVlicDkrZ25oQ1U2cWMzYm0rRzhkc3FYcmNKelIxSkcxdjhRS0JnRkxlQXI0M1RYRGliWDNubVlpcApucDZyZWhQMlV3ZEVsQmxxako2bmNOb3JUN3VEMXc1YUlhT2IzQVlsc0FmbVh6R1ZzWlJ0T1QwZ3BKK1gzZThBCnd2bHRNUk5JODRiVGtyelJJSnF4TE9BSk5Md3VBSXQ3TWVmWnFOdDZLR3RjVEd1SzFXR0RYenpVOENyL2hRYm4KYS9ORmpwSyttRTJha2VxVVNDTHRsUVpCCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: my-certificates
  namespace: default
type: kubernetes.io/tls