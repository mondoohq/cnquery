// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider.go

// Package k8s is a generated GoMock package.
package k8s

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	platform "go.mondoo.com/cnquery/motor/platform"
	providers "go.mondoo.com/cnquery/motor/providers"
	resources "go.mondoo.com/cnquery/motor/providers/k8s/resources"
	v1 "k8s.io/api/admission/v1"
	v10 "k8s.io/api/apps/v1"
	v11 "k8s.io/api/batch/v1"
	v12 "k8s.io/api/core/v1"
	v13 "k8s.io/api/networking/v1"
	version "k8s.io/apimachinery/pkg/version"
)

// MockKubernetesProvider is a mock of KubernetesProvider interface.
type MockKubernetesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesProviderMockRecorder
}

// MockKubernetesProviderMockRecorder is the mock recorder for MockKubernetesProvider.
type MockKubernetesProviderMockRecorder struct {
	mock *MockKubernetesProvider
}

// NewMockKubernetesProvider creates a new mock instance.
func NewMockKubernetesProvider(ctrl *gomock.Controller) *MockKubernetesProvider {
	mock := &MockKubernetesProvider{ctrl: ctrl}
	mock.recorder = &MockKubernetesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesProvider) EXPECT() *MockKubernetesProviderMockRecorder {
	return m.recorder
}

// AdmissionReviews mocks base method.
func (m *MockKubernetesProvider) AdmissionReviews() ([]v1.AdmissionReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmissionReviews")
	ret0, _ := ret[0].([]v1.AdmissionReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdmissionReviews indicates an expected call of AdmissionReviews.
func (mr *MockKubernetesProviderMockRecorder) AdmissionReviews() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmissionReviews", reflect.TypeOf((*MockKubernetesProvider)(nil).AdmissionReviews))
}

// Capabilities mocks base method.
func (m *MockKubernetesProvider) Capabilities() providers.Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(providers.Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockKubernetesProviderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockKubernetesProvider)(nil).Capabilities))
}

// Close mocks base method.
func (m *MockKubernetesProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKubernetesProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKubernetesProvider)(nil).Close))
}

// CronJob mocks base method.
func (m *MockKubernetesProvider) CronJob(namespace, name string) (*v11.CronJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronJob", namespace, name)
	ret0, _ := ret[0].(*v11.CronJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronJob indicates an expected call of CronJob.
func (mr *MockKubernetesProviderMockRecorder) CronJob(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronJob", reflect.TypeOf((*MockKubernetesProvider)(nil).CronJob), namespace, name)
}

// CronJobs mocks base method.
func (m *MockKubernetesProvider) CronJobs(namespace v12.Namespace) ([]*v11.CronJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronJobs", namespace)
	ret0, _ := ret[0].([]*v11.CronJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CronJobs indicates an expected call of CronJobs.
func (mr *MockKubernetesProviderMockRecorder) CronJobs(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronJobs", reflect.TypeOf((*MockKubernetesProvider)(nil).CronJobs), namespace)
}

// DaemonSet mocks base method.
func (m *MockKubernetesProvider) DaemonSet(namespace, name string) (*v10.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSet", namespace, name)
	ret0, _ := ret[0].(*v10.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DaemonSet indicates an expected call of DaemonSet.
func (mr *MockKubernetesProviderMockRecorder) DaemonSet(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSet", reflect.TypeOf((*MockKubernetesProvider)(nil).DaemonSet), namespace, name)
}

// DaemonSets mocks base method.
func (m *MockKubernetesProvider) DaemonSets(namespace v12.Namespace) ([]*v10.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSets", namespace)
	ret0, _ := ret[0].([]*v10.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DaemonSets indicates an expected call of DaemonSets.
func (mr *MockKubernetesProviderMockRecorder) DaemonSets(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSets", reflect.TypeOf((*MockKubernetesProvider)(nil).DaemonSets), namespace)
}

// Deployment mocks base method.
func (m *MockKubernetesProvider) Deployment(namespace, name string) (*v10.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployment", namespace, name)
	ret0, _ := ret[0].(*v10.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployment indicates an expected call of Deployment.
func (mr *MockKubernetesProviderMockRecorder) Deployment(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployment", reflect.TypeOf((*MockKubernetesProvider)(nil).Deployment), namespace, name)
}

// Deployments mocks base method.
func (m *MockKubernetesProvider) Deployments(namespace v12.Namespace) ([]*v10.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments", namespace)
	ret0, _ := ret[0].([]*v10.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployments indicates an expected call of Deployments.
func (mr *MockKubernetesProviderMockRecorder) Deployments(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockKubernetesProvider)(nil).Deployments), namespace)
}

// Identifier mocks base method.
func (m *MockKubernetesProvider) Identifier() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identifier indicates an expected call of Identifier.
func (mr *MockKubernetesProviderMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockKubernetesProvider)(nil).Identifier))
}

// Ingress mocks base method.
func (m *MockKubernetesProvider) Ingress(namespace, name string) (*v13.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingress", namespace, name)
	ret0, _ := ret[0].(*v13.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ingress indicates an expected call of Ingress.
func (mr *MockKubernetesProviderMockRecorder) Ingress(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingress", reflect.TypeOf((*MockKubernetesProvider)(nil).Ingress), namespace, name)
}

// Ingresses mocks base method.
func (m *MockKubernetesProvider) Ingresses(namespace v12.Namespace) ([]*v13.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingresses", namespace)
	ret0, _ := ret[0].([]*v13.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ingresses indicates an expected call of Ingresses.
func (mr *MockKubernetesProviderMockRecorder) Ingresses(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingresses", reflect.TypeOf((*MockKubernetesProvider)(nil).Ingresses), namespace)
}

// Job mocks base method.
func (m *MockKubernetesProvider) Job(namespace, name string) (*v11.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job", namespace, name)
	ret0, _ := ret[0].(*v11.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Job indicates an expected call of Job.
func (mr *MockKubernetesProviderMockRecorder) Job(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockKubernetesProvider)(nil).Job), namespace, name)
}

// Jobs mocks base method.
func (m *MockKubernetesProvider) Jobs(namespace v12.Namespace) ([]*v11.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs", namespace)
	ret0, _ := ret[0].([]*v11.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobs indicates an expected call of Jobs.
func (mr *MockKubernetesProviderMockRecorder) Jobs(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockKubernetesProvider)(nil).Jobs), namespace)
}

// Kind mocks base method.
func (m *MockKubernetesProvider) Kind() providers.Kind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(providers.Kind)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockKubernetesProviderMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockKubernetesProvider)(nil).Kind))
}

// Name mocks base method.
func (m *MockKubernetesProvider) Name() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockKubernetesProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockKubernetesProvider)(nil).Name))
}

// Namespace mocks base method.
func (m *MockKubernetesProvider) Namespace(name string) (*v12.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", name)
	ret0, _ := ret[0].(*v12.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace.
func (mr *MockKubernetesProviderMockRecorder) Namespace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockKubernetesProvider)(nil).Namespace), name)
}

// Namespaces mocks base method.
func (m *MockKubernetesProvider) Namespaces() ([]v12.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].([]v12.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockKubernetesProviderMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockKubernetesProvider)(nil).Namespaces))
}

// Nodes mocks base method.
func (m *MockKubernetesProvider) Nodes() ([]v12.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].([]v12.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nodes indicates an expected call of Nodes.
func (mr *MockKubernetesProviderMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockKubernetesProvider)(nil).Nodes))
}

// PlatformIdDetectors mocks base method.
func (m *MockKubernetesProvider) PlatformIdDetectors() []providers.PlatformIdDetector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformIdDetectors")
	ret0, _ := ret[0].([]providers.PlatformIdDetector)
	return ret0
}

// PlatformIdDetectors indicates an expected call of PlatformIdDetectors.
func (mr *MockKubernetesProviderMockRecorder) PlatformIdDetectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformIdDetectors", reflect.TypeOf((*MockKubernetesProvider)(nil).PlatformIdDetectors))
}

// PlatformInfo mocks base method.
func (m *MockKubernetesProvider) PlatformInfo() *platform.Platform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformInfo")
	ret0, _ := ret[0].(*platform.Platform)
	return ret0
}

// PlatformInfo indicates an expected call of PlatformInfo.
func (mr *MockKubernetesProviderMockRecorder) PlatformInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformInfo", reflect.TypeOf((*MockKubernetesProvider)(nil).PlatformInfo))
}

// Pod mocks base method.
func (m *MockKubernetesProvider) Pod(namespace, name string) (*v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod", namespace, name)
	ret0, _ := ret[0].(*v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pod indicates an expected call of Pod.
func (mr *MockKubernetesProviderMockRecorder) Pod(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockKubernetesProvider)(nil).Pod), namespace, name)
}

// Pods mocks base method.
func (m *MockKubernetesProvider) Pods(namespace v12.Namespace) ([]*v12.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", namespace)
	ret0, _ := ret[0].([]*v12.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pods indicates an expected call of Pods.
func (mr *MockKubernetesProviderMockRecorder) Pods(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockKubernetesProvider)(nil).Pods), namespace)
}

// ReplicaSet mocks base method.
func (m *MockKubernetesProvider) ReplicaSet(namespace, name string) (*v10.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSet", namespace, name)
	ret0, _ := ret[0].(*v10.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicaSet indicates an expected call of ReplicaSet.
func (mr *MockKubernetesProviderMockRecorder) ReplicaSet(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSet", reflect.TypeOf((*MockKubernetesProvider)(nil).ReplicaSet), namespace, name)
}

// ReplicaSets mocks base method.
func (m *MockKubernetesProvider) ReplicaSets(namespace v12.Namespace) ([]*v10.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSets", namespace)
	ret0, _ := ret[0].([]*v10.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicaSets indicates an expected call of ReplicaSets.
func (mr *MockKubernetesProviderMockRecorder) ReplicaSets(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSets", reflect.TypeOf((*MockKubernetesProvider)(nil).ReplicaSets), namespace)
}

// Resources mocks base method.
func (m *MockKubernetesProvider) Resources(kind, name, namespace string) (*ResourceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resources", kind, name, namespace)
	ret0, _ := ret[0].(*ResourceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resources indicates an expected call of Resources.
func (mr *MockKubernetesProviderMockRecorder) Resources(kind, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MockKubernetesProvider)(nil).Resources), kind, name, namespace)
}

// Runtime mocks base method.
func (m *MockKubernetesProvider) Runtime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Runtime")
	ret0, _ := ret[0].(string)
	return ret0
}

// Runtime indicates an expected call of Runtime.
func (mr *MockKubernetesProviderMockRecorder) Runtime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Runtime", reflect.TypeOf((*MockKubernetesProvider)(nil).Runtime))
}

// Secret mocks base method.
func (m *MockKubernetesProvider) Secret(namespace, name string) (*v12.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", namespace, name)
	ret0, _ := ret[0].(*v12.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secret indicates an expected call of Secret.
func (mr *MockKubernetesProviderMockRecorder) Secret(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockKubernetesProvider)(nil).Secret), namespace, name)
}

// ServerVersion mocks base method.
func (m *MockKubernetesProvider) ServerVersion() *version.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Info)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockKubernetesProviderMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockKubernetesProvider)(nil).ServerVersion))
}

// StatefulSet mocks base method.
func (m *MockKubernetesProvider) StatefulSet(namespace, name string) (*v10.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatefulSet", namespace, name)
	ret0, _ := ret[0].(*v10.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatefulSet indicates an expected call of StatefulSet.
func (mr *MockKubernetesProviderMockRecorder) StatefulSet(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatefulSet", reflect.TypeOf((*MockKubernetesProvider)(nil).StatefulSet), namespace, name)
}

// StatefulSets mocks base method.
func (m *MockKubernetesProvider) StatefulSets(namespace v12.Namespace) ([]*v10.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatefulSets", namespace)
	ret0, _ := ret[0].([]*v10.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatefulSets indicates an expected call of StatefulSets.
func (mr *MockKubernetesProviderMockRecorder) StatefulSets(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatefulSets", reflect.TypeOf((*MockKubernetesProvider)(nil).StatefulSets), namespace)
}

// SupportedResourceTypes mocks base method.
func (m *MockKubernetesProvider) SupportedResourceTypes() (*resources.ApiResourceIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedResourceTypes")
	ret0, _ := ret[0].(*resources.ApiResourceIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedResourceTypes indicates an expected call of SupportedResourceTypes.
func (mr *MockKubernetesProviderMockRecorder) SupportedResourceTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedResourceTypes", reflect.TypeOf((*MockKubernetesProvider)(nil).SupportedResourceTypes))
}
