// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v9/llx"
	"go.mondoo.com/cnquery/v9/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v9/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"slack": {
			// to override args, implement: initSlack(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlack,
		},
		"slack.team": {
			Init: initSlackTeam,
			Create: createSlackTeam,
		},
		"slack.users": {
			// to override args, implement: initSlackUsers(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlackUsers,
		},
		"slack.user": {
			Init: initSlackUser,
			Create: createSlackUser,
		},
		"slack.enterpriseUser": {
			// to override args, implement: initSlackEnterpriseUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlackEnterpriseUser,
		},
		"slack.userGroup": {
			// to override args, implement: initSlackUserGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlackUserGroup,
		},
		"slack.login": {
			// to override args, implement: initSlackLogin(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlackLogin,
		},
		"slack.conversation": {
			// to override args, implement: initSlackConversation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createSlackConversation,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"slack.accessLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlack).GetAccessLogs()).ToDataRes(types.Array(types.Resource("slack.login")))
	},
	"slack.userGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlack).GetUserGroups()).ToDataRes(types.Array(types.Resource("slack.userGroup")))
	},
	"slack.conversations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlack).GetConversations()).ToDataRes(types.Array(types.Resource("slack.conversation")))
	},
	"slack.team.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackTeam).GetId()).ToDataRes(types.String)
	},
	"slack.team.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackTeam).GetName()).ToDataRes(types.String)
	},
	"slack.team.domain": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackTeam).GetDomain()).ToDataRes(types.String)
	},
	"slack.team.emailDomain": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackTeam).GetEmailDomain()).ToDataRes(types.String)
	},
	"slack.users.bots": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUsers).GetBots()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.users.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUsers).GetMembers()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.users.admins": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUsers).GetAdmins()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.users.owners": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUsers).GetOwners()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.users.list": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUsers).GetList()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetId()).ToDataRes(types.String)
	},
	"slack.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetName()).ToDataRes(types.String)
	},
	"slack.user.teamId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetTeamId()).ToDataRes(types.String)
	},
	"slack.user.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetDeleted()).ToDataRes(types.Bool)
	},
	"slack.user.color": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetColor()).ToDataRes(types.String)
	},
	"slack.user.realName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetRealName()).ToDataRes(types.String)
	},
	"slack.user.timeZone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetTimeZone()).ToDataRes(types.String)
	},
	"slack.user.timeZoneLabel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetTimeZoneLabel()).ToDataRes(types.String)
	},
	"slack.user.timeZoneOffset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetTimeZoneOffset()).ToDataRes(types.Int)
	},
	"slack.user.isBot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsBot()).ToDataRes(types.Bool)
	},
	"slack.user.isAdmin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsAdmin()).ToDataRes(types.Bool)
	},
	"slack.user.isOwner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsOwner()).ToDataRes(types.Bool)
	},
	"slack.user.isPrimaryOwner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsPrimaryOwner()).ToDataRes(types.Bool)
	},
	"slack.user.isRestricted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsRestricted()).ToDataRes(types.Bool)
	},
	"slack.user.isUltraRestricted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsUltraRestricted()).ToDataRes(types.Bool)
	},
	"slack.user.isStranger": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsStranger()).ToDataRes(types.Bool)
	},
	"slack.user.isAppUser": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsAppUser()).ToDataRes(types.Bool)
	},
	"slack.user.isInvitedUser": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetIsInvitedUser()).ToDataRes(types.Bool)
	},
	"slack.user.has2FA": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetHas2FA()).ToDataRes(types.Bool)
	},
	"slack.user.twoFactorType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetTwoFactorType()).ToDataRes(types.String)
	},
	"slack.user.hasFiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetHasFiles()).ToDataRes(types.Bool)
	},
	"slack.user.presence": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetPresence()).ToDataRes(types.String)
	},
	"slack.user.locale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetLocale()).ToDataRes(types.String)
	},
	"slack.user.profile": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetProfile()).ToDataRes(types.Dict)
	},
	"slack.user.enterpriseUser": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUser).GetEnterpriseUser()).ToDataRes(types.Resource("slack.enterpriseUser"))
	},
	"slack.enterpriseUser.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackEnterpriseUser).GetId()).ToDataRes(types.String)
	},
	"slack.enterpriseUser.enterpriseId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackEnterpriseUser).GetEnterpriseId()).ToDataRes(types.String)
	},
	"slack.enterpriseUser.enterpriseName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackEnterpriseUser).GetEnterpriseName()).ToDataRes(types.String)
	},
	"slack.enterpriseUser.isAdmin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackEnterpriseUser).GetIsAdmin()).ToDataRes(types.Bool)
	},
	"slack.enterpriseUser.isOwner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackEnterpriseUser).GetIsOwner()).ToDataRes(types.Bool)
	},
	"slack.userGroup.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetId()).ToDataRes(types.String)
	},
	"slack.userGroup.teamId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetTeamId()).ToDataRes(types.String)
	},
	"slack.userGroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetName()).ToDataRes(types.String)
	},
	"slack.userGroup.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetDescription()).ToDataRes(types.String)
	},
	"slack.userGroup.handle": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetHandle()).ToDataRes(types.String)
	},
	"slack.userGroup.isExternal": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetIsExternal()).ToDataRes(types.Bool)
	},
	"slack.userGroup.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetCreated()).ToDataRes(types.Time)
	},
	"slack.userGroup.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetUpdated()).ToDataRes(types.Time)
	},
	"slack.userGroup.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetDeleted()).ToDataRes(types.Time)
	},
	"slack.userGroup.createdBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetCreatedBy()).ToDataRes(types.Resource("slack.user"))
	},
	"slack.userGroup.updatedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetUpdatedBy()).ToDataRes(types.Resource("slack.user"))
	},
	"slack.userGroup.deletedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetDeletedBy()).ToDataRes(types.Resource("slack.user"))
	},
	"slack.userGroup.userCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetUserCount()).ToDataRes(types.Int)
	},
	"slack.userGroup.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackUserGroup).GetMembers()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
	"slack.login.userID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetUserID()).ToDataRes(types.String)
	},
	"slack.login.username": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetUsername()).ToDataRes(types.String)
	},
	"slack.login.count": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetCount()).ToDataRes(types.Int)
	},
	"slack.login.ip": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetIp()).ToDataRes(types.String)
	},
	"slack.login.userAgent": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetUserAgent()).ToDataRes(types.String)
	},
	"slack.login.isp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetIsp()).ToDataRes(types.String)
	},
	"slack.login.country": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetCountry()).ToDataRes(types.String)
	},
	"slack.login.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetRegion()).ToDataRes(types.String)
	},
	"slack.login.dateFirst": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetDateFirst()).ToDataRes(types.Time)
	},
	"slack.login.dateLast": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackLogin).GetDateLast()).ToDataRes(types.Time)
	},
	"slack.conversation.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetId()).ToDataRes(types.String)
	},
	"slack.conversation.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetName()).ToDataRes(types.String)
	},
	"slack.conversation.creator": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetCreator()).ToDataRes(types.Resource("slack.user"))
	},
	"slack.conversation.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetCreated()).ToDataRes(types.Time)
	},
	"slack.conversation.locale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetLocale()).ToDataRes(types.String)
	},
	"slack.conversation.topic": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetTopic()).ToDataRes(types.Dict)
	},
	"slack.conversation.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetPurpose()).ToDataRes(types.Dict)
	},
	"slack.conversation.isArchived": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsArchived()).ToDataRes(types.Bool)
	},
	"slack.conversation.isOpen": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsOpen()).ToDataRes(types.Bool)
	},
	"slack.conversation.isPrivate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsPrivate()).ToDataRes(types.Bool)
	},
	"slack.conversation.isIM": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsIM()).ToDataRes(types.Bool)
	},
	"slack.conversation.isMpim": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsMpim()).ToDataRes(types.Bool)
	},
	"slack.conversation.isGroup": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsGroup()).ToDataRes(types.Bool)
	},
	"slack.conversation.isChannel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsChannel()).ToDataRes(types.Bool)
	},
	"slack.conversation.isShared": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsShared()).ToDataRes(types.Bool)
	},
	"slack.conversation.isExtShared": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsExtShared()).ToDataRes(types.Bool)
	},
	"slack.conversation.isPendingExtShared": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsPendingExtShared()).ToDataRes(types.Bool)
	},
	"slack.conversation.isOrgShared": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetIsOrgShared()).ToDataRes(types.Bool)
	},
	"slack.conversation.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetPriority()).ToDataRes(types.Float)
	},
	"slack.conversation.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlSlackConversation).GetMembers()).ToDataRes(types.Array(types.Resource("slack.user")))
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"slack.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlack).__id, ok = v.Value.(string)
			return
		},
	"slack.accessLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlack).AccessLogs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.userGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlack).UserGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.conversations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlack).Conversations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.team.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackTeam).__id, ok = v.Value.(string)
			return
		},
	"slack.team.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackTeam).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.team.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackTeam).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.team.domain": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackTeam).Domain, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.team.emailDomain": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackTeam).EmailDomain, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.users.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackUsers).__id, ok = v.Value.(string)
			return
		},
	"slack.users.bots": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUsers).Bots, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.users.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUsers).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.users.admins": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUsers).Admins, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.users.owners": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUsers).Owners, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.users.list": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUsers).List, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackUser).__id, ok = v.Value.(string)
			return
		},
	"slack.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.teamId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).TeamId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Deleted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.color": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Color, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.realName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).RealName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.timeZone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).TimeZone, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.timeZoneLabel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).TimeZoneLabel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.timeZoneOffset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).TimeZoneOffset, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"slack.user.isBot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsBot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isAdmin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsAdmin, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isOwner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsOwner, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isPrimaryOwner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsPrimaryOwner, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isRestricted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsRestricted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isUltraRestricted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsUltraRestricted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isStranger": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsStranger, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isAppUser": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsAppUser, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.isInvitedUser": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).IsInvitedUser, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.has2FA": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Has2FA, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.twoFactorType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).TwoFactorType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.hasFiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).HasFiles, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.user.presence": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Presence, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.locale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Locale, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.user.profile": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).Profile, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"slack.user.enterpriseUser": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUser).EnterpriseUser, ok = plugin.RawToTValue[*mqlSlackEnterpriseUser](v.Value, v.Error)
		return
	},
	"slack.enterpriseUser.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackEnterpriseUser).__id, ok = v.Value.(string)
			return
		},
	"slack.enterpriseUser.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackEnterpriseUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.enterpriseUser.enterpriseId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackEnterpriseUser).EnterpriseId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.enterpriseUser.enterpriseName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackEnterpriseUser).EnterpriseName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.enterpriseUser.isAdmin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackEnterpriseUser).IsAdmin, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.enterpriseUser.isOwner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackEnterpriseUser).IsOwner, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.userGroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackUserGroup).__id, ok = v.Value.(string)
			return
		},
	"slack.userGroup.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.userGroup.teamId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).TeamId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.userGroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.userGroup.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.userGroup.handle": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Handle, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.userGroup.isExternal": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).IsExternal, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.userGroup.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.userGroup.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.userGroup.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Deleted, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.userGroup.createdBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).CreatedBy, ok = plugin.RawToTValue[*mqlSlackUser](v.Value, v.Error)
		return
	},
	"slack.userGroup.updatedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).UpdatedBy, ok = plugin.RawToTValue[*mqlSlackUser](v.Value, v.Error)
		return
	},
	"slack.userGroup.deletedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).DeletedBy, ok = plugin.RawToTValue[*mqlSlackUser](v.Value, v.Error)
		return
	},
	"slack.userGroup.userCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).UserCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"slack.userGroup.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackUserGroup).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"slack.login.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackLogin).__id, ok = v.Value.(string)
			return
		},
	"slack.login.userID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).UserID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.username": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Username, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.count": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Count, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"slack.login.ip": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Ip, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.userAgent": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).UserAgent, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.isp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Isp, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.country": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Country, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.login.dateFirst": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).DateFirst, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.login.dateLast": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackLogin).DateLast, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.conversation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlSlackConversation).__id, ok = v.Value.(string)
			return
		},
	"slack.conversation.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.conversation.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.conversation.creator": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Creator, ok = plugin.RawToTValue[*mqlSlackUser](v.Value, v.Error)
		return
	},
	"slack.conversation.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"slack.conversation.locale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Locale, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"slack.conversation.topic": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Topic, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"slack.conversation.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Purpose, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"slack.conversation.isArchived": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsArchived, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isOpen": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsOpen, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isPrivate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsPrivate, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isIM": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsIM, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isMpim": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsMpim, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isGroup": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsGroup, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isChannel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsChannel, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isShared": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsShared, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isExtShared": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsExtShared, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isPendingExtShared": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsPendingExtShared, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.isOrgShared": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).IsOrgShared, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"slack.conversation.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Priority, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"slack.conversation.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlSlackConversation).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[slack] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[slack] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlSlack for the slack resource
type mqlSlack struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackInternal it will be used here
	AccessLogs plugin.TValue[[]interface{}]
	UserGroups plugin.TValue[[]interface{}]
	Conversations plugin.TValue[[]interface{}]
}

// createSlack creates a new instance of this resource
func createSlack(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlack{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlack) MqlName() string {
	return "slack"
}

func (c *mqlSlack) MqlID() string {
	return c.__id
}

func (c *mqlSlack) GetAccessLogs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AccessLogs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack", c.__id, "accessLogs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.accessLogs()
	})
}

func (c *mqlSlack) GetUserGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.UserGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack", c.__id, "userGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.userGroups()
	})
}

func (c *mqlSlack) GetConversations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Conversations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack", c.__id, "conversations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.conversations()
	})
}

// mqlSlackTeam for the slack.team resource
type mqlSlackTeam struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackTeamInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Domain plugin.TValue[string]
	EmailDomain plugin.TValue[string]
}

// createSlackTeam creates a new instance of this resource
func createSlackTeam(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackTeam{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.team", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackTeam) MqlName() string {
	return "slack.team"
}

func (c *mqlSlackTeam) MqlID() string {
	return c.__id
}

func (c *mqlSlackTeam) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlSlackTeam) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSlackTeam) GetDomain() *plugin.TValue[string] {
	return &c.Domain
}

func (c *mqlSlackTeam) GetEmailDomain() *plugin.TValue[string] {
	return &c.EmailDomain
}

// mqlSlackUsers for the slack.users resource
type mqlSlackUsers struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackUsersInternal it will be used here
	Bots plugin.TValue[[]interface{}]
	Members plugin.TValue[[]interface{}]
	Admins plugin.TValue[[]interface{}]
	Owners plugin.TValue[[]interface{}]
	List plugin.TValue[[]interface{}]
}

// createSlackUsers creates a new instance of this resource
func createSlackUsers(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackUsers{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.users", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackUsers) MqlName() string {
	return "slack.users"
}

func (c *mqlSlackUsers) MqlID() string {
	return c.__id
}

func (c *mqlSlackUsers) GetBots() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Bots, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.users", c.__id, "bots")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.bots()
	})
}

func (c *mqlSlackUsers) GetMembers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Members, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.users", c.__id, "members")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.members()
	})
}

func (c *mqlSlackUsers) GetAdmins() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Admins, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.users", c.__id, "admins")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.admins()
	})
}

func (c *mqlSlackUsers) GetOwners() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Owners, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.users", c.__id, "owners")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.owners()
	})
}

func (c *mqlSlackUsers) GetList() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.List, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.users", c.__id, "list")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.list()
	})
}

// mqlSlackUser for the slack.user resource
type mqlSlackUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackUserInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	TeamId plugin.TValue[string]
	Deleted plugin.TValue[bool]
	Color plugin.TValue[string]
	RealName plugin.TValue[string]
	TimeZone plugin.TValue[string]
	TimeZoneLabel plugin.TValue[string]
	TimeZoneOffset plugin.TValue[int64]
	IsBot plugin.TValue[bool]
	IsAdmin plugin.TValue[bool]
	IsOwner plugin.TValue[bool]
	IsPrimaryOwner plugin.TValue[bool]
	IsRestricted plugin.TValue[bool]
	IsUltraRestricted plugin.TValue[bool]
	IsStranger plugin.TValue[bool]
	IsAppUser plugin.TValue[bool]
	IsInvitedUser plugin.TValue[bool]
	Has2FA plugin.TValue[bool]
	TwoFactorType plugin.TValue[string]
	HasFiles plugin.TValue[bool]
	Presence plugin.TValue[string]
	Locale plugin.TValue[string]
	Profile plugin.TValue[interface{}]
	EnterpriseUser plugin.TValue[*mqlSlackEnterpriseUser]
}

// createSlackUser creates a new instance of this resource
func createSlackUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackUser) MqlName() string {
	return "slack.user"
}

func (c *mqlSlackUser) MqlID() string {
	return c.__id
}

func (c *mqlSlackUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlSlackUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSlackUser) GetTeamId() *plugin.TValue[string] {
	return &c.TeamId
}

func (c *mqlSlackUser) GetDeleted() *plugin.TValue[bool] {
	return &c.Deleted
}

func (c *mqlSlackUser) GetColor() *plugin.TValue[string] {
	return &c.Color
}

func (c *mqlSlackUser) GetRealName() *plugin.TValue[string] {
	return &c.RealName
}

func (c *mqlSlackUser) GetTimeZone() *plugin.TValue[string] {
	return &c.TimeZone
}

func (c *mqlSlackUser) GetTimeZoneLabel() *plugin.TValue[string] {
	return &c.TimeZoneLabel
}

func (c *mqlSlackUser) GetTimeZoneOffset() *plugin.TValue[int64] {
	return &c.TimeZoneOffset
}

func (c *mqlSlackUser) GetIsBot() *plugin.TValue[bool] {
	return &c.IsBot
}

func (c *mqlSlackUser) GetIsAdmin() *plugin.TValue[bool] {
	return &c.IsAdmin
}

func (c *mqlSlackUser) GetIsOwner() *plugin.TValue[bool] {
	return &c.IsOwner
}

func (c *mqlSlackUser) GetIsPrimaryOwner() *plugin.TValue[bool] {
	return &c.IsPrimaryOwner
}

func (c *mqlSlackUser) GetIsRestricted() *plugin.TValue[bool] {
	return &c.IsRestricted
}

func (c *mqlSlackUser) GetIsUltraRestricted() *plugin.TValue[bool] {
	return &c.IsUltraRestricted
}

func (c *mqlSlackUser) GetIsStranger() *plugin.TValue[bool] {
	return &c.IsStranger
}

func (c *mqlSlackUser) GetIsAppUser() *plugin.TValue[bool] {
	return &c.IsAppUser
}

func (c *mqlSlackUser) GetIsInvitedUser() *plugin.TValue[bool] {
	return &c.IsInvitedUser
}

func (c *mqlSlackUser) GetHas2FA() *plugin.TValue[bool] {
	return &c.Has2FA
}

func (c *mqlSlackUser) GetTwoFactorType() *plugin.TValue[string] {
	return &c.TwoFactorType
}

func (c *mqlSlackUser) GetHasFiles() *plugin.TValue[bool] {
	return &c.HasFiles
}

func (c *mqlSlackUser) GetPresence() *plugin.TValue[string] {
	return &c.Presence
}

func (c *mqlSlackUser) GetLocale() *plugin.TValue[string] {
	return &c.Locale
}

func (c *mqlSlackUser) GetProfile() *plugin.TValue[interface{}] {
	return &c.Profile
}

func (c *mqlSlackUser) GetEnterpriseUser() *plugin.TValue[*mqlSlackEnterpriseUser] {
	return &c.EnterpriseUser
}

// mqlSlackEnterpriseUser for the slack.enterpriseUser resource
type mqlSlackEnterpriseUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackEnterpriseUserInternal it will be used here
	Id plugin.TValue[string]
	EnterpriseId plugin.TValue[string]
	EnterpriseName plugin.TValue[string]
	IsAdmin plugin.TValue[bool]
	IsOwner plugin.TValue[bool]
}

// createSlackEnterpriseUser creates a new instance of this resource
func createSlackEnterpriseUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackEnterpriseUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.enterpriseUser", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackEnterpriseUser) MqlName() string {
	return "slack.enterpriseUser"
}

func (c *mqlSlackEnterpriseUser) MqlID() string {
	return c.__id
}

func (c *mqlSlackEnterpriseUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlSlackEnterpriseUser) GetEnterpriseId() *plugin.TValue[string] {
	return &c.EnterpriseId
}

func (c *mqlSlackEnterpriseUser) GetEnterpriseName() *plugin.TValue[string] {
	return &c.EnterpriseName
}

func (c *mqlSlackEnterpriseUser) GetIsAdmin() *plugin.TValue[bool] {
	return &c.IsAdmin
}

func (c *mqlSlackEnterpriseUser) GetIsOwner() *plugin.TValue[bool] {
	return &c.IsOwner
}

// mqlSlackUserGroup for the slack.userGroup resource
type mqlSlackUserGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackUserGroupInternal it will be used here
	Id plugin.TValue[string]
	TeamId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Handle plugin.TValue[string]
	IsExternal plugin.TValue[bool]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	Deleted plugin.TValue[*time.Time]
	CreatedBy plugin.TValue[*mqlSlackUser]
	UpdatedBy plugin.TValue[*mqlSlackUser]
	DeletedBy plugin.TValue[*mqlSlackUser]
	UserCount plugin.TValue[int64]
	Members plugin.TValue[[]interface{}]
}

// createSlackUserGroup creates a new instance of this resource
func createSlackUserGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackUserGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.userGroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackUserGroup) MqlName() string {
	return "slack.userGroup"
}

func (c *mqlSlackUserGroup) MqlID() string {
	return c.__id
}

func (c *mqlSlackUserGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlSlackUserGroup) GetTeamId() *plugin.TValue[string] {
	return &c.TeamId
}

func (c *mqlSlackUserGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSlackUserGroup) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlSlackUserGroup) GetHandle() *plugin.TValue[string] {
	return &c.Handle
}

func (c *mqlSlackUserGroup) GetIsExternal() *plugin.TValue[bool] {
	return &c.IsExternal
}

func (c *mqlSlackUserGroup) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlSlackUserGroup) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlSlackUserGroup) GetDeleted() *plugin.TValue[*time.Time] {
	return &c.Deleted
}

func (c *mqlSlackUserGroup) GetCreatedBy() *plugin.TValue[*mqlSlackUser] {
	return &c.CreatedBy
}

func (c *mqlSlackUserGroup) GetUpdatedBy() *plugin.TValue[*mqlSlackUser] {
	return &c.UpdatedBy
}

func (c *mqlSlackUserGroup) GetDeletedBy() *plugin.TValue[*mqlSlackUser] {
	return &c.DeletedBy
}

func (c *mqlSlackUserGroup) GetUserCount() *plugin.TValue[int64] {
	return &c.UserCount
}

func (c *mqlSlackUserGroup) GetMembers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Members, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.userGroup", c.__id, "members")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.members()
	})
}

// mqlSlackLogin for the slack.login resource
type mqlSlackLogin struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackLoginInternal it will be used here
	UserID plugin.TValue[string]
	Username plugin.TValue[string]
	Count plugin.TValue[int64]
	Ip plugin.TValue[string]
	UserAgent plugin.TValue[string]
	Isp plugin.TValue[string]
	Country plugin.TValue[string]
	Region plugin.TValue[string]
	DateFirst plugin.TValue[*time.Time]
	DateLast plugin.TValue[*time.Time]
}

// createSlackLogin creates a new instance of this resource
func createSlackLogin(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackLogin{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.login", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackLogin) MqlName() string {
	return "slack.login"
}

func (c *mqlSlackLogin) MqlID() string {
	return c.__id
}

func (c *mqlSlackLogin) GetUserID() *plugin.TValue[string] {
	return &c.UserID
}

func (c *mqlSlackLogin) GetUsername() *plugin.TValue[string] {
	return &c.Username
}

func (c *mqlSlackLogin) GetCount() *plugin.TValue[int64] {
	return &c.Count
}

func (c *mqlSlackLogin) GetIp() *plugin.TValue[string] {
	return &c.Ip
}

func (c *mqlSlackLogin) GetUserAgent() *plugin.TValue[string] {
	return &c.UserAgent
}

func (c *mqlSlackLogin) GetIsp() *plugin.TValue[string] {
	return &c.Isp
}

func (c *mqlSlackLogin) GetCountry() *plugin.TValue[string] {
	return &c.Country
}

func (c *mqlSlackLogin) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlSlackLogin) GetDateFirst() *plugin.TValue[*time.Time] {
	return &c.DateFirst
}

func (c *mqlSlackLogin) GetDateLast() *plugin.TValue[*time.Time] {
	return &c.DateLast
}

// mqlSlackConversation for the slack.conversation resource
type mqlSlackConversation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlSlackConversationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Creator plugin.TValue[*mqlSlackUser]
	Created plugin.TValue[*time.Time]
	Locale plugin.TValue[string]
	Topic plugin.TValue[interface{}]
	Purpose plugin.TValue[interface{}]
	IsArchived plugin.TValue[bool]
	IsOpen plugin.TValue[bool]
	IsPrivate plugin.TValue[bool]
	IsIM plugin.TValue[bool]
	IsMpim plugin.TValue[bool]
	IsGroup plugin.TValue[bool]
	IsChannel plugin.TValue[bool]
	IsShared plugin.TValue[bool]
	IsExtShared plugin.TValue[bool]
	IsPendingExtShared plugin.TValue[bool]
	IsOrgShared plugin.TValue[bool]
	Priority plugin.TValue[float64]
	Members plugin.TValue[[]interface{}]
}

// createSlackConversation creates a new instance of this resource
func createSlackConversation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlSlackConversation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("slack.conversation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlSlackConversation) MqlName() string {
	return "slack.conversation"
}

func (c *mqlSlackConversation) MqlID() string {
	return c.__id
}

func (c *mqlSlackConversation) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlSlackConversation) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlSlackConversation) GetCreator() *plugin.TValue[*mqlSlackUser] {
	return &c.Creator
}

func (c *mqlSlackConversation) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlSlackConversation) GetLocale() *plugin.TValue[string] {
	return &c.Locale
}

func (c *mqlSlackConversation) GetTopic() *plugin.TValue[interface{}] {
	return &c.Topic
}

func (c *mqlSlackConversation) GetPurpose() *plugin.TValue[interface{}] {
	return &c.Purpose
}

func (c *mqlSlackConversation) GetIsArchived() *plugin.TValue[bool] {
	return &c.IsArchived
}

func (c *mqlSlackConversation) GetIsOpen() *plugin.TValue[bool] {
	return &c.IsOpen
}

func (c *mqlSlackConversation) GetIsPrivate() *plugin.TValue[bool] {
	return &c.IsPrivate
}

func (c *mqlSlackConversation) GetIsIM() *plugin.TValue[bool] {
	return &c.IsIM
}

func (c *mqlSlackConversation) GetIsMpim() *plugin.TValue[bool] {
	return &c.IsMpim
}

func (c *mqlSlackConversation) GetIsGroup() *plugin.TValue[bool] {
	return &c.IsGroup
}

func (c *mqlSlackConversation) GetIsChannel() *plugin.TValue[bool] {
	return &c.IsChannel
}

func (c *mqlSlackConversation) GetIsShared() *plugin.TValue[bool] {
	return &c.IsShared
}

func (c *mqlSlackConversation) GetIsExtShared() *plugin.TValue[bool] {
	return &c.IsExtShared
}

func (c *mqlSlackConversation) GetIsPendingExtShared() *plugin.TValue[bool] {
	return &c.IsPendingExtShared
}

func (c *mqlSlackConversation) GetIsOrgShared() *plugin.TValue[bool] {
	return &c.IsOrgShared
}

func (c *mqlSlackConversation) GetPriority() *plugin.TValue[float64] {
	return &c.Priority
}

func (c *mqlSlackConversation) GetMembers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Members, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("slack.conversation", c.__id, "members")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.members()
	})
}
