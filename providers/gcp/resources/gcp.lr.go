// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"gcp.organization": {
			Init: initGcpOrganization,
			Create: createGcpOrganization,
		},
		"gcp.folders": {
			// to override args, implement: initGcpFolders(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpFolders,
		},
		"gcp.folder": {
			Init: initGcpFolder,
			Create: createGcpFolder,
		},
		"gcp.projects": {
			// to override args, implement: initGcpProjects(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjects,
		},
		"gcp.project": {
			Init: initGcpProject,
			Create: createGcpProject,
		},
		"gcp.service": {
			Init: initGcpService,
			Create: createGcpService,
		},
		"gcp.recommendation": {
			// to override args, implement: initGcpRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpRecommendation,
		},
		"gcp.resourcemanager.binding": {
			// to override args, implement: initGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpResourcemanagerBinding,
		},
		"gcp.project.computeService": {
			Init: initGcpProjectComputeService,
			Create: createGcpProjectComputeService,
		},
		"gcp.project.computeService.address": {
			// to override args, implement: initGcpProjectComputeServiceAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceAddress,
		},
		"gcp.project.computeService.forwardingRule": {
			// to override args, implement: initGcpProjectComputeServiceForwardingRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceForwardingRule,
		},
		"gcp.project.computeService.region": {
			Init: initGcpProjectComputeServiceRegion,
			Create: createGcpProjectComputeServiceRegion,
		},
		"gcp.project.computeService.zone": {
			// to override args, implement: initGcpProjectComputeServiceZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceZone,
		},
		"gcp.project.computeService.machineType": {
			// to override args, implement: initGcpProjectComputeServiceMachineType(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceMachineType,
		},
		"gcp.project.computeService.instance": {
			Init: initGcpProjectComputeServiceInstance,
			Create: createGcpProjectComputeServiceInstance,
		},
		"gcp.project.computeService.serviceaccount": {
			// to override args, implement: initGcpProjectComputeServiceServiceaccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceServiceaccount,
		},
		"gcp.project.computeService.disk": {
			// to override args, implement: initGcpProjectComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceDisk,
		},
		"gcp.project.computeService.attachedDisk": {
			// to override args, implement: initGcpProjectComputeServiceAttachedDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceAttachedDisk,
		},
		"gcp.project.computeService.snapshot": {
			// to override args, implement: initGcpProjectComputeServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceSnapshot,
		},
		"gcp.project.computeService.image": {
			Init: initGcpProjectComputeServiceImage,
			Create: createGcpProjectComputeServiceImage,
		},
		"gcp.project.computeService.firewall": {
			Init: initGcpProjectComputeServiceFirewall,
			Create: createGcpProjectComputeServiceFirewall,
		},
		"gcp.project.computeService.network": {
			Init: initGcpProjectComputeServiceNetwork,
			Create: createGcpProjectComputeServiceNetwork,
		},
		"gcp.project.computeService.subnetwork": {
			Init: initGcpProjectComputeServiceSubnetwork,
			Create: createGcpProjectComputeServiceSubnetwork,
		},
		"gcp.project.computeService.subnetwork.logConfig": {
			// to override args, implement: initGcpProjectComputeServiceSubnetworkLogConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceSubnetworkLogConfig,
		},
		"gcp.project.computeService.router": {
			// to override args, implement: initGcpProjectComputeServiceRouter(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceRouter,
		},
		"gcp.project.computeService.backendService": {
			// to override args, implement: initGcpProjectComputeServiceBackendService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendService,
		},
		"gcp.project.computeService.backendService.backend": {
			// to override args, implement: initGcpProjectComputeServiceBackendServiceBackend(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendServiceBackend,
		},
		"gcp.project.computeService.backendService.cdnPolicy": {
			// to override args, implement: initGcpProjectComputeServiceBackendServiceCdnPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendServiceCdnPolicy,
		},
		"gcp.project.storageService": {
			Init: initGcpProjectStorageService,
			Create: createGcpProjectStorageService,
		},
		"gcp.project.storageService.bucket": {
			Init: initGcpProjectStorageServiceBucket,
			Create: createGcpProjectStorageServiceBucket,
		},
		"gcp.project.sqlService": {
			// to override args, implement: initGcpProjectSqlService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlService,
		},
		"gcp.project.sqlService.instance": {
			// to override args, implement: initGcpProjectSqlServiceInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstance,
		},
		"gcp.project.sqlService.instance.database": {
			// to override args, implement: initGcpProjectSqlServiceInstanceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceDatabase,
		},
		"gcp.project.sqlService.instance.ipMapping": {
			// to override args, implement: initGcpProjectSqlServiceInstanceIpMapping(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceIpMapping,
		},
		"gcp.project.sqlService.instance.settings": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettings,
		},
		"gcp.project.sqlService.instance.settings.backupconfiguration": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettingsBackupconfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettingsBackupconfiguration,
		},
		"gcp.project.sqlService.instance.settings.denyMaintenancePeriod": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod,
		},
		"gcp.project.sqlService.instance.settings.ipConfiguration": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettingsIpConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettingsIpConfiguration,
		},
		"gcp.project.sqlService.instance.settings.maintenanceWindow": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettingsMaintenanceWindow(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettingsMaintenanceWindow,
		},
		"gcp.project.sqlService.instance.settings.passwordValidationPolicy": {
			// to override args, implement: initGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy,
		},
		"gcp.project.bigqueryService": {
			Init: initGcpProjectBigqueryService,
			Create: createGcpProjectBigqueryService,
		},
		"gcp.project.bigqueryService.dataset": {
			Init: initGcpProjectBigqueryServiceDataset,
			Create: createGcpProjectBigqueryServiceDataset,
		},
		"gcp.project.bigqueryService.dataset.accessEntry": {
			// to override args, implement: initGcpProjectBigqueryServiceDatasetAccessEntry(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBigqueryServiceDatasetAccessEntry,
		},
		"gcp.project.bigqueryService.table": {
			// to override args, implement: initGcpProjectBigqueryServiceTable(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBigqueryServiceTable,
		},
		"gcp.project.bigqueryService.model": {
			// to override args, implement: initGcpProjectBigqueryServiceModel(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBigqueryServiceModel,
		},
		"gcp.project.bigqueryService.routine": {
			// to override args, implement: initGcpProjectBigqueryServiceRoutine(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBigqueryServiceRoutine,
		},
		"gcp.project.dnsService": {
			Init: initGcpProjectDnsService,
			Create: createGcpProjectDnsService,
		},
		"gcp.project.dnsService.managedzone": {
			// to override args, implement: initGcpProjectDnsServiceManagedzone(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDnsServiceManagedzone,
		},
		"gcp.project.dnsService.recordset": {
			// to override args, implement: initGcpProjectDnsServiceRecordset(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDnsServiceRecordset,
		},
		"gcp.project.dnsService.policy": {
			// to override args, implement: initGcpProjectDnsServicePolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDnsServicePolicy,
		},
		"gcp.project.gkeService": {
			// to override args, implement: initGcpProjectGkeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeService,
		},
		"gcp.project.gkeService.cluster": {
			Init: initGcpProjectGkeServiceCluster,
			Create: createGcpProjectGkeServiceCluster,
		},
		"gcp.project.gkeService.cluster.addonsConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterAddonsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterAddonsConfig,
		},
		"gcp.project.gkeService.cluster.ipAllocationPolicy": {
			// to override args, implement: initGcpProjectGkeServiceClusterIpAllocationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterIpAllocationPolicy,
		},
		"gcp.project.gkeService.cluster.networkConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNetworkConfig,
		},
		"gcp.project.gkeService.cluster.nodepool": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepool(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepool,
		},
		"gcp.project.gkeService.cluster.nodepool.networkConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolNetworkConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.accelerator": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAccelerator(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAccelerator,
		},
		"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.nodeTaint": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigNodeTaint(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint,
		},
		"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures,
		},
		"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes,
		},
		"gcp.project.pubsubService": {
			Init: initGcpProjectPubsubService,
			Create: createGcpProjectPubsubService,
		},
		"gcp.project.pubsubService.topic": {
			// to override args, implement: initGcpProjectPubsubServiceTopic(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceTopic,
		},
		"gcp.project.pubsubService.topic.config": {
			// to override args, implement: initGcpProjectPubsubServiceTopicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceTopicConfig,
		},
		"gcp.project.pubsubService.topic.config.messagestoragepolicy": {
			// to override args, implement: initGcpProjectPubsubServiceTopicConfigMessagestoragepolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceTopicConfigMessagestoragepolicy,
		},
		"gcp.project.pubsubService.subscription": {
			// to override args, implement: initGcpProjectPubsubServiceSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceSubscription,
		},
		"gcp.project.pubsubService.subscription.config": {
			// to override args, implement: initGcpProjectPubsubServiceSubscriptionConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceSubscriptionConfig,
		},
		"gcp.project.pubsubService.subscription.config.pushconfig": {
			// to override args, implement: initGcpProjectPubsubServiceSubscriptionConfigPushconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceSubscriptionConfigPushconfig,
		},
		"gcp.project.pubsubService.snapshot": {
			// to override args, implement: initGcpProjectPubsubServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectPubsubServiceSnapshot,
		},
		"gcp.project.kmsService": {
			Init: initGcpProjectKmsService,
			Create: createGcpProjectKmsService,
		},
		"gcp.project.kmsService.keyring": {
			// to override args, implement: initGcpProjectKmsServiceKeyring(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyring,
		},
		"gcp.project.kmsService.keyring.cryptokey": {
			// to override args, implement: initGcpProjectKmsServiceKeyringCryptokey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyringCryptokey,
		},
		"gcp.project.kmsService.keyring.cryptokey.version": {
			// to override args, implement: initGcpProjectKmsServiceKeyringCryptokeyVersion(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyringCryptokeyVersion,
		},
		"gcp.project.kmsService.keyring.cryptokey.version.attestation": {
			// to override args, implement: initGcpProjectKmsServiceKeyringCryptokeyVersionAttestation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyringCryptokeyVersionAttestation,
		},
		"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains": {
			// to override args, implement: initGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains,
		},
		"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions": {
			// to override args, implement: initGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions,
		},
		"gcp.essentialContact": {
			// to override args, implement: initGcpEssentialContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpEssentialContact,
		},
		"gcp.project.apiKey": {
			// to override args, implement: initGcpProjectApiKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectApiKey,
		},
		"gcp.project.apiKey.restrictions": {
			// to override args, implement: initGcpProjectApiKeyRestrictions(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectApiKeyRestrictions,
		},
		"gcp.project.loggingservice": {
			// to override args, implement: initGcpProjectLoggingservice(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectLoggingservice,
		},
		"gcp.project.loggingservice.bucket": {
			// to override args, implement: initGcpProjectLoggingserviceBucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectLoggingserviceBucket,
		},
		"gcp.project.loggingservice.bucket.indexConfig": {
			// to override args, implement: initGcpProjectLoggingserviceBucketIndexConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectLoggingserviceBucketIndexConfig,
		},
		"gcp.project.loggingservice.metric": {
			// to override args, implement: initGcpProjectLoggingserviceMetric(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectLoggingserviceMetric,
		},
		"gcp.project.loggingservice.sink": {
			// to override args, implement: initGcpProjectLoggingserviceSink(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectLoggingserviceSink,
		},
		"gcp.project.iamService": {
			// to override args, implement: initGcpProjectIamService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectIamService,
		},
		"gcp.project.iamService.serviceAccount": {
			Init: initGcpProjectIamServiceServiceAccount,
			Create: createGcpProjectIamServiceServiceAccount,
		},
		"gcp.project.iamService.serviceAccount.key": {
			// to override args, implement: initGcpProjectIamServiceServiceAccountKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectIamServiceServiceAccountKey,
		},
		"gcp.project.cloudFunction": {
			// to override args, implement: initGcpProjectCloudFunction(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudFunction,
		},
		"gcp.project.dataprocService": {
			// to override args, implement: initGcpProjectDataprocService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocService,
		},
		"gcp.project.dataprocService.cluster": {
			// to override args, implement: initGcpProjectDataprocServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceCluster,
		},
		"gcp.project.dataprocService.cluster.config": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfig,
		},
		"gcp.project.dataprocService.cluster.config.gceCluster": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigGceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigGceCluster,
		},
		"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity,
		},
		"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig,
		},
		"gcp.project.dataprocService.cluster.config.gkeCluster": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigGkeCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigGkeCluster,
		},
		"gcp.project.dataprocService.cluster.config.lifecycle": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigLifecycle(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigLifecycle,
		},
		"gcp.project.dataprocService.cluster.config.instance": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigInstance,
		},
		"gcp.project.dataprocService.cluster.config.instance.diskConfig": {
			// to override args, implement: initGcpProjectDataprocServiceClusterConfigInstanceDiskConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterConfigInstanceDiskConfig,
		},
		"gcp.project.dataprocService.cluster.status": {
			// to override args, implement: initGcpProjectDataprocServiceClusterStatus(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterStatus,
		},
		"gcp.project.dataprocService.cluster.virtualClusterConfig": {
			// to override args, implement: initGcpProjectDataprocServiceClusterVirtualClusterConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectDataprocServiceClusterVirtualClusterConfig,
		},
		"gcp.project.cloudRunService": {
			Init: initGcpProjectCloudRunService,
			Create: createGcpProjectCloudRunService,
		},
		"gcp.project.cloudRunService.operation": {
			// to override args, implement: initGcpProjectCloudRunServiceOperation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceOperation,
		},
		"gcp.project.cloudRunService.service": {
			// to override args, implement: initGcpProjectCloudRunServiceService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceService,
		},
		"gcp.project.cloudRunService.service.revisionTemplate": {
			// to override args, implement: initGcpProjectCloudRunServiceServiceRevisionTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceServiceRevisionTemplate,
		},
		"gcp.project.cloudRunService.container": {
			// to override args, implement: initGcpProjectCloudRunServiceContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceContainer,
		},
		"gcp.project.cloudRunService.container.probe": {
			// to override args, implement: initGcpProjectCloudRunServiceContainerProbe(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceContainerProbe,
		},
		"gcp.project.cloudRunService.condition": {
			// to override args, implement: initGcpProjectCloudRunServiceCondition(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceCondition,
		},
		"gcp.project.cloudRunService.job": {
			// to override args, implement: initGcpProjectCloudRunServiceJob(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceJob,
		},
		"gcp.project.cloudRunService.job.executionTemplate": {
			// to override args, implement: initGcpProjectCloudRunServiceJobExecutionTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceJobExecutionTemplate,
		},
		"gcp.project.cloudRunService.job.executionTemplate.taskTemplate": {
			// to override args, implement: initGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate,
		},
		"gcp.accessApprovalSettings": {
			// to override args, implement: initGcpAccessApprovalSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpAccessApprovalSettings,
		},
		"gcp.project.monitoringService": {
			Init: initGcpProjectMonitoringService,
			Create: createGcpProjectMonitoringService,
		},
		"gcp.project.monitoringService.alertPolicy": {
			// to override args, implement: initGcpProjectMonitoringServiceAlertPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectMonitoringServiceAlertPolicy,
		},
		"gcp.project.binaryAuthorizationControl": {
			// to override args, implement: initGcpProjectBinaryAuthorizationControl(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBinaryAuthorizationControl,
		},
		"gcp.project.binaryAuthorizationControl.policy": {
			// to override args, implement: initGcpProjectBinaryAuthorizationControlPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBinaryAuthorizationControlPolicy,
		},
		"gcp.project.binaryAuthorizationControl.admissionRule": {
			// to override args, implement: initGcpProjectBinaryAuthorizationControlAdmissionRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectBinaryAuthorizationControlAdmissionRule,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"gcp.organization.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetId()).ToDataRes(types.String)
	},
	"gcp.organization.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetName()).ToDataRes(types.String)
	},
	"gcp.organization.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetState()).ToDataRes(types.String)
	},
	"gcp.organization.lifecycleState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetLifecycleState()).ToDataRes(types.String)
	},
	"gcp.organization.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.organization.accessApprovalSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetAccessApprovalSettings()).ToDataRes(types.Resource("gcp.accessApprovalSettings"))
	},
	"gcp.organization.folders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetFolders()).ToDataRes(types.Resource("gcp.folders"))
	},
	"gcp.organization.projects": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpOrganization).GetProjects()).ToDataRes(types.Resource("gcp.projects"))
	},
	"gcp.folders.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolders).GetParentId()).ToDataRes(types.String)
	},
	"gcp.folders.children": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolders).GetChildren()).ToDataRes(types.Array(types.Resource("gcp.folder")))
	},
	"gcp.folders.list": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolders).GetList()).ToDataRes(types.Array(types.Resource("gcp.folder")))
	},
	"gcp.folder.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetId()).ToDataRes(types.String)
	},
	"gcp.folder.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetName()).ToDataRes(types.String)
	},
	"gcp.folder.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.folder.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.folder.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetParentId()).ToDataRes(types.String)
	},
	"gcp.folder.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetState()).ToDataRes(types.String)
	},
	"gcp.folder.folders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetFolders()).ToDataRes(types.Resource("gcp.folders"))
	},
	"gcp.folder.projects": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpFolder).GetProjects()).ToDataRes(types.Resource("gcp.projects"))
	},
	"gcp.projects.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjects).GetParentId()).ToDataRes(types.String)
	},
	"gcp.projects.children": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjects).GetChildren()).ToDataRes(types.Array(types.Resource("gcp.project")))
	},
	"gcp.projects.list": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjects).GetList()).ToDataRes(types.Array(types.Resource("gcp.project")))
	},
	"gcp.project.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetId()).ToDataRes(types.String)
	},
	"gcp.project.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetName()).ToDataRes(types.String)
	},
	"gcp.project.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetParentId()).ToDataRes(types.String)
	},
	"gcp.project.number": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetNumber()).ToDataRes(types.String)
	},
	"gcp.project.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetState()).ToDataRes(types.String)
	},
	"gcp.project.lifecycleState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLifecycleState()).ToDataRes(types.String)
	},
	"gcp.project.createTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCreateTime()).ToDataRes(types.Time)
	},
	"gcp.project.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.project.services": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetServices()).ToDataRes(types.Array(types.Resource("gcp.service")))
	},
	"gcp.project.recommendations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetRecommendations()).ToDataRes(types.Array(types.Resource("gcp.recommendation")))
	},
	"gcp.project.gke": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetGke()).ToDataRes(types.Resource("gcp.project.gkeService"))
	},
	"gcp.project.compute": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCompute()).ToDataRes(types.Resource("gcp.project.computeService"))
	},
	"gcp.project.pubsub": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetPubsub()).ToDataRes(types.Resource("gcp.project.pubsubService"))
	},
	"gcp.project.kms": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetKms()).ToDataRes(types.Resource("gcp.project.kmsService"))
	},
	"gcp.project.essentialContacts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetEssentialContacts()).ToDataRes(types.Array(types.Resource("gcp.essentialContact")))
	},
	"gcp.project.apiKeys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetApiKeys()).ToDataRes(types.Array(types.Resource("gcp.project.apiKey")))
	},
	"gcp.project.logging": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLogging()).ToDataRes(types.Resource("gcp.project.loggingservice"))
	},
	"gcp.project.sql": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetSql()).ToDataRes(types.Resource("gcp.project.sqlService"))
	},
	"gcp.project.iam": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetIam()).ToDataRes(types.Resource("gcp.project.iamService"))
	},
	"gcp.project.commonInstanceMetadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCommonInstanceMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.dns": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetDns()).ToDataRes(types.Resource("gcp.project.dnsService"))
	},
	"gcp.project.bigquery": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetBigquery()).ToDataRes(types.Resource("gcp.project.bigqueryService"))
	},
	"gcp.project.cloudFunctions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCloudFunctions()).ToDataRes(types.Array(types.Resource("gcp.project.cloudFunction")))
	},
	"gcp.project.dataproc": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetDataproc()).ToDataRes(types.Resource("gcp.project.dataprocService"))
	},
	"gcp.project.cloudRun": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCloudRun()).ToDataRes(types.Resource("gcp.project.cloudRunService"))
	},
	"gcp.project.accessApprovalSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetAccessApprovalSettings()).ToDataRes(types.Resource("gcp.accessApprovalSettings"))
	},
	"gcp.project.storage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetStorage()).ToDataRes(types.Resource("gcp.project.storageService"))
	},
	"gcp.project.monitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetMonitoring()).ToDataRes(types.Resource("gcp.project.monitoringService"))
	},
	"gcp.project.binaryAuthorization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetBinaryAuthorization()).ToDataRes(types.Resource("gcp.project.binaryAuthorizationControl"))
	},
	"gcp.service.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.service.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetName()).ToDataRes(types.String)
	},
	"gcp.service.parentName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetParentName()).ToDataRes(types.String)
	},
	"gcp.service.title": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetTitle()).ToDataRes(types.String)
	},
	"gcp.service.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetState()).ToDataRes(types.String)
	},
	"gcp.service.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.recommendation.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetId()).ToDataRes(types.String)
	},
	"gcp.recommendation.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.recommendation.zoneName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetZoneName()).ToDataRes(types.String)
	},
	"gcp.recommendation.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetName()).ToDataRes(types.String)
	},
	"gcp.recommendation.recommender": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetRecommender()).ToDataRes(types.String)
	},
	"gcp.recommendation.primaryImpact": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetPrimaryImpact()).ToDataRes(types.Dict)
	},
	"gcp.recommendation.additionalImpact": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetAdditionalImpact()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.recommendation.content": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetContent()).ToDataRes(types.Dict)
	},
	"gcp.recommendation.category": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetCategory()).ToDataRes(types.String)
	},
	"gcp.recommendation.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetPriority()).ToDataRes(types.String)
	},
	"gcp.recommendation.lastRefreshTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetLastRefreshTime()).ToDataRes(types.Time)
	},
	"gcp.recommendation.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetState()).ToDataRes(types.Dict)
	},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetId()).ToDataRes(types.String)
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetMembers()).ToDataRes(types.Array(types.String))
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetRole()).ToDataRes(types.String)
	},
	"gcp.project.computeService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetInstances()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.instance")))
	},
	"gcp.project.computeService.snapshots": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetSnapshots()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.snapshot")))
	},
	"gcp.project.computeService.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetDisks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.disk")))
	},
	"gcp.project.computeService.images": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetImages()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.image")))
	},
	"gcp.project.computeService.firewalls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetFirewalls()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.firewall")))
	},
	"gcp.project.computeService.networks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetNetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.network")))
	},
	"gcp.project.computeService.subnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetSubnetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.subnetwork")))
	},
	"gcp.project.computeService.routers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetRouters()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.router")))
	},
	"gcp.project.computeService.machineTypes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetMachineTypes()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.machineType")))
	},
	"gcp.project.computeService.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetRegions()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.region")))
	},
	"gcp.project.computeService.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetZones()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.zone")))
	},
	"gcp.project.computeService.backendServices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetBackendServices()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.backendService")))
	},
	"gcp.project.computeService.addresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetAddresses()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.address")))
	},
	"gcp.project.computeService.forwardingRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetForwardingRules()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.forwardingRule")))
	},
	"gcp.project.computeService.address.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.addressType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetAddressType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.address.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.ipVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetIpVersion()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.ipv6EndpointType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetIpv6EndpointType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.computeService.address.networkTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetworkTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.prefixLength": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetPrefixLength()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.address.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetPurpose()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.subnetworkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetSubnetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.computeService.address.resourceUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetResourceUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.forwardingRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipProtocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpProtocol()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.allPorts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetAllPorts()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.allowGlobalAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetAllowGlobalAccess()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.backendService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetBackendService()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.forwardingRule.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpVersion()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.isMirroringCollector": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIsMirroringCollector()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.forwardingRule.loadBalancingScheme": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetLoadBalancingScheme()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.metadataFilters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetMetadataFilters()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.forwardingRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.computeService.forwardingRule.networkTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetworkTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.noAutomateDnsZone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNoAutomateDnsZone()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.portRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetPortRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ports": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetPorts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.forwardingRule.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.serviceDirectoryRegistrations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceDirectoryRegistrations()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.forwardingRule.serviceLabel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceLabel()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.serviceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.subnetworkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetSubnetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.computeService.forwardingRule.targetUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetTargetUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.region.quotas": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetQuotas()).ToDataRes(types.Map(types.String, types.Float))
	},
	"gcp.project.computeService.region.deprecated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetDeprecated()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.zone.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.machineType.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.guestCpus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetGuestCpus()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.isSharedCpu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetIsSharedCpu()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.machineType.maximumPersistentDisks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMaximumPersistentDisks()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.maximumPersistentDisksSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMaximumPersistentDisksSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.memoryMb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMemoryMb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.machineType.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.instance.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.confidentialInstanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetConfidentialInstanceConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.canIpForward": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCanIpForward()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.cpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.deletionProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDeletionProtection()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableDisplay": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableDisplay()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.guestAccelerators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetGuestAccelerators()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.instance.fingerprint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetFingerprint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.hostname": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetHostname()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.keyRevocationActionType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetKeyRevocationActionType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.instance.lastStartTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastStartTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.lastStopTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastStopTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.lastSuspendedTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastSuspendedTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.instance.minCpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMinCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.networkInterfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetNetworkInterfaces()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.instance.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.reservationAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetReservationAffinity()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.resourcePolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetResourcePolicies()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.instance.physicalHostResourceStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetPhysicalHostResourceStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.scheduling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetScheduling()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.enableIntegrityMonitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableIntegrityMonitoring()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableSecureBoot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableSecureBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableVtpm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableVtpm()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.startRestricted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStartRestricted()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.statusMessage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStatusMessage()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.sourceMachineImage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetSourceMachineImage()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.instance.totalEgressBandwidthTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetTotalEgressBandwidthTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.serviceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetServiceAccounts()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.serviceaccount")))
	},
	"gcp.project.computeService.instance.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDisks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.attachedDisk")))
	},
	"gcp.project.computeService.instance.machineType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMachineType()).ToDataRes(types.Resource("gcp.project.computeService.machineType"))
	},
	"gcp.project.computeService.instance.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.serviceaccount.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceServiceaccount).GetEmail()).ToDataRes(types.String)
	},
	"gcp.project.computeService.serviceaccount.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceServiceaccount).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.disk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.guestOsFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetGuestOsFeatures()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.disk.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.disk.lastAttachTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLastAttachTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.lastDetachTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLastDetachTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.disk.locationHint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLocationHint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.physicalBlockSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetPhysicalBlockSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.provisionedIops": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetProvisionedIops()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.sizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.disk.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.diskEncryptionKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetDiskEncryptionKey()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.attachedDisk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.autoDelete": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetAutoDelete()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.boot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.deviceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetDeviceName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.attachedDisk.forceAttach": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetForceAttach()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.guestOsFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetGuestOsFeatures()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.attachedDisk.index": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetIndex()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.attachedDisk.interface": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetInterface()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.attachedDisk.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.source": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetSource()).ToDataRes(types.Resource("gcp.project.computeService.disk"))
	},
	"gcp.project.computeService.attachedDisk.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.autoCreated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetAutoCreated()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.snapshot.chainName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetChainName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.creationSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetCreationSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.downloadBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDownloadBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.storageBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStorageBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.storageBytesStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStorageBytesStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.snapshotType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetSnapshotType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.snapshot.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.snapshot.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.snapshot.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.archiveSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetArchiveSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.image.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.image.family": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetFamily()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.image.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.image.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.image.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetPriority()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.firewall.direction": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDirection()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.firewall.sourceRanges": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceRanges()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.sourceServiceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceServiceAccounts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.sourceTags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.destinationRanges": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDestinationRanges()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.targetServiceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetTargetServiceAccounts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.firewall.allowed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetAllowed()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.firewall.denied": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDenied()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.network.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.autoCreateSubnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetAutoCreateSubnetworks()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.network.enableUlaInternalIpv6": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetEnableUlaInternalIpv6()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.network.gatewayIPv4": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetGatewayIPv4()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.mtu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetMtu()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.network.networkFirewallPolicyEnforcementOrder": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetNetworkFirewallPolicyEnforcementOrder()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.network.peerings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetPeerings()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.network.routingMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetRoutingMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.subnetworkUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetSubnetworkUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.network.subnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetSubnetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.subnetwork")))
	},
	"gcp.project.computeService.subnetwork.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.enableFlowLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetEnableFlowLogs()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.externalIpv6Prefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetExternalIpv6Prefix()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.fingerprint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetFingerprint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.gatewayAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetGatewayAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.internalIpv6Prefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetInternalIpv6Prefix()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipCidrRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpCidrRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipv6AccessType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpv6AccessType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipv6CidrRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpv6CidrRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetLogConfig()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork.logConfig"))
	},
	"gcp.project.computeService.subnetwork.privateIpGoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPrivateIpGoogleAccess()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPurpose()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRegion()).ToDataRes(types.Resource("gcp.project.computeService.region"))
	},
	"gcp.project.computeService.subnetwork.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRole()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.stackType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetStackType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetState()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.subnetwork.logConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.aggregationInterval": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetAggregationInterval()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.enable": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetEnable()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.logConfig.filterExpression": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetFilterExpression()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.flowSampling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetFlowSampling()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.subnetwork.logConfig.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetMetadata()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.metadataFields": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetMetadataFields()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.router.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.bgp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetBgp()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.router.bgpPeers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetBgpPeers()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.router.encryptedInterconnectRouter": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetEncryptedInterconnectRouter()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.router.nats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetNats()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.router.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.affinityCookieTtlSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetAffinityCookieTtlSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backends": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetBackends()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.backendService.backend")))
	},
	"gcp.project.computeService.backendService.cdnPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCdnPolicy()).ToDataRes(types.Resource("gcp.project.computeService.backendService.cdnPolicy"))
	},
	"gcp.project.computeService.backendService.circuitBreakers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCircuitBreakers()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.compressionMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCompressionMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.connectionDraining": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConnectionDraining()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.connectionTrackingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConnectionTrackingPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.consistentHash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConsistentHash()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.customRequestHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCustomRequestHeaders()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.customResponseHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCustomResponseHeaders()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.edgeSecurityPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetEdgeSecurityPolicy()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.enableCDN": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetEnableCDN()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.failoverPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetFailoverPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.healthChecks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetHealthChecks()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.iap": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetIap()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.loadBalancingScheme": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLoadBalancingScheme()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.localityLbPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLocalityLbPolicies()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.localityLbPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLocalityLbPolicy()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.logConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLogConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.maxStreamDuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetMaxStreamDuration()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.portName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetPortName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.protocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetProtocol()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.securityPolicyUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSecurityPolicyUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.securitySettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSecuritySettings()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.serviceBindingUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetServiceBindingUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.sessionAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSessionAffinity()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.timeoutSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetTimeoutSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.balancingMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetBalancingMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.capacityScaler": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetCapacityScaler()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.failover": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetFailover()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.backend.groupUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetGroupUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.maxConnections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnections()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerEndpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnectionsPerEndpoint()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerInstance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnectionsPerInstance()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxRate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRate()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxRatePerEndpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRatePerEndpoint()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.maxRatePerInstance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRatePerInstance()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.maxUtilization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxUtilization()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.cdnPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.cdnPolicy.bypassCacheOnRequestHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetBypassCacheOnRequestHeaders()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheKeyPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetCacheKeyPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetCacheMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.cdnPolicy.clientTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetClientTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.defaultTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetDefaultTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.maxTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetMaxTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCaching": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetNegativeCaching()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCachingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetNegativeCachingPolicy()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.cdnPolicy.requestCoalescing": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetRequestCoalescing()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.cdnPolicy.serveWhileStale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetServeWhileStale()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlCacheMaxAgeSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetSignedUrlCacheMaxAgeSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlKeyNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetSignedUrlKeyNames()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.storageService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.storageService.buckets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageService).GetBuckets()).ToDataRes(types.Array(types.Resource("gcp.project.storageService.bucket")))
	},
	"gcp.project.storageService.bucket.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetId()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetName()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.storageService.bucket.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.locationType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetLocationType()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.projectNumber": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetProjectNumber()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.storageClass": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetStorageClass()).ToDataRes(types.String)
	},
	"gcp.project.storageService.bucket.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.storageService.bucket.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.storageService.bucket.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.project.storageService.bucket.iamConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetIamConfiguration()).ToDataRes(types.Dict)
	},
	"gcp.project.storageService.bucket.retentionPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectStorageServiceBucket).GetRetentionPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlService).GetInstances()).ToDataRes(types.Array(types.Resource("gcp.project.sqlService.instance")))
	},
	"gcp.project.sqlService.instance.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.availableMaintenanceVersions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetAvailableMaintenanceVersions()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.sqlService.instance.backendType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetBackendType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.connectionName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetConnectionName()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.sqlService.instance.currentDiskSize": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetCurrentDiskSize()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.databaseInstalledVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetDatabaseInstalledVersion()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.databaseVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetDatabaseVersion()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.diskEncryptionConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetDiskEncryptionConfiguration()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.diskEncryptionStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetDiskEncryptionStatus()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.failoverReplica": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetFailoverReplica()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.gceZone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetGceZone()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.instanceType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetInstanceType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.ipAddresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetIpAddresses()).ToDataRes(types.Array(types.Resource("gcp.project.sqlService.instance.ipMapping")))
	},
	"gcp.project.sqlService.instance.maintenanceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetMaintenanceVersion()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.masterInstanceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetMasterInstanceName()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.maxDiskSize": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetMaxDiskSize()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetName()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.project": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetProject()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetRegion()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.replicaNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetReplicaNames()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.sqlService.instance.settings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetSettings()).ToDataRes(types.Resource("gcp.project.sqlService.instance.settings"))
	},
	"gcp.project.sqlService.instance.serviceAccountEmailAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetServiceAccountEmailAddress()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetState()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.databases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstance).GetDatabases()).ToDataRes(types.Array(types.Resource("gcp.project.sqlService.instance.database")))
	},
	"gcp.project.sqlService.instance.database.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.database.charset": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetCharset()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.database.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetCollation()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.database.instance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetInstance()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.database.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetName()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.database.sqlserverDatabaseDetails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceDatabase).GetSqlserverDatabaseDetails()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.ipMapping.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceIpMapping).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.ipMapping.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceIpMapping).GetIpAddress()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.ipMapping.timeToRetire": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceIpMapping).GetTimeToRetire()).ToDataRes(types.Time)
	},
	"gcp.project.sqlService.instance.ipMapping.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceIpMapping).GetType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.instanceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetInstanceName()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.activationPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetActivationPolicy()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.activeDirectoryConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetActiveDirectoryConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.settings.availabilityType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetAvailabilityType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.backupConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetBackupConfiguration()).ToDataRes(types.Resource("gcp.project.sqlService.instance.settings.backupconfiguration"))
	},
	"gcp.project.sqlService.instance.settings.collation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetCollation()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.connectorEnforcement": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetConnectorEnforcement()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.crashSafeReplicationEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetCrashSafeReplicationEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.dataDiskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDataDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.dataDiskType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDataDiskType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.databaseFlags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDatabaseFlags()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.sqlService.instance.settings.databaseReplicationEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDatabaseReplicationEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.deletionProtectionEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDeletionProtectionEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriods": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetDenyMaintenancePeriods()).ToDataRes(types.Array(types.Resource("gcp.project.sqlService.instance.settings.denyMaintenancePeriod")))
	},
	"gcp.project.sqlService.instance.settings.insightsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetInsightsConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetIpConfiguration()).ToDataRes(types.Resource("gcp.project.sqlService.instance.settings.ipConfiguration"))
	},
	"gcp.project.sqlService.instance.settings.locationPreference": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetLocationPreference()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetMaintenanceWindow()).ToDataRes(types.Resource("gcp.project.sqlService.instance.settings.maintenanceWindow"))
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetPasswordValidationPolicy()).ToDataRes(types.Resource("gcp.project.sqlService.instance.settings.passwordValidationPolicy"))
	},
	"gcp.project.sqlService.instance.settings.pricingPlan": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetPricingPlan()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.replicationType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetReplicationType()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.settingsVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetSettingsVersion()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.sqlServerAuditConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetSqlServerAuditConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.settings.storageAutoResize": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetStorageAutoResize()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.storageAutoResizeLimit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetStorageAutoResizeLimit()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.tier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetTier()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.timeZone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetTimeZone()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.userLabels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettings).GetUserLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.backupRetentionSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetBackupRetentionSettings()).ToDataRes(types.Dict)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.binaryLogEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetBinaryLogEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.pointInTimeRecoveryEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetPointInTimeRecoveryEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.startTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetStartTime()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.transactionLogRetentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).GetTransactionLogRetentionDays()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.endDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).GetEndDate()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.startDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).GetStartDate()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.time": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).GetTime()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.allocatedIpRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetAllocatedIpRange()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.authorizedNetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetAuthorizedNetworks()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.ipv4Enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetIpv4Enabled()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.privateNetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetPrivateNetwork()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.requireSsl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).GetRequireSsl()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.day": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).GetDay()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.hour": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).GetHour()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.updateTrack": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).GetUpdateTrack()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.complexity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetComplexity()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.disallowUsernameSubstring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetDisallowUsernameSubstring()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.enabledPasswordPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetEnabledPasswordPolicy()).ToDataRes(types.Bool)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.minLength": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetMinLength()).ToDataRes(types.Int)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.passwordChangeInterval": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetPasswordChangeInterval()).ToDataRes(types.String)
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.reuseInterval": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).GetReuseInterval()).ToDataRes(types.Int)
	},
	"gcp.project.bigqueryService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.datasets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryService).GetDatasets()).ToDataRes(types.Array(types.Resource("gcp.project.bigqueryService.dataset")))
	},
	"gcp.project.bigqueryService.dataset.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.bigqueryService.dataset.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.dataset.modified": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetModified()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.dataset.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.bigqueryService.dataset.kmsName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetKmsName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.access": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetAccess()).ToDataRes(types.Array(types.Resource("gcp.project.bigqueryService.dataset.accessEntry")))
	},
	"gcp.project.bigqueryService.dataset.tables": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetTables()).ToDataRes(types.Array(types.Resource("gcp.project.bigqueryService.table")))
	},
	"gcp.project.bigqueryService.dataset.models": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetModels()).ToDataRes(types.Array(types.Resource("gcp.project.bigqueryService.model")))
	},
	"gcp.project.bigqueryService.dataset.routines": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDataset).GetRoutines()).ToDataRes(types.Array(types.Resource("gcp.project.bigqueryService.routine")))
	},
	"gcp.project.bigqueryService.dataset.accessEntry.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.datasetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetDatasetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetRole()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.entityType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetEntityType()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.entity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetEntity()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.viewRef": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetViewRef()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.routineRef": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetRoutineRef()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.dataset.accessEntry.datasetRef": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).GetDatasetRef()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.datasetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetDatasetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.bigqueryService.table.useLegacySQL": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetUseLegacySQL()).ToDataRes(types.Bool)
	},
	"gcp.project.bigqueryService.table.requirePartitionFilter": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetRequirePartitionFilter()).ToDataRes(types.Bool)
	},
	"gcp.project.bigqueryService.table.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.table.modified": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetModified()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.table.numBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetNumBytes()).ToDataRes(types.Int)
	},
	"gcp.project.bigqueryService.table.numLongTermBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetNumLongTermBytes()).ToDataRes(types.Int)
	},
	"gcp.project.bigqueryService.table.numRows": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetNumRows()).ToDataRes(types.Int)
	},
	"gcp.project.bigqueryService.table.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetType()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.expirationTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetExpirationTime()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.table.kmsName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetKmsName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.snapshotTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetSnapshotTime()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.table.viewQuery": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetViewQuery()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.table.clusteringFields": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetClusteringFields()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.externalDataConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetExternalDataConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.materializedView": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetMaterializedView()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.rangePartitioning": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetRangePartitioning()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.timePartitioning": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetTimePartitioning()).ToDataRes(types.Dict)
	},
	"gcp.project.bigqueryService.table.schema": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceTable).GetSchema()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.bigqueryService.model.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.datasetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetDatasetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.bigqueryService.model.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.model.modified": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetModified()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.model.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetType()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.model.expirationTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetExpirationTime()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.model.kmsName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceModel).GetKmsName()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.datasetId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetDatasetId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.language": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetLanguage()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.bigqueryService.routine.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.routine.modified": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetModified()).ToDataRes(types.Time)
	},
	"gcp.project.bigqueryService.routine.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBigqueryServiceRoutine).GetType()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedZones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsService).GetManagedZones()).ToDataRes(types.Array(types.Resource("gcp.project.dnsService.managedzone")))
	},
	"gcp.project.dnsService.policies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsService).GetPolicies()).ToDataRes(types.Array(types.Resource("gcp.project.dnsService.policy")))
	},
	"gcp.project.dnsService.managedzone.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetName()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.dnssecConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetDnssecConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.dnsService.managedzone.dnsName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetDnsName()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.nameServerSet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetNameServerSet()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.nameServers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetNameServers()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dnsService.managedzone.visibility": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetVisibility()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.managedzone.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.dnsService.managedzone.recordSets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceManagedzone).GetRecordSets()).ToDataRes(types.Array(types.Resource("gcp.project.dnsService.recordset")))
	},
	"gcp.project.dnsService.recordset.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.recordset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetName()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.recordset.rrdatas": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetRrdatas()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dnsService.recordset.signatureRrdatas": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetSignatureRrdatas()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dnsService.recordset.ttl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetTtl()).ToDataRes(types.Int)
	},
	"gcp.project.dnsService.recordset.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServiceRecordset).GetType()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.policy.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.policy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.policy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetName()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.policy.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.dnsService.policy.enableInboundForwarding": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetEnableInboundForwarding()).ToDataRes(types.Bool)
	},
	"gcp.project.dnsService.policy.enableLogging": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetEnableLogging()).ToDataRes(types.Bool)
	},
	"gcp.project.dnsService.policy.networkNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetNetworkNames()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dnsService.policy.networks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDnsServicePolicy).GetNetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.network")))
	},
	"gcp.project.gkeService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.clusters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeService).GetClusters()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster")))
	},
	"gcp.project.gkeService.cluster.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.loggingService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLoggingService()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.monitoringService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMonitoringService()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNetwork()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.clusterIpv4Cidr": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetClusterIpv4Cidr()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetSubnetwork()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodePools": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNodePools()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool")))
	},
	"gcp.project.gkeService.cluster.locations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLocations()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.enableKubernetesAlpha": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetEnableKubernetesAlpha()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.autopilotEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetAutopilotEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetZone()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.endpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetEndpoint()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.initialClusterVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetInitialClusterVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.currentMasterVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetCurrentMasterVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.resourceLabels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetResourceLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.gkeService.cluster.expirationTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetExpirationTime()).ToDataRes(types.Time)
	},
	"gcp.project.gkeService.cluster.addonsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetAddonsConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.addonsConfig"))
	},
	"gcp.project.gkeService.cluster.workloadIdentityConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetWorkloadIdentityConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetIpAllocationPolicy()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.ipAllocationPolicy"))
	},
	"gcp.project.gkeService.cluster.networkConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNetworkConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.networkConfig"))
	},
	"gcp.project.gkeService.cluster.binaryAuthorization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetBinaryAuthorization()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.legacyAbac": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLegacyAbac()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.masterAuth": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMasterAuth()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.masterAuthorizedNetworksConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMasterAuthorizedNetworksConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.privateClusterConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetPrivateClusterConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.databaseEncryption": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetDatabaseEncryption()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.shieldedNodesConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetShieldedNodesConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.costManagementConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetCostManagementConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.confidentialNodesConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetConfidentialNodesConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.identityServiceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetIdentityServiceConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkPolicyConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNetworkPolicyConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.addonsConfig.httpLoadBalancing": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetHttpLoadBalancing()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.horizontalPodAutoscaling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetHorizontalPodAutoscaling()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.kubernetesDashboard": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetKubernetesDashboard()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.networkPolicyConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetNetworkPolicyConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.cloudRunConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetCloudRunConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.dnsCacheConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetDnsCacheConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.configConnectorConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetConfigConnectorConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcePersistentDiskCsiDriverConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGcePersistentDiskCsiDriverConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcpFilestoreCsiDriverConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGcpFilestoreCsiDriverConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gkeBackupAgentConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGkeBackupAgentConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcsFuseCsiDriverConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGcsFuseCsiDriverConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.statefulHaConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetStatefulHaConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useIpAliases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetUseIpAliases()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.createSubnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetCreateSubnetwork()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.subnetworkName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetSubnetworkName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterSecondaryRangeName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetClusterSecondaryRangeName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesSecondaryRangeName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetServicesSecondaryRangeName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetClusterIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.nodeIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetNodeIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetServicesIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.tpuIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetTpuIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useRoutes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetUseRoutes()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.stackType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetStackType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.ipv6AccessType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetIpv6AccessType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.networkPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetNetworkPath()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetworkPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetSubnetworkPath()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.gkeService.cluster.networkConfig.enableIntraNodeVisibility": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableIntraNodeVisibility()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.defaultSnatStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDefaultSnatStatus()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkConfig.enableL4IlbSubsetting": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableL4IlbSubsetting()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.datapathProvider": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDatapathProvider()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.dnsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDnsConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkConfig.serviceExternalIpsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetServiceExternalIpsConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkConfig.enableMultiNetworking": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableMultiNetworking()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.enableFqdnNetworkPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableFqdnNetworkPolicy()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.enableCiliumClusterwideNetworkPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableCiliumClusterwideNetworkPolicy()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config"))
	},
	"gcp.project.gkeService.cluster.nodepool.initialNodeCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetInitialNodeCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.locations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetLocations()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetNetworkConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.networkConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.instanceGroupUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetInstanceGroupUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.management": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetManagement()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPodRange()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPodIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPerformanceConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.totalEgressBandwidthTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).GetTotalEgressBandwidthTier()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.machineType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMachineType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.oauthScopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetOauthScopes()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetServiceAccount()).ToDataRes(types.Resource("gcp.project.iamService.serviceAccount"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.imageType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetImageType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.localSsdCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLocalSsdCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.preemptible": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetPreemptible()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetAccelerators()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool.config.accelerator")))
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetDiskType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.minCpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMinCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.workloadMetadataMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetWorkloadMetadataMode()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.taints": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetTaints()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool.config.nodeTaint")))
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetSandboxConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetShieldedInstanceConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLinuxNodeConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetKubeletConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.bootDiskKmsKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetBootDiskKmsKey()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetGcfsConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetAdvancedMachineFeatures()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetGvnicConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.spot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetSpot()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetConfidentialNodes()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.count": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuPartitionSize": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetGpuPartitionSize()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetGpuSharingConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.maxSharedClientsPerGpu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetMaxSharedClientsPerGpu()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.strategy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetStrategy()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetKey()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetValue()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.effect": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetEffect()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).GetType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetEnableSecureBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetEnableIntegrityMonitoring()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.sysctls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).GetSysctls()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuManagerPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetCpuManagerPolicy()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuCfsQuotaPeriod": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetCpuCfsQuotaPeriod()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.podPidsLimit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetPodPidsLimit()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.threadsPerCore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).GetThreadsPerCore()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.pubsubService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubService).GetTopics()).ToDataRes(types.Array(types.Resource("gcp.project.pubsubService.topic")))
	},
	"gcp.project.pubsubService.subscriptions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubService).GetSubscriptions()).ToDataRes(types.Array(types.Resource("gcp.project.pubsubService.subscription")))
	},
	"gcp.project.pubsubService.snapshots": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubService).GetSnapshots()).ToDataRes(types.Array(types.Resource("gcp.project.pubsubService.snapshot")))
	},
	"gcp.project.pubsubService.topic.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopic).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopic).GetName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopic).GetConfig()).ToDataRes(types.Resource("gcp.project.pubsubService.topic.config"))
	},
	"gcp.project.pubsubService.topic.config.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfig).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.config.topicName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfig).GetTopicName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.config.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfig).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.pubsubService.topic.config.kmsKeyName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfig).GetKmsKeyName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.config.messageStoragePolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfig).GetMessageStoragePolicy()).ToDataRes(types.Resource("gcp.project.pubsubService.topic.config.messagestoragepolicy"))
	},
	"gcp.project.pubsubService.topic.config.messagestoragepolicy.configId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy).GetConfigId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.topic.config.messagestoragepolicy.allowedPersistenceRegions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy).GetAllowedPersistenceRegions()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.pubsubService.subscription.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscription).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscription).GetName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscription).GetConfig()).ToDataRes(types.Resource("gcp.project.pubsubService.subscription.config"))
	},
	"gcp.project.pubsubService.subscription.config.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.config.subscriptionName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetSubscriptionName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.config.topic": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetTopic()).ToDataRes(types.Resource("gcp.project.pubsubService.topic"))
	},
	"gcp.project.pubsubService.subscription.config.pushConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetPushConfig()).ToDataRes(types.Resource("gcp.project.pubsubService.subscription.config.pushconfig"))
	},
	"gcp.project.pubsubService.subscription.config.ackDeadline": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetAckDeadline()).ToDataRes(types.Time)
	},
	"gcp.project.pubsubService.subscription.config.retainAckedMessages": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetRetainAckedMessages()).ToDataRes(types.Bool)
	},
	"gcp.project.pubsubService.subscription.config.retentionDuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetRetentionDuration()).ToDataRes(types.Time)
	},
	"gcp.project.pubsubService.subscription.config.expirationPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetExpirationPolicy()).ToDataRes(types.Time)
	},
	"gcp.project.pubsubService.subscription.config.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.configId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).GetConfigId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.endpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).GetEndpoint()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.attributes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).GetAttributes()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.pubsubService.snapshot.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSnapshot).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.snapshot.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSnapshot).GetName()).ToDataRes(types.String)
	},
	"gcp.project.pubsubService.snapshot.topic": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSnapshot).GetTopic()).ToDataRes(types.Resource("gcp.project.pubsubService.topic"))
	},
	"gcp.project.pubsubService.snapshot.expiration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectPubsubServiceSnapshot).GetExpiration()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.locations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsService).GetLocations()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.kmsService.keyrings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsService).GetKeyrings()).ToDataRes(types.Array(types.Resource("gcp.project.kmsService.keyring")))
	},
	"gcp.project.kmsService.keyring.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokeys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyring).GetCryptokeys()).ToDataRes(types.Array(types.Resource("gcp.project.kmsService.keyring.cryptokey")))
	},
	"gcp.project.kmsService.keyring.cryptokey.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.primary": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetPrimary()).ToDataRes(types.Resource("gcp.project.kmsService.keyring.cryptokey.version"))
	},
	"gcp.project.kmsService.keyring.cryptokey.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetPurpose()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.nextRotation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetNextRotation()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.rotationPeriod": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetRotationPeriod()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.versionTemplate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetVersionTemplate()).ToDataRes(types.Dict)
	},
	"gcp.project.kmsService.keyring.cryptokey.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.kmsService.keyring.cryptokey.importOnly": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetImportOnly()).ToDataRes(types.Bool)
	},
	"gcp.project.kmsService.keyring.cryptokey.destroyScheduledDuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetDestroyScheduledDuration()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.cryptoKeyBackend": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetCryptoKeyBackend()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetVersions()).ToDataRes(types.Array(types.Resource("gcp.project.kmsService.keyring.cryptokey.version")))
	},
	"gcp.project.kmsService.keyring.cryptokey.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokey).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetState()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.protectionLevel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetProtectionLevel()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.algorithm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetAlgorithm()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetAttestation()).ToDataRes(types.Resource("gcp.project.kmsService.keyring.cryptokey.version.attestation"))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.generated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetGenerated()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.destroyed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetDestroyed()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.destroyEventTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetDestroyEventTime()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importJob": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetImportJob()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetImportTime()).ToDataRes(types.Time)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importFailureReason": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetImportFailureReason()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetExternalProtectionLevelOptions()).ToDataRes(types.Resource("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions"))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.reimportEligible": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).GetReimportEligible()).ToDataRes(types.Bool)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.cryptoKeyVersionName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).GetCryptoKeyVersionName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.format": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).GetFormat()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificateChains": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).GetCertificateChains()).ToDataRes(types.Resource("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains"))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.cryptoKeyVersionName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GetCryptoKeyVersionName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.caviumCerts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GetCaviumCerts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.googleCardCerts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GetGoogleCardCerts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.googlePartitionCerts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GetGooglePartitionCerts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.cryptoKeyVersionName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).GetCryptoKeyVersionName()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.externalKeyUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).GetExternalKeyUri()).ToDataRes(types.String)
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.ekmConnectionKeyPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).GetEkmConnectionKeyPath()).ToDataRes(types.String)
	},
	"gcp.essentialContact.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.essentialContact.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetEmail()).ToDataRes(types.String)
	},
	"gcp.essentialContact.languageTag": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetLanguageTag()).ToDataRes(types.String)
	},
	"gcp.essentialContact.notificationCategories": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetNotificationCategories()).ToDataRes(types.Array(types.String))
	},
	"gcp.essentialContact.validated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetValidated()).ToDataRes(types.Time)
	},
	"gcp.essentialContact.validationState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpEssentialContact).GetValidationState()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetId()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetName()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.apiKey.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.apiKey.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetDeleted()).ToDataRes(types.Time)
	},
	"gcp.project.apiKey.keyString": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetKeyString()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.restrictions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetRestrictions()).ToDataRes(types.Resource("gcp.project.apiKey.restrictions"))
	},
	"gcp.project.apiKey.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKey).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.apiKey.restrictions.parentResourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetParentResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.apiKey.restrictions.androidKeyRestrictions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetAndroidKeyRestrictions()).ToDataRes(types.Dict)
	},
	"gcp.project.apiKey.restrictions.apiTargets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetApiTargets()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.apiKey.restrictions.browserKeyRestrictions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetBrowserKeyRestrictions()).ToDataRes(types.Dict)
	},
	"gcp.project.apiKey.restrictions.iosKeyRestrictions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetIosKeyRestrictions()).ToDataRes(types.Dict)
	},
	"gcp.project.apiKey.restrictions.serverKeyRestrictions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectApiKeyRestrictions).GetServerKeyRestrictions()).ToDataRes(types.Dict)
	},
	"gcp.project.loggingservice.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingservice).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.buckets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingservice).GetBuckets()).ToDataRes(types.Array(types.Resource("gcp.project.loggingservice.bucket")))
	},
	"gcp.project.loggingservice.metrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingservice).GetMetrics()).ToDataRes(types.Array(types.Resource("gcp.project.loggingservice.metric")))
	},
	"gcp.project.loggingservice.sinks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingservice).GetSinks()).ToDataRes(types.Array(types.Resource("gcp.project.loggingservice.sink")))
	},
	"gcp.project.loggingservice.bucket.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.cmekSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetCmekSettings()).ToDataRes(types.Dict)
	},
	"gcp.project.loggingservice.bucket.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.loggingservice.bucket.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.indexConfigs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetIndexConfigs()).ToDataRes(types.Array(types.Resource("gcp.project.loggingservice.bucket.indexConfig")))
	},
	"gcp.project.loggingservice.bucket.lifecycleState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetLifecycleState()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.locked": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetLocked()).ToDataRes(types.Bool)
	},
	"gcp.project.loggingservice.bucket.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetName()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.restrictedFields": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetRestrictedFields()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.loggingservice.bucket.retentionDays": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetRetentionDays()).ToDataRes(types.Int)
	},
	"gcp.project.loggingservice.bucket.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucket).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.loggingservice.bucket.indexConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.indexConfig.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.loggingservice.bucket.indexConfig.fieldPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).GetFieldPath()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.bucket.indexConfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).GetType()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.metric.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceMetric).GetId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.metric.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceMetric).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.metric.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceMetric).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.metric.filter": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceMetric).GetFilter()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.metric.alertPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceMetric).GetAlertPolicies()).ToDataRes(types.Array(types.Resource("gcp.project.monitoringService.alertPolicy")))
	},
	"gcp.project.loggingservice.sink.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.sink.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.sink.destination": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetDestination()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.sink.storageBucket": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetStorageBucket()).ToDataRes(types.Resource("gcp.project.storageService.bucket"))
	},
	"gcp.project.loggingservice.sink.filter": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetFilter()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.sink.writerIdentity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetWriterIdentity()).ToDataRes(types.String)
	},
	"gcp.project.loggingservice.sink.includeChildren": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectLoggingserviceSink).GetIncludeChildren()).ToDataRes(types.Bool)
	},
	"gcp.project.iamService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamService).GetServiceAccounts()).ToDataRes(types.Array(types.Resource("gcp.project.iamService.serviceAccount")))
	},
	"gcp.project.iamService.serviceAccount.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.uniqueId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetUniqueId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetEmail()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDisplayName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.oauth2ClientId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetOauth2ClientId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.iamService.serviceAccount.keys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetKeys()).ToDataRes(types.Array(types.Resource("gcp.project.iamService.serviceAccount.key")))
	},
	"gcp.project.iamService.serviceAccount.key.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.keyAlgorithm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyAlgorithm()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.validAfterTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetValidAfterTime()).ToDataRes(types.Time)
	},
	"gcp.project.iamService.serviceAccount.key.validBeforeTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetValidBeforeTime()).ToDataRes(types.Time)
	},
	"gcp.project.iamService.serviceAccount.key.keyOrigin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyOrigin()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.keyType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyType()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.cloudFunction.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.sourceArchiveUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetSourceArchiveUrl()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.sourceRepository": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetSourceRepository()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudFunction.sourceUploadUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetSourceUploadUrl()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.httpsTrigger": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetHttpsTrigger()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudFunction.eventTrigger": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetEventTrigger()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudFunction.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.entryPoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetEntryPoint()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.runtime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetRuntime()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.timeout": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetTimeout()).ToDataRes(types.Time)
	},
	"gcp.project.cloudFunction.availableMemoryMb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetAvailableMemoryMb()).ToDataRes(types.Int)
	},
	"gcp.project.cloudFunction.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.cloudFunction.versionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetVersionId()).ToDataRes(types.Int)
	},
	"gcp.project.cloudFunction.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudFunction.envVars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetEnvVars()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudFunction.buildEnvVars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetBuildEnvVars()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudFunction.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetNetwork()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.maxInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetMaxInstances()).ToDataRes(types.Int)
	},
	"gcp.project.cloudFunction.minInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetMinInstances()).ToDataRes(types.Int)
	},
	"gcp.project.cloudFunction.vpcConnector": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetVpcConnector()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.egressSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetEgressSettings()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.ingressSettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetIngressSettings()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.kmsKeyName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetKmsKeyName()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.buildWorkerPool": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetBuildWorkerPool()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.buildId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetBuildId()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.buildName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetBuildName()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.secretEnvVars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetSecretEnvVars()).ToDataRes(types.Map(types.String, types.Dict))
	},
	"gcp.project.cloudFunction.secretVolumes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetSecretVolumes()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudFunction.dockerRepository": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetDockerRepository()).ToDataRes(types.String)
	},
	"gcp.project.cloudFunction.dockerRegistry": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudFunction).GetDockerRegistry()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocService).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocService).GetRegions()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dataprocService.clusters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocService).GetClusters()).ToDataRes(types.Array(types.Resource("gcp.project.dataprocService.cluster")))
	},
	"gcp.project.dataprocService.cluster.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetName()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.uuid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetUuid()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetConfig()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config"))
	},
	"gcp.project.dataprocService.cluster.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.dataprocService.cluster.metrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetMetrics()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetStatus()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.status"))
	},
	"gcp.project.dataprocService.cluster.statusHistory": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetStatusHistory()).ToDataRes(types.Array(types.Resource("gcp.project.dataprocService.cluster.status")))
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceCluster).GetVirtualClusterConfig()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.virtualClusterConfig"))
	},
	"gcp.project.dataprocService.cluster.config.parentResourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetParentResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.autoscaling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetAutoscaling()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.configBucket": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetConfigBucket()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.metrics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetMetrics()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.encryption": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetEncryption()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.endpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetEndpoint()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetGceCluster()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.gceCluster"))
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetGkeCluster()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.gkeCluster"))
	},
	"gcp.project.dataprocService.cluster.config.initializationActions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetInitializationActions()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.dataprocService.cluster.config.lifecycle": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetLifecycle()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.lifecycle"))
	},
	"gcp.project.dataprocService.cluster.config.master": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetMaster()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.instance"))
	},
	"gcp.project.dataprocService.cluster.config.metastore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetMetastore()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.secondaryWorker": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetSecondaryWorker()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.instance"))
	},
	"gcp.project.dataprocService.cluster.config.security": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetSecurity()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.software": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetSoftware()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.tempBucket": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetTempBucket()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.worker": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfig).GetWorker()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.instance"))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.confidentialInstance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetConfidentialInstance()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.internalIpOnly": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetInternalIpOnly()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.networkUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetNetworkUri()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.nodeGroupAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetNodeGroupAffinity()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetReservationAffinity()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity"))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetServiceAccount()).ToDataRes(types.Resource("gcp.project.iamService.serviceAccount"))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccountScopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetServiceAccountScopes()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetShieldedInstanceConfig()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig"))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.subnetworkUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetSubnetworkUri()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.zoneUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).GetZoneUri()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.consumeReservationType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).GetConsumeReservationType()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).GetKey()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.values": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).GetValues()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).GetEnableIntegrityMonitoring()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).GetEnableSecureBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableVtpm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).GetEnableVtpm()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.gkeClusterTarget": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).GetGkeClusterTarget()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.nodePoolTarget": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).GetNodePoolTarget()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.autoDeleteTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).GetAutoDeleteTime()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.autoDeleteTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).GetAutoDeleteTtl()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.idleDeleteTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).GetIdleDeleteTtl()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.idleStartTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).GetIdleStartTime()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.accelerators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetAccelerators()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetDiskConfig()).ToDataRes(types.Resource("gcp.project.dataprocService.cluster.config.instance.diskConfig"))
	},
	"gcp.project.dataprocService.cluster.config.instance.imageUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetImageUri()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.instanceNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetInstanceNames()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.dataprocService.cluster.config.instance.instanceReferences": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetInstanceReferences()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.dataprocService.cluster.config.instance.isPreemptible": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetIsPreemptible()).ToDataRes(types.Bool)
	},
	"gcp.project.dataprocService.cluster.config.instance.machineTypeUri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetMachineTypeUri()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.managedGroupConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetManagedGroupConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.config.instance.minCpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetMinCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.numInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetNumInstances()).ToDataRes(types.Int)
	},
	"gcp.project.dataprocService.cluster.config.instance.preemptibility": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).GetPreemptibility()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.bootDiskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).GetBootDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.bootDiskType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).GetBootDiskType()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.localSsdInterface": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).GetLocalSsdInterface()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.numLocalSsds": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).GetNumLocalSsds()).ToDataRes(types.Int)
	},
	"gcp.project.dataprocService.cluster.status.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterStatus).GetId()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.status.detail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterStatus).GetDetail()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.status.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterStatus).GetState()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.status.started": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterStatus).GetStarted()).ToDataRes(types.Time)
	},
	"gcp.project.dataprocService.cluster.status.substate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterStatus).GetSubstate()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.parentResourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).GetParentResourcePath()).ToDataRes(types.String)
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.auxiliaryServices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).GetAuxiliaryServices()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.kubernetesCluster": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).GetKubernetesCluster()).ToDataRes(types.Dict)
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.stagingBucket": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).GetStagingBucket()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunService).GetRegions()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.cloudRunService.operations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunService).GetOperations()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.operation")))
	},
	"gcp.project.cloudRunService.services": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunService).GetServices()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.service")))
	},
	"gcp.project.cloudRunService.jobs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunService).GetJobs()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.job")))
	},
	"gcp.project.cloudRunService.operation.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceOperation).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.operation.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceOperation).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.operation.done": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceOperation).GetDone()).ToDataRes(types.Bool)
	},
	"gcp.project.cloudRunService.service.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetRegion()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.generation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetGeneration()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.service.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.service.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.service.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.service.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.service.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetDeleted()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.service.expired": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetExpired()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.service.creator": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetCreator()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.lastModifier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetLastModifier()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.ingress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetIngress()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.launchStage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetLaunchStage()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.template": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetTemplate()).ToDataRes(types.Resource("gcp.project.cloudRunService.service.revisionTemplate"))
	},
	"gcp.project.cloudRunService.service.traffic": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetTraffic()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.service.observedGeneration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetObservedGeneration()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.service.terminalCondition": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetTerminalCondition()).ToDataRes(types.Resource("gcp.project.cloudRunService.condition"))
	},
	"gcp.project.cloudRunService.service.conditions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetConditions()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.condition")))
	},
	"gcp.project.cloudRunService.service.latestReadyRevision": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetLatestReadyRevision()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.latestCreatedRevision": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetLatestCreatedRevision()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.trafficStatuses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetTrafficStatuses()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.service.uri": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetUri()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.reconciling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceService).GetReconciling()).ToDataRes(types.Bool)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.service.revisionTemplate.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.service.revisionTemplate.scaling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetScaling()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.vpcAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetVpcAccess()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.timeout": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetTimeout()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.serviceAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetServiceAccount()).ToDataRes(types.Resource("gcp.project.iamService.serviceAccount"))
	},
	"gcp.project.cloudRunService.service.revisionTemplate.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetContainers()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.container")))
	},
	"gcp.project.cloudRunService.service.revisionTemplate.volumes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetVolumes()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.service.revisionTemplate.executionEnvironment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetExecutionEnvironment()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.encryptionKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetEncryptionKey()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.service.revisionTemplate.maxInstanceRequestConcurrency": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).GetMaxInstanceRequestConcurrency()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.container.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.container.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.container.image": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetImage()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.container.command": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetCommand()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.cloudRunService.container.args": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetArgs()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.cloudRunService.container.env": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetEnv()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.container.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetResources()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.container.ports": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetPorts()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.container.volumeMounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetVolumeMounts()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.container.workingDir": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetWorkingDir()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.container.livenessProbe": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetLivenessProbe()).ToDataRes(types.Resource("gcp.project.cloudRunService.container.probe"))
	},
	"gcp.project.cloudRunService.container.startupProbe": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainer).GetStartupProbe()).ToDataRes(types.Resource("gcp.project.cloudRunService.container.probe"))
	},
	"gcp.project.cloudRunService.container.probe.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.container.probe.initialDelaySeconds": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetInitialDelaySeconds()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.container.probe.timeoutSeconds": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetTimeoutSeconds()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.container.probe.periodSeconds": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetPeriodSeconds()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.container.probe.failureThreshold": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetFailureThreshold()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.container.probe.httpGet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetHttpGet()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.container.probe.tcpSocket": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceContainerProbe).GetTcpSocket()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.condition.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.condition.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetType()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.condition.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetState()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.condition.message": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetMessage()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.condition.lastTransitionTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetLastTransitionTime()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.condition.severity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceCondition).GetSeverity()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetRegion()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetName()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.generation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetGeneration()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.job.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.job.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.job.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.job.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.job.deleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetDeleted()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.job.expired": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetExpired()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.job.creator": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetCreator()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.lastModifier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetLastModifier()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.client": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetClient()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.clientVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetClientVersion()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.launchStage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetLaunchStage()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.template": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetTemplate()).ToDataRes(types.Resource("gcp.project.cloudRunService.job.executionTemplate"))
	},
	"gcp.project.cloudRunService.job.observedGeneration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetObservedGeneration()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.job.terminalCondition": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetTerminalCondition()).ToDataRes(types.Resource("gcp.project.cloudRunService.condition"))
	},
	"gcp.project.cloudRunService.job.conditions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetConditions()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.condition")))
	},
	"gcp.project.cloudRunService.job.executionCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetExecutionCount()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.job.reconciling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJob).GetReconciling()).ToDataRes(types.Bool)
	},
	"gcp.project.cloudRunService.job.executionTemplate.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.job.executionTemplate.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.cloudRunService.job.executionTemplate.parallelism": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetParallelism()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetTaskCount()).ToDataRes(types.Int)
	},
	"gcp.project.cloudRunService.job.executionTemplate.template": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).GetTemplate()).ToDataRes(types.Resource("gcp.project.cloudRunService.job.executionTemplate.taskTemplate"))
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.vpcAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetVpcAccess()).ToDataRes(types.Dict)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.timeout": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetTimeout()).ToDataRes(types.Time)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.serviceAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetServiceAccount()).ToDataRes(types.Resource("gcp.project.iamService.serviceAccount"))
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetContainers()).ToDataRes(types.Array(types.Resource("gcp.project.cloudRunService.container")))
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.volumes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetVolumes()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.executionEnvironment": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetExecutionEnvironment()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.encryptionKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetEncryptionKey()).ToDataRes(types.String)
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.maxRetries": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).GetMaxRetries()).ToDataRes(types.Int)
	},
	"gcp.accessApprovalSettings.resourcePath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetResourcePath()).ToDataRes(types.String)
	},
	"gcp.accessApprovalSettings.notificationEmails": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetNotificationEmails()).ToDataRes(types.Array(types.String))
	},
	"gcp.accessApprovalSettings.enrolledServices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetEnrolledServices()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.accessApprovalSettings.enrolledAncestor": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetEnrolledAncestor()).ToDataRes(types.Bool)
	},
	"gcp.accessApprovalSettings.activeKeyVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetActiveKeyVersion()).ToDataRes(types.String)
	},
	"gcp.accessApprovalSettings.ancestorHasActiveKeyVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetAncestorHasActiveKeyVersion()).ToDataRes(types.Bool)
	},
	"gcp.accessApprovalSettings.invalidKeyVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpAccessApprovalSettings).GetInvalidKeyVersion()).ToDataRes(types.Bool)
	},
	"gcp.project.monitoringService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringService).GetAlertPolicies()).ToDataRes(types.Array(types.Resource("gcp.project.monitoringService.alertPolicy")))
	},
	"gcp.project.monitoringService.alertPolicy.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetName()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetDisplayName()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.documentation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetDocumentation()).ToDataRes(types.Dict)
	},
	"gcp.project.monitoringService.alertPolicy.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.monitoringService.alertPolicy.conditions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetConditions()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.monitoringService.alertPolicy.combiner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetCombiner()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.monitoringService.alertPolicy.validity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetValidity()).ToDataRes(types.Dict)
	},
	"gcp.project.monitoringService.alertPolicy.notificationChannelUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetNotificationChannelUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.monitoringService.alertPolicy.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.monitoringService.alertPolicy.createdBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetCreatedBy()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.monitoringService.alertPolicy.updatedBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetUpdatedBy()).ToDataRes(types.String)
	},
	"gcp.project.monitoringService.alertPolicy.alertStrategy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectMonitoringServiceAlertPolicy).GetAlertStrategy()).ToDataRes(types.Dict)
	},
	"gcp.project.binaryAuthorizationControl.policy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControl).GetPolicy()).ToDataRes(types.Resource("gcp.project.binaryAuthorizationControl.policy"))
	},
	"gcp.project.binaryAuthorizationControl.policy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetName()).ToDataRes(types.String)
	},
	"gcp.project.binaryAuthorizationControl.policy.globalPolicyEvaluationMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetGlobalPolicyEvaluationMode()).ToDataRes(types.String)
	},
	"gcp.project.binaryAuthorizationControl.policy.admissionWhitelistPatterns": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetAdmissionWhitelistPatterns()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.binaryAuthorizationControl.policy.clusterAdmissionRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetClusterAdmissionRules()).ToDataRes(types.Map(types.String, types.Resource("gcp.project.binaryAuthorizationControl.admissionRule")))
	},
	"gcp.project.binaryAuthorizationControl.policy.kubernetesNamespaceAdmissionRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetKubernetesNamespaceAdmissionRules()).ToDataRes(types.Map(types.String, types.Resource("gcp.project.binaryAuthorizationControl.admissionRule")))
	},
	"gcp.project.binaryAuthorizationControl.policy.kubernetesServiceAccountAdmissionRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetKubernetesServiceAccountAdmissionRules()).ToDataRes(types.Map(types.String, types.Resource("gcp.project.binaryAuthorizationControl.admissionRule")))
	},
	"gcp.project.binaryAuthorizationControl.policy.istioServiceIdentityAdmissionRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetIstioServiceIdentityAdmissionRules()).ToDataRes(types.Map(types.String, types.Resource("gcp.project.binaryAuthorizationControl.admissionRule")))
	},
	"gcp.project.binaryAuthorizationControl.policy.defaultAdmissionRule": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetDefaultAdmissionRule()).ToDataRes(types.Resource("gcp.project.binaryAuthorizationControl.admissionRule"))
	},
	"gcp.project.binaryAuthorizationControl.policy.updated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GetUpdated()).ToDataRes(types.Time)
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.evaluationMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).GetEvaluationMode()).ToDataRes(types.String)
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.enforcementMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).GetEnforcementMode()).ToDataRes(types.String)
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.requireAttestationsBy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).GetRequireAttestationsBy()).ToDataRes(types.Array(types.String))
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"gcp.organization.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpOrganization).__id, ok = v.Value.(string)
			return
		},
	"gcp.organization.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.organization.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.organization.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.organization.lifecycleState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).LifecycleState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.organization.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.organization.accessApprovalSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).AccessApprovalSettings, ok = plugin.RawToTValue[*mqlGcpAccessApprovalSettings](v.Value, v.Error)
		return
	},
	"gcp.organization.folders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).Folders, ok = plugin.RawToTValue[*mqlGcpFolders](v.Value, v.Error)
		return
	},
	"gcp.organization.projects": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpOrganization).Projects, ok = plugin.RawToTValue[*mqlGcpProjects](v.Value, v.Error)
		return
	},
	"gcp.folders.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpFolders).__id, ok = v.Value.(string)
			return
		},
	"gcp.folders.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolders).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.folders.children": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolders).Children, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.folders.list": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolders).List, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.folder.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpFolder).__id, ok = v.Value.(string)
			return
		},
	"gcp.folder.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.folder.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.folder.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.folder.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.folder.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.folder.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.folder.folders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Folders, ok = plugin.RawToTValue[*mqlGcpFolders](v.Value, v.Error)
		return
	},
	"gcp.folder.projects": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpFolder).Projects, ok = plugin.RawToTValue[*mqlGcpProjects](v.Value, v.Error)
		return
	},
	"gcp.projects.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjects).__id, ok = v.Value.(string)
			return
		},
	"gcp.projects.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjects).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.projects.children": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjects).Children, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.projects.list": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjects).List, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProject).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.number": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Number, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.lifecycleState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).LifecycleState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.createTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CreateTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.services": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Services, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.recommendations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Recommendations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gke": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Gke, ok = plugin.RawToTValue[*mqlGcpProjectGkeService](v.Value, v.Error)
		return
	},
	"gcp.project.compute": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Compute, ok = plugin.RawToTValue[*mqlGcpProjectComputeService](v.Value, v.Error)
		return
	},
	"gcp.project.pubsub": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Pubsub, ok = plugin.RawToTValue[*mqlGcpProjectPubsubService](v.Value, v.Error)
		return
	},
	"gcp.project.kms": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Kms, ok = plugin.RawToTValue[*mqlGcpProjectKmsService](v.Value, v.Error)
		return
	},
	"gcp.project.essentialContacts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).EssentialContacts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKeys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).ApiKeys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.logging": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Logging, ok = plugin.RawToTValue[*mqlGcpProjectLoggingservice](v.Value, v.Error)
		return
	},
	"gcp.project.sql": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Sql, ok = plugin.RawToTValue[*mqlGcpProjectSqlService](v.Value, v.Error)
		return
	},
	"gcp.project.iam": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Iam, ok = plugin.RawToTValue[*mqlGcpProjectIamService](v.Value, v.Error)
		return
	},
	"gcp.project.commonInstanceMetadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CommonInstanceMetadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dns": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Dns, ok = plugin.RawToTValue[*mqlGcpProjectDnsService](v.Value, v.Error)
		return
	},
	"gcp.project.bigquery": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Bigquery, ok = plugin.RawToTValue[*mqlGcpProjectBigqueryService](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunctions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CloudFunctions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataproc": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Dataproc, ok = plugin.RawToTValue[*mqlGcpProjectDataprocService](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRun": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CloudRun, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunService](v.Value, v.Error)
		return
	},
	"gcp.project.accessApprovalSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).AccessApprovalSettings, ok = plugin.RawToTValue[*mqlGcpAccessApprovalSettings](v.Value, v.Error)
		return
	},
	"gcp.project.storage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Storage, ok = plugin.RawToTValue[*mqlGcpProjectStorageService](v.Value, v.Error)
		return
	},
	"gcp.project.monitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Monitoring, ok = plugin.RawToTValue[*mqlGcpProjectMonitoringService](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).BinaryAuthorization, ok = plugin.RawToTValue[*mqlGcpProjectBinaryAuthorizationControl](v.Value, v.Error)
		return
	},
	"gcp.service.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpService).__id, ok = v.Value.(string)
			return
		},
	"gcp.service.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.parentName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).ParentName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.title": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Title, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.recommendation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpRecommendation).__id, ok = v.Value.(string)
			return
		},
	"gcp.recommendation.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.zoneName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).ZoneName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.recommender": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Recommender, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.primaryImpact": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).PrimaryImpact, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.additionalImpact": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).AdditionalImpact, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.content": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Content, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.category": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Category, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Priority, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.lastRefreshTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).LastRefreshTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.recommendation.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).State, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpResourcemanagerBinding).__id, ok = v.Value.(string)
			return
		},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Instances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshots": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Snapshots, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.images": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Images, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewalls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Firewalls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.networks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Networks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Subnetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.routers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Routers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineTypes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).MachineTypes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendServices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).BackendServices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.addresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Addresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).ForwardingRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceAddress).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.address.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.addressType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).AddressType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.ipVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).IpVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.ipv6EndpointType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Ipv6EndpointType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.networkTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).NetworkTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.prefixLength": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).PrefixLength, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Purpose, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.subnetworkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).SubnetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.resourceUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).ResourceUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceForwardingRule).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.forwardingRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipProtocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpProtocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.allPorts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).AllPorts, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.allowGlobalAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).AllowGlobalAccess, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.backendService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).BackendService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.isMirroringCollector": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IsMirroringCollector, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.loadBalancingScheme": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).LoadBalancingScheme, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.metadataFilters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).MetadataFilters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.networkTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NetworkTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.noAutomateDnsZone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NoAutomateDnsZone, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.portRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).PortRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ports": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Ports, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceDirectoryRegistrations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceDirectoryRegistrations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceLabel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceLabel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.subnetworkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).SubnetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.targetUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).TargetUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceRegion).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.region.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.quotas": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Quotas, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.deprecated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Deprecated, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceZone).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.zone.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceMachineType).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.machineType.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.guestCpus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).GuestCpus, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.isSharedCpu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).IsSharedCpu, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.maximumPersistentDisks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MaximumPersistentDisks, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.maximumPersistentDisksSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MaximumPersistentDisksSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.memoryMb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MemoryMb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceInstance).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.instance.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.confidentialInstanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ConfidentialInstanceConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.canIpForward": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).CanIpForward, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.cpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).CpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.deletionProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).DeletionProtection, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableDisplay": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableDisplay, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.guestAccelerators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).GuestAccelerators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.fingerprint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Fingerprint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.hostname": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Hostname, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.keyRevocationActionType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).KeyRevocationActionType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastStartTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastStartTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastStopTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastStopTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastSuspendedTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastSuspendedTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.minCpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).MinCpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.networkInterfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).NetworkInterfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.reservationAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ReservationAffinity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.resourcePolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ResourcePolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.physicalHostResourceStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).PhysicalHostResourceStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.scheduling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Scheduling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableIntegrityMonitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableIntegrityMonitoring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableSecureBoot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableSecureBoot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableVtpm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableVtpm, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.startRestricted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).StartRestricted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.statusMessage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).StatusMessage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.sourceMachineImage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).SourceMachineImage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.totalEgressBandwidthTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).TotalEgressBandwidthTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.serviceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.machineType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).MachineType, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceMachineType](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.serviceaccount.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceServiceaccount).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.serviceaccount.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceServiceaccount).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.serviceaccount.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceServiceaccount).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceDisk).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.disk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.guestOsFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).GuestOsFeatures, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.lastAttachTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LastAttachTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.lastDetachTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LastDetachTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.locationHint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LocationHint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.physicalBlockSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).PhysicalBlockSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.provisionedIops": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).ProvisionedIops, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.sizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).SizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.diskEncryptionKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).DiskEncryptionKey, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceAttachedDisk).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.attachedDisk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.autoDelete": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).AutoDelete, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.boot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Boot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.deviceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).DeviceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.forceAttach": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).ForceAttach, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.guestOsFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).GuestOsFeatures, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.index": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Index, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.interface": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Interface, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.source": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Source, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceDisk](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSnapshot).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.snapshot.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.autoCreated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).AutoCreated, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.chainName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).ChainName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.creationSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).CreationSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.downloadBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).DownloadBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.storageBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).StorageBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.storageBytesStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).StorageBytesStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.snapshotType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).SnapshotType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceImage).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.image.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.archiveSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).ArchiveSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.family": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Family, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceFirewall).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.firewall.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Priority, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.direction": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Direction, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceRanges": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceRanges, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceServiceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceTags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceTags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.destinationRanges": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).DestinationRanges, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.targetServiceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).TargetServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.allowed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Allowed, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.denied": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Denied, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceNetwork).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.network.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.autoCreateSubnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).AutoCreateSubnetworks, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.enableUlaInternalIpv6": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).EnableUlaInternalIpv6, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.gatewayIPv4": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).GatewayIPv4, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.mtu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Mtu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.networkFirewallPolicyEnforcementOrder": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).NetworkFirewallPolicyEnforcementOrder, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.peerings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Peerings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.routingMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).RoutingMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.subnetworkUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).SubnetworkUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.subnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Subnetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSubnetwork).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.subnetwork.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.enableFlowLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).EnableFlowLogs, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.externalIpv6Prefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).ExternalIpv6Prefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.fingerprint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Fingerprint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.gatewayAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).GatewayAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.internalIpv6Prefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).InternalIpv6Prefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipCidrRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).IpCidrRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipv6AccessType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Ipv6AccessType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipv6CidrRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Ipv6CidrRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).LogConfig, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.privateIpGoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).PrivateIpGoogleAccess, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Purpose, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Region, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceRegion](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.stackType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).StackType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.subnetwork.logConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.aggregationInterval": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).AggregationInterval, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.enable": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Enable, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.filterExpression": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).FilterExpression, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.flowSampling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).FlowSampling, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Metadata, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.metadataFields": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).MetadataFields, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceRouter).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.router.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.bgp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Bgp, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.bgpPeers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).BgpPeers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.encryptedInterconnectRouter": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).EncryptedInterconnectRouter, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.nats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Nats, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.affinityCookieTtlSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).AffinityCookieTtlSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backends": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Backends, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CdnPolicy, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.circuitBreakers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CircuitBreakers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.compressionMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CompressionMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.connectionDraining": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConnectionDraining, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.connectionTrackingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConnectionTrackingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.consistentHash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConsistentHash, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.customRequestHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CustomRequestHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.customResponseHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CustomResponseHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.edgeSecurityPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).EdgeSecurityPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.enableCDN": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).EnableCDN, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.failoverPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).FailoverPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.healthChecks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).HealthChecks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.iap": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Iap, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.loadBalancingScheme": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LoadBalancingScheme, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.localityLbPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LocalityLbPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.localityLbPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LocalityLbPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.logConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LogConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.maxStreamDuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).MaxStreamDuration, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.portName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).PortName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.protocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Protocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.securityPolicyUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SecurityPolicyUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.securitySettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SecuritySettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.serviceBindingUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ServiceBindingUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.sessionAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SessionAffinity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.timeoutSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).TimeoutSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendServiceBackend).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.backend.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.balancingMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).BalancingMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.capacityScaler": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).CapacityScaler, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.failover": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Failover, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.groupUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GroupUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnections, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerEndpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnectionsPerEndpoint, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerInstance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnectionsPerInstance, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRate, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRatePerEndpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRatePerEndpoint, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRatePerInstance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRatePerInstance, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxUtilization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxUtilization, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.cdnPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.bypassCacheOnRequestHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).BypassCacheOnRequestHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheKeyPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).CacheKeyPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).CacheMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.clientTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).ClientTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.defaultTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).DefaultTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.maxTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).MaxTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCaching": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).NegativeCaching, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCachingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).NegativeCachingPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.requestCoalescing": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).RequestCoalescing, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.serveWhileStale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).ServeWhileStale, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlCacheMaxAgeSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).SignedUrlCacheMaxAgeSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlKeyNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).SignedUrlKeyNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectStorageService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.storageService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.buckets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageService).Buckets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectStorageServiceBucket).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.storageService.bucket.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.locationType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).LocationType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.projectNumber": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).ProjectNumber, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.storageClass": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).StorageClass, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.iamConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).IamConfiguration, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.storageService.bucket.retentionPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectStorageServiceBucket).RetentionPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlService).Instances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstance).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.availableMaintenanceVersions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).AvailableMaintenanceVersions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.backendType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).BackendType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.connectionName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).ConnectionName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.currentDiskSize": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).CurrentDiskSize, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.databaseInstalledVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).DatabaseInstalledVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.databaseVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).DatabaseVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.diskEncryptionConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).DiskEncryptionConfiguration, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.diskEncryptionStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).DiskEncryptionStatus, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.failoverReplica": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).FailoverReplica, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.gceZone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).GceZone, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.instanceType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).InstanceType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.ipAddresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).IpAddresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.maintenanceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).MaintenanceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.masterInstanceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).MasterInstanceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.maxDiskSize": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).MaxDiskSize, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.project": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Project, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.replicaNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).ReplicaNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Settings, ok = plugin.RawToTValue[*mqlGcpProjectSqlServiceInstanceSettings](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.serviceAccountEmailAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).ServiceAccountEmailAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.databases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstance).Databases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceDatabase).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.database.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.charset": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).Charset, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.instance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).Instance, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.database.sqlserverDatabaseDetails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceDatabase).SqlserverDatabaseDetails, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.ipMapping.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceIpMapping).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.ipMapping.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceIpMapping).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.ipMapping.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceIpMapping).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.ipMapping.timeToRetire": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceIpMapping).TimeToRetire, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.ipMapping.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceIpMapping).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettings).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.instanceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).InstanceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.activationPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).ActivationPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.activeDirectoryConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).ActiveDirectoryConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.availabilityType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).AvailabilityType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).BackupConfiguration, ok = plugin.RawToTValue[*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.collation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).Collation, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.connectorEnforcement": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).ConnectorEnforcement, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.crashSafeReplicationEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).CrashSafeReplicationEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.dataDiskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DataDiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.dataDiskType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DataDiskType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.databaseFlags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DatabaseFlags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.databaseReplicationEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DatabaseReplicationEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.deletionProtectionEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DeletionProtectionEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriods": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).DenyMaintenancePeriods, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.insightsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).InsightsConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).IpConfiguration, ok = plugin.RawToTValue[*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.locationPreference": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).LocationPreference, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).MaintenanceWindow, ok = plugin.RawToTValue[*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).PasswordValidationPolicy, ok = plugin.RawToTValue[*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.pricingPlan": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).PricingPlan, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.replicationType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).ReplicationType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.settingsVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).SettingsVersion, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.sqlServerAuditConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).SqlServerAuditConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.storageAutoResize": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).StorageAutoResize, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.storageAutoResizeLimit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).StorageAutoResizeLimit, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.tier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).Tier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.timeZone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).TimeZone, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.userLabels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettings).UserLabels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.backupconfiguration.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.backupRetentionSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).BackupRetentionSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.binaryLogEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).BinaryLogEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.pointInTimeRecoveryEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).PointInTimeRecoveryEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.startTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).StartTime, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.backupconfiguration.transactionLogRetentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration).TransactionLogRetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.endDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).EndDate, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.startDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).StartDate, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.denyMaintenancePeriod.time": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod).Time, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.ipConfiguration.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.allocatedIpRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).AllocatedIpRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.authorizedNetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).AuthorizedNetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.ipv4Enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).Ipv4Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.privateNetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).PrivateNetwork, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.ipConfiguration.requireSsl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration).RequireSsl, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.day": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).Day, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.hour": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).Hour, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.maintenanceWindow.updateTrack": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow).UpdateTrack, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.complexity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).Complexity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.disallowUsernameSubstring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).DisallowUsernameSubstring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.enabledPasswordPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).EnabledPasswordPolicy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.minLength": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).MinLength, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.passwordChangeInterval": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).PasswordChangeInterval, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.sqlService.instance.settings.passwordValidationPolicy.reuseInterval": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy).ReuseInterval, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.datasets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryService).Datasets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryServiceDataset).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.dataset.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.modified": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Modified, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.kmsName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).KmsName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.access": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Access, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.tables": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Tables, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.models": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Models, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.routines": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDataset).Routines, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.dataset.accessEntry.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.datasetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).DatasetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.entityType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).EntityType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.entity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).Entity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.viewRef": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).ViewRef, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.routineRef": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).RoutineRef, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.dataset.accessEntry.datasetRef": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceDatasetAccessEntry).DatasetRef, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryServiceTable).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.table.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.datasetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).DatasetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.useLegacySQL": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).UseLegacySQL, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.requirePartitionFilter": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).RequirePartitionFilter, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.modified": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Modified, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.numBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).NumBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.numLongTermBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).NumLongTermBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.numRows": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).NumRows, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.expirationTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).ExpirationTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.kmsName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).KmsName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.snapshotTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).SnapshotTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.viewQuery": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).ViewQuery, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.clusteringFields": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).ClusteringFields, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.externalDataConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).ExternalDataConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.materializedView": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).MaterializedView, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.rangePartitioning": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).RangePartitioning, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.timePartitioning": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).TimePartitioning, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.table.schema": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceTable).Schema, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryServiceModel).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.model.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.datasetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).DatasetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.modified": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Modified, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.expirationTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).ExpirationTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.model.kmsName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceModel).KmsName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBigqueryServiceRoutine).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.bigqueryService.routine.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.datasetId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).DatasetId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.language": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Language, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.modified": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Modified, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.bigqueryService.routine.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBigqueryServiceRoutine).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDnsService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dnsService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedZones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsService).ManagedZones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsService).Policies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDnsServiceManagedzone).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dnsService.managedzone.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.dnssecConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).DnssecConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.dnsName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).DnsName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.nameServerSet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).NameServerSet, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.nameServers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).NameServers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.visibility": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).Visibility, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.managedzone.recordSets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceManagedzone).RecordSets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDnsServiceRecordset).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dnsService.recordset.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.rrdatas": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).Rrdatas, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.signatureRrdatas": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).SignatureRrdatas, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.ttl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).Ttl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.recordset.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServiceRecordset).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDnsServicePolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dnsService.policy.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.enableInboundForwarding": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).EnableInboundForwarding, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.enableLogging": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).EnableLogging, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.networkNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).NetworkNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dnsService.policy.networks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDnsServicePolicy).Networks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.clusters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeService).Clusters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceCluster).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.loggingService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).LoggingService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.monitoringService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MonitoringService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Network, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.clusterIpv4Cidr": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ClusterIpv4Cidr, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Subnetwork, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodePools": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).NodePools, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.locations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Locations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.enableKubernetesAlpha": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).EnableKubernetesAlpha, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.autopilotEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).AutopilotEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Zone, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.endpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Endpoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.initialClusterVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).InitialClusterVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.currentMasterVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).CurrentMasterVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.resourceLabels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ResourceLabels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.expirationTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ExpirationTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).AddonsConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterAddonsConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.workloadIdentityConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).WorkloadIdentityConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).IpAllocationPolicy, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).NetworkConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNetworkConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.binaryAuthorization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).BinaryAuthorization, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.legacyAbac": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).LegacyAbac, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.masterAuth": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MasterAuth, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.masterAuthorizedNetworksConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MasterAuthorizedNetworksConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.privateClusterConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).PrivateClusterConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.databaseEncryption": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).DatabaseEncryption, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.shieldedNodesConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ShieldedNodesConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.costManagementConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).CostManagementConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.confidentialNodesConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ConfidentialNodesConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.identityServiceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).IdentityServiceConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkPolicyConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).NetworkPolicyConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.addonsConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.httpLoadBalancing": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).HttpLoadBalancing, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.horizontalPodAutoscaling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).HorizontalPodAutoscaling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.kubernetesDashboard": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).KubernetesDashboard, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.networkPolicyConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).NetworkPolicyConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.cloudRunConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).CloudRunConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.dnsCacheConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).DnsCacheConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.configConnectorConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).ConfigConnectorConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcePersistentDiskCsiDriverConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GcePersistentDiskCsiDriverConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcpFilestoreCsiDriverConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GcpFilestoreCsiDriverConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gkeBackupAgentConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GkeBackupAgentConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcsFuseCsiDriverConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GcsFuseCsiDriverConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.statefulHaConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).StatefulHaConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useIpAliases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).UseIpAliases, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.createSubnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).CreateSubnetwork, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.subnetworkName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).SubnetworkName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterSecondaryRangeName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ClusterSecondaryRangeName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesSecondaryRangeName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ServicesSecondaryRangeName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ClusterIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.nodeIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).NodeIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ServicesIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.tpuIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).TpuIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useRoutes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).UseRoutes, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.stackType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).StackType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.ipv6AccessType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).Ipv6AccessType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.networkConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.networkPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).NetworkPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetworkPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).SubnetworkPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableIntraNodeVisibility": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableIntraNodeVisibility, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.defaultSnatStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DefaultSnatStatus, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableL4IlbSubsetting": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableL4IlbSubsetting, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.datapathProvider": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DatapathProvider, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.dnsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DnsConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.serviceExternalIpsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).ServiceExternalIpsConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableMultiNetworking": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableMultiNetworking, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableFqdnNetworkPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableFqdnNetworkPolicy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableCiliumClusterwideNetworkPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableCiliumClusterwideNetworkPolicy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepool).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Config, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.initialNodeCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).InitialNodeCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.locations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Locations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).NetworkConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.instanceGroupUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).InstanceGroupUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.management": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Management, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PodRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PodIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PerformanceConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.totalEgressBandwidthTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).TotalEgressBandwidthTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.machineType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).MachineType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.oauthScopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).OauthScopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ServiceAccount, ok = plugin.RawToTValue[*mqlGcpProjectIamServiceServiceAccount](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.imageType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ImageType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.localSsdCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).LocalSsdCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.preemptible": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Preemptible, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Accelerators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).DiskType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.minCpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).MinCpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.workloadMetadataMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).WorkloadMetadataMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.taints": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Taints, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).SandboxConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ShieldedInstanceConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).LinuxNodeConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).KubeletConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.bootDiskKmsKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).BootDiskKmsKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GcfsConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).AdvancedMachineFeatures, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GvnicConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.spot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Spot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ConfidentialNodes, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.count": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Count, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuPartitionSize": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GpuPartitionSize, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GpuSharingConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.maxSharedClientsPerGpu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).MaxSharedClientsPerGpu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.strategy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).Strategy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.effect": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Effect, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).EnableSecureBoot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).EnableIntegrityMonitoring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.sysctls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).Sysctls, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuManagerPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).CpuManagerPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuCfsQuotaPeriod": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).CpuCfsQuotaPeriod, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.podPidsLimit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).PodPidsLimit, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.threadsPerCore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).ThreadsPerCore, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubService).Topics, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscriptions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubService).Subscriptions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.snapshots": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubService).Snapshots, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceTopic).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.topic.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopic).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopic).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopic).Config, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceTopicConfig](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceTopicConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.topic.config.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfig).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.topicName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfig).TopicName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfig).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.kmsKeyName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfig).KmsKeyName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.messageStoragePolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfig).MessageStoragePolicy, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.messagestoragepolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.topic.config.messagestoragepolicy.configId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy).ConfigId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.topic.config.messagestoragepolicy.allowedPersistenceRegions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy).AllowedPersistenceRegions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceSubscription).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.subscription.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscription).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscription).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscription).Config, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceSubscriptionConfig](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.subscription.config.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.subscriptionName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).SubscriptionName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.topic": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).Topic, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceTopic](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.pushConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).PushConfig, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.ackDeadline": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).AckDeadline, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.retainAckedMessages": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).RetainAckedMessages, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.retentionDuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).RetentionDuration, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.expirationPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).ExpirationPolicy, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfig).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.subscription.config.pushconfig.configId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).ConfigId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.endpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).Endpoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.subscription.config.pushconfig.attributes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig).Attributes, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.snapshot.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectPubsubServiceSnapshot).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.pubsubService.snapshot.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSnapshot).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.snapshot.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSnapshot).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.snapshot.topic": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSnapshot).Topic, ok = plugin.RawToTValue[*mqlGcpProjectPubsubServiceTopic](v.Value, v.Error)
		return
	},
	"gcp.project.pubsubService.snapshot.expiration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectPubsubServiceSnapshot).Expiration, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.locations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsService).Locations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyrings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsService).Keyrings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyring).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokeys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyring).Cryptokeys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyringCryptokey).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.cryptokey.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.primary": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Primary, ok = plugin.RawToTValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersion](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Purpose, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.nextRotation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).NextRotation, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.rotationPeriod": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).RotationPeriod, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.versionTemplate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).VersionTemplate, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.importOnly": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).ImportOnly, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.destroyScheduledDuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).DestroyScheduledDuration, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.cryptoKeyBackend": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).CryptoKeyBackend, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokey).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.cryptokey.version.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.protectionLevel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ProtectionLevel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.algorithm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Algorithm, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Attestation, ok = plugin.RawToTValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.generated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Generated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.destroyed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).Destroyed, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.destroyEventTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).DestroyEventTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importJob": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ImportJob, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ImportTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.importFailureReason": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ImportFailureReason, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ExternalProtectionLevelOptions, ok = plugin.RawToTValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.reimportEligible": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersion).ReimportEligible, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.cryptoKeyVersionName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).CryptoKeyVersionName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.format": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).Format, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificateChains": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation).CertificateChains, ok = plugin.RawToTValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.cryptoKeyVersionName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).CryptoKeyVersionName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.caviumCerts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).CaviumCerts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.googleCardCerts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GoogleCardCerts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains.googlePartitionCerts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains).GooglePartitionCerts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.cryptoKeyVersionName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).CryptoKeyVersionName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.externalKeyUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).ExternalKeyUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions.ekmConnectionKeyPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions).EkmConnectionKeyPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpEssentialContact).__id, ok = v.Value.(string)
			return
		},
	"gcp.essentialContact.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.languageTag": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).LanguageTag, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.notificationCategories": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).NotificationCategories, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.validated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).Validated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.essentialContact.validationState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpEssentialContact).ValidationState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectApiKey).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.apiKey.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Deleted, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.keyString": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).KeyString, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Restrictions, ok = plugin.RawToTValue[*mqlGcpProjectApiKeyRestrictions](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKey).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectApiKeyRestrictions).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.apiKey.restrictions.parentResourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).ParentResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.androidKeyRestrictions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).AndroidKeyRestrictions, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.apiTargets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).ApiTargets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.browserKeyRestrictions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).BrowserKeyRestrictions, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.iosKeyRestrictions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).IosKeyRestrictions, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.apiKey.restrictions.serverKeyRestrictions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectApiKeyRestrictions).ServerKeyRestrictions, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectLoggingservice).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.loggingservice.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingservice).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.buckets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingservice).Buckets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingservice).Metrics, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sinks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingservice).Sinks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectLoggingserviceBucket).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.loggingservice.bucket.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.cmekSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).CmekSettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.indexConfigs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).IndexConfigs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.lifecycleState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).LifecycleState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.locked": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).Locked, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.restrictedFields": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).RestrictedFields, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.retentionDays": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).RetentionDays, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucket).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.indexConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.loggingservice.bucket.indexConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.indexConfig.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.indexConfig.fieldPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).FieldPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.bucket.indexConfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceBucketIndexConfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metric.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectLoggingserviceMetric).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.loggingservice.metric.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceMetric).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metric.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceMetric).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metric.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceMetric).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metric.filter": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceMetric).Filter, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.metric.alertPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceMetric).AlertPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectLoggingserviceSink).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.loggingservice.sink.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.destination": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).Destination, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.storageBucket": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).StorageBucket, ok = plugin.RawToTValue[*mqlGcpProjectStorageServiceBucket](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.filter": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).Filter, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.writerIdentity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).WriterIdentity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.loggingservice.sink.includeChildren": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectLoggingserviceSink).IncludeChildren, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamService).ServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamServiceServiceAccount).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.serviceAccount.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.uniqueId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).UniqueId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.oauth2ClientId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Oauth2ClientId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.keys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Keys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamServiceServiceAccountKey).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.serviceAccount.key.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyAlgorithm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyAlgorithm, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.validAfterTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).ValidAfterTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.validBeforeTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).ValidBeforeTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyOrigin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyOrigin, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudFunction).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudFunction.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.sourceArchiveUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).SourceArchiveUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.sourceRepository": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).SourceRepository, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.sourceUploadUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).SourceUploadUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.httpsTrigger": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).HttpsTrigger, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.eventTrigger": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).EventTrigger, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.entryPoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).EntryPoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.runtime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Runtime, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.timeout": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Timeout, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.availableMemoryMb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).AvailableMemoryMb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.versionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).VersionId, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.envVars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).EnvVars, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.buildEnvVars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).BuildEnvVars, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).Network, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.maxInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).MaxInstances, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.minInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).MinInstances, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.vpcConnector": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).VpcConnector, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.egressSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).EgressSettings, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.ingressSettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).IngressSettings, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.kmsKeyName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).KmsKeyName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.buildWorkerPool": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).BuildWorkerPool, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.buildId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).BuildId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.buildName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).BuildName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.secretEnvVars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).SecretEnvVars, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.secretVolumes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).SecretVolumes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.dockerRepository": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).DockerRepository, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudFunction.dockerRegistry": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudFunction).DockerRegistry, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocService).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocService).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.clusters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocService).Clusters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceCluster).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.uuid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Uuid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Config, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfig](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.metrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Metrics, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).Status, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterStatus](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.statusHistory": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).StatusHistory, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceCluster).VirtualClusterConfig, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.parentResourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).ParentResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.autoscaling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Autoscaling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.configBucket": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).ConfigBucket, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.metrics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Metrics, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.encryption": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Encryption, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.endpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Endpoint, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).GceCluster, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigGceCluster](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).GkeCluster, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigGkeCluster](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.initializationActions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).InitializationActions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Lifecycle, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigLifecycle](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.master": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Master, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigInstance](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.metastore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Metastore, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.secondaryWorker": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).SecondaryWorker, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigInstance](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.security": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Security, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.software": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Software, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.tempBucket": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).TempBucket, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.worker": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfig).Worker, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigInstance](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.gceCluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.confidentialInstance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ConfidentialInstance, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.internalIpOnly": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).InternalIpOnly, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.networkUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).NetworkUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.nodeGroupAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).NodeGroupAffinity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ReservationAffinity, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ServiceAccount, ok = plugin.RawToTValue[*mqlGcpProjectIamServiceServiceAccount](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.serviceAccountScopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ServiceAccountScopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ShieldedInstanceConfig, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.subnetworkUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).SubnetworkUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.zoneUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceCluster).ZoneUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.consumeReservationType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).ConsumeReservationType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity.values": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity).Values, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).EnableIntegrityMonitoring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).EnableSecureBoot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig.enableVtpm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig).EnableVtpm, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.gkeCluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.gkeClusterTarget": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).GkeClusterTarget, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.gkeCluster.nodePoolTarget": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigGkeCluster).NodePoolTarget, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.lifecycle.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.autoDeleteTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).AutoDeleteTime, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.autoDeleteTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).AutoDeleteTtl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.idleDeleteTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).IdleDeleteTtl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.lifecycle.idleStartTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigLifecycle).IdleStartTime, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.instance.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.accelerators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).Accelerators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).DiskConfig, ok = plugin.RawToTValue[*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.imageUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).ImageUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.instanceNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).InstanceNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.instanceReferences": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).InstanceReferences, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.isPreemptible": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).IsPreemptible, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.machineTypeUri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).MachineTypeUri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.managedGroupConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).ManagedGroupConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.minCpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).MinCpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.numInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).NumInstances, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.preemptibility": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstance).Preemptibility, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.bootDiskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).BootDiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.bootDiskType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).BootDiskType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.localSsdInterface": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).LocalSsdInterface, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.config.instance.diskConfig.numLocalSsds": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig).NumLocalSsds, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterStatus).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.status.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterStatus).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status.detail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterStatus).Detail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterStatus).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status.started": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterStatus).Started, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.status.substate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterStatus).Substate, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.parentResourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).ParentResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.auxiliaryServices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).AuxiliaryServices, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.kubernetesCluster": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).KubernetesCluster, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.dataprocService.cluster.virtualClusterConfig.stagingBucket": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig).StagingBucket, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunService).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.operations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunService).Operations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.services": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunService).Services, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.jobs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunService).Jobs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.operation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceOperation).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.operation.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceOperation).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.operation.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceOperation).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.operation.done": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceOperation).Done, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.service.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.generation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Generation, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Deleted, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.expired": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Expired, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.creator": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Creator, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.lastModifier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).LastModifier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.ingress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Ingress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.launchStage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).LaunchStage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.template": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Template, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceServiceRevisionTemplate](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.traffic": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Traffic, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.observedGeneration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).ObservedGeneration, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.terminalCondition": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).TerminalCondition, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceCondition](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.conditions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Conditions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.latestReadyRevision": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).LatestReadyRevision, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.latestCreatedRevision": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).LatestCreatedRevision, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.trafficStatuses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).TrafficStatuses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.uri": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Uri, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.reconciling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceService).Reconciling, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.service.revisionTemplate.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.scaling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Scaling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.vpcAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).VpcAccess, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.timeout": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Timeout, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.serviceAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).ServiceAccount, ok = plugin.RawToTValue[*mqlGcpProjectIamServiceServiceAccount](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.volumes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).Volumes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.executionEnvironment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).ExecutionEnvironment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.encryptionKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).EncryptionKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.service.revisionTemplate.maxInstanceRequestConcurrency": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceServiceRevisionTemplate).MaxInstanceRequestConcurrency, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceContainer).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.container.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.image": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Image, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.command": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Command, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.args": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Args, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.env": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Env, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Resources, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.ports": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).Ports, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.volumeMounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).VolumeMounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.workingDir": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).WorkingDir, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.livenessProbe": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).LivenessProbe, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceContainerProbe](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.startupProbe": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainer).StartupProbe, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceContainerProbe](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceContainerProbe).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.container.probe.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.initialDelaySeconds": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).InitialDelaySeconds, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.timeoutSeconds": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).TimeoutSeconds, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.periodSeconds": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).PeriodSeconds, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.failureThreshold": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).FailureThreshold, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.httpGet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).HttpGet, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.container.probe.tcpSocket": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceContainerProbe).TcpSocket, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceCondition).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.condition.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.message": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).Message, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.lastTransitionTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).LastTransitionTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.condition.severity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceCondition).Severity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceJob).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.job.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.generation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Generation, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.deleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Deleted, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.expired": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Expired, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.creator": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Creator, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.lastModifier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).LastModifier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.client": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Client, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.clientVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).ClientVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.launchStage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).LaunchStage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.template": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Template, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplate](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.observedGeneration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).ObservedGeneration, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.terminalCondition": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).TerminalCondition, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceCondition](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.conditions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Conditions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).ExecutionCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.reconciling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJob).Reconciling, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.job.executionTemplate.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.parallelism": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).Parallelism, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).TaskCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.template": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplate).Template, ok = plugin.RawToTValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.vpcAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).VpcAccess, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.timeout": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).Timeout, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.serviceAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).ServiceAccount, ok = plugin.RawToTValue[*mqlGcpProjectIamServiceServiceAccount](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.volumes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).Volumes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.executionEnvironment": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).ExecutionEnvironment, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.encryptionKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).EncryptionKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.cloudRunService.job.executionTemplate.taskTemplate.maxRetries": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate).MaxRetries, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpAccessApprovalSettings).__id, ok = v.Value.(string)
			return
		},
	"gcp.accessApprovalSettings.resourcePath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).ResourcePath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.notificationEmails": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).NotificationEmails, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.enrolledServices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).EnrolledServices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.enrolledAncestor": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).EnrolledAncestor, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.activeKeyVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).ActiveKeyVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.ancestorHasActiveKeyVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).AncestorHasActiveKeyVersion, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.accessApprovalSettings.invalidKeyVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpAccessApprovalSettings).InvalidKeyVersion, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectMonitoringService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.monitoringService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringService).AlertPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectMonitoringServiceAlertPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.monitoringService.alertPolicy.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.documentation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Documentation, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.conditions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Conditions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.combiner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Combiner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.validity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Validity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.notificationChannelUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).NotificationChannelUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.createdBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).CreatedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.updatedBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).UpdatedBy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.monitoringService.alertPolicy.alertStrategy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectMonitoringServiceAlertPolicy).AlertStrategy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBinaryAuthorizationControl).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.binaryAuthorizationControl.policy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControl).Policy, ok = plugin.RawToTValue[*mqlGcpProjectBinaryAuthorizationControlPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.binaryAuthorizationControl.policy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.globalPolicyEvaluationMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).GlobalPolicyEvaluationMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.admissionWhitelistPatterns": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).AdmissionWhitelistPatterns, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.clusterAdmissionRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).ClusterAdmissionRules, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.kubernetesNamespaceAdmissionRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).KubernetesNamespaceAdmissionRules, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.kubernetesServiceAccountAdmissionRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).KubernetesServiceAccountAdmissionRules, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.istioServiceIdentityAdmissionRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).IstioServiceIdentityAdmissionRules, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.defaultAdmissionRule": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).DefaultAdmissionRule, ok = plugin.RawToTValue[*mqlGcpProjectBinaryAuthorizationControlAdmissionRule](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.policy.updated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlPolicy).Updated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.binaryAuthorizationControl.admissionRule.evaluationMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).EvaluationMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.enforcementMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).EnforcementMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.binaryAuthorizationControl.admissionRule.requireAttestationsBy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectBinaryAuthorizationControlAdmissionRule).RequireAttestationsBy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlGcpOrganization for the gcp.organization resource
type mqlGcpOrganization struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpOrganizationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	State plugin.TValue[string]
	LifecycleState plugin.TValue[string]
	IamPolicy plugin.TValue[[]interface{}]
	AccessApprovalSettings plugin.TValue[*mqlGcpAccessApprovalSettings]
	Folders plugin.TValue[*mqlGcpFolders]
	Projects plugin.TValue[*mqlGcpProjects]
}

// createGcpOrganization creates a new instance of this resource
func createGcpOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpOrganization{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.organization", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpOrganization) MqlName() string {
	return "gcp.organization"
}

func (c *mqlGcpOrganization) MqlID() string {
	return c.__id
}

func (c *mqlGcpOrganization) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpOrganization) GetName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Name, func() (string, error) {
		return c.name()
	})
}

func (c *mqlGcpOrganization) GetState() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.State, func() (string, error) {
		return c.state()
	})
}

func (c *mqlGcpOrganization) GetLifecycleState() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.LifecycleState, func() (string, error) {
		return c.lifecycleState()
	})
}

func (c *mqlGcpOrganization) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.organization", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

func (c *mqlGcpOrganization) GetAccessApprovalSettings() *plugin.TValue[*mqlGcpAccessApprovalSettings] {
	return plugin.GetOrCompute[*mqlGcpAccessApprovalSettings](&c.AccessApprovalSettings, func() (*mqlGcpAccessApprovalSettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.organization", c.__id, "accessApprovalSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpAccessApprovalSettings), nil
			}
		}

		return c.accessApprovalSettings()
	})
}

func (c *mqlGcpOrganization) GetFolders() *plugin.TValue[*mqlGcpFolders] {
	return plugin.GetOrCompute[*mqlGcpFolders](&c.Folders, func() (*mqlGcpFolders, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.organization", c.__id, "folders")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpFolders), nil
			}
		}

		return c.folders()
	})
}

func (c *mqlGcpOrganization) GetProjects() *plugin.TValue[*mqlGcpProjects] {
	return plugin.GetOrCompute[*mqlGcpProjects](&c.Projects, func() (*mqlGcpProjects, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.organization", c.__id, "projects")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjects), nil
			}
		}

		return c.projects()
	})
}

// mqlGcpFolders for the gcp.folders resource
type mqlGcpFolders struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpFoldersInternal it will be used here
	ParentId plugin.TValue[string]
	Children plugin.TValue[[]interface{}]
	List plugin.TValue[[]interface{}]
}

// createGcpFolders creates a new instance of this resource
func createGcpFolders(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpFolders{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.folders", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpFolders) MqlName() string {
	return "gcp.folders"
}

func (c *mqlGcpFolders) MqlID() string {
	return c.__id
}

func (c *mqlGcpFolders) GetParentId() *plugin.TValue[string] {
	return &c.ParentId
}

func (c *mqlGcpFolders) GetChildren() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Children, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.folders", c.__id, "children")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.children()
	})
}

func (c *mqlGcpFolders) GetList() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.List, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.folders", c.__id, "list")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.list()
	})
}

// mqlGcpFolder for the gcp.folder resource
type mqlGcpFolder struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpFolderInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	ParentId plugin.TValue[string]
	State plugin.TValue[string]
	Folders plugin.TValue[*mqlGcpFolders]
	Projects plugin.TValue[*mqlGcpProjects]
}

// createGcpFolder creates a new instance of this resource
func createGcpFolder(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpFolder{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.folder", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpFolder) MqlName() string {
	return "gcp.folder"
}

func (c *mqlGcpFolder) MqlID() string {
	return c.__id
}

func (c *mqlGcpFolder) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpFolder) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpFolder) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpFolder) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpFolder) GetParentId() *plugin.TValue[string] {
	return &c.ParentId
}

func (c *mqlGcpFolder) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpFolder) GetFolders() *plugin.TValue[*mqlGcpFolders] {
	return plugin.GetOrCompute[*mqlGcpFolders](&c.Folders, func() (*mqlGcpFolders, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.folder", c.__id, "folders")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpFolders), nil
			}
		}

		return c.folders()
	})
}

func (c *mqlGcpFolder) GetProjects() *plugin.TValue[*mqlGcpProjects] {
	return plugin.GetOrCompute[*mqlGcpProjects](&c.Projects, func() (*mqlGcpProjects, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.folder", c.__id, "projects")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjects), nil
			}
		}

		return c.projects()
	})
}

// mqlGcpProjects for the gcp.projects resource
type mqlGcpProjects struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectsInternal it will be used here
	ParentId plugin.TValue[string]
	Children plugin.TValue[[]interface{}]
	List plugin.TValue[[]interface{}]
}

// createGcpProjects creates a new instance of this resource
func createGcpProjects(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjects{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.projects", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjects) MqlName() string {
	return "gcp.projects"
}

func (c *mqlGcpProjects) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjects) GetParentId() *plugin.TValue[string] {
	return &c.ParentId
}

func (c *mqlGcpProjects) GetChildren() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Children, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.projects", c.__id, "children")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.children()
	})
}

func (c *mqlGcpProjects) GetList() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.List, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.projects", c.__id, "list")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.list()
	})
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectInternal
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ParentId plugin.TValue[string]
	Number plugin.TValue[string]
	State plugin.TValue[string]
	LifecycleState plugin.TValue[string]
	CreateTime plugin.TValue[*time.Time]
	Labels plugin.TValue[map[string]interface{}]
	IamPolicy plugin.TValue[[]interface{}]
	Services plugin.TValue[[]interface{}]
	Recommendations plugin.TValue[[]interface{}]
	Gke plugin.TValue[*mqlGcpProjectGkeService]
	Compute plugin.TValue[*mqlGcpProjectComputeService]
	Pubsub plugin.TValue[*mqlGcpProjectPubsubService]
	Kms plugin.TValue[*mqlGcpProjectKmsService]
	EssentialContacts plugin.TValue[[]interface{}]
	ApiKeys plugin.TValue[[]interface{}]
	Logging plugin.TValue[*mqlGcpProjectLoggingservice]
	Sql plugin.TValue[*mqlGcpProjectSqlService]
	Iam plugin.TValue[*mqlGcpProjectIamService]
	CommonInstanceMetadata plugin.TValue[map[string]interface{}]
	Dns plugin.TValue[*mqlGcpProjectDnsService]
	Bigquery plugin.TValue[*mqlGcpProjectBigqueryService]
	CloudFunctions plugin.TValue[[]interface{}]
	Dataproc plugin.TValue[*mqlGcpProjectDataprocService]
	CloudRun plugin.TValue[*mqlGcpProjectCloudRunService]
	AccessApprovalSettings plugin.TValue[*mqlGcpAccessApprovalSettings]
	Storage plugin.TValue[*mqlGcpProjectStorageService]
	Monitoring plugin.TValue[*mqlGcpProjectMonitoringService]
	BinaryAuthorization plugin.TValue[*mqlGcpProjectBinaryAuthorizationControl]
}

// createGcpProject creates a new instance of this resource
func createGcpProject(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProject{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProject) MqlName() string {
	return "gcp.project"
}

func (c *mqlGcpProject) MqlID() string {
	return c.__id
}

func (c *mqlGcpProject) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProject) GetName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Name, func() (string, error) {
		return c.name()
	})
}

func (c *mqlGcpProject) GetParentId() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.ParentId, func() (string, error) {
		return c.parentId()
	})
}

func (c *mqlGcpProject) GetNumber() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Number, func() (string, error) {
		return c.number()
	})
}

func (c *mqlGcpProject) GetState() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.State, func() (string, error) {
		return c.state()
	})
}

func (c *mqlGcpProject) GetLifecycleState() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.LifecycleState, func() (string, error) {
		return c.lifecycleState()
	})
}

func (c *mqlGcpProject) GetCreateTime() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.CreateTime, func() (*time.Time, error) {
		return c.createTime()
	})
}

func (c *mqlGcpProject) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlGcpProject) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

func (c *mqlGcpProject) GetServices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Services, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "services")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.services()
	})
}

func (c *mqlGcpProject) GetRecommendations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Recommendations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "recommendations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.recommendations()
	})
}

func (c *mqlGcpProject) GetGke() *plugin.TValue[*mqlGcpProjectGkeService] {
	return plugin.GetOrCompute[*mqlGcpProjectGkeService](&c.Gke, func() (*mqlGcpProjectGkeService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "gke")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectGkeService), nil
			}
		}

		return c.gke()
	})
}

func (c *mqlGcpProject) GetCompute() *plugin.TValue[*mqlGcpProjectComputeService] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeService](&c.Compute, func() (*mqlGcpProjectComputeService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "compute")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeService), nil
			}
		}

		return c.compute()
	})
}

func (c *mqlGcpProject) GetPubsub() *plugin.TValue[*mqlGcpProjectPubsubService] {
	return plugin.GetOrCompute[*mqlGcpProjectPubsubService](&c.Pubsub, func() (*mqlGcpProjectPubsubService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "pubsub")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectPubsubService), nil
			}
		}

		return c.pubsub()
	})
}

func (c *mqlGcpProject) GetKms() *plugin.TValue[*mqlGcpProjectKmsService] {
	return plugin.GetOrCompute[*mqlGcpProjectKmsService](&c.Kms, func() (*mqlGcpProjectKmsService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "kms")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectKmsService), nil
			}
		}

		return c.kms()
	})
}

func (c *mqlGcpProject) GetEssentialContacts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.EssentialContacts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "essentialContacts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.essentialContacts()
	})
}

func (c *mqlGcpProject) GetApiKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApiKeys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "apiKeys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.apiKeys()
	})
}

func (c *mqlGcpProject) GetLogging() *plugin.TValue[*mqlGcpProjectLoggingservice] {
	return plugin.GetOrCompute[*mqlGcpProjectLoggingservice](&c.Logging, func() (*mqlGcpProjectLoggingservice, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "logging")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectLoggingservice), nil
			}
		}

		return c.logging()
	})
}

func (c *mqlGcpProject) GetSql() *plugin.TValue[*mqlGcpProjectSqlService] {
	return plugin.GetOrCompute[*mqlGcpProjectSqlService](&c.Sql, func() (*mqlGcpProjectSqlService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "sql")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectSqlService), nil
			}
		}

		return c.sql()
	})
}

func (c *mqlGcpProject) GetIam() *plugin.TValue[*mqlGcpProjectIamService] {
	return plugin.GetOrCompute[*mqlGcpProjectIamService](&c.Iam, func() (*mqlGcpProjectIamService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "iam")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamService), nil
			}
		}

		return c.iam()
	})
}

func (c *mqlGcpProject) GetCommonInstanceMetadata() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.CommonInstanceMetadata, func() (map[string]interface{}, error) {
		return c.commonInstanceMetadata()
	})
}

func (c *mqlGcpProject) GetDns() *plugin.TValue[*mqlGcpProjectDnsService] {
	return plugin.GetOrCompute[*mqlGcpProjectDnsService](&c.Dns, func() (*mqlGcpProjectDnsService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "dns")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectDnsService), nil
			}
		}

		return c.dns()
	})
}

func (c *mqlGcpProject) GetBigquery() *plugin.TValue[*mqlGcpProjectBigqueryService] {
	return plugin.GetOrCompute[*mqlGcpProjectBigqueryService](&c.Bigquery, func() (*mqlGcpProjectBigqueryService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "bigquery")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectBigqueryService), nil
			}
		}

		return c.bigquery()
	})
}

func (c *mqlGcpProject) GetCloudFunctions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.CloudFunctions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "cloudFunctions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.cloudFunctions()
	})
}

func (c *mqlGcpProject) GetDataproc() *plugin.TValue[*mqlGcpProjectDataprocService] {
	return plugin.GetOrCompute[*mqlGcpProjectDataprocService](&c.Dataproc, func() (*mqlGcpProjectDataprocService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "dataproc")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectDataprocService), nil
			}
		}

		return c.dataproc()
	})
}

func (c *mqlGcpProject) GetCloudRun() *plugin.TValue[*mqlGcpProjectCloudRunService] {
	return plugin.GetOrCompute[*mqlGcpProjectCloudRunService](&c.CloudRun, func() (*mqlGcpProjectCloudRunService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "cloudRun")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectCloudRunService), nil
			}
		}

		return c.cloudRun()
	})
}

func (c *mqlGcpProject) GetAccessApprovalSettings() *plugin.TValue[*mqlGcpAccessApprovalSettings] {
	return plugin.GetOrCompute[*mqlGcpAccessApprovalSettings](&c.AccessApprovalSettings, func() (*mqlGcpAccessApprovalSettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "accessApprovalSettings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpAccessApprovalSettings), nil
			}
		}

		return c.accessApprovalSettings()
	})
}

func (c *mqlGcpProject) GetStorage() *plugin.TValue[*mqlGcpProjectStorageService] {
	return plugin.GetOrCompute[*mqlGcpProjectStorageService](&c.Storage, func() (*mqlGcpProjectStorageService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "storage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectStorageService), nil
			}
		}

		return c.storage()
	})
}

func (c *mqlGcpProject) GetMonitoring() *plugin.TValue[*mqlGcpProjectMonitoringService] {
	return plugin.GetOrCompute[*mqlGcpProjectMonitoringService](&c.Monitoring, func() (*mqlGcpProjectMonitoringService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "monitoring")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectMonitoringService), nil
			}
		}

		return c.monitoring()
	})
}

func (c *mqlGcpProject) GetBinaryAuthorization() *plugin.TValue[*mqlGcpProjectBinaryAuthorizationControl] {
	return plugin.GetOrCompute[*mqlGcpProjectBinaryAuthorizationControl](&c.BinaryAuthorization, func() (*mqlGcpProjectBinaryAuthorizationControl, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "binaryAuthorization")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectBinaryAuthorizationControl), nil
			}
		}

		return c.binaryAuthorization()
	})
}

// mqlGcpService for the gcp.service resource
type mqlGcpService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	ParentName plugin.TValue[string]
	Title plugin.TValue[string]
	State plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpService creates a new instance of this resource
func createGcpService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.service", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpService) MqlName() string {
	return "gcp.service"
}

func (c *mqlGcpService) MqlID() string {
	return c.__id
}

func (c *mqlGcpService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpService) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpService) GetParentName() *plugin.TValue[string] {
	return &c.ParentName
}

func (c *mqlGcpService) GetTitle() *plugin.TValue[string] {
	return &c.Title
}

func (c *mqlGcpService) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpService) GetEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.Enabled, func() (bool, error) {
		return c.enabled()
	})
}

// mqlGcpRecommendation for the gcp.recommendation resource
type mqlGcpRecommendation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpRecommendationInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	ZoneName plugin.TValue[string]
	Name plugin.TValue[string]
	Recommender plugin.TValue[string]
	PrimaryImpact plugin.TValue[interface{}]
	AdditionalImpact plugin.TValue[[]interface{}]
	Content plugin.TValue[interface{}]
	Category plugin.TValue[string]
	Priority plugin.TValue[string]
	LastRefreshTime plugin.TValue[*time.Time]
	State plugin.TValue[interface{}]
}

// createGcpRecommendation creates a new instance of this resource
func createGcpRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpRecommendation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.recommendation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpRecommendation) MqlName() string {
	return "gcp.recommendation"
}

func (c *mqlGcpRecommendation) MqlID() string {
	return c.__id
}

func (c *mqlGcpRecommendation) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpRecommendation) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpRecommendation) GetZoneName() *plugin.TValue[string] {
	return &c.ZoneName
}

func (c *mqlGcpRecommendation) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpRecommendation) GetRecommender() *plugin.TValue[string] {
	return &c.Recommender
}

func (c *mqlGcpRecommendation) GetPrimaryImpact() *plugin.TValue[interface{}] {
	return &c.PrimaryImpact
}

func (c *mqlGcpRecommendation) GetAdditionalImpact() *plugin.TValue[[]interface{}] {
	return &c.AdditionalImpact
}

func (c *mqlGcpRecommendation) GetContent() *plugin.TValue[interface{}] {
	return &c.Content
}

func (c *mqlGcpRecommendation) GetCategory() *plugin.TValue[string] {
	return &c.Category
}

func (c *mqlGcpRecommendation) GetPriority() *plugin.TValue[string] {
	return &c.Priority
}

func (c *mqlGcpRecommendation) GetLastRefreshTime() *plugin.TValue[*time.Time] {
	return &c.LastRefreshTime
}

func (c *mqlGcpRecommendation) GetState() *plugin.TValue[interface{}] {
	return &c.State
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpResourcemanagerBindingInternal it will be used here
	Id plugin.TValue[string]
	Members plugin.TValue[[]interface{}]
	Role plugin.TValue[string]
}

// createGcpResourcemanagerBinding creates a new instance of this resource
func createGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpResourcemanagerBinding{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.resourcemanager.binding", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpResourcemanagerBinding) MqlName() string {
	return "gcp.resourcemanager.binding"
}

func (c *mqlGcpResourcemanagerBinding) MqlID() string {
	return c.__id
}

func (c *mqlGcpResourcemanagerBinding) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpResourcemanagerBinding) GetMembers() *plugin.TValue[[]interface{}] {
	return &c.Members
}

func (c *mqlGcpResourcemanagerBinding) GetRole() *plugin.TValue[string] {
	return &c.Role
}

// mqlGcpProjectComputeService for the gcp.project.computeService resource
type mqlGcpProjectComputeService struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectComputeServiceInternal
	ProjectId plugin.TValue[string]
	Instances plugin.TValue[[]interface{}]
	Snapshots plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
	Images plugin.TValue[[]interface{}]
	Firewalls plugin.TValue[[]interface{}]
	Networks plugin.TValue[[]interface{}]
	Subnetworks plugin.TValue[[]interface{}]
	Routers plugin.TValue[[]interface{}]
	MachineTypes plugin.TValue[[]interface{}]
	Regions plugin.TValue[[]interface{}]
	Zones plugin.TValue[[]interface{}]
	BackendServices plugin.TValue[[]interface{}]
	Addresses plugin.TValue[[]interface{}]
	ForwardingRules plugin.TValue[[]interface{}]
}

// createGcpProjectComputeService creates a new instance of this resource
func createGcpProjectComputeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeService) MqlName() string {
	return "gcp.project.computeService"
}

func (c *mqlGcpProjectComputeService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeService) GetInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Instances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "instances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.instances()
	})
}

func (c *mqlGcpProjectComputeService) GetSnapshots() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Snapshots, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "snapshots")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.snapshots()
	})
}

func (c *mqlGcpProjectComputeService) GetDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Disks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "disks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.disks()
	})
}

func (c *mqlGcpProjectComputeService) GetImages() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Images, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "images")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.images()
	})
}

func (c *mqlGcpProjectComputeService) GetFirewalls() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Firewalls, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "firewalls")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewalls()
	})
}

func (c *mqlGcpProjectComputeService) GetNetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Networks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "networks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.networks()
	})
}

func (c *mqlGcpProjectComputeService) GetSubnetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subnetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "subnetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subnetworks()
	})
}

func (c *mqlGcpProjectComputeService) GetRouters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Routers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "routers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.routers()
	})
}

func (c *mqlGcpProjectComputeService) GetMachineTypes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.MachineTypes, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "machineTypes")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.machineTypes()
	})
}

func (c *mqlGcpProjectComputeService) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "regions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.regions()
	})
}

func (c *mqlGcpProjectComputeService) GetZones() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Zones, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "zones")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.zones()
	})
}

func (c *mqlGcpProjectComputeService) GetBackendServices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BackendServices, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "backendServices")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.backendServices()
	})
}

func (c *mqlGcpProjectComputeService) GetAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Addresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "addresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.addresses()
	})
}

func (c *mqlGcpProjectComputeService) GetForwardingRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ForwardingRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "forwardingRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.forwardingRules()
	})
}

// mqlGcpProjectComputeServiceAddress for the gcp.project.computeService.address resource
type mqlGcpProjectComputeServiceAddress struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceAddressInternal it will be used here
	Id plugin.TValue[string]
	Address plugin.TValue[string]
	AddressType plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Description plugin.TValue[string]
	IpVersion plugin.TValue[string]
	Ipv6EndpointType plugin.TValue[string]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	NetworkTier plugin.TValue[string]
	PrefixLength plugin.TValue[int64]
	Purpose plugin.TValue[string]
	RegionUrl plugin.TValue[string]
	Status plugin.TValue[string]
	SubnetworkUrl plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	ResourceUrls plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceAddress creates a new instance of this resource
func createGcpProjectComputeServiceAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceAddress{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.address", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceAddress) MqlName() string {
	return "gcp.project.computeService.address"
}

func (c *mqlGcpProjectComputeServiceAddress) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceAddress) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceAddress) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlGcpProjectComputeServiceAddress) GetAddressType() *plugin.TValue[string] {
	return &c.AddressType
}

func (c *mqlGcpProjectComputeServiceAddress) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceAddress) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceAddress) GetIpVersion() *plugin.TValue[string] {
	return &c.IpVersion
}

func (c *mqlGcpProjectComputeServiceAddress) GetIpv6EndpointType() *plugin.TValue[string] {
	return &c.Ipv6EndpointType
}

func (c *mqlGcpProjectComputeServiceAddress) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.address", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetworkTier() *plugin.TValue[string] {
	return &c.NetworkTier
}

func (c *mqlGcpProjectComputeServiceAddress) GetPrefixLength() *plugin.TValue[int64] {
	return &c.PrefixLength
}

func (c *mqlGcpProjectComputeServiceAddress) GetPurpose() *plugin.TValue[string] {
	return &c.Purpose
}

func (c *mqlGcpProjectComputeServiceAddress) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceAddress) GetSubnetworkUrl() *plugin.TValue[string] {
	return &c.SubnetworkUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.address", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectComputeServiceAddress) GetResourceUrls() *plugin.TValue[[]interface{}] {
	return &c.ResourceUrls
}

// mqlGcpProjectComputeServiceForwardingRule for the gcp.project.computeService.forwardingRule resource
type mqlGcpProjectComputeServiceForwardingRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceForwardingRuleInternal it will be used here
	Id plugin.TValue[string]
	IpAddress plugin.TValue[string]
	IpProtocol plugin.TValue[string]
	AllPorts plugin.TValue[bool]
	AllowGlobalAccess plugin.TValue[bool]
	BackendService plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Description plugin.TValue[string]
	IpVersion plugin.TValue[string]
	IsMirroringCollector plugin.TValue[bool]
	Labels plugin.TValue[map[string]interface{}]
	LoadBalancingScheme plugin.TValue[string]
	MetadataFilters plugin.TValue[[]interface{}]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	NetworkTier plugin.TValue[string]
	NoAutomateDnsZone plugin.TValue[bool]
	PortRange plugin.TValue[string]
	Ports plugin.TValue[[]interface{}]
	RegionUrl plugin.TValue[string]
	ServiceDirectoryRegistrations plugin.TValue[[]interface{}]
	ServiceLabel plugin.TValue[string]
	ServiceName plugin.TValue[string]
	SubnetworkUrl plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	TargetUrl plugin.TValue[string]
}

// createGcpProjectComputeServiceForwardingRule creates a new instance of this resource
func createGcpProjectComputeServiceForwardingRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceForwardingRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.forwardingRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceForwardingRule) MqlName() string {
	return "gcp.project.computeService.forwardingRule"
}

func (c *mqlGcpProjectComputeServiceForwardingRule) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpProtocol() *plugin.TValue[string] {
	return &c.IpProtocol
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetAllPorts() *plugin.TValue[bool] {
	return &c.AllPorts
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetAllowGlobalAccess() *plugin.TValue[bool] {
	return &c.AllowGlobalAccess
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetBackendService() *plugin.TValue[string] {
	return &c.BackendService
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpVersion() *plugin.TValue[string] {
	return &c.IpVersion
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIsMirroringCollector() *plugin.TValue[bool] {
	return &c.IsMirroringCollector
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetLoadBalancingScheme() *plugin.TValue[string] {
	return &c.LoadBalancingScheme
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetMetadataFilters() *plugin.TValue[[]interface{}] {
	return &c.MetadataFilters
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.forwardingRule", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetworkTier() *plugin.TValue[string] {
	return &c.NetworkTier
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNoAutomateDnsZone() *plugin.TValue[bool] {
	return &c.NoAutomateDnsZone
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetPortRange() *plugin.TValue[string] {
	return &c.PortRange
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetPorts() *plugin.TValue[[]interface{}] {
	return &c.Ports
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceDirectoryRegistrations() *plugin.TValue[[]interface{}] {
	return &c.ServiceDirectoryRegistrations
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceLabel() *plugin.TValue[string] {
	return &c.ServiceLabel
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceName() *plugin.TValue[string] {
	return &c.ServiceName
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetSubnetworkUrl() *plugin.TValue[string] {
	return &c.SubnetworkUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.forwardingRule", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetTargetUrl() *plugin.TValue[string] {
	return &c.TargetUrl
}

// mqlGcpProjectComputeServiceRegion for the gcp.project.computeService.region resource
type mqlGcpProjectComputeServiceRegion struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceRegionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Status plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Quotas plugin.TValue[map[string]interface{}]
	Deprecated plugin.TValue[interface{}]
}

// createGcpProjectComputeServiceRegion creates a new instance of this resource
func createGcpProjectComputeServiceRegion(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceRegion{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.region", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceRegion) MqlName() string {
	return "gcp.project.computeService.region"
}

func (c *mqlGcpProjectComputeServiceRegion) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceRegion) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceRegion) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceRegion) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceRegion) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceRegion) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceRegion) GetQuotas() *plugin.TValue[map[string]interface{}] {
	return &c.Quotas
}

func (c *mqlGcpProjectComputeServiceRegion) GetDeprecated() *plugin.TValue[interface{}] {
	return &c.Deprecated
}

// mqlGcpProjectComputeServiceZone for the gcp.project.computeService.zone resource
type mqlGcpProjectComputeServiceZone struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceZoneInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Status plugin.TValue[string]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceZone creates a new instance of this resource
func createGcpProjectComputeServiceZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceZone{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.zone", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceZone) MqlName() string {
	return "gcp.project.computeService.zone"
}

func (c *mqlGcpProjectComputeServiceZone) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceZone) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceZone) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceZone) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceZone) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceZone) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceMachineType for the gcp.project.computeService.machineType resource
type mqlGcpProjectComputeServiceMachineType struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceMachineTypeInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	GuestCpus plugin.TValue[int64]
	IsSharedCpu plugin.TValue[bool]
	MaximumPersistentDisks plugin.TValue[int64]
	MaximumPersistentDisksSizeGb plugin.TValue[int64]
	MemoryMb plugin.TValue[int64]
	Created plugin.TValue[*time.Time]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
}

// createGcpProjectComputeServiceMachineType creates a new instance of this resource
func createGcpProjectComputeServiceMachineType(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceMachineType{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.machineType", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceMachineType) MqlName() string {
	return "gcp.project.computeService.machineType"
}

func (c *mqlGcpProjectComputeServiceMachineType) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceMachineType) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceMachineType) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceMachineType) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceMachineType) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceMachineType) GetGuestCpus() *plugin.TValue[int64] {
	return &c.GuestCpus
}

func (c *mqlGcpProjectComputeServiceMachineType) GetIsSharedCpu() *plugin.TValue[bool] {
	return &c.IsSharedCpu
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMaximumPersistentDisks() *plugin.TValue[int64] {
	return &c.MaximumPersistentDisks
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMaximumPersistentDisksSizeGb() *plugin.TValue[int64] {
	return &c.MaximumPersistentDisksSizeGb
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMemoryMb() *plugin.TValue[int64] {
	return &c.MemoryMb
}

func (c *mqlGcpProjectComputeServiceMachineType) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceMachineType) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

// mqlGcpProjectComputeServiceInstance for the gcp.project.computeService.instance resource
type mqlGcpProjectComputeServiceInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectComputeServiceInstanceInternal
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	ConfidentialInstanceConfig plugin.TValue[interface{}]
	CanIpForward plugin.TValue[bool]
	CpuPlatform plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	DeletionProtection plugin.TValue[bool]
	EnableDisplay plugin.TValue[bool]
	GuestAccelerators plugin.TValue[[]interface{}]
	Fingerprint plugin.TValue[string]
	Hostname plugin.TValue[string]
	KeyRevocationActionType plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	LastStartTimestamp plugin.TValue[*time.Time]
	LastStopTimestamp plugin.TValue[*time.Time]
	LastSuspendedTimestamp plugin.TValue[*time.Time]
	Metadata plugin.TValue[map[string]interface{}]
	MinCpuPlatform plugin.TValue[string]
	NetworkInterfaces plugin.TValue[[]interface{}]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	ReservationAffinity plugin.TValue[interface{}]
	ResourcePolicies plugin.TValue[[]interface{}]
	PhysicalHostResourceStatus plugin.TValue[string]
	Scheduling plugin.TValue[interface{}]
	EnableIntegrityMonitoring plugin.TValue[bool]
	EnableSecureBoot plugin.TValue[bool]
	EnableVtpm plugin.TValue[bool]
	StartRestricted plugin.TValue[bool]
	Status plugin.TValue[string]
	StatusMessage plugin.TValue[string]
	SourceMachineImage plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	TotalEgressBandwidthTier plugin.TValue[string]
	ServiceAccounts plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
	MachineType plugin.TValue[*mqlGcpProjectComputeServiceMachineType]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
}

// createGcpProjectComputeServiceInstance creates a new instance of this resource
func createGcpProjectComputeServiceInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.instance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceInstance) MqlName() string {
	return "gcp.project.computeService.instance"
}

func (c *mqlGcpProjectComputeServiceInstance) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceInstance) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceInstance) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceInstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceInstance) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceInstance) GetConfidentialInstanceConfig() *plugin.TValue[interface{}] {
	return &c.ConfidentialInstanceConfig
}

func (c *mqlGcpProjectComputeServiceInstance) GetCanIpForward() *plugin.TValue[bool] {
	return &c.CanIpForward
}

func (c *mqlGcpProjectComputeServiceInstance) GetCpuPlatform() *plugin.TValue[string] {
	return &c.CpuPlatform
}

func (c *mqlGcpProjectComputeServiceInstance) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceInstance) GetDeletionProtection() *plugin.TValue[bool] {
	return &c.DeletionProtection
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableDisplay() *plugin.TValue[bool] {
	return &c.EnableDisplay
}

func (c *mqlGcpProjectComputeServiceInstance) GetGuestAccelerators() *plugin.TValue[[]interface{}] {
	return &c.GuestAccelerators
}

func (c *mqlGcpProjectComputeServiceInstance) GetFingerprint() *plugin.TValue[string] {
	return &c.Fingerprint
}

func (c *mqlGcpProjectComputeServiceInstance) GetHostname() *plugin.TValue[string] {
	return &c.Hostname
}

func (c *mqlGcpProjectComputeServiceInstance) GetKeyRevocationActionType() *plugin.TValue[string] {
	return &c.KeyRevocationActionType
}

func (c *mqlGcpProjectComputeServiceInstance) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastStartTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastStartTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastStopTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastStopTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastSuspendedTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastSuspendedTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return &c.Metadata
}

func (c *mqlGcpProjectComputeServiceInstance) GetMinCpuPlatform() *plugin.TValue[string] {
	return &c.MinCpuPlatform
}

func (c *mqlGcpProjectComputeServiceInstance) GetNetworkInterfaces() *plugin.TValue[[]interface{}] {
	return &c.NetworkInterfaces
}

func (c *mqlGcpProjectComputeServiceInstance) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectComputeServiceInstance) GetReservationAffinity() *plugin.TValue[interface{}] {
	return &c.ReservationAffinity
}

func (c *mqlGcpProjectComputeServiceInstance) GetResourcePolicies() *plugin.TValue[[]interface{}] {
	return &c.ResourcePolicies
}

func (c *mqlGcpProjectComputeServiceInstance) GetPhysicalHostResourceStatus() *plugin.TValue[string] {
	return &c.PhysicalHostResourceStatus
}

func (c *mqlGcpProjectComputeServiceInstance) GetScheduling() *plugin.TValue[interface{}] {
	return &c.Scheduling
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableIntegrityMonitoring() *plugin.TValue[bool] {
	return &c.EnableIntegrityMonitoring
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableSecureBoot() *plugin.TValue[bool] {
	return &c.EnableSecureBoot
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableVtpm() *plugin.TValue[bool] {
	return &c.EnableVtpm
}

func (c *mqlGcpProjectComputeServiceInstance) GetStartRestricted() *plugin.TValue[bool] {
	return &c.StartRestricted
}

func (c *mqlGcpProjectComputeServiceInstance) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceInstance) GetStatusMessage() *plugin.TValue[string] {
	return &c.StatusMessage
}

func (c *mqlGcpProjectComputeServiceInstance) GetSourceMachineImage() *plugin.TValue[string] {
	return &c.SourceMachineImage
}

func (c *mqlGcpProjectComputeServiceInstance) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectComputeServiceInstance) GetTotalEgressBandwidthTier() *plugin.TValue[string] {
	return &c.TotalEgressBandwidthTier
}

func (c *mqlGcpProjectComputeServiceInstance) GetServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.ServiceAccounts
}

func (c *mqlGcpProjectComputeServiceInstance) GetDisks() *plugin.TValue[[]interface{}] {
	return &c.Disks
}

func (c *mqlGcpProjectComputeServiceInstance) GetMachineType() *plugin.TValue[*mqlGcpProjectComputeServiceMachineType] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceMachineType](&c.MachineType, func() (*mqlGcpProjectComputeServiceMachineType, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.instance", c.__id, "machineType")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceMachineType), nil
			}
		}

		return c.machineType()
	})
}

func (c *mqlGcpProjectComputeServiceInstance) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

// mqlGcpProjectComputeServiceServiceaccount for the gcp.project.computeService.serviceaccount resource
type mqlGcpProjectComputeServiceServiceaccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceServiceaccountInternal it will be used here
	Email plugin.TValue[string]
	Scopes plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceServiceaccount creates a new instance of this resource
func createGcpProjectComputeServiceServiceaccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceServiceaccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.serviceaccount", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceServiceaccount) MqlName() string {
	return "gcp.project.computeService.serviceaccount"
}

func (c *mqlGcpProjectComputeServiceServiceaccount) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceServiceaccount) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlGcpProjectComputeServiceServiceaccount) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

// mqlGcpProjectComputeServiceDisk for the gcp.project.computeService.disk resource
type mqlGcpProjectComputeServiceDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceDiskInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Architecture plugin.TValue[string]
	Description plugin.TValue[string]
	GuestOsFeatures plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	LastAttachTimestamp plugin.TValue[*time.Time]
	LastDetachTimestamp plugin.TValue[*time.Time]
	Licenses plugin.TValue[[]interface{}]
	LocationHint plugin.TValue[string]
	PhysicalBlockSizeBytes plugin.TValue[int64]
	ProvisionedIops plugin.TValue[int64]
	SizeGb plugin.TValue[int64]
	Status plugin.TValue[string]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
	Created plugin.TValue[*time.Time]
	DiskEncryptionKey plugin.TValue[interface{}]
}

// createGcpProjectComputeServiceDisk creates a new instance of this resource
func createGcpProjectComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.disk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceDisk) MqlName() string {
	return "gcp.project.computeService.disk"
}

func (c *mqlGcpProjectComputeServiceDisk) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceDisk) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceDisk) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceDisk) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceDisk) GetGuestOsFeatures() *plugin.TValue[[]interface{}] {
	return &c.GuestOsFeatures
}

func (c *mqlGcpProjectComputeServiceDisk) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceDisk) GetLastAttachTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastAttachTimestamp
}

func (c *mqlGcpProjectComputeServiceDisk) GetLastDetachTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastDetachTimestamp
}

func (c *mqlGcpProjectComputeServiceDisk) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceDisk) GetLocationHint() *plugin.TValue[string] {
	return &c.LocationHint
}

func (c *mqlGcpProjectComputeServiceDisk) GetPhysicalBlockSizeBytes() *plugin.TValue[int64] {
	return &c.PhysicalBlockSizeBytes
}

func (c *mqlGcpProjectComputeServiceDisk) GetProvisionedIops() *plugin.TValue[int64] {
	return &c.ProvisionedIops
}

func (c *mqlGcpProjectComputeServiceDisk) GetSizeGb() *plugin.TValue[int64] {
	return &c.SizeGb
}

func (c *mqlGcpProjectComputeServiceDisk) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceDisk) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

func (c *mqlGcpProjectComputeServiceDisk) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceDisk) GetDiskEncryptionKey() *plugin.TValue[interface{}] {
	return &c.DiskEncryptionKey
}

// mqlGcpProjectComputeServiceAttachedDisk for the gcp.project.computeService.attachedDisk resource
type mqlGcpProjectComputeServiceAttachedDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectComputeServiceAttachedDiskInternal
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Architecture plugin.TValue[string]
	AutoDelete plugin.TValue[bool]
	Boot plugin.TValue[bool]
	DeviceName plugin.TValue[string]
	DiskSizeGb plugin.TValue[int64]
	ForceAttach plugin.TValue[bool]
	GuestOsFeatures plugin.TValue[[]interface{}]
	Index plugin.TValue[int64]
	Interface plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Mode plugin.TValue[string]
	Source plugin.TValue[*mqlGcpProjectComputeServiceDisk]
	Type plugin.TValue[string]
}

// createGcpProjectComputeServiceAttachedDisk creates a new instance of this resource
func createGcpProjectComputeServiceAttachedDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceAttachedDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.attachedDisk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) MqlName() string {
	return "gcp.project.computeService.attachedDisk"
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetAutoDelete() *plugin.TValue[bool] {
	return &c.AutoDelete
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetBoot() *plugin.TValue[bool] {
	return &c.Boot
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetDeviceName() *plugin.TValue[string] {
	return &c.DeviceName
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetForceAttach() *plugin.TValue[bool] {
	return &c.ForceAttach
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetGuestOsFeatures() *plugin.TValue[[]interface{}] {
	return &c.GuestOsFeatures
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetIndex() *plugin.TValue[int64] {
	return &c.Index
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetInterface() *plugin.TValue[string] {
	return &c.Interface
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetSource() *plugin.TValue[*mqlGcpProjectComputeServiceDisk] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceDisk](&c.Source, func() (*mqlGcpProjectComputeServiceDisk, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.attachedDisk", c.__id, "source")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceDisk), nil
			}
		}

		return c.source()
	})
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectComputeServiceSnapshot for the gcp.project.computeService.snapshot resource
type mqlGcpProjectComputeServiceSnapshot struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSnapshotInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Architecture plugin.TValue[string]
	AutoCreated plugin.TValue[bool]
	ChainName plugin.TValue[string]
	CreationSizeBytes plugin.TValue[int64]
	DiskSizeGb plugin.TValue[int64]
	DownloadBytes plugin.TValue[int64]
	StorageBytes plugin.TValue[int64]
	StorageBytesStatus plugin.TValue[string]
	SnapshotType plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Status plugin.TValue[string]
}

// createGcpProjectComputeServiceSnapshot creates a new instance of this resource
func createGcpProjectComputeServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSnapshot{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.snapshot", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSnapshot) MqlName() string {
	return "gcp.project.computeService.snapshot"
}

func (c *mqlGcpProjectComputeServiceSnapshot) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetAutoCreated() *plugin.TValue[bool] {
	return &c.AutoCreated
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetChainName() *plugin.TValue[string] {
	return &c.ChainName
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetCreationSizeBytes() *plugin.TValue[int64] {
	return &c.CreationSizeBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDownloadBytes() *plugin.TValue[int64] {
	return &c.DownloadBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStorageBytes() *plugin.TValue[int64] {
	return &c.StorageBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStorageBytesStatus() *plugin.TValue[string] {
	return &c.StorageBytesStatus
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetSnapshotType() *plugin.TValue[string] {
	return &c.SnapshotType
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlGcpProjectComputeServiceImage for the gcp.project.computeService.image resource
type mqlGcpProjectComputeServiceImage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceImageInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Architecture plugin.TValue[string]
	ArchiveSizeBytes plugin.TValue[int64]
	DiskSizeGb plugin.TValue[int64]
	Family plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Status plugin.TValue[string]
}

// createGcpProjectComputeServiceImage creates a new instance of this resource
func createGcpProjectComputeServiceImage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceImage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.image", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceImage) MqlName() string {
	return "gcp.project.computeService.image"
}

func (c *mqlGcpProjectComputeServiceImage) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceImage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceImage) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceImage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceImage) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceImage) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceImage) GetArchiveSizeBytes() *plugin.TValue[int64] {
	return &c.ArchiveSizeBytes
}

func (c *mqlGcpProjectComputeServiceImage) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceImage) GetFamily() *plugin.TValue[string] {
	return &c.Family
}

func (c *mqlGcpProjectComputeServiceImage) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceImage) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceImage) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceImage) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlGcpProjectComputeServiceFirewall for the gcp.project.computeService.firewall resource
type mqlGcpProjectComputeServiceFirewall struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceFirewallInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Priority plugin.TValue[int64]
	Direction plugin.TValue[string]
	Disabled plugin.TValue[bool]
	SourceRanges plugin.TValue[[]interface{}]
	SourceServiceAccounts plugin.TValue[[]interface{}]
	SourceTags plugin.TValue[[]interface{}]
	DestinationRanges plugin.TValue[[]interface{}]
	TargetServiceAccounts plugin.TValue[[]interface{}]
	Created plugin.TValue[*time.Time]
	Allowed plugin.TValue[[]interface{}]
	Denied plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceFirewall creates a new instance of this resource
func createGcpProjectComputeServiceFirewall(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceFirewall{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.firewall", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceFirewall) MqlName() string {
	return "gcp.project.computeService.firewall"
}

func (c *mqlGcpProjectComputeServiceFirewall) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceFirewall) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceFirewall) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceFirewall) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceFirewall) GetPriority() *plugin.TValue[int64] {
	return &c.Priority
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDirection() *plugin.TValue[string] {
	return &c.Direction
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceRanges() *plugin.TValue[[]interface{}] {
	return &c.SourceRanges
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.SourceServiceAccounts
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceTags() *plugin.TValue[[]interface{}] {
	return &c.SourceTags
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDestinationRanges() *plugin.TValue[[]interface{}] {
	return &c.DestinationRanges
}

func (c *mqlGcpProjectComputeServiceFirewall) GetTargetServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.TargetServiceAccounts
}

func (c *mqlGcpProjectComputeServiceFirewall) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceFirewall) GetAllowed() *plugin.TValue[[]interface{}] {
	return &c.Allowed
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDenied() *plugin.TValue[[]interface{}] {
	return &c.Denied
}

// mqlGcpProjectComputeServiceNetwork for the gcp.project.computeService.network resource
type mqlGcpProjectComputeServiceNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceNetworkInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	AutoCreateSubnetworks plugin.TValue[bool]
	EnableUlaInternalIpv6 plugin.TValue[bool]
	GatewayIPv4 plugin.TValue[string]
	Mtu plugin.TValue[int64]
	NetworkFirewallPolicyEnforcementOrder plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Peerings plugin.TValue[[]interface{}]
	RoutingMode plugin.TValue[string]
	Mode plugin.TValue[string]
	SubnetworkUrls plugin.TValue[[]interface{}]
	Subnetworks plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceNetwork creates a new instance of this resource
func createGcpProjectComputeServiceNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.network", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceNetwork) MqlName() string {
	return "gcp.project.computeService.network"
}

func (c *mqlGcpProjectComputeServiceNetwork) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceNetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceNetwork) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceNetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceNetwork) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceNetwork) GetAutoCreateSubnetworks() *plugin.TValue[bool] {
	return &c.AutoCreateSubnetworks
}

func (c *mqlGcpProjectComputeServiceNetwork) GetEnableUlaInternalIpv6() *plugin.TValue[bool] {
	return &c.EnableUlaInternalIpv6
}

func (c *mqlGcpProjectComputeServiceNetwork) GetGatewayIPv4() *plugin.TValue[string] {
	return &c.GatewayIPv4
}

func (c *mqlGcpProjectComputeServiceNetwork) GetMtu() *plugin.TValue[int64] {
	return &c.Mtu
}

func (c *mqlGcpProjectComputeServiceNetwork) GetNetworkFirewallPolicyEnforcementOrder() *plugin.TValue[string] {
	return &c.NetworkFirewallPolicyEnforcementOrder
}

func (c *mqlGcpProjectComputeServiceNetwork) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceNetwork) GetPeerings() *plugin.TValue[[]interface{}] {
	return &c.Peerings
}

func (c *mqlGcpProjectComputeServiceNetwork) GetRoutingMode() *plugin.TValue[string] {
	return &c.RoutingMode
}

func (c *mqlGcpProjectComputeServiceNetwork) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlGcpProjectComputeServiceNetwork) GetSubnetworkUrls() *plugin.TValue[[]interface{}] {
	return &c.SubnetworkUrls
}

func (c *mqlGcpProjectComputeServiceNetwork) GetSubnetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subnetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.network", c.__id, "subnetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subnetworks()
	})
}

// mqlGcpProjectComputeServiceSubnetwork for the gcp.project.computeService.subnetwork resource
type mqlGcpProjectComputeServiceSubnetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSubnetworkInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	EnableFlowLogs plugin.TValue[bool]
	ExternalIpv6Prefix plugin.TValue[string]
	Fingerprint plugin.TValue[string]
	GatewayAddress plugin.TValue[string]
	InternalIpv6Prefix plugin.TValue[string]
	IpCidrRange plugin.TValue[string]
	Ipv6AccessType plugin.TValue[string]
	Ipv6CidrRange plugin.TValue[string]
	LogConfig plugin.TValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig]
	PrivateIpGoogleAccess plugin.TValue[bool]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	Purpose plugin.TValue[string]
	Region plugin.TValue[*mqlGcpProjectComputeServiceRegion]
	RegionUrl plugin.TValue[string]
	Role plugin.TValue[string]
	StackType plugin.TValue[string]
	State plugin.TValue[string]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceSubnetwork creates a new instance of this resource
func createGcpProjectComputeServiceSubnetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSubnetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.subnetwork", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSubnetwork) MqlName() string {
	return "gcp.project.computeService.subnetwork"
}

func (c *mqlGcpProjectComputeServiceSubnetwork) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetEnableFlowLogs() *plugin.TValue[bool] {
	return &c.EnableFlowLogs
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetExternalIpv6Prefix() *plugin.TValue[string] {
	return &c.ExternalIpv6Prefix
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetFingerprint() *plugin.TValue[string] {
	return &c.Fingerprint
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetGatewayAddress() *plugin.TValue[string] {
	return &c.GatewayAddress
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetInternalIpv6Prefix() *plugin.TValue[string] {
	return &c.InternalIpv6Prefix
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpCidrRange() *plugin.TValue[string] {
	return &c.IpCidrRange
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpv6AccessType() *plugin.TValue[string] {
	return &c.Ipv6AccessType
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpv6CidrRange() *plugin.TValue[string] {
	return &c.Ipv6CidrRange
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetLogConfig() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig] {
	return &c.LogConfig
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPrivateIpGoogleAccess() *plugin.TValue[bool] {
	return &c.PrivateIpGoogleAccess
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPurpose() *plugin.TValue[string] {
	return &c.Purpose
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRegion() *plugin.TValue[*mqlGcpProjectComputeServiceRegion] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceRegion](&c.Region, func() (*mqlGcpProjectComputeServiceRegion, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.subnetwork", c.__id, "region")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceRegion), nil
			}
		}

		return c.region()
	})
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRole() *plugin.TValue[string] {
	return &c.Role
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetStackType() *plugin.TValue[string] {
	return &c.StackType
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceSubnetworkLogConfig for the gcp.project.computeService.subnetwork.logConfig resource
type mqlGcpProjectComputeServiceSubnetworkLogConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSubnetworkLogConfigInternal it will be used here
	Id plugin.TValue[string]
	AggregationInterval plugin.TValue[string]
	Enable plugin.TValue[bool]
	FilterExpression plugin.TValue[string]
	FlowSampling plugin.TValue[float64]
	Metadata plugin.TValue[string]
	MetadataFields plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceSubnetworkLogConfig creates a new instance of this resource
func createGcpProjectComputeServiceSubnetworkLogConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSubnetworkLogConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.subnetwork.logConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) MqlName() string {
	return "gcp.project.computeService.subnetwork.logConfig"
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetAggregationInterval() *plugin.TValue[string] {
	return &c.AggregationInterval
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetEnable() *plugin.TValue[bool] {
	return &c.Enable
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetFilterExpression() *plugin.TValue[string] {
	return &c.FilterExpression
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetFlowSampling() *plugin.TValue[float64] {
	return &c.FlowSampling
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetMetadata() *plugin.TValue[string] {
	return &c.Metadata
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetMetadataFields() *plugin.TValue[[]interface{}] {
	return &c.MetadataFields
}

// mqlGcpProjectComputeServiceRouter for the gcp.project.computeService.router resource
type mqlGcpProjectComputeServiceRouter struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceRouterInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Bgp plugin.TValue[interface{}]
	BgpPeers plugin.TValue[[]interface{}]
	EncryptedInterconnectRouter plugin.TValue[bool]
	Nats plugin.TValue[[]interface{}]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceRouter creates a new instance of this resource
func createGcpProjectComputeServiceRouter(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceRouter{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.router", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceRouter) MqlName() string {
	return "gcp.project.computeService.router"
}

func (c *mqlGcpProjectComputeServiceRouter) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceRouter) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceRouter) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceRouter) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceRouter) GetBgp() *plugin.TValue[interface{}] {
	return &c.Bgp
}

func (c *mqlGcpProjectComputeServiceRouter) GetBgpPeers() *plugin.TValue[[]interface{}] {
	return &c.BgpPeers
}

func (c *mqlGcpProjectComputeServiceRouter) GetEncryptedInterconnectRouter() *plugin.TValue[bool] {
	return &c.EncryptedInterconnectRouter
}

func (c *mqlGcpProjectComputeServiceRouter) GetNats() *plugin.TValue[[]interface{}] {
	return &c.Nats
}

func (c *mqlGcpProjectComputeServiceRouter) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceBackendService for the gcp.project.computeService.backendService resource
type mqlGcpProjectComputeServiceBackendService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceInternal it will be used here
	Id plugin.TValue[string]
	AffinityCookieTtlSec plugin.TValue[int64]
	Backends plugin.TValue[[]interface{}]
	CdnPolicy plugin.TValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy]
	CircuitBreakers plugin.TValue[interface{}]
	CompressionMode plugin.TValue[string]
	ConnectionDraining plugin.TValue[interface{}]
	ConnectionTrackingPolicy plugin.TValue[interface{}]
	ConsistentHash plugin.TValue[interface{}]
	Created plugin.TValue[*time.Time]
	CustomRequestHeaders plugin.TValue[[]interface{}]
	CustomResponseHeaders plugin.TValue[[]interface{}]
	Description plugin.TValue[string]
	EdgeSecurityPolicy plugin.TValue[string]
	EnableCDN plugin.TValue[bool]
	FailoverPolicy plugin.TValue[interface{}]
	HealthChecks plugin.TValue[[]interface{}]
	Iap plugin.TValue[interface{}]
	LoadBalancingScheme plugin.TValue[string]
	LocalityLbPolicies plugin.TValue[[]interface{}]
	LocalityLbPolicy plugin.TValue[string]
	LogConfig plugin.TValue[interface{}]
	MaxStreamDuration plugin.TValue[*time.Time]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	PortName plugin.TValue[string]
	Protocol plugin.TValue[string]
	RegionUrl plugin.TValue[string]
	SecurityPolicyUrl plugin.TValue[string]
	SecuritySettings plugin.TValue[interface{}]
	ServiceBindingUrls plugin.TValue[[]interface{}]
	SessionAffinity plugin.TValue[string]
	TimeoutSec plugin.TValue[int64]
}

// createGcpProjectComputeServiceBackendService creates a new instance of this resource
func createGcpProjectComputeServiceBackendService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendService) MqlName() string {
	return "gcp.project.computeService.backendService"
}

func (c *mqlGcpProjectComputeServiceBackendService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendService) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendService) GetAffinityCookieTtlSec() *plugin.TValue[int64] {
	return &c.AffinityCookieTtlSec
}

func (c *mqlGcpProjectComputeServiceBackendService) GetBackends() *plugin.TValue[[]interface{}] {
	return &c.Backends
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCdnPolicy() *plugin.TValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy] {
	return &c.CdnPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCircuitBreakers() *plugin.TValue[interface{}] {
	return &c.CircuitBreakers
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCompressionMode() *plugin.TValue[string] {
	return &c.CompressionMode
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConnectionDraining() *plugin.TValue[interface{}] {
	return &c.ConnectionDraining
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConnectionTrackingPolicy() *plugin.TValue[interface{}] {
	return &c.ConnectionTrackingPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConsistentHash() *plugin.TValue[interface{}] {
	return &c.ConsistentHash
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCustomRequestHeaders() *plugin.TValue[[]interface{}] {
	return &c.CustomRequestHeaders
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCustomResponseHeaders() *plugin.TValue[[]interface{}] {
	return &c.CustomResponseHeaders
}

func (c *mqlGcpProjectComputeServiceBackendService) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceBackendService) GetEdgeSecurityPolicy() *plugin.TValue[string] {
	return &c.EdgeSecurityPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetEnableCDN() *plugin.TValue[bool] {
	return &c.EnableCDN
}

func (c *mqlGcpProjectComputeServiceBackendService) GetFailoverPolicy() *plugin.TValue[interface{}] {
	return &c.FailoverPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetHealthChecks() *plugin.TValue[[]interface{}] {
	return &c.HealthChecks
}

func (c *mqlGcpProjectComputeServiceBackendService) GetIap() *plugin.TValue[interface{}] {
	return &c.Iap
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLoadBalancingScheme() *plugin.TValue[string] {
	return &c.LoadBalancingScheme
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLocalityLbPolicies() *plugin.TValue[[]interface{}] {
	return &c.LocalityLbPolicies
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLocalityLbPolicy() *plugin.TValue[string] {
	return &c.LocalityLbPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLogConfig() *plugin.TValue[interface{}] {
	return &c.LogConfig
}

func (c *mqlGcpProjectComputeServiceBackendService) GetMaxStreamDuration() *plugin.TValue[*time.Time] {
	return &c.MaxStreamDuration
}

func (c *mqlGcpProjectComputeServiceBackendService) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceBackendService) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetPortName() *plugin.TValue[string] {
	return &c.PortName
}

func (c *mqlGcpProjectComputeServiceBackendService) GetProtocol() *plugin.TValue[string] {
	return &c.Protocol
}

func (c *mqlGcpProjectComputeServiceBackendService) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSecurityPolicyUrl() *plugin.TValue[string] {
	return &c.SecurityPolicyUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSecuritySettings() *plugin.TValue[interface{}] {
	return &c.SecuritySettings
}

func (c *mqlGcpProjectComputeServiceBackendService) GetServiceBindingUrls() *plugin.TValue[[]interface{}] {
	return &c.ServiceBindingUrls
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSessionAffinity() *plugin.TValue[string] {
	return &c.SessionAffinity
}

func (c *mqlGcpProjectComputeServiceBackendService) GetTimeoutSec() *plugin.TValue[int64] {
	return &c.TimeoutSec
}

// mqlGcpProjectComputeServiceBackendServiceBackend for the gcp.project.computeService.backendService.backend resource
type mqlGcpProjectComputeServiceBackendServiceBackend struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceBackendInternal it will be used here
	Id plugin.TValue[string]
	BalancingMode plugin.TValue[string]
	CapacityScaler plugin.TValue[float64]
	Description plugin.TValue[string]
	Failover plugin.TValue[bool]
	GroupUrl plugin.TValue[string]
	MaxConnections plugin.TValue[int64]
	MaxConnectionsPerEndpoint plugin.TValue[int64]
	MaxConnectionsPerInstance plugin.TValue[int64]
	MaxRate plugin.TValue[int64]
	MaxRatePerEndpoint plugin.TValue[float64]
	MaxRatePerInstance plugin.TValue[float64]
	MaxUtilization plugin.TValue[float64]
}

// createGcpProjectComputeServiceBackendServiceBackend creates a new instance of this resource
func createGcpProjectComputeServiceBackendServiceBackend(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendServiceBackend{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService.backend", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) MqlName() string {
	return "gcp.project.computeService.backendService.backend"
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetBalancingMode() *plugin.TValue[string] {
	return &c.BalancingMode
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetCapacityScaler() *plugin.TValue[float64] {
	return &c.CapacityScaler
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetFailover() *plugin.TValue[bool] {
	return &c.Failover
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetGroupUrl() *plugin.TValue[string] {
	return &c.GroupUrl
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnections() *plugin.TValue[int64] {
	return &c.MaxConnections
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnectionsPerEndpoint() *plugin.TValue[int64] {
	return &c.MaxConnectionsPerEndpoint
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnectionsPerInstance() *plugin.TValue[int64] {
	return &c.MaxConnectionsPerInstance
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRate() *plugin.TValue[int64] {
	return &c.MaxRate
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRatePerEndpoint() *plugin.TValue[float64] {
	return &c.MaxRatePerEndpoint
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRatePerInstance() *plugin.TValue[float64] {
	return &c.MaxRatePerInstance
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxUtilization() *plugin.TValue[float64] {
	return &c.MaxUtilization
}

// mqlGcpProjectComputeServiceBackendServiceCdnPolicy for the gcp.project.computeService.backendService.cdnPolicy resource
type mqlGcpProjectComputeServiceBackendServiceCdnPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceCdnPolicyInternal it will be used here
	Id plugin.TValue[string]
	BypassCacheOnRequestHeaders plugin.TValue[[]interface{}]
	CacheKeyPolicy plugin.TValue[interface{}]
	CacheMode plugin.TValue[string]
	ClientTtl plugin.TValue[int64]
	DefaultTtl plugin.TValue[int64]
	MaxTtl plugin.TValue[int64]
	NegativeCaching plugin.TValue[bool]
	NegativeCachingPolicy plugin.TValue[[]interface{}]
	RequestCoalescing plugin.TValue[bool]
	ServeWhileStale plugin.TValue[int64]
	SignedUrlCacheMaxAgeSec plugin.TValue[int64]
	SignedUrlKeyNames plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceBackendServiceCdnPolicy creates a new instance of this resource
func createGcpProjectComputeServiceBackendServiceCdnPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendServiceCdnPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService.cdnPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) MqlName() string {
	return "gcp.project.computeService.backendService.cdnPolicy"
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetBypassCacheOnRequestHeaders() *plugin.TValue[[]interface{}] {
	return &c.BypassCacheOnRequestHeaders
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetCacheKeyPolicy() *plugin.TValue[interface{}] {
	return &c.CacheKeyPolicy
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetCacheMode() *plugin.TValue[string] {
	return &c.CacheMode
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetClientTtl() *plugin.TValue[int64] {
	return &c.ClientTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetDefaultTtl() *plugin.TValue[int64] {
	return &c.DefaultTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetMaxTtl() *plugin.TValue[int64] {
	return &c.MaxTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetNegativeCaching() *plugin.TValue[bool] {
	return &c.NegativeCaching
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetNegativeCachingPolicy() *plugin.TValue[[]interface{}] {
	return &c.NegativeCachingPolicy
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetRequestCoalescing() *plugin.TValue[bool] {
	return &c.RequestCoalescing
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetServeWhileStale() *plugin.TValue[int64] {
	return &c.ServeWhileStale
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetSignedUrlCacheMaxAgeSec() *plugin.TValue[int64] {
	return &c.SignedUrlCacheMaxAgeSec
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetSignedUrlKeyNames() *plugin.TValue[[]interface{}] {
	return &c.SignedUrlKeyNames
}

// mqlGcpProjectStorageService for the gcp.project.storageService resource
type mqlGcpProjectStorageService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectStorageServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Buckets plugin.TValue[[]interface{}]
}

// createGcpProjectStorageService creates a new instance of this resource
func createGcpProjectStorageService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectStorageService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.storageService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectStorageService) MqlName() string {
	return "gcp.project.storageService"
}

func (c *mqlGcpProjectStorageService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectStorageService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectStorageService) GetBuckets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Buckets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.storageService", c.__id, "buckets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.buckets()
	})
}

// mqlGcpProjectStorageServiceBucket for the gcp.project.storageService.bucket resource
type mqlGcpProjectStorageServiceBucket struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectStorageServiceBucketInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Location plugin.TValue[string]
	LocationType plugin.TValue[string]
	ProjectNumber plugin.TValue[string]
	StorageClass plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	IamPolicy plugin.TValue[[]interface{}]
	IamConfiguration plugin.TValue[interface{}]
	RetentionPolicy plugin.TValue[interface{}]
}

// createGcpProjectStorageServiceBucket creates a new instance of this resource
func createGcpProjectStorageServiceBucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectStorageServiceBucket{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.storageService.bucket", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectStorageServiceBucket) MqlName() string {
	return "gcp.project.storageService.bucket"
}

func (c *mqlGcpProjectStorageServiceBucket) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectStorageServiceBucket) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectStorageServiceBucket) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectStorageServiceBucket) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectStorageServiceBucket) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectStorageServiceBucket) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectStorageServiceBucket) GetLocationType() *plugin.TValue[string] {
	return &c.LocationType
}

func (c *mqlGcpProjectStorageServiceBucket) GetProjectNumber() *plugin.TValue[string] {
	return &c.ProjectNumber
}

func (c *mqlGcpProjectStorageServiceBucket) GetStorageClass() *plugin.TValue[string] {
	return &c.StorageClass
}

func (c *mqlGcpProjectStorageServiceBucket) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectStorageServiceBucket) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpProjectStorageServiceBucket) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.storageService.bucket", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

func (c *mqlGcpProjectStorageServiceBucket) GetIamConfiguration() *plugin.TValue[interface{}] {
	return &c.IamConfiguration
}

func (c *mqlGcpProjectStorageServiceBucket) GetRetentionPolicy() *plugin.TValue[interface{}] {
	return &c.RetentionPolicy
}

// mqlGcpProjectSqlService for the gcp.project.sqlService resource
type mqlGcpProjectSqlService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Instances plugin.TValue[[]interface{}]
}

// createGcpProjectSqlService creates a new instance of this resource
func createGcpProjectSqlService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlService) MqlName() string {
	return "gcp.project.sqlService"
}

func (c *mqlGcpProjectSqlService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectSqlService) GetInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Instances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.sqlService", c.__id, "instances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.instances()
	})
}

// mqlGcpProjectSqlServiceInstance for the gcp.project.sqlService.instance resource
type mqlGcpProjectSqlServiceInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceInternal it will be used here
	ProjectId plugin.TValue[string]
	AvailableMaintenanceVersions plugin.TValue[[]interface{}]
	BackendType plugin.TValue[string]
	ConnectionName plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	CurrentDiskSize plugin.TValue[int64]
	DatabaseInstalledVersion plugin.TValue[string]
	DatabaseVersion plugin.TValue[string]
	DiskEncryptionConfiguration plugin.TValue[interface{}]
	DiskEncryptionStatus plugin.TValue[interface{}]
	FailoverReplica plugin.TValue[interface{}]
	GceZone plugin.TValue[string]
	InstanceType plugin.TValue[string]
	IpAddresses plugin.TValue[[]interface{}]
	MaintenanceVersion plugin.TValue[string]
	MasterInstanceName plugin.TValue[string]
	MaxDiskSize plugin.TValue[int64]
	Name plugin.TValue[string]
	Project plugin.TValue[string]
	Region plugin.TValue[string]
	ReplicaNames plugin.TValue[[]interface{}]
	Settings plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettings]
	ServiceAccountEmailAddress plugin.TValue[string]
	State plugin.TValue[string]
	Databases plugin.TValue[[]interface{}]
}

// createGcpProjectSqlServiceInstance creates a new instance of this resource
func createGcpProjectSqlServiceInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstance) MqlName() string {
	return "gcp.project.sqlService.instance"
}

func (c *mqlGcpProjectSqlServiceInstance) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstance) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectSqlServiceInstance) GetAvailableMaintenanceVersions() *plugin.TValue[[]interface{}] {
	return &c.AvailableMaintenanceVersions
}

func (c *mqlGcpProjectSqlServiceInstance) GetBackendType() *plugin.TValue[string] {
	return &c.BackendType
}

func (c *mqlGcpProjectSqlServiceInstance) GetConnectionName() *plugin.TValue[string] {
	return &c.ConnectionName
}

func (c *mqlGcpProjectSqlServiceInstance) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectSqlServiceInstance) GetCurrentDiskSize() *plugin.TValue[int64] {
	return &c.CurrentDiskSize
}

func (c *mqlGcpProjectSqlServiceInstance) GetDatabaseInstalledVersion() *plugin.TValue[string] {
	return &c.DatabaseInstalledVersion
}

func (c *mqlGcpProjectSqlServiceInstance) GetDatabaseVersion() *plugin.TValue[string] {
	return &c.DatabaseVersion
}

func (c *mqlGcpProjectSqlServiceInstance) GetDiskEncryptionConfiguration() *plugin.TValue[interface{}] {
	return &c.DiskEncryptionConfiguration
}

func (c *mqlGcpProjectSqlServiceInstance) GetDiskEncryptionStatus() *plugin.TValue[interface{}] {
	return &c.DiskEncryptionStatus
}

func (c *mqlGcpProjectSqlServiceInstance) GetFailoverReplica() *plugin.TValue[interface{}] {
	return &c.FailoverReplica
}

func (c *mqlGcpProjectSqlServiceInstance) GetGceZone() *plugin.TValue[string] {
	return &c.GceZone
}

func (c *mqlGcpProjectSqlServiceInstance) GetInstanceType() *plugin.TValue[string] {
	return &c.InstanceType
}

func (c *mqlGcpProjectSqlServiceInstance) GetIpAddresses() *plugin.TValue[[]interface{}] {
	return &c.IpAddresses
}

func (c *mqlGcpProjectSqlServiceInstance) GetMaintenanceVersion() *plugin.TValue[string] {
	return &c.MaintenanceVersion
}

func (c *mqlGcpProjectSqlServiceInstance) GetMasterInstanceName() *plugin.TValue[string] {
	return &c.MasterInstanceName
}

func (c *mqlGcpProjectSqlServiceInstance) GetMaxDiskSize() *plugin.TValue[int64] {
	return &c.MaxDiskSize
}

func (c *mqlGcpProjectSqlServiceInstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectSqlServiceInstance) GetProject() *plugin.TValue[string] {
	return &c.Project
}

func (c *mqlGcpProjectSqlServiceInstance) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlGcpProjectSqlServiceInstance) GetReplicaNames() *plugin.TValue[[]interface{}] {
	return &c.ReplicaNames
}

func (c *mqlGcpProjectSqlServiceInstance) GetSettings() *plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettings] {
	return &c.Settings
}

func (c *mqlGcpProjectSqlServiceInstance) GetServiceAccountEmailAddress() *plugin.TValue[string] {
	return &c.ServiceAccountEmailAddress
}

func (c *mqlGcpProjectSqlServiceInstance) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectSqlServiceInstance) GetDatabases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Databases, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.sqlService.instance", c.__id, "databases")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.databases()
	})
}

// mqlGcpProjectSqlServiceInstanceDatabase for the gcp.project.sqlService.instance.database resource
type mqlGcpProjectSqlServiceInstanceDatabase struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceDatabaseInternal it will be used here
	ProjectId plugin.TValue[string]
	Charset plugin.TValue[string]
	Collation plugin.TValue[string]
	Instance plugin.TValue[string]
	Name plugin.TValue[string]
	SqlserverDatabaseDetails plugin.TValue[interface{}]
}

// createGcpProjectSqlServiceInstanceDatabase creates a new instance of this resource
func createGcpProjectSqlServiceInstanceDatabase(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceDatabase{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.database", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) MqlName() string {
	return "gcp.project.sqlService.instance.database"
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetCharset() *plugin.TValue[string] {
	return &c.Charset
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetInstance() *plugin.TValue[string] {
	return &c.Instance
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectSqlServiceInstanceDatabase) GetSqlserverDatabaseDetails() *plugin.TValue[interface{}] {
	return &c.SqlserverDatabaseDetails
}

// mqlGcpProjectSqlServiceInstanceIpMapping for the gcp.project.sqlService.instance.ipMapping resource
type mqlGcpProjectSqlServiceInstanceIpMapping struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceIpMappingInternal it will be used here
	Id plugin.TValue[string]
	IpAddress plugin.TValue[string]
	TimeToRetire plugin.TValue[*time.Time]
	Type plugin.TValue[string]
}

// createGcpProjectSqlServiceInstanceIpMapping creates a new instance of this resource
func createGcpProjectSqlServiceInstanceIpMapping(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceIpMapping{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.ipMapping", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) MqlName() string {
	return "gcp.project.sqlService.instance.ipMapping"
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) GetTimeToRetire() *plugin.TValue[*time.Time] {
	return &c.TimeToRetire
}

func (c *mqlGcpProjectSqlServiceInstanceIpMapping) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectSqlServiceInstanceSettings for the gcp.project.sqlService.instance.settings resource
type mqlGcpProjectSqlServiceInstanceSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsInternal it will be used here
	ProjectId plugin.TValue[string]
	InstanceName plugin.TValue[string]
	ActivationPolicy plugin.TValue[string]
	ActiveDirectoryConfig plugin.TValue[interface{}]
	AvailabilityType plugin.TValue[string]
	BackupConfiguration plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration]
	Collation plugin.TValue[string]
	ConnectorEnforcement plugin.TValue[string]
	CrashSafeReplicationEnabled plugin.TValue[bool]
	DataDiskSizeGb plugin.TValue[int64]
	DataDiskType plugin.TValue[string]
	DatabaseFlags plugin.TValue[map[string]interface{}]
	DatabaseReplicationEnabled plugin.TValue[bool]
	DeletionProtectionEnabled plugin.TValue[bool]
	DenyMaintenancePeriods plugin.TValue[[]interface{}]
	InsightsConfig plugin.TValue[interface{}]
	IpConfiguration plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration]
	LocationPreference plugin.TValue[interface{}]
	MaintenanceWindow plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow]
	PasswordValidationPolicy plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy]
	PricingPlan plugin.TValue[string]
	ReplicationType plugin.TValue[string]
	SettingsVersion plugin.TValue[int64]
	SqlServerAuditConfig plugin.TValue[interface{}]
	StorageAutoResize plugin.TValue[bool]
	StorageAutoResizeLimit plugin.TValue[int64]
	Tier plugin.TValue[string]
	TimeZone plugin.TValue[string]
	UserLabels plugin.TValue[map[string]interface{}]
}

// createGcpProjectSqlServiceInstanceSettings creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) MqlName() string {
	return "gcp.project.sqlService.instance.settings"
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetInstanceName() *plugin.TValue[string] {
	return &c.InstanceName
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetActivationPolicy() *plugin.TValue[string] {
	return &c.ActivationPolicy
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetActiveDirectoryConfig() *plugin.TValue[interface{}] {
	return &c.ActiveDirectoryConfig
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetAvailabilityType() *plugin.TValue[string] {
	return &c.AvailabilityType
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetBackupConfiguration() *plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration] {
	return &c.BackupConfiguration
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetCollation() *plugin.TValue[string] {
	return &c.Collation
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetConnectorEnforcement() *plugin.TValue[string] {
	return &c.ConnectorEnforcement
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetCrashSafeReplicationEnabled() *plugin.TValue[bool] {
	return &c.CrashSafeReplicationEnabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDataDiskSizeGb() *plugin.TValue[int64] {
	return &c.DataDiskSizeGb
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDataDiskType() *plugin.TValue[string] {
	return &c.DataDiskType
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDatabaseFlags() *plugin.TValue[map[string]interface{}] {
	return &c.DatabaseFlags
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDatabaseReplicationEnabled() *plugin.TValue[bool] {
	return &c.DatabaseReplicationEnabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDeletionProtectionEnabled() *plugin.TValue[bool] {
	return &c.DeletionProtectionEnabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetDenyMaintenancePeriods() *plugin.TValue[[]interface{}] {
	return &c.DenyMaintenancePeriods
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetInsightsConfig() *plugin.TValue[interface{}] {
	return &c.InsightsConfig
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetIpConfiguration() *plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration] {
	return &c.IpConfiguration
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetLocationPreference() *plugin.TValue[interface{}] {
	return &c.LocationPreference
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetMaintenanceWindow() *plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow] {
	return &c.MaintenanceWindow
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetPasswordValidationPolicy() *plugin.TValue[*mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy] {
	return &c.PasswordValidationPolicy
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetPricingPlan() *plugin.TValue[string] {
	return &c.PricingPlan
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetReplicationType() *plugin.TValue[string] {
	return &c.ReplicationType
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetSettingsVersion() *plugin.TValue[int64] {
	return &c.SettingsVersion
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetSqlServerAuditConfig() *plugin.TValue[interface{}] {
	return &c.SqlServerAuditConfig
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetStorageAutoResize() *plugin.TValue[bool] {
	return &c.StorageAutoResize
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetStorageAutoResizeLimit() *plugin.TValue[int64] {
	return &c.StorageAutoResizeLimit
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetTier() *plugin.TValue[string] {
	return &c.Tier
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetTimeZone() *plugin.TValue[string] {
	return &c.TimeZone
}

func (c *mqlGcpProjectSqlServiceInstanceSettings) GetUserLabels() *plugin.TValue[map[string]interface{}] {
	return &c.UserLabels
}

// mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration for the gcp.project.sqlService.instance.settings.backupconfiguration resource
type mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsBackupconfigurationInternal it will be used here
	Id plugin.TValue[string]
	BackupRetentionSettings plugin.TValue[interface{}]
	BinaryLogEnabled plugin.TValue[bool]
	Enabled plugin.TValue[bool]
	Location plugin.TValue[string]
	PointInTimeRecoveryEnabled plugin.TValue[bool]
	StartTime plugin.TValue[string]
	TransactionLogRetentionDays plugin.TValue[int64]
}

// createGcpProjectSqlServiceInstanceSettingsBackupconfiguration creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettingsBackupconfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings.backupconfiguration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) MqlName() string {
	return "gcp.project.sqlService.instance.settings.backupconfiguration"
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetBackupRetentionSettings() *plugin.TValue[interface{}] {
	return &c.BackupRetentionSettings
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetBinaryLogEnabled() *plugin.TValue[bool] {
	return &c.BinaryLogEnabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetPointInTimeRecoveryEnabled() *plugin.TValue[bool] {
	return &c.PointInTimeRecoveryEnabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetStartTime() *plugin.TValue[string] {
	return &c.StartTime
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsBackupconfiguration) GetTransactionLogRetentionDays() *plugin.TValue[int64] {
	return &c.TransactionLogRetentionDays
}

// mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod for the gcp.project.sqlService.instance.settings.denyMaintenancePeriod resource
type mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriodInternal it will be used here
	Id plugin.TValue[string]
	EndDate plugin.TValue[string]
	StartDate plugin.TValue[string]
	Time plugin.TValue[string]
}

// createGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings.denyMaintenancePeriod", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) MqlName() string {
	return "gcp.project.sqlService.instance.settings.denyMaintenancePeriod"
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) GetEndDate() *plugin.TValue[string] {
	return &c.EndDate
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) GetStartDate() *plugin.TValue[string] {
	return &c.StartDate
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsDenyMaintenancePeriod) GetTime() *plugin.TValue[string] {
	return &c.Time
}

// mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration for the gcp.project.sqlService.instance.settings.ipConfiguration resource
type mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsIpConfigurationInternal it will be used here
	Id plugin.TValue[string]
	AllocatedIpRange plugin.TValue[string]
	AuthorizedNetworks plugin.TValue[[]interface{}]
	Ipv4Enabled plugin.TValue[bool]
	PrivateNetwork plugin.TValue[string]
	RequireSsl plugin.TValue[bool]
}

// createGcpProjectSqlServiceInstanceSettingsIpConfiguration creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettingsIpConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings.ipConfiguration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) MqlName() string {
	return "gcp.project.sqlService.instance.settings.ipConfiguration"
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetAllocatedIpRange() *plugin.TValue[string] {
	return &c.AllocatedIpRange
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetAuthorizedNetworks() *plugin.TValue[[]interface{}] {
	return &c.AuthorizedNetworks
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetIpv4Enabled() *plugin.TValue[bool] {
	return &c.Ipv4Enabled
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetPrivateNetwork() *plugin.TValue[string] {
	return &c.PrivateNetwork
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsIpConfiguration) GetRequireSsl() *plugin.TValue[bool] {
	return &c.RequireSsl
}

// mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow for the gcp.project.sqlService.instance.settings.maintenanceWindow resource
type mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindowInternal it will be used here
	Id plugin.TValue[string]
	Day plugin.TValue[int64]
	Hour plugin.TValue[int64]
	UpdateTrack plugin.TValue[string]
}

// createGcpProjectSqlServiceInstanceSettingsMaintenanceWindow creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettingsMaintenanceWindow(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings.maintenanceWindow", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) MqlName() string {
	return "gcp.project.sqlService.instance.settings.maintenanceWindow"
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) GetDay() *plugin.TValue[int64] {
	return &c.Day
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) GetHour() *plugin.TValue[int64] {
	return &c.Hour
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsMaintenanceWindow) GetUpdateTrack() *plugin.TValue[string] {
	return &c.UpdateTrack
}

// mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy for the gcp.project.sqlService.instance.settings.passwordValidationPolicy resource
type mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicyInternal it will be used here
	Id plugin.TValue[string]
	Complexity plugin.TValue[string]
	DisallowUsernameSubstring plugin.TValue[bool]
	EnabledPasswordPolicy plugin.TValue[bool]
	MinLength plugin.TValue[int64]
	PasswordChangeInterval plugin.TValue[string]
	ReuseInterval plugin.TValue[int64]
}

// createGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy creates a new instance of this resource
func createGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.sqlService.instance.settings.passwordValidationPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) MqlName() string {
	return "gcp.project.sqlService.instance.settings.passwordValidationPolicy"
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetComplexity() *plugin.TValue[string] {
	return &c.Complexity
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetDisallowUsernameSubstring() *plugin.TValue[bool] {
	return &c.DisallowUsernameSubstring
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetEnabledPasswordPolicy() *plugin.TValue[bool] {
	return &c.EnabledPasswordPolicy
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetMinLength() *plugin.TValue[int64] {
	return &c.MinLength
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetPasswordChangeInterval() *plugin.TValue[string] {
	return &c.PasswordChangeInterval
}

func (c *mqlGcpProjectSqlServiceInstanceSettingsPasswordValidationPolicy) GetReuseInterval() *plugin.TValue[int64] {
	return &c.ReuseInterval
}

// mqlGcpProjectBigqueryService for the gcp.project.bigqueryService resource
type mqlGcpProjectBigqueryService struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectBigqueryServiceInternal
	ProjectId plugin.TValue[string]
	Datasets plugin.TValue[[]interface{}]
}

// createGcpProjectBigqueryService creates a new instance of this resource
func createGcpProjectBigqueryService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryService) MqlName() string {
	return "gcp.project.bigqueryService"
}

func (c *mqlGcpProjectBigqueryService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectBigqueryService) GetDatasets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Datasets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.bigqueryService", c.__id, "datasets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.datasets()
	})
}

// mqlGcpProjectBigqueryServiceDataset for the gcp.project.bigqueryService.dataset resource
type mqlGcpProjectBigqueryServiceDataset struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBigqueryServiceDatasetInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Location plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Modified plugin.TValue[*time.Time]
	Tags plugin.TValue[map[string]interface{}]
	KmsName plugin.TValue[string]
	Access plugin.TValue[[]interface{}]
	Tables plugin.TValue[[]interface{}]
	Models plugin.TValue[[]interface{}]
	Routines plugin.TValue[[]interface{}]
}

// createGcpProjectBigqueryServiceDataset creates a new instance of this resource
func createGcpProjectBigqueryServiceDataset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryServiceDataset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService.dataset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryServiceDataset) MqlName() string {
	return "gcp.project.bigqueryService.dataset"
}

func (c *mqlGcpProjectBigqueryServiceDataset) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetModified() *plugin.TValue[*time.Time] {
	return &c.Modified
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetKmsName() *plugin.TValue[string] {
	return &c.KmsName
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetAccess() *plugin.TValue[[]interface{}] {
	return &c.Access
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetTables() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Tables, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.bigqueryService.dataset", c.__id, "tables")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.tables()
	})
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetModels() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Models, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.bigqueryService.dataset", c.__id, "models")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.models()
	})
}

func (c *mqlGcpProjectBigqueryServiceDataset) GetRoutines() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Routines, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.bigqueryService.dataset", c.__id, "routines")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.routines()
	})
}

// mqlGcpProjectBigqueryServiceDatasetAccessEntry for the gcp.project.bigqueryService.dataset.accessEntry resource
type mqlGcpProjectBigqueryServiceDatasetAccessEntry struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBigqueryServiceDatasetAccessEntryInternal it will be used here
	Id plugin.TValue[string]
	DatasetId plugin.TValue[string]
	Role plugin.TValue[string]
	EntityType plugin.TValue[string]
	Entity plugin.TValue[string]
	ViewRef plugin.TValue[interface{}]
	RoutineRef plugin.TValue[interface{}]
	DatasetRef plugin.TValue[interface{}]
}

// createGcpProjectBigqueryServiceDatasetAccessEntry creates a new instance of this resource
func createGcpProjectBigqueryServiceDatasetAccessEntry(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryServiceDatasetAccessEntry{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService.dataset.accessEntry", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) MqlName() string {
	return "gcp.project.bigqueryService.dataset.accessEntry"
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetDatasetId() *plugin.TValue[string] {
	return &c.DatasetId
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetRole() *plugin.TValue[string] {
	return &c.Role
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetEntityType() *plugin.TValue[string] {
	return &c.EntityType
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetEntity() *plugin.TValue[string] {
	return &c.Entity
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetViewRef() *plugin.TValue[interface{}] {
	return &c.ViewRef
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetRoutineRef() *plugin.TValue[interface{}] {
	return &c.RoutineRef
}

func (c *mqlGcpProjectBigqueryServiceDatasetAccessEntry) GetDatasetRef() *plugin.TValue[interface{}] {
	return &c.DatasetRef
}

// mqlGcpProjectBigqueryServiceTable for the gcp.project.bigqueryService.table resource
type mqlGcpProjectBigqueryServiceTable struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBigqueryServiceTableInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	DatasetId plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Description plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	UseLegacySQL plugin.TValue[bool]
	RequirePartitionFilter plugin.TValue[bool]
	Created plugin.TValue[*time.Time]
	Modified plugin.TValue[*time.Time]
	NumBytes plugin.TValue[int64]
	NumLongTermBytes plugin.TValue[int64]
	NumRows plugin.TValue[int64]
	Type plugin.TValue[string]
	ExpirationTime plugin.TValue[*time.Time]
	KmsName plugin.TValue[string]
	SnapshotTime plugin.TValue[*time.Time]
	ViewQuery plugin.TValue[string]
	ClusteringFields plugin.TValue[interface{}]
	ExternalDataConfig plugin.TValue[interface{}]
	MaterializedView plugin.TValue[interface{}]
	RangePartitioning plugin.TValue[interface{}]
	TimePartitioning plugin.TValue[interface{}]
	Schema plugin.TValue[[]interface{}]
}

// createGcpProjectBigqueryServiceTable creates a new instance of this resource
func createGcpProjectBigqueryServiceTable(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryServiceTable{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService.table", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryServiceTable) MqlName() string {
	return "gcp.project.bigqueryService.table"
}

func (c *mqlGcpProjectBigqueryServiceTable) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryServiceTable) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectBigqueryServiceTable) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectBigqueryServiceTable) GetDatasetId() *plugin.TValue[string] {
	return &c.DatasetId
}

func (c *mqlGcpProjectBigqueryServiceTable) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectBigqueryServiceTable) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectBigqueryServiceTable) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectBigqueryServiceTable) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectBigqueryServiceTable) GetUseLegacySQL() *plugin.TValue[bool] {
	return &c.UseLegacySQL
}

func (c *mqlGcpProjectBigqueryServiceTable) GetRequirePartitionFilter() *plugin.TValue[bool] {
	return &c.RequirePartitionFilter
}

func (c *mqlGcpProjectBigqueryServiceTable) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectBigqueryServiceTable) GetModified() *plugin.TValue[*time.Time] {
	return &c.Modified
}

func (c *mqlGcpProjectBigqueryServiceTable) GetNumBytes() *plugin.TValue[int64] {
	return &c.NumBytes
}

func (c *mqlGcpProjectBigqueryServiceTable) GetNumLongTermBytes() *plugin.TValue[int64] {
	return &c.NumLongTermBytes
}

func (c *mqlGcpProjectBigqueryServiceTable) GetNumRows() *plugin.TValue[int64] {
	return &c.NumRows
}

func (c *mqlGcpProjectBigqueryServiceTable) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlGcpProjectBigqueryServiceTable) GetExpirationTime() *plugin.TValue[*time.Time] {
	return &c.ExpirationTime
}

func (c *mqlGcpProjectBigqueryServiceTable) GetKmsName() *plugin.TValue[string] {
	return &c.KmsName
}

func (c *mqlGcpProjectBigqueryServiceTable) GetSnapshotTime() *plugin.TValue[*time.Time] {
	return &c.SnapshotTime
}

func (c *mqlGcpProjectBigqueryServiceTable) GetViewQuery() *plugin.TValue[string] {
	return &c.ViewQuery
}

func (c *mqlGcpProjectBigqueryServiceTable) GetClusteringFields() *plugin.TValue[interface{}] {
	return &c.ClusteringFields
}

func (c *mqlGcpProjectBigqueryServiceTable) GetExternalDataConfig() *plugin.TValue[interface{}] {
	return &c.ExternalDataConfig
}

func (c *mqlGcpProjectBigqueryServiceTable) GetMaterializedView() *plugin.TValue[interface{}] {
	return &c.MaterializedView
}

func (c *mqlGcpProjectBigqueryServiceTable) GetRangePartitioning() *plugin.TValue[interface{}] {
	return &c.RangePartitioning
}

func (c *mqlGcpProjectBigqueryServiceTable) GetTimePartitioning() *plugin.TValue[interface{}] {
	return &c.TimePartitioning
}

func (c *mqlGcpProjectBigqueryServiceTable) GetSchema() *plugin.TValue[[]interface{}] {
	return &c.Schema
}

// mqlGcpProjectBigqueryServiceModel for the gcp.project.bigqueryService.model resource
type mqlGcpProjectBigqueryServiceModel struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBigqueryServiceModelInternal it will be used here
	Id plugin.TValue[string]
	DatasetId plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Location plugin.TValue[string]
	Description plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Modified plugin.TValue[*time.Time]
	Type plugin.TValue[string]
	ExpirationTime plugin.TValue[*time.Time]
	KmsName plugin.TValue[string]
}

// createGcpProjectBigqueryServiceModel creates a new instance of this resource
func createGcpProjectBigqueryServiceModel(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryServiceModel{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService.model", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryServiceModel) MqlName() string {
	return "gcp.project.bigqueryService.model"
}

func (c *mqlGcpProjectBigqueryServiceModel) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryServiceModel) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectBigqueryServiceModel) GetDatasetId() *plugin.TValue[string] {
	return &c.DatasetId
}

func (c *mqlGcpProjectBigqueryServiceModel) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectBigqueryServiceModel) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectBigqueryServiceModel) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectBigqueryServiceModel) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectBigqueryServiceModel) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectBigqueryServiceModel) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectBigqueryServiceModel) GetModified() *plugin.TValue[*time.Time] {
	return &c.Modified
}

func (c *mqlGcpProjectBigqueryServiceModel) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlGcpProjectBigqueryServiceModel) GetExpirationTime() *plugin.TValue[*time.Time] {
	return &c.ExpirationTime
}

func (c *mqlGcpProjectBigqueryServiceModel) GetKmsName() *plugin.TValue[string] {
	return &c.KmsName
}

// mqlGcpProjectBigqueryServiceRoutine for the gcp.project.bigqueryService.routine resource
type mqlGcpProjectBigqueryServiceRoutine struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBigqueryServiceRoutineInternal it will be used here
	Id plugin.TValue[string]
	DatasetId plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Language plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Modified plugin.TValue[*time.Time]
	Type plugin.TValue[string]
}

// createGcpProjectBigqueryServiceRoutine creates a new instance of this resource
func createGcpProjectBigqueryServiceRoutine(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBigqueryServiceRoutine{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.bigqueryService.routine", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBigqueryServiceRoutine) MqlName() string {
	return "gcp.project.bigqueryService.routine"
}

func (c *mqlGcpProjectBigqueryServiceRoutine) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetDatasetId() *plugin.TValue[string] {
	return &c.DatasetId
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetLanguage() *plugin.TValue[string] {
	return &c.Language
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetModified() *plugin.TValue[*time.Time] {
	return &c.Modified
}

func (c *mqlGcpProjectBigqueryServiceRoutine) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectDnsService for the gcp.project.dnsService resource
type mqlGcpProjectDnsService struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectDnsServiceInternal
	ProjectId plugin.TValue[string]
	ManagedZones plugin.TValue[[]interface{}]
	Policies plugin.TValue[[]interface{}]
}

// createGcpProjectDnsService creates a new instance of this resource
func createGcpProjectDnsService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDnsService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dnsService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDnsService) MqlName() string {
	return "gcp.project.dnsService"
}

func (c *mqlGcpProjectDnsService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDnsService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDnsService) GetManagedZones() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ManagedZones, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dnsService", c.__id, "managedZones")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.managedZones()
	})
}

func (c *mqlGcpProjectDnsService) GetPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Policies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dnsService", c.__id, "policies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.policies()
	})
}

// mqlGcpProjectDnsServiceManagedzone for the gcp.project.dnsService.managedzone resource
type mqlGcpProjectDnsServiceManagedzone struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDnsServiceManagedzoneInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	DnssecConfig plugin.TValue[interface{}]
	DnsName plugin.TValue[string]
	NameServerSet plugin.TValue[string]
	NameServers plugin.TValue[[]interface{}]
	Visibility plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	RecordSets plugin.TValue[[]interface{}]
}

// createGcpProjectDnsServiceManagedzone creates a new instance of this resource
func createGcpProjectDnsServiceManagedzone(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDnsServiceManagedzone{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dnsService.managedzone", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDnsServiceManagedzone) MqlName() string {
	return "gcp.project.dnsService.managedzone"
}

func (c *mqlGcpProjectDnsServiceManagedzone) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetDnssecConfig() *plugin.TValue[interface{}] {
	return &c.DnssecConfig
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetDnsName() *plugin.TValue[string] {
	return &c.DnsName
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetNameServerSet() *plugin.TValue[string] {
	return &c.NameServerSet
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetNameServers() *plugin.TValue[[]interface{}] {
	return &c.NameServers
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetVisibility() *plugin.TValue[string] {
	return &c.Visibility
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectDnsServiceManagedzone) GetRecordSets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RecordSets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dnsService.managedzone", c.__id, "recordSets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.recordSets()
	})
}

// mqlGcpProjectDnsServiceRecordset for the gcp.project.dnsService.recordset resource
type mqlGcpProjectDnsServiceRecordset struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDnsServiceRecordsetInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Rrdatas plugin.TValue[[]interface{}]
	SignatureRrdatas plugin.TValue[[]interface{}]
	Ttl plugin.TValue[int64]
	Type plugin.TValue[string]
}

// createGcpProjectDnsServiceRecordset creates a new instance of this resource
func createGcpProjectDnsServiceRecordset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDnsServiceRecordset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dnsService.recordset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDnsServiceRecordset) MqlName() string {
	return "gcp.project.dnsService.recordset"
}

func (c *mqlGcpProjectDnsServiceRecordset) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDnsServiceRecordset) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDnsServiceRecordset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectDnsServiceRecordset) GetRrdatas() *plugin.TValue[[]interface{}] {
	return &c.Rrdatas
}

func (c *mqlGcpProjectDnsServiceRecordset) GetSignatureRrdatas() *plugin.TValue[[]interface{}] {
	return &c.SignatureRrdatas
}

func (c *mqlGcpProjectDnsServiceRecordset) GetTtl() *plugin.TValue[int64] {
	return &c.Ttl
}

func (c *mqlGcpProjectDnsServiceRecordset) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectDnsServicePolicy for the gcp.project.dnsService.policy resource
type mqlGcpProjectDnsServicePolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDnsServicePolicyInternal it will be used here
	ProjectId plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	EnableInboundForwarding plugin.TValue[bool]
	EnableLogging plugin.TValue[bool]
	NetworkNames plugin.TValue[[]interface{}]
	Networks plugin.TValue[[]interface{}]
}

// createGcpProjectDnsServicePolicy creates a new instance of this resource
func createGcpProjectDnsServicePolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDnsServicePolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dnsService.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDnsServicePolicy) MqlName() string {
	return "gcp.project.dnsService.policy"
}

func (c *mqlGcpProjectDnsServicePolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDnsServicePolicy) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDnsServicePolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDnsServicePolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectDnsServicePolicy) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectDnsServicePolicy) GetEnableInboundForwarding() *plugin.TValue[bool] {
	return &c.EnableInboundForwarding
}

func (c *mqlGcpProjectDnsServicePolicy) GetEnableLogging() *plugin.TValue[bool] {
	return &c.EnableLogging
}

func (c *mqlGcpProjectDnsServicePolicy) GetNetworkNames() *plugin.TValue[[]interface{}] {
	return &c.NetworkNames
}

func (c *mqlGcpProjectDnsServicePolicy) GetNetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Networks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dnsService.policy", c.__id, "networks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.networks()
	})
}

// mqlGcpProjectGkeService for the gcp.project.gkeService resource
type mqlGcpProjectGkeService struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectGkeServiceInternal
	ProjectId plugin.TValue[string]
	Clusters plugin.TValue[[]interface{}]
}

// createGcpProjectGkeService creates a new instance of this resource
func createGcpProjectGkeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeService) MqlName() string {
	return "gcp.project.gkeService"
}

func (c *mqlGcpProjectGkeService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeService) GetClusters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Clusters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService", c.__id, "clusters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.clusters()
	})
}

// mqlGcpProjectGkeServiceCluster for the gcp.project.gkeService.cluster resource
type mqlGcpProjectGkeServiceCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterInternal it will be used here
	ProjectId plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	LoggingService plugin.TValue[string]
	MonitoringService plugin.TValue[string]
	Network plugin.TValue[string]
	ClusterIpv4Cidr plugin.TValue[string]
	Subnetwork plugin.TValue[string]
	NodePools plugin.TValue[[]interface{}]
	Locations plugin.TValue[[]interface{}]
	EnableKubernetesAlpha plugin.TValue[bool]
	AutopilotEnabled plugin.TValue[bool]
	Zone plugin.TValue[string]
	Location plugin.TValue[string]
	Endpoint plugin.TValue[string]
	InitialClusterVersion plugin.TValue[string]
	CurrentMasterVersion plugin.TValue[string]
	Status plugin.TValue[string]
	ResourceLabels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	ExpirationTime plugin.TValue[*time.Time]
	AddonsConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterAddonsConfig]
	WorkloadIdentityConfig plugin.TValue[interface{}]
	IpAllocationPolicy plugin.TValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy]
	NetworkConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNetworkConfig]
	BinaryAuthorization plugin.TValue[interface{}]
	LegacyAbac plugin.TValue[interface{}]
	MasterAuth plugin.TValue[interface{}]
	MasterAuthorizedNetworksConfig plugin.TValue[interface{}]
	PrivateClusterConfig plugin.TValue[interface{}]
	DatabaseEncryption plugin.TValue[interface{}]
	ShieldedNodesConfig plugin.TValue[interface{}]
	CostManagementConfig plugin.TValue[interface{}]
	ConfidentialNodesConfig plugin.TValue[interface{}]
	IdentityServiceConfig plugin.TValue[interface{}]
	NetworkPolicyConfig plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceCluster creates a new instance of this resource
func createGcpProjectGkeServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceCluster) MqlName() string {
	return "gcp.project.gkeService.cluster"
}

func (c *mqlGcpProjectGkeServiceCluster) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceCluster) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeServiceCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceCluster) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectGkeServiceCluster) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectGkeServiceCluster) GetLoggingService() *plugin.TValue[string] {
	return &c.LoggingService
}

func (c *mqlGcpProjectGkeServiceCluster) GetMonitoringService() *plugin.TValue[string] {
	return &c.MonitoringService
}

func (c *mqlGcpProjectGkeServiceCluster) GetNetwork() *plugin.TValue[string] {
	return &c.Network
}

func (c *mqlGcpProjectGkeServiceCluster) GetClusterIpv4Cidr() *plugin.TValue[string] {
	return &c.ClusterIpv4Cidr
}

func (c *mqlGcpProjectGkeServiceCluster) GetSubnetwork() *plugin.TValue[string] {
	return &c.Subnetwork
}

func (c *mqlGcpProjectGkeServiceCluster) GetNodePools() *plugin.TValue[[]interface{}] {
	return &c.NodePools
}

func (c *mqlGcpProjectGkeServiceCluster) GetLocations() *plugin.TValue[[]interface{}] {
	return &c.Locations
}

func (c *mqlGcpProjectGkeServiceCluster) GetEnableKubernetesAlpha() *plugin.TValue[bool] {
	return &c.EnableKubernetesAlpha
}

func (c *mqlGcpProjectGkeServiceCluster) GetAutopilotEnabled() *plugin.TValue[bool] {
	return &c.AutopilotEnabled
}

func (c *mqlGcpProjectGkeServiceCluster) GetZone() *plugin.TValue[string] {
	return &c.Zone
}

func (c *mqlGcpProjectGkeServiceCluster) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectGkeServiceCluster) GetEndpoint() *plugin.TValue[string] {
	return &c.Endpoint
}

func (c *mqlGcpProjectGkeServiceCluster) GetInitialClusterVersion() *plugin.TValue[string] {
	return &c.InitialClusterVersion
}

func (c *mqlGcpProjectGkeServiceCluster) GetCurrentMasterVersion() *plugin.TValue[string] {
	return &c.CurrentMasterVersion
}

func (c *mqlGcpProjectGkeServiceCluster) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectGkeServiceCluster) GetResourceLabels() *plugin.TValue[map[string]interface{}] {
	return &c.ResourceLabels
}

func (c *mqlGcpProjectGkeServiceCluster) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectGkeServiceCluster) GetExpirationTime() *plugin.TValue[*time.Time] {
	return &c.ExpirationTime
}

func (c *mqlGcpProjectGkeServiceCluster) GetAddonsConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterAddonsConfig] {
	return &c.AddonsConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetWorkloadIdentityConfig() *plugin.TValue[interface{}] {
	return &c.WorkloadIdentityConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetIpAllocationPolicy() *plugin.TValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy] {
	return &c.IpAllocationPolicy
}

func (c *mqlGcpProjectGkeServiceCluster) GetNetworkConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNetworkConfig] {
	return &c.NetworkConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetBinaryAuthorization() *plugin.TValue[interface{}] {
	return &c.BinaryAuthorization
}

func (c *mqlGcpProjectGkeServiceCluster) GetLegacyAbac() *plugin.TValue[interface{}] {
	return &c.LegacyAbac
}

func (c *mqlGcpProjectGkeServiceCluster) GetMasterAuth() *plugin.TValue[interface{}] {
	return &c.MasterAuth
}

func (c *mqlGcpProjectGkeServiceCluster) GetMasterAuthorizedNetworksConfig() *plugin.TValue[interface{}] {
	return &c.MasterAuthorizedNetworksConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetPrivateClusterConfig() *plugin.TValue[interface{}] {
	return &c.PrivateClusterConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetDatabaseEncryption() *plugin.TValue[interface{}] {
	return &c.DatabaseEncryption
}

func (c *mqlGcpProjectGkeServiceCluster) GetShieldedNodesConfig() *plugin.TValue[interface{}] {
	return &c.ShieldedNodesConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetCostManagementConfig() *plugin.TValue[interface{}] {
	return &c.CostManagementConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetConfidentialNodesConfig() *plugin.TValue[interface{}] {
	return &c.ConfidentialNodesConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetIdentityServiceConfig() *plugin.TValue[interface{}] {
	return &c.IdentityServiceConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetNetworkPolicyConfig() *plugin.TValue[interface{}] {
	return &c.NetworkPolicyConfig
}

// mqlGcpProjectGkeServiceClusterAddonsConfig for the gcp.project.gkeService.cluster.addonsConfig resource
type mqlGcpProjectGkeServiceClusterAddonsConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterAddonsConfigInternal it will be used here
	Id plugin.TValue[string]
	HttpLoadBalancing plugin.TValue[interface{}]
	HorizontalPodAutoscaling plugin.TValue[interface{}]
	KubernetesDashboard plugin.TValue[interface{}]
	NetworkPolicyConfig plugin.TValue[interface{}]
	CloudRunConfig plugin.TValue[interface{}]
	DnsCacheConfig plugin.TValue[interface{}]
	ConfigConnectorConfig plugin.TValue[interface{}]
	GcePersistentDiskCsiDriverConfig plugin.TValue[interface{}]
	GcpFilestoreCsiDriverConfig plugin.TValue[interface{}]
	GkeBackupAgentConfig plugin.TValue[interface{}]
	GcsFuseCsiDriverConfig plugin.TValue[interface{}]
	StatefulHaConfig plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceClusterAddonsConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterAddonsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterAddonsConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.addonsConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.addonsConfig"
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetHttpLoadBalancing() *plugin.TValue[interface{}] {
	return &c.HttpLoadBalancing
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetHorizontalPodAutoscaling() *plugin.TValue[interface{}] {
	return &c.HorizontalPodAutoscaling
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetKubernetesDashboard() *plugin.TValue[interface{}] {
	return &c.KubernetesDashboard
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetNetworkPolicyConfig() *plugin.TValue[interface{}] {
	return &c.NetworkPolicyConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetCloudRunConfig() *plugin.TValue[interface{}] {
	return &c.CloudRunConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetDnsCacheConfig() *plugin.TValue[interface{}] {
	return &c.DnsCacheConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetConfigConnectorConfig() *plugin.TValue[interface{}] {
	return &c.ConfigConnectorConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGcePersistentDiskCsiDriverConfig() *plugin.TValue[interface{}] {
	return &c.GcePersistentDiskCsiDriverConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGcpFilestoreCsiDriverConfig() *plugin.TValue[interface{}] {
	return &c.GcpFilestoreCsiDriverConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGkeBackupAgentConfig() *plugin.TValue[interface{}] {
	return &c.GkeBackupAgentConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGcsFuseCsiDriverConfig() *plugin.TValue[interface{}] {
	return &c.GcsFuseCsiDriverConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetStatefulHaConfig() *plugin.TValue[interface{}] {
	return &c.StatefulHaConfig
}

// mqlGcpProjectGkeServiceClusterIpAllocationPolicy for the gcp.project.gkeService.cluster.ipAllocationPolicy resource
type mqlGcpProjectGkeServiceClusterIpAllocationPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterIpAllocationPolicyInternal it will be used here
	Id plugin.TValue[string]
	UseIpAliases plugin.TValue[bool]
	CreateSubnetwork plugin.TValue[bool]
	SubnetworkName plugin.TValue[string]
	ClusterSecondaryRangeName plugin.TValue[string]
	ServicesSecondaryRangeName plugin.TValue[string]
	ClusterIpv4CidrBlock plugin.TValue[string]
	NodeIpv4CidrBlock plugin.TValue[string]
	ServicesIpv4CidrBlock plugin.TValue[string]
	TpuIpv4CidrBlock plugin.TValue[string]
	UseRoutes plugin.TValue[bool]
	StackType plugin.TValue[string]
	Ipv6AccessType plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterIpAllocationPolicy creates a new instance of this resource
func createGcpProjectGkeServiceClusterIpAllocationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterIpAllocationPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.ipAllocationPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) MqlName() string {
	return "gcp.project.gkeService.cluster.ipAllocationPolicy"
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetUseIpAliases() *plugin.TValue[bool] {
	return &c.UseIpAliases
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetCreateSubnetwork() *plugin.TValue[bool] {
	return &c.CreateSubnetwork
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetSubnetworkName() *plugin.TValue[string] {
	return &c.SubnetworkName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetClusterSecondaryRangeName() *plugin.TValue[string] {
	return &c.ClusterSecondaryRangeName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetServicesSecondaryRangeName() *plugin.TValue[string] {
	return &c.ServicesSecondaryRangeName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetClusterIpv4CidrBlock() *plugin.TValue[string] {
	return &c.ClusterIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetNodeIpv4CidrBlock() *plugin.TValue[string] {
	return &c.NodeIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetServicesIpv4CidrBlock() *plugin.TValue[string] {
	return &c.ServicesIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetTpuIpv4CidrBlock() *plugin.TValue[string] {
	return &c.TpuIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetUseRoutes() *plugin.TValue[bool] {
	return &c.UseRoutes
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetStackType() *plugin.TValue[string] {
	return &c.StackType
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetIpv6AccessType() *plugin.TValue[string] {
	return &c.Ipv6AccessType
}

// mqlGcpProjectGkeServiceClusterNetworkConfig for the gcp.project.gkeService.cluster.networkConfig resource
type mqlGcpProjectGkeServiceClusterNetworkConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNetworkConfigInternal it will be used here
	Id plugin.TValue[string]
	NetworkPath plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	SubnetworkPath plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	EnableIntraNodeVisibility plugin.TValue[bool]
	DefaultSnatStatus plugin.TValue[interface{}]
	EnableL4IlbSubsetting plugin.TValue[bool]
	DatapathProvider plugin.TValue[string]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	DnsConfig plugin.TValue[interface{}]
	ServiceExternalIpsConfig plugin.TValue[interface{}]
	EnableMultiNetworking plugin.TValue[bool]
	EnableFqdnNetworkPolicy plugin.TValue[bool]
	EnableCiliumClusterwideNetworkPolicy plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNetworkConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNetworkConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.networkConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetNetworkPath() *plugin.TValue[string] {
	return &c.NetworkPath
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetSubnetworkPath() *plugin.TValue[string] {
	return &c.SubnetworkPath
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableIntraNodeVisibility() *plugin.TValue[bool] {
	return &c.EnableIntraNodeVisibility
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDefaultSnatStatus() *plugin.TValue[interface{}] {
	return &c.DefaultSnatStatus
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableL4IlbSubsetting() *plugin.TValue[bool] {
	return &c.EnableL4IlbSubsetting
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDatapathProvider() *plugin.TValue[string] {
	return &c.DatapathProvider
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDnsConfig() *plugin.TValue[interface{}] {
	return &c.DnsConfig
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetServiceExternalIpsConfig() *plugin.TValue[interface{}] {
	return &c.ServiceExternalIpsConfig
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableMultiNetworking() *plugin.TValue[bool] {
	return &c.EnableMultiNetworking
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableFqdnNetworkPolicy() *plugin.TValue[bool] {
	return &c.EnableFqdnNetworkPolicy
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableCiliumClusterwideNetworkPolicy() *plugin.TValue[bool] {
	return &c.EnableCiliumClusterwideNetworkPolicy
}

// mqlGcpProjectGkeServiceClusterNodepool for the gcp.project.gkeService.cluster.nodepool resource
type mqlGcpProjectGkeServiceClusterNodepool struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Config plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig]
	InitialNodeCount plugin.TValue[int64]
	Locations plugin.TValue[[]interface{}]
	NetworkConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig]
	Version plugin.TValue[string]
	InstanceGroupUrls plugin.TValue[[]interface{}]
	Status plugin.TValue[string]
	Management plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceClusterNodepool creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepool(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepool{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool"
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig] {
	return &c.Config
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetInitialNodeCount() *plugin.TValue[int64] {
	return &c.InitialNodeCount
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetLocations() *plugin.TValue[[]interface{}] {
	return &c.Locations
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetNetworkConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig] {
	return &c.NetworkConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetInstanceGroupUrls() *plugin.TValue[[]interface{}] {
	return &c.InstanceGroupUrls
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetManagement() *plugin.TValue[interface{}] {
	return &c.Management
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigInternal it will be used here
	Id plugin.TValue[string]
	PodRange plugin.TValue[string]
	PodIpv4CidrBlock plugin.TValue[string]
	PerformanceConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig]
}

// createGcpProjectGkeServiceClusterNodepoolNetworkConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.networkConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.networkConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPodRange() *plugin.TValue[string] {
	return &c.PodRange
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPodIpv4CidrBlock() *plugin.TValue[string] {
	return &c.PodIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPerformanceConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig] {
	return &c.PerformanceConfig
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfigInternal it will be used here
	Id plugin.TValue[string]
	TotalEgressBandwidthTier plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) GetTotalEgressBandwidthTier() *plugin.TValue[string] {
	return &c.TotalEgressBandwidthTier
}

// mqlGcpProjectGkeServiceClusterNodepoolConfig for the gcp.project.gkeService.cluster.nodepool.config resource
type mqlGcpProjectGkeServiceClusterNodepoolConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	MachineType plugin.TValue[string]
	DiskSizeGb plugin.TValue[int64]
	OauthScopes plugin.TValue[[]interface{}]
	ServiceAccountEmail plugin.TValue[string]
	ServiceAccount plugin.TValue[*mqlGcpProjectIamServiceServiceAccount]
	Metadata plugin.TValue[map[string]interface{}]
	ImageType plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	LocalSsdCount plugin.TValue[int64]
	Tags plugin.TValue[[]interface{}]
	Preemptible plugin.TValue[bool]
	Accelerators plugin.TValue[[]interface{}]
	DiskType plugin.TValue[string]
	MinCpuPlatform plugin.TValue[string]
	WorkloadMetadataMode plugin.TValue[string]
	Taints plugin.TValue[[]interface{}]
	SandboxConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig]
	ShieldedInstanceConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig]
	LinuxNodeConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig]
	KubeletConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig]
	BootDiskKmsKey plugin.TValue[string]
	GcfsConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig]
	AdvancedMachineFeatures plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures]
	GvnicConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig]
	Spot plugin.TValue[bool]
	ConfidentialNodes plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes]
}

// createGcpProjectGkeServiceClusterNodepoolConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMachineType() *plugin.TValue[string] {
	return &c.MachineType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetOauthScopes() *plugin.TValue[[]interface{}] {
	return &c.OauthScopes
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetServiceAccount() *plugin.TValue[*mqlGcpProjectIamServiceServiceAccount] {
	return plugin.GetOrCompute[*mqlGcpProjectIamServiceServiceAccount](&c.ServiceAccount, func() (*mqlGcpProjectIamServiceServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config", c.__id, "serviceAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamServiceServiceAccount), nil
			}
		}

		return c.serviceAccount()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return &c.Metadata
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetImageType() *plugin.TValue[string] {
	return &c.ImageType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLocalSsdCount() *plugin.TValue[int64] {
	return &c.LocalSsdCount
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetPreemptible() *plugin.TValue[bool] {
	return &c.Preemptible
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetAccelerators() *plugin.TValue[[]interface{}] {
	return &c.Accelerators
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetDiskType() *plugin.TValue[string] {
	return &c.DiskType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMinCpuPlatform() *plugin.TValue[string] {
	return &c.MinCpuPlatform
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetWorkloadMetadataMode() *plugin.TValue[string] {
	return &c.WorkloadMetadataMode
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetTaints() *plugin.TValue[[]interface{}] {
	return &c.Taints
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetSandboxConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig] {
	return &c.SandboxConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetShieldedInstanceConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig] {
	return &c.ShieldedInstanceConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLinuxNodeConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig] {
	return &c.LinuxNodeConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetKubeletConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig] {
	return &c.KubeletConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetBootDiskKmsKey() *plugin.TValue[string] {
	return &c.BootDiskKmsKey
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetGcfsConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig] {
	return &c.GcfsConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetAdvancedMachineFeatures() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures] {
	return &c.AdvancedMachineFeatures
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetGvnicConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig] {
	return &c.GvnicConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetSpot() *plugin.TValue[bool] {
	return &c.Spot
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetConfidentialNodes() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes] {
	return &c.ConfidentialNodes
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator for the gcp.project.gkeService.cluster.nodepool.config.accelerator resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorInternal it will be used here
	Id plugin.TValue[string]
	Count plugin.TValue[int64]
	Type plugin.TValue[string]
	GpuPartitionSize plugin.TValue[string]
	GpuSharingConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAccelerator creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAccelerator(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.accelerator", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.accelerator"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetCount() *plugin.TValue[int64] {
	return &c.Count
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetGpuPartitionSize() *plugin.TValue[string] {
	return &c.GpuPartitionSize
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetGpuSharingConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig] {
	return &c.GpuSharingConfig
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig for the gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfigInternal it will be used here
	Id plugin.TValue[string]
	MaxSharedClientsPerGpu plugin.TValue[int64]
	Strategy plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetMaxSharedClientsPerGpu() *plugin.TValue[int64] {
	return &c.MaxSharedClientsPerGpu
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetStrategy() *plugin.TValue[string] {
	return &c.Strategy
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint for the gcp.project.gkeService.cluster.nodepool.config.nodeTaint resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaintInternal it will be used here
	Id plugin.TValue[string]
	Key plugin.TValue[string]
	Value plugin.TValue[string]
	Effect plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.nodeTaint", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.nodeTaint"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetEffect() *plugin.TValue[string] {
	return &c.Effect
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig for the gcp.project.gkeService.cluster.nodepool.config.sandboxConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfigInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.sandboxConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig for the gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfigInternal it will be used here
	Id plugin.TValue[string]
	EnableSecureBoot plugin.TValue[bool]
	EnableIntegrityMonitoring plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetEnableSecureBoot() *plugin.TValue[bool] {
	return &c.EnableSecureBoot
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetEnableIntegrityMonitoring() *plugin.TValue[bool] {
	return &c.EnableIntegrityMonitoring
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig for the gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfigInternal it will be used here
	Id plugin.TValue[string]
	Sysctls plugin.TValue[map[string]interface{}]
}

// createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) GetSysctls() *plugin.TValue[map[string]interface{}] {
	return &c.Sysctls
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig for the gcp.project.gkeService.cluster.nodepool.config.kubeletConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfigInternal it will be used here
	Id plugin.TValue[string]
	CpuManagerPolicy plugin.TValue[string]
	CpuCfsQuotaPeriod plugin.TValue[string]
	PodPidsLimit plugin.TValue[int64]
}

// createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.kubeletConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetCpuManagerPolicy() *plugin.TValue[string] {
	return &c.CpuManagerPolicy
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetCpuCfsQuotaPeriod() *plugin.TValue[string] {
	return &c.CpuCfsQuotaPeriod
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetPodPidsLimit() *plugin.TValue[int64] {
	return &c.PodPidsLimit
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig for the gcp.project.gkeService.cluster.nodepool.config.gcfsConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfigInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.gcfsConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures for the gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeaturesInternal it will be used here
	Id plugin.TValue[string]
	ThreadsPerCore plugin.TValue[int64]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) GetThreadsPerCore() *plugin.TValue[int64] {
	return &c.ThreadsPerCore
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig for the gcp.project.gkeService.cluster.nodepool.config.gvnicConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfigInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.gvnicConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes for the gcp.project.gkeService.cluster.nodepool.config.confidentialNodes resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodesInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.confidentialNodes"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectPubsubService for the gcp.project.pubsubService resource
type mqlGcpProjectPubsubService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Topics plugin.TValue[[]interface{}]
	Subscriptions plugin.TValue[[]interface{}]
	Snapshots plugin.TValue[[]interface{}]
}

// createGcpProjectPubsubService creates a new instance of this resource
func createGcpProjectPubsubService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubService) MqlName() string {
	return "gcp.project.pubsubService"
}

func (c *mqlGcpProjectPubsubService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubService) GetTopics() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Topics, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.pubsubService", c.__id, "topics")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.topics()
	})
}

func (c *mqlGcpProjectPubsubService) GetSubscriptions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subscriptions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.pubsubService", c.__id, "subscriptions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subscriptions()
	})
}

func (c *mqlGcpProjectPubsubService) GetSnapshots() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Snapshots, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.pubsubService", c.__id, "snapshots")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.snapshots()
	})
}

// mqlGcpProjectPubsubServiceTopic for the gcp.project.pubsubService.topic resource
type mqlGcpProjectPubsubServiceTopic struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceTopicInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Config plugin.TValue[*mqlGcpProjectPubsubServiceTopicConfig]
}

// createGcpProjectPubsubServiceTopic creates a new instance of this resource
func createGcpProjectPubsubServiceTopic(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceTopic{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.topic", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceTopic) MqlName() string {
	return "gcp.project.pubsubService.topic"
}

func (c *mqlGcpProjectPubsubServiceTopic) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceTopic) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubServiceTopic) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectPubsubServiceTopic) GetConfig() *plugin.TValue[*mqlGcpProjectPubsubServiceTopicConfig] {
	return plugin.GetOrCompute[*mqlGcpProjectPubsubServiceTopicConfig](&c.Config, func() (*mqlGcpProjectPubsubServiceTopicConfig, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.pubsubService.topic", c.__id, "config")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectPubsubServiceTopicConfig), nil
			}
		}

		return c.config()
	})
}

// mqlGcpProjectPubsubServiceTopicConfig for the gcp.project.pubsubService.topic.config resource
type mqlGcpProjectPubsubServiceTopicConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceTopicConfigInternal it will be used here
	ProjectId plugin.TValue[string]
	TopicName plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	KmsKeyName plugin.TValue[string]
	MessageStoragePolicy plugin.TValue[*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy]
}

// createGcpProjectPubsubServiceTopicConfig creates a new instance of this resource
func createGcpProjectPubsubServiceTopicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceTopicConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.topic.config", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) MqlName() string {
	return "gcp.project.pubsubService.topic.config"
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) GetTopicName() *plugin.TValue[string] {
	return &c.TopicName
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) GetKmsKeyName() *plugin.TValue[string] {
	return &c.KmsKeyName
}

func (c *mqlGcpProjectPubsubServiceTopicConfig) GetMessageStoragePolicy() *plugin.TValue[*mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy] {
	return &c.MessageStoragePolicy
}

// mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy for the gcp.project.pubsubService.topic.config.messagestoragepolicy resource
type mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicyInternal it will be used here
	ConfigId plugin.TValue[string]
	AllowedPersistenceRegions plugin.TValue[[]interface{}]
}

// createGcpProjectPubsubServiceTopicConfigMessagestoragepolicy creates a new instance of this resource
func createGcpProjectPubsubServiceTopicConfigMessagestoragepolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.topic.config.messagestoragepolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) MqlName() string {
	return "gcp.project.pubsubService.topic.config.messagestoragepolicy"
}

func (c *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) GetConfigId() *plugin.TValue[string] {
	return &c.ConfigId
}

func (c *mqlGcpProjectPubsubServiceTopicConfigMessagestoragepolicy) GetAllowedPersistenceRegions() *plugin.TValue[[]interface{}] {
	return &c.AllowedPersistenceRegions
}

// mqlGcpProjectPubsubServiceSubscription for the gcp.project.pubsubService.subscription resource
type mqlGcpProjectPubsubServiceSubscription struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceSubscriptionInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Config plugin.TValue[*mqlGcpProjectPubsubServiceSubscriptionConfig]
}

// createGcpProjectPubsubServiceSubscription creates a new instance of this resource
func createGcpProjectPubsubServiceSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceSubscription{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.subscription", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceSubscription) MqlName() string {
	return "gcp.project.pubsubService.subscription"
}

func (c *mqlGcpProjectPubsubServiceSubscription) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceSubscription) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubServiceSubscription) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectPubsubServiceSubscription) GetConfig() *plugin.TValue[*mqlGcpProjectPubsubServiceSubscriptionConfig] {
	return plugin.GetOrCompute[*mqlGcpProjectPubsubServiceSubscriptionConfig](&c.Config, func() (*mqlGcpProjectPubsubServiceSubscriptionConfig, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.pubsubService.subscription", c.__id, "config")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectPubsubServiceSubscriptionConfig), nil
			}
		}

		return c.config()
	})
}

// mqlGcpProjectPubsubServiceSubscriptionConfig for the gcp.project.pubsubService.subscription.config resource
type mqlGcpProjectPubsubServiceSubscriptionConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceSubscriptionConfigInternal it will be used here
	ProjectId plugin.TValue[string]
	SubscriptionName plugin.TValue[string]
	Topic plugin.TValue[*mqlGcpProjectPubsubServiceTopic]
	PushConfig plugin.TValue[*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig]
	AckDeadline plugin.TValue[*time.Time]
	RetainAckedMessages plugin.TValue[bool]
	RetentionDuration plugin.TValue[*time.Time]
	ExpirationPolicy plugin.TValue[*time.Time]
	Labels plugin.TValue[map[string]interface{}]
}

// createGcpProjectPubsubServiceSubscriptionConfig creates a new instance of this resource
func createGcpProjectPubsubServiceSubscriptionConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceSubscriptionConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.subscription.config", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) MqlName() string {
	return "gcp.project.pubsubService.subscription.config"
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetSubscriptionName() *plugin.TValue[string] {
	return &c.SubscriptionName
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetTopic() *plugin.TValue[*mqlGcpProjectPubsubServiceTopic] {
	return &c.Topic
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetPushConfig() *plugin.TValue[*mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig] {
	return &c.PushConfig
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetAckDeadline() *plugin.TValue[*time.Time] {
	return &c.AckDeadline
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetRetainAckedMessages() *plugin.TValue[bool] {
	return &c.RetainAckedMessages
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetRetentionDuration() *plugin.TValue[*time.Time] {
	return &c.RetentionDuration
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetExpirationPolicy() *plugin.TValue[*time.Time] {
	return &c.ExpirationPolicy
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfig) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

// mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig for the gcp.project.pubsubService.subscription.config.pushconfig resource
type mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceSubscriptionConfigPushconfigInternal it will be used here
	ConfigId plugin.TValue[string]
	Endpoint plugin.TValue[string]
	Attributes plugin.TValue[map[string]interface{}]
}

// createGcpProjectPubsubServiceSubscriptionConfigPushconfig creates a new instance of this resource
func createGcpProjectPubsubServiceSubscriptionConfigPushconfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.subscription.config.pushconfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) MqlName() string {
	return "gcp.project.pubsubService.subscription.config.pushconfig"
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) GetConfigId() *plugin.TValue[string] {
	return &c.ConfigId
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) GetEndpoint() *plugin.TValue[string] {
	return &c.Endpoint
}

func (c *mqlGcpProjectPubsubServiceSubscriptionConfigPushconfig) GetAttributes() *plugin.TValue[map[string]interface{}] {
	return &c.Attributes
}

// mqlGcpProjectPubsubServiceSnapshot for the gcp.project.pubsubService.snapshot resource
type mqlGcpProjectPubsubServiceSnapshot struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectPubsubServiceSnapshotInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Topic plugin.TValue[*mqlGcpProjectPubsubServiceTopic]
	Expiration plugin.TValue[*time.Time]
}

// createGcpProjectPubsubServiceSnapshot creates a new instance of this resource
func createGcpProjectPubsubServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectPubsubServiceSnapshot{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.pubsubService.snapshot", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectPubsubServiceSnapshot) MqlName() string {
	return "gcp.project.pubsubService.snapshot"
}

func (c *mqlGcpProjectPubsubServiceSnapshot) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectPubsubServiceSnapshot) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectPubsubServiceSnapshot) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectPubsubServiceSnapshot) GetTopic() *plugin.TValue[*mqlGcpProjectPubsubServiceTopic] {
	return &c.Topic
}

func (c *mqlGcpProjectPubsubServiceSnapshot) GetExpiration() *plugin.TValue[*time.Time] {
	return &c.Expiration
}

// mqlGcpProjectKmsService for the gcp.project.kmsService resource
type mqlGcpProjectKmsService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Locations plugin.TValue[[]interface{}]
	Keyrings plugin.TValue[[]interface{}]
}

// createGcpProjectKmsService creates a new instance of this resource
func createGcpProjectKmsService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsService) MqlName() string {
	return "gcp.project.kmsService"
}

func (c *mqlGcpProjectKmsService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectKmsService) GetLocations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Locations, func() ([]interface{}, error) {
		return c.locations()
	})
}

func (c *mqlGcpProjectKmsService) GetKeyrings() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keyrings, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.kmsService", c.__id, "keyrings")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keyrings()
	})
}

// mqlGcpProjectKmsServiceKeyring for the gcp.project.kmsService.keyring resource
type mqlGcpProjectKmsServiceKeyring struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringInternal it will be used here
	ProjectId plugin.TValue[string]
	ResourcePath plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Location plugin.TValue[string]
	Cryptokeys plugin.TValue[[]interface{}]
}

// createGcpProjectKmsServiceKeyring creates a new instance of this resource
func createGcpProjectKmsServiceKeyring(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyring{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyring) MqlName() string {
	return "gcp.project.kmsService.keyring"
}

func (c *mqlGcpProjectKmsServiceKeyring) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyring) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectKmsServiceKeyring) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpProjectKmsServiceKeyring) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectKmsServiceKeyring) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectKmsServiceKeyring) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectKmsServiceKeyring) GetCryptokeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Cryptokeys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.kmsService.keyring", c.__id, "cryptokeys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.cryptokeys()
	})
}

// mqlGcpProjectKmsServiceKeyringCryptokey for the gcp.project.kmsService.keyring.cryptokey resource
type mqlGcpProjectKmsServiceKeyringCryptokey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringCryptokeyInternal it will be used here
	ResourcePath plugin.TValue[string]
	Name plugin.TValue[string]
	Primary plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersion]
	Purpose plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	NextRotation plugin.TValue[*time.Time]
	RotationPeriod plugin.TValue[*time.Time]
	VersionTemplate plugin.TValue[interface{}]
	Labels plugin.TValue[map[string]interface{}]
	ImportOnly plugin.TValue[bool]
	DestroyScheduledDuration plugin.TValue[*time.Time]
	CryptoKeyBackend plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
	IamPolicy plugin.TValue[[]interface{}]
}

// createGcpProjectKmsServiceKeyringCryptokey creates a new instance of this resource
func createGcpProjectKmsServiceKeyringCryptokey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyringCryptokey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring.cryptokey", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) MqlName() string {
	return "gcp.project.kmsService.keyring.cryptokey"
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetPrimary() *plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersion] {
	return &c.Primary
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetPurpose() *plugin.TValue[string] {
	return &c.Purpose
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetNextRotation() *plugin.TValue[*time.Time] {
	return &c.NextRotation
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetRotationPeriod() *plugin.TValue[*time.Time] {
	return &c.RotationPeriod
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetVersionTemplate() *plugin.TValue[interface{}] {
	return &c.VersionTemplate
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetImportOnly() *plugin.TValue[bool] {
	return &c.ImportOnly
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetDestroyScheduledDuration() *plugin.TValue[*time.Time] {
	return &c.DestroyScheduledDuration
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetCryptoKeyBackend() *plugin.TValue[string] {
	return &c.CryptoKeyBackend
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.kmsService.keyring.cryptokey", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokey) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.kmsService.keyring.cryptokey", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersion for the gcp.project.kmsService.keyring.cryptokey.version resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersion struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringCryptokeyVersionInternal it will be used here
	ResourcePath plugin.TValue[string]
	Name plugin.TValue[string]
	State plugin.TValue[string]
	ProtectionLevel plugin.TValue[string]
	Algorithm plugin.TValue[string]
	Attestation plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation]
	Created plugin.TValue[*time.Time]
	Generated plugin.TValue[*time.Time]
	Destroyed plugin.TValue[*time.Time]
	DestroyEventTime plugin.TValue[*time.Time]
	ImportJob plugin.TValue[string]
	ImportTime plugin.TValue[*time.Time]
	ImportFailureReason plugin.TValue[string]
	ExternalProtectionLevelOptions plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions]
	ReimportEligible plugin.TValue[bool]
}

// createGcpProjectKmsServiceKeyringCryptokeyVersion creates a new instance of this resource
func createGcpProjectKmsServiceKeyringCryptokeyVersion(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyringCryptokeyVersion{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring.cryptokey.version", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) MqlName() string {
	return "gcp.project.kmsService.keyring.cryptokey.version"
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetProtectionLevel() *plugin.TValue[string] {
	return &c.ProtectionLevel
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetAlgorithm() *plugin.TValue[string] {
	return &c.Algorithm
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetAttestation() *plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation] {
	return &c.Attestation
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetGenerated() *plugin.TValue[*time.Time] {
	return &c.Generated
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetDestroyed() *plugin.TValue[*time.Time] {
	return &c.Destroyed
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetDestroyEventTime() *plugin.TValue[*time.Time] {
	return &c.DestroyEventTime
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetImportJob() *plugin.TValue[string] {
	return &c.ImportJob
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetImportTime() *plugin.TValue[*time.Time] {
	return &c.ImportTime
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetImportFailureReason() *plugin.TValue[string] {
	return &c.ImportFailureReason
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetExternalProtectionLevelOptions() *plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions] {
	return &c.ExternalProtectionLevelOptions
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersion) GetReimportEligible() *plugin.TValue[bool] {
	return &c.ReimportEligible
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation for the gcp.project.kmsService.keyring.cryptokey.version.attestation resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationInternal it will be used here
	CryptoKeyVersionName plugin.TValue[string]
	Format plugin.TValue[string]
	CertificateChains plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains]
}

// createGcpProjectKmsServiceKeyringCryptokeyVersionAttestation creates a new instance of this resource
func createGcpProjectKmsServiceKeyringCryptokeyVersionAttestation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring.cryptokey.version.attestation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) MqlName() string {
	return "gcp.project.kmsService.keyring.cryptokey.version.attestation"
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) GetCryptoKeyVersionName() *plugin.TValue[string] {
	return &c.CryptoKeyVersionName
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) GetFormat() *plugin.TValue[string] {
	return &c.Format
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestation) GetCertificateChains() *plugin.TValue[*mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains] {
	return &c.CertificateChains
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains for the gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechainsInternal it will be used here
	CryptoKeyVersionName plugin.TValue[string]
	CaviumCerts plugin.TValue[[]interface{}]
	GoogleCardCerts plugin.TValue[[]interface{}]
	GooglePartitionCerts plugin.TValue[[]interface{}]
}

// createGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains creates a new instance of this resource
func createGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) MqlName() string {
	return "gcp.project.kmsService.keyring.cryptokey.version.attestation.certificatechains"
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GetCryptoKeyVersionName() *plugin.TValue[string] {
	return &c.CryptoKeyVersionName
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GetCaviumCerts() *plugin.TValue[[]interface{}] {
	return &c.CaviumCerts
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GetGoogleCardCerts() *plugin.TValue[[]interface{}] {
	return &c.GoogleCardCerts
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionAttestationCertificatechains) GetGooglePartitionCerts() *plugin.TValue[[]interface{}] {
	return &c.GooglePartitionCerts
}

// mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions for the gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions resource
type mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptionsInternal it will be used here
	CryptoKeyVersionName plugin.TValue[string]
	ExternalKeyUri plugin.TValue[string]
	EkmConnectionKeyPath plugin.TValue[string]
}

// createGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions creates a new instance of this resource
func createGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) MqlName() string {
	return "gcp.project.kmsService.keyring.cryptokey.version.externalProtectionLevelOptions"
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) GetCryptoKeyVersionName() *plugin.TValue[string] {
	return &c.CryptoKeyVersionName
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) GetExternalKeyUri() *plugin.TValue[string] {
	return &c.ExternalKeyUri
}

func (c *mqlGcpProjectKmsServiceKeyringCryptokeyVersionExternalProtectionLevelOptions) GetEkmConnectionKeyPath() *plugin.TValue[string] {
	return &c.EkmConnectionKeyPath
}

// mqlGcpEssentialContact for the gcp.essentialContact resource
type mqlGcpEssentialContact struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpEssentialContactInternal it will be used here
	ResourcePath plugin.TValue[string]
	Email plugin.TValue[string]
	LanguageTag plugin.TValue[string]
	NotificationCategories plugin.TValue[[]interface{}]
	Validated plugin.TValue[*time.Time]
	ValidationState plugin.TValue[string]
}

// createGcpEssentialContact creates a new instance of this resource
func createGcpEssentialContact(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpEssentialContact{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.essentialContact", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpEssentialContact) MqlName() string {
	return "gcp.essentialContact"
}

func (c *mqlGcpEssentialContact) MqlID() string {
	return c.__id
}

func (c *mqlGcpEssentialContact) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpEssentialContact) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlGcpEssentialContact) GetLanguageTag() *plugin.TValue[string] {
	return &c.LanguageTag
}

func (c *mqlGcpEssentialContact) GetNotificationCategories() *plugin.TValue[[]interface{}] {
	return &c.NotificationCategories
}

func (c *mqlGcpEssentialContact) GetValidated() *plugin.TValue[*time.Time] {
	return &c.Validated
}

func (c *mqlGcpEssentialContact) GetValidationState() *plugin.TValue[string] {
	return &c.ValidationState
}

// mqlGcpProjectApiKey for the gcp.project.apiKey resource
type mqlGcpProjectApiKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectApiKeyInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	ResourcePath plugin.TValue[string]
	Annotations plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Deleted plugin.TValue[*time.Time]
	KeyString plugin.TValue[string]
	Restrictions plugin.TValue[*mqlGcpProjectApiKeyRestrictions]
	Updated plugin.TValue[*time.Time]
}

// createGcpProjectApiKey creates a new instance of this resource
func createGcpProjectApiKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectApiKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.apiKey", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectApiKey) MqlName() string {
	return "gcp.project.apiKey"
}

func (c *mqlGcpProjectApiKey) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectApiKey) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectApiKey) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectApiKey) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectApiKey) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpProjectApiKey) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlGcpProjectApiKey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectApiKey) GetDeleted() *plugin.TValue[*time.Time] {
	return &c.Deleted
}

func (c *mqlGcpProjectApiKey) GetKeyString() *plugin.TValue[string] {
	return &c.KeyString
}

func (c *mqlGcpProjectApiKey) GetRestrictions() *plugin.TValue[*mqlGcpProjectApiKeyRestrictions] {
	return &c.Restrictions
}

func (c *mqlGcpProjectApiKey) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

// mqlGcpProjectApiKeyRestrictions for the gcp.project.apiKey.restrictions resource
type mqlGcpProjectApiKeyRestrictions struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectApiKeyRestrictionsInternal it will be used here
	ParentResourcePath plugin.TValue[string]
	AndroidKeyRestrictions plugin.TValue[interface{}]
	ApiTargets plugin.TValue[[]interface{}]
	BrowserKeyRestrictions plugin.TValue[interface{}]
	IosKeyRestrictions plugin.TValue[interface{}]
	ServerKeyRestrictions plugin.TValue[interface{}]
}

// createGcpProjectApiKeyRestrictions creates a new instance of this resource
func createGcpProjectApiKeyRestrictions(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectApiKeyRestrictions{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.apiKey.restrictions", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectApiKeyRestrictions) MqlName() string {
	return "gcp.project.apiKey.restrictions"
}

func (c *mqlGcpProjectApiKeyRestrictions) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectApiKeyRestrictions) GetParentResourcePath() *plugin.TValue[string] {
	return &c.ParentResourcePath
}

func (c *mqlGcpProjectApiKeyRestrictions) GetAndroidKeyRestrictions() *plugin.TValue[interface{}] {
	return &c.AndroidKeyRestrictions
}

func (c *mqlGcpProjectApiKeyRestrictions) GetApiTargets() *plugin.TValue[[]interface{}] {
	return &c.ApiTargets
}

func (c *mqlGcpProjectApiKeyRestrictions) GetBrowserKeyRestrictions() *plugin.TValue[interface{}] {
	return &c.BrowserKeyRestrictions
}

func (c *mqlGcpProjectApiKeyRestrictions) GetIosKeyRestrictions() *plugin.TValue[interface{}] {
	return &c.IosKeyRestrictions
}

func (c *mqlGcpProjectApiKeyRestrictions) GetServerKeyRestrictions() *plugin.TValue[interface{}] {
	return &c.ServerKeyRestrictions
}

// mqlGcpProjectLoggingservice for the gcp.project.loggingservice resource
type mqlGcpProjectLoggingservice struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectLoggingserviceInternal it will be used here
	ProjectId plugin.TValue[string]
	Buckets plugin.TValue[[]interface{}]
	Metrics plugin.TValue[[]interface{}]
	Sinks plugin.TValue[[]interface{}]
}

// createGcpProjectLoggingservice creates a new instance of this resource
func createGcpProjectLoggingservice(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectLoggingservice{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.loggingservice", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectLoggingservice) MqlName() string {
	return "gcp.project.loggingservice"
}

func (c *mqlGcpProjectLoggingservice) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectLoggingservice) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectLoggingservice) GetBuckets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Buckets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.loggingservice", c.__id, "buckets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.buckets()
	})
}

func (c *mqlGcpProjectLoggingservice) GetMetrics() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Metrics, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.loggingservice", c.__id, "metrics")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.metrics()
	})
}

func (c *mqlGcpProjectLoggingservice) GetSinks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Sinks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.loggingservice", c.__id, "sinks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.sinks()
	})
}

// mqlGcpProjectLoggingserviceBucket for the gcp.project.loggingservice.bucket resource
type mqlGcpProjectLoggingserviceBucket struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectLoggingserviceBucketInternal it will be used here
	ProjectId plugin.TValue[string]
	CmekSettings plugin.TValue[interface{}]
	Created plugin.TValue[*time.Time]
	Description plugin.TValue[string]
	IndexConfigs plugin.TValue[[]interface{}]
	LifecycleState plugin.TValue[string]
	Locked plugin.TValue[bool]
	Name plugin.TValue[string]
	RestrictedFields plugin.TValue[[]interface{}]
	RetentionDays plugin.TValue[int64]
	Updated plugin.TValue[*time.Time]
}

// createGcpProjectLoggingserviceBucket creates a new instance of this resource
func createGcpProjectLoggingserviceBucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectLoggingserviceBucket{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.loggingservice.bucket", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectLoggingserviceBucket) MqlName() string {
	return "gcp.project.loggingservice.bucket"
}

func (c *mqlGcpProjectLoggingserviceBucket) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectLoggingserviceBucket) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectLoggingserviceBucket) GetCmekSettings() *plugin.TValue[interface{}] {
	return &c.CmekSettings
}

func (c *mqlGcpProjectLoggingserviceBucket) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectLoggingserviceBucket) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectLoggingserviceBucket) GetIndexConfigs() *plugin.TValue[[]interface{}] {
	return &c.IndexConfigs
}

func (c *mqlGcpProjectLoggingserviceBucket) GetLifecycleState() *plugin.TValue[string] {
	return &c.LifecycleState
}

func (c *mqlGcpProjectLoggingserviceBucket) GetLocked() *plugin.TValue[bool] {
	return &c.Locked
}

func (c *mqlGcpProjectLoggingserviceBucket) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectLoggingserviceBucket) GetRestrictedFields() *plugin.TValue[[]interface{}] {
	return &c.RestrictedFields
}

func (c *mqlGcpProjectLoggingserviceBucket) GetRetentionDays() *plugin.TValue[int64] {
	return &c.RetentionDays
}

func (c *mqlGcpProjectLoggingserviceBucket) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

// mqlGcpProjectLoggingserviceBucketIndexConfig for the gcp.project.loggingservice.bucket.indexConfig resource
type mqlGcpProjectLoggingserviceBucketIndexConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectLoggingserviceBucketIndexConfigInternal it will be used here
	Id plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	FieldPath plugin.TValue[string]
	Type plugin.TValue[string]
}

// createGcpProjectLoggingserviceBucketIndexConfig creates a new instance of this resource
func createGcpProjectLoggingserviceBucketIndexConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectLoggingserviceBucketIndexConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.loggingservice.bucket.indexConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) MqlName() string {
	return "gcp.project.loggingservice.bucket.indexConfig"
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) GetFieldPath() *plugin.TValue[string] {
	return &c.FieldPath
}

func (c *mqlGcpProjectLoggingserviceBucketIndexConfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectLoggingserviceMetric for the gcp.project.loggingservice.metric resource
type mqlGcpProjectLoggingserviceMetric struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectLoggingserviceMetricInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Description plugin.TValue[string]
	Filter plugin.TValue[string]
	AlertPolicies plugin.TValue[[]interface{}]
}

// createGcpProjectLoggingserviceMetric creates a new instance of this resource
func createGcpProjectLoggingserviceMetric(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectLoggingserviceMetric{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.loggingservice.metric", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectLoggingserviceMetric) MqlName() string {
	return "gcp.project.loggingservice.metric"
}

func (c *mqlGcpProjectLoggingserviceMetric) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectLoggingserviceMetric) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectLoggingserviceMetric) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectLoggingserviceMetric) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectLoggingserviceMetric) GetFilter() *plugin.TValue[string] {
	return &c.Filter
}

func (c *mqlGcpProjectLoggingserviceMetric) GetAlertPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AlertPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.loggingservice.metric", c.__id, "alertPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.alertPolicies()
	})
}

// mqlGcpProjectLoggingserviceSink for the gcp.project.loggingservice.sink resource
type mqlGcpProjectLoggingserviceSink struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectLoggingserviceSinkInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Destination plugin.TValue[string]
	StorageBucket plugin.TValue[*mqlGcpProjectStorageServiceBucket]
	Filter plugin.TValue[string]
	WriterIdentity plugin.TValue[string]
	IncludeChildren plugin.TValue[bool]
}

// createGcpProjectLoggingserviceSink creates a new instance of this resource
func createGcpProjectLoggingserviceSink(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectLoggingserviceSink{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.loggingservice.sink", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectLoggingserviceSink) MqlName() string {
	return "gcp.project.loggingservice.sink"
}

func (c *mqlGcpProjectLoggingserviceSink) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectLoggingserviceSink) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectLoggingserviceSink) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectLoggingserviceSink) GetDestination() *plugin.TValue[string] {
	return &c.Destination
}

func (c *mqlGcpProjectLoggingserviceSink) GetStorageBucket() *plugin.TValue[*mqlGcpProjectStorageServiceBucket] {
	return plugin.GetOrCompute[*mqlGcpProjectStorageServiceBucket](&c.StorageBucket, func() (*mqlGcpProjectStorageServiceBucket, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.loggingservice.sink", c.__id, "storageBucket")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectStorageServiceBucket), nil
			}
		}

		return c.storageBucket()
	})
}

func (c *mqlGcpProjectLoggingserviceSink) GetFilter() *plugin.TValue[string] {
	return &c.Filter
}

func (c *mqlGcpProjectLoggingserviceSink) GetWriterIdentity() *plugin.TValue[string] {
	return &c.WriterIdentity
}

func (c *mqlGcpProjectLoggingserviceSink) GetIncludeChildren() *plugin.TValue[bool] {
	return &c.IncludeChildren
}

// mqlGcpProjectIamService for the gcp.project.iamService resource
type mqlGcpProjectIamService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	ServiceAccounts plugin.TValue[[]interface{}]
}

// createGcpProjectIamService creates a new instance of this resource
func createGcpProjectIamService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamService) MqlName() string {
	return "gcp.project.iamService"
}

func (c *mqlGcpProjectIamService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectIamService) GetServiceAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ServiceAccounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.iamService", c.__id, "serviceAccounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.serviceAccounts()
	})
}

// mqlGcpProjectIamServiceServiceAccount for the gcp.project.iamService.serviceAccount resource
type mqlGcpProjectIamServiceServiceAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceServiceAccountInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	UniqueId plugin.TValue[string]
	Email plugin.TValue[string]
	DisplayName plugin.TValue[string]
	Description plugin.TValue[string]
	Oauth2ClientId plugin.TValue[string]
	Disabled plugin.TValue[bool]
	Keys plugin.TValue[[]interface{}]
}

// createGcpProjectIamServiceServiceAccount creates a new instance of this resource
func createGcpProjectIamServiceServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamServiceServiceAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService.serviceAccount", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamServiceServiceAccount) MqlName() string {
	return "gcp.project.iamService.serviceAccount"
}

func (c *mqlGcpProjectIamServiceServiceAccount) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetUniqueId() *plugin.TValue[string] {
	return &c.UniqueId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetOauth2ClientId() *plugin.TValue[string] {
	return &c.Oauth2ClientId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.iamService.serviceAccount", c.__id, "keys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keys()
	})
}

// mqlGcpProjectIamServiceServiceAccountKey for the gcp.project.iamService.serviceAccount.key resource
type mqlGcpProjectIamServiceServiceAccountKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceServiceAccountKeyInternal it will be used here
	Name plugin.TValue[string]
	KeyAlgorithm plugin.TValue[string]
	ValidAfterTime plugin.TValue[*time.Time]
	ValidBeforeTime plugin.TValue[*time.Time]
	KeyOrigin plugin.TValue[string]
	KeyType plugin.TValue[string]
	Disabled plugin.TValue[bool]
}

// createGcpProjectIamServiceServiceAccountKey creates a new instance of this resource
func createGcpProjectIamServiceServiceAccountKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamServiceServiceAccountKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService.serviceAccount.key", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) MqlName() string {
	return "gcp.project.iamService.serviceAccount.key"
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyAlgorithm() *plugin.TValue[string] {
	return &c.KeyAlgorithm
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetValidAfterTime() *plugin.TValue[*time.Time] {
	return &c.ValidAfterTime
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetValidBeforeTime() *plugin.TValue[*time.Time] {
	return &c.ValidBeforeTime
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyOrigin() *plugin.TValue[string] {
	return &c.KeyOrigin
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyType() *plugin.TValue[string] {
	return &c.KeyType
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

// mqlGcpProjectCloudFunction for the gcp.project.cloudFunction resource
type mqlGcpProjectCloudFunction struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudFunctionInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	SourceArchiveUrl plugin.TValue[string]
	SourceRepository plugin.TValue[interface{}]
	SourceUploadUrl plugin.TValue[string]
	HttpsTrigger plugin.TValue[interface{}]
	EventTrigger plugin.TValue[interface{}]
	Status plugin.TValue[string]
	EntryPoint plugin.TValue[string]
	Runtime plugin.TValue[string]
	Timeout plugin.TValue[*time.Time]
	AvailableMemoryMb plugin.TValue[int64]
	ServiceAccountEmail plugin.TValue[string]
	Updated plugin.TValue[*time.Time]
	VersionId plugin.TValue[int64]
	Labels plugin.TValue[map[string]interface{}]
	EnvVars plugin.TValue[map[string]interface{}]
	BuildEnvVars plugin.TValue[map[string]interface{}]
	Network plugin.TValue[string]
	MaxInstances plugin.TValue[int64]
	MinInstances plugin.TValue[int64]
	VpcConnector plugin.TValue[string]
	EgressSettings plugin.TValue[string]
	IngressSettings plugin.TValue[string]
	KmsKeyName plugin.TValue[string]
	BuildWorkerPool plugin.TValue[string]
	BuildId plugin.TValue[string]
	BuildName plugin.TValue[string]
	SecretEnvVars plugin.TValue[map[string]interface{}]
	SecretVolumes plugin.TValue[[]interface{}]
	DockerRepository plugin.TValue[string]
	DockerRegistry plugin.TValue[string]
}

// createGcpProjectCloudFunction creates a new instance of this resource
func createGcpProjectCloudFunction(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudFunction{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudFunction", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudFunction) MqlName() string {
	return "gcp.project.cloudFunction"
}

func (c *mqlGcpProjectCloudFunction) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudFunction) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudFunction) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudFunction) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectCloudFunction) GetSourceArchiveUrl() *plugin.TValue[string] {
	return &c.SourceArchiveUrl
}

func (c *mqlGcpProjectCloudFunction) GetSourceRepository() *plugin.TValue[interface{}] {
	return &c.SourceRepository
}

func (c *mqlGcpProjectCloudFunction) GetSourceUploadUrl() *plugin.TValue[string] {
	return &c.SourceUploadUrl
}

func (c *mqlGcpProjectCloudFunction) GetHttpsTrigger() *plugin.TValue[interface{}] {
	return &c.HttpsTrigger
}

func (c *mqlGcpProjectCloudFunction) GetEventTrigger() *plugin.TValue[interface{}] {
	return &c.EventTrigger
}

func (c *mqlGcpProjectCloudFunction) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectCloudFunction) GetEntryPoint() *plugin.TValue[string] {
	return &c.EntryPoint
}

func (c *mqlGcpProjectCloudFunction) GetRuntime() *plugin.TValue[string] {
	return &c.Runtime
}

func (c *mqlGcpProjectCloudFunction) GetTimeout() *plugin.TValue[*time.Time] {
	return &c.Timeout
}

func (c *mqlGcpProjectCloudFunction) GetAvailableMemoryMb() *plugin.TValue[int64] {
	return &c.AvailableMemoryMb
}

func (c *mqlGcpProjectCloudFunction) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectCloudFunction) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpProjectCloudFunction) GetVersionId() *plugin.TValue[int64] {
	return &c.VersionId
}

func (c *mqlGcpProjectCloudFunction) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectCloudFunction) GetEnvVars() *plugin.TValue[map[string]interface{}] {
	return &c.EnvVars
}

func (c *mqlGcpProjectCloudFunction) GetBuildEnvVars() *plugin.TValue[map[string]interface{}] {
	return &c.BuildEnvVars
}

func (c *mqlGcpProjectCloudFunction) GetNetwork() *plugin.TValue[string] {
	return &c.Network
}

func (c *mqlGcpProjectCloudFunction) GetMaxInstances() *plugin.TValue[int64] {
	return &c.MaxInstances
}

func (c *mqlGcpProjectCloudFunction) GetMinInstances() *plugin.TValue[int64] {
	return &c.MinInstances
}

func (c *mqlGcpProjectCloudFunction) GetVpcConnector() *plugin.TValue[string] {
	return &c.VpcConnector
}

func (c *mqlGcpProjectCloudFunction) GetEgressSettings() *plugin.TValue[string] {
	return &c.EgressSettings
}

func (c *mqlGcpProjectCloudFunction) GetIngressSettings() *plugin.TValue[string] {
	return &c.IngressSettings
}

func (c *mqlGcpProjectCloudFunction) GetKmsKeyName() *plugin.TValue[string] {
	return &c.KmsKeyName
}

func (c *mqlGcpProjectCloudFunction) GetBuildWorkerPool() *plugin.TValue[string] {
	return &c.BuildWorkerPool
}

func (c *mqlGcpProjectCloudFunction) GetBuildId() *plugin.TValue[string] {
	return &c.BuildId
}

func (c *mqlGcpProjectCloudFunction) GetBuildName() *plugin.TValue[string] {
	return &c.BuildName
}

func (c *mqlGcpProjectCloudFunction) GetSecretEnvVars() *plugin.TValue[map[string]interface{}] {
	return &c.SecretEnvVars
}

func (c *mqlGcpProjectCloudFunction) GetSecretVolumes() *plugin.TValue[[]interface{}] {
	return &c.SecretVolumes
}

func (c *mqlGcpProjectCloudFunction) GetDockerRepository() *plugin.TValue[string] {
	return &c.DockerRepository
}

func (c *mqlGcpProjectCloudFunction) GetDockerRegistry() *plugin.TValue[string] {
	return &c.DockerRegistry
}

// mqlGcpProjectDataprocService for the gcp.project.dataprocService resource
type mqlGcpProjectDataprocService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Enabled plugin.TValue[bool]
	Regions plugin.TValue[[]interface{}]
	Clusters plugin.TValue[[]interface{}]
}

// createGcpProjectDataprocService creates a new instance of this resource
func createGcpProjectDataprocService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocService) MqlName() string {
	return "gcp.project.dataprocService"
}

func (c *mqlGcpProjectDataprocService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDataprocService) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlGcpProjectDataprocService) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		return c.regions()
	})
}

func (c *mqlGcpProjectDataprocService) GetClusters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Clusters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dataprocService", c.__id, "clusters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.clusters()
	})
}

// mqlGcpProjectDataprocServiceCluster for the gcp.project.dataprocService.cluster resource
type mqlGcpProjectDataprocServiceCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Uuid plugin.TValue[string]
	Config plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfig]
	Labels plugin.TValue[map[string]interface{}]
	Metrics plugin.TValue[interface{}]
	Status plugin.TValue[*mqlGcpProjectDataprocServiceClusterStatus]
	StatusHistory plugin.TValue[[]interface{}]
	VirtualClusterConfig plugin.TValue[*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig]
}

// createGcpProjectDataprocServiceCluster creates a new instance of this resource
func createGcpProjectDataprocServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceCluster) MqlName() string {
	return "gcp.project.dataprocService.cluster"
}

func (c *mqlGcpProjectDataprocServiceCluster) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceCluster) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDataprocServiceCluster) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectDataprocServiceCluster) GetUuid() *plugin.TValue[string] {
	return &c.Uuid
}

func (c *mqlGcpProjectDataprocServiceCluster) GetConfig() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfig] {
	return &c.Config
}

func (c *mqlGcpProjectDataprocServiceCluster) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectDataprocServiceCluster) GetMetrics() *plugin.TValue[interface{}] {
	return &c.Metrics
}

func (c *mqlGcpProjectDataprocServiceCluster) GetStatus() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterStatus] {
	return &c.Status
}

func (c *mqlGcpProjectDataprocServiceCluster) GetStatusHistory() *plugin.TValue[[]interface{}] {
	return &c.StatusHistory
}

func (c *mqlGcpProjectDataprocServiceCluster) GetVirtualClusterConfig() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterVirtualClusterConfig] {
	return &c.VirtualClusterConfig
}

// mqlGcpProjectDataprocServiceClusterConfig for the gcp.project.dataprocService.cluster.config resource
type mqlGcpProjectDataprocServiceClusterConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigInternal it will be used here
	ParentResourcePath plugin.TValue[string]
	Autoscaling plugin.TValue[interface{}]
	ConfigBucket plugin.TValue[string]
	Metrics plugin.TValue[interface{}]
	Encryption plugin.TValue[interface{}]
	Endpoint plugin.TValue[interface{}]
	GceCluster plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceCluster]
	GkeCluster plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGkeCluster]
	InitializationActions plugin.TValue[[]interface{}]
	Lifecycle plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigLifecycle]
	Master plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance]
	Metastore plugin.TValue[interface{}]
	SecondaryWorker plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance]
	Security plugin.TValue[interface{}]
	Software plugin.TValue[interface{}]
	TempBucket plugin.TValue[string]
	Worker plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance]
}

// createGcpProjectDataprocServiceClusterConfig creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) MqlName() string {
	return "gcp.project.dataprocService.cluster.config"
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetParentResourcePath() *plugin.TValue[string] {
	return &c.ParentResourcePath
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetAutoscaling() *plugin.TValue[interface{}] {
	return &c.Autoscaling
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetConfigBucket() *plugin.TValue[string] {
	return &c.ConfigBucket
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetMetrics() *plugin.TValue[interface{}] {
	return &c.Metrics
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetEncryption() *plugin.TValue[interface{}] {
	return &c.Encryption
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetEndpoint() *plugin.TValue[interface{}] {
	return &c.Endpoint
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetGceCluster() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceCluster] {
	return &c.GceCluster
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetGkeCluster() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGkeCluster] {
	return &c.GkeCluster
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetInitializationActions() *plugin.TValue[[]interface{}] {
	return &c.InitializationActions
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetLifecycle() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigLifecycle] {
	return &c.Lifecycle
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetMaster() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance] {
	return &c.Master
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetMetastore() *plugin.TValue[interface{}] {
	return &c.Metastore
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetSecondaryWorker() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance] {
	return &c.SecondaryWorker
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetSecurity() *plugin.TValue[interface{}] {
	return &c.Security
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetSoftware() *plugin.TValue[interface{}] {
	return &c.Software
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetTempBucket() *plugin.TValue[string] {
	return &c.TempBucket
}

func (c *mqlGcpProjectDataprocServiceClusterConfig) GetWorker() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstance] {
	return &c.Worker
}

// mqlGcpProjectDataprocServiceClusterConfigGceCluster for the gcp.project.dataprocService.cluster.config.gceCluster resource
type mqlGcpProjectDataprocServiceClusterConfigGceCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigGceClusterInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	ConfidentialInstance plugin.TValue[interface{}]
	InternalIpOnly plugin.TValue[bool]
	Metadata plugin.TValue[map[string]interface{}]
	NetworkUri plugin.TValue[string]
	NodeGroupAffinity plugin.TValue[interface{}]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	ReservationAffinity plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity]
	ServiceAccountEmail plugin.TValue[string]
	ServiceAccount plugin.TValue[*mqlGcpProjectIamServiceServiceAccount]
	ServiceAccountScopes plugin.TValue[[]interface{}]
	ShieldedInstanceConfig plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig]
	SubnetworkUri plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	ZoneUri plugin.TValue[string]
}

// createGcpProjectDataprocServiceClusterConfigGceCluster creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigGceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigGceCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.gceCluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.gceCluster"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetConfidentialInstance() *plugin.TValue[interface{}] {
	return &c.ConfidentialInstance
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetInternalIpOnly() *plugin.TValue[bool] {
	return &c.InternalIpOnly
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return &c.Metadata
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetNetworkUri() *plugin.TValue[string] {
	return &c.NetworkUri
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetNodeGroupAffinity() *plugin.TValue[interface{}] {
	return &c.NodeGroupAffinity
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetReservationAffinity() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity] {
	return &c.ReservationAffinity
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetServiceAccount() *plugin.TValue[*mqlGcpProjectIamServiceServiceAccount] {
	return plugin.GetOrCompute[*mqlGcpProjectIamServiceServiceAccount](&c.ServiceAccount, func() (*mqlGcpProjectIamServiceServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.dataprocService.cluster.config.gceCluster", c.__id, "serviceAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamServiceServiceAccount), nil
			}
		}

		return c.serviceAccount()
	})
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetServiceAccountScopes() *plugin.TValue[[]interface{}] {
	return &c.ServiceAccountScopes
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetShieldedInstanceConfig() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig] {
	return &c.ShieldedInstanceConfig
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetSubnetworkUri() *plugin.TValue[string] {
	return &c.SubnetworkUri
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceCluster) GetZoneUri() *plugin.TValue[string] {
	return &c.ZoneUri
}

// mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity for the gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity resource
type mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinityInternal it will be used here
	Id plugin.TValue[string]
	ConsumeReservationType plugin.TValue[string]
	Key plugin.TValue[string]
	Values plugin.TValue[[]interface{}]
}

// createGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.gceCluster.reservationAffinity"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) GetConsumeReservationType() *plugin.TValue[string] {
	return &c.ConsumeReservationType
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterReservationAffinity) GetValues() *plugin.TValue[[]interface{}] {
	return &c.Values
}

// mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig for the gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig resource
type mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfigInternal it will be used here
	Id plugin.TValue[string]
	EnableIntegrityMonitoring plugin.TValue[bool]
	EnableSecureBoot plugin.TValue[bool]
	EnableVtpm plugin.TValue[bool]
}

// createGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.gceCluster.shieldedInstanceConfig"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) GetEnableIntegrityMonitoring() *plugin.TValue[bool] {
	return &c.EnableIntegrityMonitoring
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) GetEnableSecureBoot() *plugin.TValue[bool] {
	return &c.EnableSecureBoot
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGceClusterShieldedInstanceConfig) GetEnableVtpm() *plugin.TValue[bool] {
	return &c.EnableVtpm
}

// mqlGcpProjectDataprocServiceClusterConfigGkeCluster for the gcp.project.dataprocService.cluster.config.gkeCluster resource
type mqlGcpProjectDataprocServiceClusterConfigGkeCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigGkeClusterInternal it will be used here
	Id plugin.TValue[string]
	GkeClusterTarget plugin.TValue[string]
	NodePoolTarget plugin.TValue[[]interface{}]
}

// createGcpProjectDataprocServiceClusterConfigGkeCluster creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigGkeCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigGkeCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.gkeCluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGkeCluster) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.gkeCluster"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGkeCluster) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGkeCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGkeCluster) GetGkeClusterTarget() *plugin.TValue[string] {
	return &c.GkeClusterTarget
}

func (c *mqlGcpProjectDataprocServiceClusterConfigGkeCluster) GetNodePoolTarget() *plugin.TValue[[]interface{}] {
	return &c.NodePoolTarget
}

// mqlGcpProjectDataprocServiceClusterConfigLifecycle for the gcp.project.dataprocService.cluster.config.lifecycle resource
type mqlGcpProjectDataprocServiceClusterConfigLifecycle struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigLifecycleInternal it will be used here
	Id plugin.TValue[string]
	AutoDeleteTime plugin.TValue[string]
	AutoDeleteTtl plugin.TValue[string]
	IdleDeleteTtl plugin.TValue[string]
	IdleStartTime plugin.TValue[string]
}

// createGcpProjectDataprocServiceClusterConfigLifecycle creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigLifecycle(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigLifecycle{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.lifecycle", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.lifecycle"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) GetAutoDeleteTime() *plugin.TValue[string] {
	return &c.AutoDeleteTime
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) GetAutoDeleteTtl() *plugin.TValue[string] {
	return &c.AutoDeleteTtl
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) GetIdleDeleteTtl() *plugin.TValue[string] {
	return &c.IdleDeleteTtl
}

func (c *mqlGcpProjectDataprocServiceClusterConfigLifecycle) GetIdleStartTime() *plugin.TValue[string] {
	return &c.IdleStartTime
}

// mqlGcpProjectDataprocServiceClusterConfigInstance for the gcp.project.dataprocService.cluster.config.instance resource
type mqlGcpProjectDataprocServiceClusterConfigInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigInstanceInternal it will be used here
	Id plugin.TValue[string]
	Accelerators plugin.TValue[[]interface{}]
	DiskConfig plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig]
	ImageUri plugin.TValue[string]
	InstanceNames plugin.TValue[[]interface{}]
	InstanceReferences plugin.TValue[[]interface{}]
	IsPreemptible plugin.TValue[bool]
	MachineTypeUri plugin.TValue[string]
	ManagedGroupConfig plugin.TValue[interface{}]
	MinCpuPlatform plugin.TValue[string]
	NumInstances plugin.TValue[int64]
	Preemptibility plugin.TValue[string]
}

// createGcpProjectDataprocServiceClusterConfigInstance creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.instance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.instance"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetAccelerators() *plugin.TValue[[]interface{}] {
	return &c.Accelerators
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetDiskConfig() *plugin.TValue[*mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig] {
	return &c.DiskConfig
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetImageUri() *plugin.TValue[string] {
	return &c.ImageUri
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetInstanceNames() *plugin.TValue[[]interface{}] {
	return &c.InstanceNames
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetInstanceReferences() *plugin.TValue[[]interface{}] {
	return &c.InstanceReferences
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetIsPreemptible() *plugin.TValue[bool] {
	return &c.IsPreemptible
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetMachineTypeUri() *plugin.TValue[string] {
	return &c.MachineTypeUri
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetManagedGroupConfig() *plugin.TValue[interface{}] {
	return &c.ManagedGroupConfig
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetMinCpuPlatform() *plugin.TValue[string] {
	return &c.MinCpuPlatform
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetNumInstances() *plugin.TValue[int64] {
	return &c.NumInstances
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstance) GetPreemptibility() *plugin.TValue[string] {
	return &c.Preemptibility
}

// mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig for the gcp.project.dataprocService.cluster.config.instance.diskConfig resource
type mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfigInternal it will be used here
	Id plugin.TValue[string]
	BootDiskSizeGb plugin.TValue[int64]
	BootDiskType plugin.TValue[string]
	LocalSsdInterface plugin.TValue[string]
	NumLocalSsds plugin.TValue[int64]
}

// createGcpProjectDataprocServiceClusterConfigInstanceDiskConfig creates a new instance of this resource
func createGcpProjectDataprocServiceClusterConfigInstanceDiskConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.config.instance.diskConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) MqlName() string {
	return "gcp.project.dataprocService.cluster.config.instance.diskConfig"
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) GetBootDiskSizeGb() *plugin.TValue[int64] {
	return &c.BootDiskSizeGb
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) GetBootDiskType() *plugin.TValue[string] {
	return &c.BootDiskType
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) GetLocalSsdInterface() *plugin.TValue[string] {
	return &c.LocalSsdInterface
}

func (c *mqlGcpProjectDataprocServiceClusterConfigInstanceDiskConfig) GetNumLocalSsds() *plugin.TValue[int64] {
	return &c.NumLocalSsds
}

// mqlGcpProjectDataprocServiceClusterStatus for the gcp.project.dataprocService.cluster.status resource
type mqlGcpProjectDataprocServiceClusterStatus struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterStatusInternal it will be used here
	Id plugin.TValue[string]
	Detail plugin.TValue[string]
	State plugin.TValue[string]
	Started plugin.TValue[*time.Time]
	Substate plugin.TValue[string]
}

// createGcpProjectDataprocServiceClusterStatus creates a new instance of this resource
func createGcpProjectDataprocServiceClusterStatus(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterStatus{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.status", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) MqlName() string {
	return "gcp.project.dataprocService.cluster.status"
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) GetDetail() *plugin.TValue[string] {
	return &c.Detail
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) GetStarted() *plugin.TValue[*time.Time] {
	return &c.Started
}

func (c *mqlGcpProjectDataprocServiceClusterStatus) GetSubstate() *plugin.TValue[string] {
	return &c.Substate
}

// mqlGcpProjectDataprocServiceClusterVirtualClusterConfig for the gcp.project.dataprocService.cluster.virtualClusterConfig resource
type mqlGcpProjectDataprocServiceClusterVirtualClusterConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectDataprocServiceClusterVirtualClusterConfigInternal it will be used here
	ParentResourcePath plugin.TValue[string]
	AuxiliaryServices plugin.TValue[interface{}]
	KubernetesCluster plugin.TValue[interface{}]
	StagingBucket plugin.TValue[string]
}

// createGcpProjectDataprocServiceClusterVirtualClusterConfig creates a new instance of this resource
func createGcpProjectDataprocServiceClusterVirtualClusterConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectDataprocServiceClusterVirtualClusterConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.dataprocService.cluster.virtualClusterConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) MqlName() string {
	return "gcp.project.dataprocService.cluster.virtualClusterConfig"
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) GetParentResourcePath() *plugin.TValue[string] {
	return &c.ParentResourcePath
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) GetAuxiliaryServices() *plugin.TValue[interface{}] {
	return &c.AuxiliaryServices
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) GetKubernetesCluster() *plugin.TValue[interface{}] {
	return &c.KubernetesCluster
}

func (c *mqlGcpProjectDataprocServiceClusterVirtualClusterConfig) GetStagingBucket() *plugin.TValue[string] {
	return &c.StagingBucket
}

// mqlGcpProjectCloudRunService for the gcp.project.cloudRunService resource
type mqlGcpProjectCloudRunService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Regions plugin.TValue[[]interface{}]
	Operations plugin.TValue[[]interface{}]
	Services plugin.TValue[[]interface{}]
	Jobs plugin.TValue[[]interface{}]
}

// createGcpProjectCloudRunService creates a new instance of this resource
func createGcpProjectCloudRunService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunService) MqlName() string {
	return "gcp.project.cloudRunService"
}

func (c *mqlGcpProjectCloudRunService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunService) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		return c.regions()
	})
}

func (c *mqlGcpProjectCloudRunService) GetOperations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Operations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.cloudRunService", c.__id, "operations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.operations()
	})
}

func (c *mqlGcpProjectCloudRunService) GetServices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Services, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.cloudRunService", c.__id, "services")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.services()
	})
}

func (c *mqlGcpProjectCloudRunService) GetJobs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Jobs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.cloudRunService", c.__id, "jobs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.jobs()
	})
}

// mqlGcpProjectCloudRunServiceOperation for the gcp.project.cloudRunService.operation resource
type mqlGcpProjectCloudRunServiceOperation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceOperationInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Done plugin.TValue[bool]
}

// createGcpProjectCloudRunServiceOperation creates a new instance of this resource
func createGcpProjectCloudRunServiceOperation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceOperation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.operation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceOperation) MqlName() string {
	return "gcp.project.cloudRunService.operation"
}

func (c *mqlGcpProjectCloudRunServiceOperation) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceOperation) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunServiceOperation) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudRunServiceOperation) GetDone() *plugin.TValue[bool] {
	return &c.Done
}

// mqlGcpProjectCloudRunServiceService for the gcp.project.cloudRunService.service resource
type mqlGcpProjectCloudRunServiceService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceServiceInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Region plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Generation plugin.TValue[int64]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	Deleted plugin.TValue[*time.Time]
	Expired plugin.TValue[*time.Time]
	Creator plugin.TValue[string]
	LastModifier plugin.TValue[string]
	Ingress plugin.TValue[string]
	LaunchStage plugin.TValue[string]
	Template plugin.TValue[*mqlGcpProjectCloudRunServiceServiceRevisionTemplate]
	Traffic plugin.TValue[[]interface{}]
	ObservedGeneration plugin.TValue[int64]
	TerminalCondition plugin.TValue[*mqlGcpProjectCloudRunServiceCondition]
	Conditions plugin.TValue[[]interface{}]
	LatestReadyRevision plugin.TValue[string]
	LatestCreatedRevision plugin.TValue[string]
	TrafficStatuses plugin.TValue[[]interface{}]
	Uri plugin.TValue[string]
	Reconciling plugin.TValue[bool]
}

// createGcpProjectCloudRunServiceService creates a new instance of this resource
func createGcpProjectCloudRunServiceService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.service", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceService) MqlName() string {
	return "gcp.project.cloudRunService.service"
}

func (c *mqlGcpProjectCloudRunServiceService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceService) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunServiceService) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlGcpProjectCloudRunServiceService) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudRunServiceService) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectCloudRunServiceService) GetGeneration() *plugin.TValue[int64] {
	return &c.Generation
}

func (c *mqlGcpProjectCloudRunServiceService) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectCloudRunServiceService) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlGcpProjectCloudRunServiceService) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectCloudRunServiceService) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpProjectCloudRunServiceService) GetDeleted() *plugin.TValue[*time.Time] {
	return &c.Deleted
}

func (c *mqlGcpProjectCloudRunServiceService) GetExpired() *plugin.TValue[*time.Time] {
	return &c.Expired
}

func (c *mqlGcpProjectCloudRunServiceService) GetCreator() *plugin.TValue[string] {
	return &c.Creator
}

func (c *mqlGcpProjectCloudRunServiceService) GetLastModifier() *plugin.TValue[string] {
	return &c.LastModifier
}

func (c *mqlGcpProjectCloudRunServiceService) GetIngress() *plugin.TValue[string] {
	return &c.Ingress
}

func (c *mqlGcpProjectCloudRunServiceService) GetLaunchStage() *plugin.TValue[string] {
	return &c.LaunchStage
}

func (c *mqlGcpProjectCloudRunServiceService) GetTemplate() *plugin.TValue[*mqlGcpProjectCloudRunServiceServiceRevisionTemplate] {
	return &c.Template
}

func (c *mqlGcpProjectCloudRunServiceService) GetTraffic() *plugin.TValue[[]interface{}] {
	return &c.Traffic
}

func (c *mqlGcpProjectCloudRunServiceService) GetObservedGeneration() *plugin.TValue[int64] {
	return &c.ObservedGeneration
}

func (c *mqlGcpProjectCloudRunServiceService) GetTerminalCondition() *plugin.TValue[*mqlGcpProjectCloudRunServiceCondition] {
	return &c.TerminalCondition
}

func (c *mqlGcpProjectCloudRunServiceService) GetConditions() *plugin.TValue[[]interface{}] {
	return &c.Conditions
}

func (c *mqlGcpProjectCloudRunServiceService) GetLatestReadyRevision() *plugin.TValue[string] {
	return &c.LatestReadyRevision
}

func (c *mqlGcpProjectCloudRunServiceService) GetLatestCreatedRevision() *plugin.TValue[string] {
	return &c.LatestCreatedRevision
}

func (c *mqlGcpProjectCloudRunServiceService) GetTrafficStatuses() *plugin.TValue[[]interface{}] {
	return &c.TrafficStatuses
}

func (c *mqlGcpProjectCloudRunServiceService) GetUri() *plugin.TValue[string] {
	return &c.Uri
}

func (c *mqlGcpProjectCloudRunServiceService) GetReconciling() *plugin.TValue[bool] {
	return &c.Reconciling
}

// mqlGcpProjectCloudRunServiceServiceRevisionTemplate for the gcp.project.cloudRunService.service.revisionTemplate resource
type mqlGcpProjectCloudRunServiceServiceRevisionTemplate struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceServiceRevisionTemplateInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Scaling plugin.TValue[interface{}]
	VpcAccess plugin.TValue[interface{}]
	Timeout plugin.TValue[*time.Time]
	ServiceAccountEmail plugin.TValue[string]
	ServiceAccount plugin.TValue[*mqlGcpProjectIamServiceServiceAccount]
	Containers plugin.TValue[[]interface{}]
	Volumes plugin.TValue[[]interface{}]
	ExecutionEnvironment plugin.TValue[string]
	EncryptionKey plugin.TValue[string]
	MaxInstanceRequestConcurrency plugin.TValue[int64]
}

// createGcpProjectCloudRunServiceServiceRevisionTemplate creates a new instance of this resource
func createGcpProjectCloudRunServiceServiceRevisionTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceServiceRevisionTemplate{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.service.revisionTemplate", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) MqlName() string {
	return "gcp.project.cloudRunService.service.revisionTemplate"
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetScaling() *plugin.TValue[interface{}] {
	return &c.Scaling
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetVpcAccess() *plugin.TValue[interface{}] {
	return &c.VpcAccess
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetTimeout() *plugin.TValue[*time.Time] {
	return &c.Timeout
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetServiceAccount() *plugin.TValue[*mqlGcpProjectIamServiceServiceAccount] {
	return plugin.GetOrCompute[*mqlGcpProjectIamServiceServiceAccount](&c.ServiceAccount, func() (*mqlGcpProjectIamServiceServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.cloudRunService.service.revisionTemplate", c.__id, "serviceAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamServiceServiceAccount), nil
			}
		}

		return c.serviceAccount()
	})
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetContainers() *plugin.TValue[[]interface{}] {
	return &c.Containers
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetVolumes() *plugin.TValue[[]interface{}] {
	return &c.Volumes
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetExecutionEnvironment() *plugin.TValue[string] {
	return &c.ExecutionEnvironment
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetEncryptionKey() *plugin.TValue[string] {
	return &c.EncryptionKey
}

func (c *mqlGcpProjectCloudRunServiceServiceRevisionTemplate) GetMaxInstanceRequestConcurrency() *plugin.TValue[int64] {
	return &c.MaxInstanceRequestConcurrency
}

// mqlGcpProjectCloudRunServiceContainer for the gcp.project.cloudRunService.container resource
type mqlGcpProjectCloudRunServiceContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceContainerInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Image plugin.TValue[string]
	Command plugin.TValue[[]interface{}]
	Args plugin.TValue[[]interface{}]
	Env plugin.TValue[[]interface{}]
	Resources plugin.TValue[interface{}]
	Ports plugin.TValue[[]interface{}]
	VolumeMounts plugin.TValue[[]interface{}]
	WorkingDir plugin.TValue[string]
	LivenessProbe plugin.TValue[*mqlGcpProjectCloudRunServiceContainerProbe]
	StartupProbe plugin.TValue[*mqlGcpProjectCloudRunServiceContainerProbe]
}

// createGcpProjectCloudRunServiceContainer creates a new instance of this resource
func createGcpProjectCloudRunServiceContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.container", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceContainer) MqlName() string {
	return "gcp.project.cloudRunService.container"
}

func (c *mqlGcpProjectCloudRunServiceContainer) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetImage() *plugin.TValue[string] {
	return &c.Image
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetCommand() *plugin.TValue[[]interface{}] {
	return &c.Command
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetArgs() *plugin.TValue[[]interface{}] {
	return &c.Args
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetEnv() *plugin.TValue[[]interface{}] {
	return &c.Env
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetResources() *plugin.TValue[interface{}] {
	return &c.Resources
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetPorts() *plugin.TValue[[]interface{}] {
	return &c.Ports
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetVolumeMounts() *plugin.TValue[[]interface{}] {
	return &c.VolumeMounts
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetWorkingDir() *plugin.TValue[string] {
	return &c.WorkingDir
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetLivenessProbe() *plugin.TValue[*mqlGcpProjectCloudRunServiceContainerProbe] {
	return &c.LivenessProbe
}

func (c *mqlGcpProjectCloudRunServiceContainer) GetStartupProbe() *plugin.TValue[*mqlGcpProjectCloudRunServiceContainerProbe] {
	return &c.StartupProbe
}

// mqlGcpProjectCloudRunServiceContainerProbe for the gcp.project.cloudRunService.container.probe resource
type mqlGcpProjectCloudRunServiceContainerProbe struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceContainerProbeInternal it will be used here
	Id plugin.TValue[string]
	InitialDelaySeconds plugin.TValue[int64]
	TimeoutSeconds plugin.TValue[int64]
	PeriodSeconds plugin.TValue[int64]
	FailureThreshold plugin.TValue[int64]
	HttpGet plugin.TValue[interface{}]
	TcpSocket plugin.TValue[interface{}]
}

// createGcpProjectCloudRunServiceContainerProbe creates a new instance of this resource
func createGcpProjectCloudRunServiceContainerProbe(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceContainerProbe{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.container.probe", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) MqlName() string {
	return "gcp.project.cloudRunService.container.probe"
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetInitialDelaySeconds() *plugin.TValue[int64] {
	return &c.InitialDelaySeconds
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetTimeoutSeconds() *plugin.TValue[int64] {
	return &c.TimeoutSeconds
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetPeriodSeconds() *plugin.TValue[int64] {
	return &c.PeriodSeconds
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetFailureThreshold() *plugin.TValue[int64] {
	return &c.FailureThreshold
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetHttpGet() *plugin.TValue[interface{}] {
	return &c.HttpGet
}

func (c *mqlGcpProjectCloudRunServiceContainerProbe) GetTcpSocket() *plugin.TValue[interface{}] {
	return &c.TcpSocket
}

// mqlGcpProjectCloudRunServiceCondition for the gcp.project.cloudRunService.condition resource
type mqlGcpProjectCloudRunServiceCondition struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceConditionInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
	State plugin.TValue[string]
	Message plugin.TValue[string]
	LastTransitionTime plugin.TValue[*time.Time]
	Severity plugin.TValue[string]
}

// createGcpProjectCloudRunServiceCondition creates a new instance of this resource
func createGcpProjectCloudRunServiceCondition(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceCondition{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.condition", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceCondition) MqlName() string {
	return "gcp.project.cloudRunService.condition"
}

func (c *mqlGcpProjectCloudRunServiceCondition) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetMessage() *plugin.TValue[string] {
	return &c.Message
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetLastTransitionTime() *plugin.TValue[*time.Time] {
	return &c.LastTransitionTime
}

func (c *mqlGcpProjectCloudRunServiceCondition) GetSeverity() *plugin.TValue[string] {
	return &c.Severity
}

// mqlGcpProjectCloudRunServiceJob for the gcp.project.cloudRunService.job resource
type mqlGcpProjectCloudRunServiceJob struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceJobInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Region plugin.TValue[string]
	Name plugin.TValue[string]
	Generation plugin.TValue[int64]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Updated plugin.TValue[*time.Time]
	Deleted plugin.TValue[*time.Time]
	Expired plugin.TValue[*time.Time]
	Creator plugin.TValue[string]
	LastModifier plugin.TValue[string]
	Client plugin.TValue[string]
	ClientVersion plugin.TValue[string]
	LaunchStage plugin.TValue[string]
	Template plugin.TValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplate]
	ObservedGeneration plugin.TValue[int64]
	TerminalCondition plugin.TValue[*mqlGcpProjectCloudRunServiceCondition]
	Conditions plugin.TValue[[]interface{}]
	ExecutionCount plugin.TValue[int64]
	Reconciling plugin.TValue[bool]
}

// createGcpProjectCloudRunServiceJob creates a new instance of this resource
func createGcpProjectCloudRunServiceJob(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceJob{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.job", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceJob) MqlName() string {
	return "gcp.project.cloudRunService.job"
}

func (c *mqlGcpProjectCloudRunServiceJob) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceJob) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceJob) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunServiceJob) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlGcpProjectCloudRunServiceJob) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectCloudRunServiceJob) GetGeneration() *plugin.TValue[int64] {
	return &c.Generation
}

func (c *mqlGcpProjectCloudRunServiceJob) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectCloudRunServiceJob) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlGcpProjectCloudRunServiceJob) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectCloudRunServiceJob) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpProjectCloudRunServiceJob) GetDeleted() *plugin.TValue[*time.Time] {
	return &c.Deleted
}

func (c *mqlGcpProjectCloudRunServiceJob) GetExpired() *plugin.TValue[*time.Time] {
	return &c.Expired
}

func (c *mqlGcpProjectCloudRunServiceJob) GetCreator() *plugin.TValue[string] {
	return &c.Creator
}

func (c *mqlGcpProjectCloudRunServiceJob) GetLastModifier() *plugin.TValue[string] {
	return &c.LastModifier
}

func (c *mqlGcpProjectCloudRunServiceJob) GetClient() *plugin.TValue[string] {
	return &c.Client
}

func (c *mqlGcpProjectCloudRunServiceJob) GetClientVersion() *plugin.TValue[string] {
	return &c.ClientVersion
}

func (c *mqlGcpProjectCloudRunServiceJob) GetLaunchStage() *plugin.TValue[string] {
	return &c.LaunchStage
}

func (c *mqlGcpProjectCloudRunServiceJob) GetTemplate() *plugin.TValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplate] {
	return &c.Template
}

func (c *mqlGcpProjectCloudRunServiceJob) GetObservedGeneration() *plugin.TValue[int64] {
	return &c.ObservedGeneration
}

func (c *mqlGcpProjectCloudRunServiceJob) GetTerminalCondition() *plugin.TValue[*mqlGcpProjectCloudRunServiceCondition] {
	return &c.TerminalCondition
}

func (c *mqlGcpProjectCloudRunServiceJob) GetConditions() *plugin.TValue[[]interface{}] {
	return &c.Conditions
}

func (c *mqlGcpProjectCloudRunServiceJob) GetExecutionCount() *plugin.TValue[int64] {
	return &c.ExecutionCount
}

func (c *mqlGcpProjectCloudRunServiceJob) GetReconciling() *plugin.TValue[bool] {
	return &c.Reconciling
}

// mqlGcpProjectCloudRunServiceJobExecutionTemplate for the gcp.project.cloudRunService.job.executionTemplate resource
type mqlGcpProjectCloudRunServiceJobExecutionTemplate struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceJobExecutionTemplateInternal it will be used here
	Id plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Parallelism plugin.TValue[int64]
	TaskCount plugin.TValue[int64]
	Template plugin.TValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate]
}

// createGcpProjectCloudRunServiceJobExecutionTemplate creates a new instance of this resource
func createGcpProjectCloudRunServiceJobExecutionTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceJobExecutionTemplate{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.job.executionTemplate", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) MqlName() string {
	return "gcp.project.cloudRunService.job.executionTemplate"
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetParallelism() *plugin.TValue[int64] {
	return &c.Parallelism
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetTaskCount() *plugin.TValue[int64] {
	return &c.TaskCount
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplate) GetTemplate() *plugin.TValue[*mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate] {
	return &c.Template
}

// mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate for the gcp.project.cloudRunService.job.executionTemplate.taskTemplate resource
type mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplateInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	VpcAccess plugin.TValue[interface{}]
	Timeout plugin.TValue[*time.Time]
	ServiceAccountEmail plugin.TValue[string]
	ServiceAccount plugin.TValue[*mqlGcpProjectIamServiceServiceAccount]
	Containers plugin.TValue[[]interface{}]
	Volumes plugin.TValue[[]interface{}]
	ExecutionEnvironment plugin.TValue[string]
	EncryptionKey plugin.TValue[string]
	MaxRetries plugin.TValue[int64]
}

// createGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate creates a new instance of this resource
func createGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.cloudRunService.job.executionTemplate.taskTemplate", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) MqlName() string {
	return "gcp.project.cloudRunService.job.executionTemplate.taskTemplate"
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetVpcAccess() *plugin.TValue[interface{}] {
	return &c.VpcAccess
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetTimeout() *plugin.TValue[*time.Time] {
	return &c.Timeout
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetServiceAccount() *plugin.TValue[*mqlGcpProjectIamServiceServiceAccount] {
	return plugin.GetOrCompute[*mqlGcpProjectIamServiceServiceAccount](&c.ServiceAccount, func() (*mqlGcpProjectIamServiceServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.cloudRunService.job.executionTemplate.taskTemplate", c.__id, "serviceAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamServiceServiceAccount), nil
			}
		}

		return c.serviceAccount()
	})
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetContainers() *plugin.TValue[[]interface{}] {
	return &c.Containers
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetVolumes() *plugin.TValue[[]interface{}] {
	return &c.Volumes
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetExecutionEnvironment() *plugin.TValue[string] {
	return &c.ExecutionEnvironment
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetEncryptionKey() *plugin.TValue[string] {
	return &c.EncryptionKey
}

func (c *mqlGcpProjectCloudRunServiceJobExecutionTemplateTaskTemplate) GetMaxRetries() *plugin.TValue[int64] {
	return &c.MaxRetries
}

// mqlGcpAccessApprovalSettings for the gcp.accessApprovalSettings resource
type mqlGcpAccessApprovalSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpAccessApprovalSettingsInternal it will be used here
	ResourcePath plugin.TValue[string]
	NotificationEmails plugin.TValue[[]interface{}]
	EnrolledServices plugin.TValue[[]interface{}]
	EnrolledAncestor plugin.TValue[bool]
	ActiveKeyVersion plugin.TValue[string]
	AncestorHasActiveKeyVersion plugin.TValue[bool]
	InvalidKeyVersion plugin.TValue[bool]
}

// createGcpAccessApprovalSettings creates a new instance of this resource
func createGcpAccessApprovalSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpAccessApprovalSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.accessApprovalSettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpAccessApprovalSettings) MqlName() string {
	return "gcp.accessApprovalSettings"
}

func (c *mqlGcpAccessApprovalSettings) MqlID() string {
	return c.__id
}

func (c *mqlGcpAccessApprovalSettings) GetResourcePath() *plugin.TValue[string] {
	return &c.ResourcePath
}

func (c *mqlGcpAccessApprovalSettings) GetNotificationEmails() *plugin.TValue[[]interface{}] {
	return &c.NotificationEmails
}

func (c *mqlGcpAccessApprovalSettings) GetEnrolledServices() *plugin.TValue[[]interface{}] {
	return &c.EnrolledServices
}

func (c *mqlGcpAccessApprovalSettings) GetEnrolledAncestor() *plugin.TValue[bool] {
	return &c.EnrolledAncestor
}

func (c *mqlGcpAccessApprovalSettings) GetActiveKeyVersion() *plugin.TValue[string] {
	return &c.ActiveKeyVersion
}

func (c *mqlGcpAccessApprovalSettings) GetAncestorHasActiveKeyVersion() *plugin.TValue[bool] {
	return &c.AncestorHasActiveKeyVersion
}

func (c *mqlGcpAccessApprovalSettings) GetInvalidKeyVersion() *plugin.TValue[bool] {
	return &c.InvalidKeyVersion
}

// mqlGcpProjectMonitoringService for the gcp.project.monitoringService resource
type mqlGcpProjectMonitoringService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectMonitoringServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	AlertPolicies plugin.TValue[[]interface{}]
}

// createGcpProjectMonitoringService creates a new instance of this resource
func createGcpProjectMonitoringService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectMonitoringService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.monitoringService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectMonitoringService) MqlName() string {
	return "gcp.project.monitoringService"
}

func (c *mqlGcpProjectMonitoringService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectMonitoringService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectMonitoringService) GetAlertPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AlertPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.monitoringService", c.__id, "alertPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.alertPolicies()
	})
}

// mqlGcpProjectMonitoringServiceAlertPolicy for the gcp.project.monitoringService.alertPolicy resource
type mqlGcpProjectMonitoringServiceAlertPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectMonitoringServiceAlertPolicyInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	DisplayName plugin.TValue[string]
	Documentation plugin.TValue[interface{}]
	Labels plugin.TValue[map[string]interface{}]
	Conditions plugin.TValue[[]interface{}]
	Combiner plugin.TValue[string]
	Enabled plugin.TValue[bool]
	Validity plugin.TValue[interface{}]
	NotificationChannelUrls plugin.TValue[[]interface{}]
	Created plugin.TValue[*time.Time]
	CreatedBy plugin.TValue[string]
	Updated plugin.TValue[*time.Time]
	UpdatedBy plugin.TValue[string]
	AlertStrategy plugin.TValue[interface{}]
}

// createGcpProjectMonitoringServiceAlertPolicy creates a new instance of this resource
func createGcpProjectMonitoringServiceAlertPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectMonitoringServiceAlertPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.monitoringService.alertPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) MqlName() string {
	return "gcp.project.monitoringService.alertPolicy"
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetDocumentation() *plugin.TValue[interface{}] {
	return &c.Documentation
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetConditions() *plugin.TValue[[]interface{}] {
	return &c.Conditions
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetCombiner() *plugin.TValue[string] {
	return &c.Combiner
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetValidity() *plugin.TValue[interface{}] {
	return &c.Validity
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetNotificationChannelUrls() *plugin.TValue[[]interface{}] {
	return &c.NotificationChannelUrls
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetCreatedBy() *plugin.TValue[string] {
	return &c.CreatedBy
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetUpdatedBy() *plugin.TValue[string] {
	return &c.UpdatedBy
}

func (c *mqlGcpProjectMonitoringServiceAlertPolicy) GetAlertStrategy() *plugin.TValue[interface{}] {
	return &c.AlertStrategy
}

// mqlGcpProjectBinaryAuthorizationControl for the gcp.project.binaryAuthorizationControl resource
type mqlGcpProjectBinaryAuthorizationControl struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBinaryAuthorizationControlInternal it will be used here
	Policy plugin.TValue[*mqlGcpProjectBinaryAuthorizationControlPolicy]
}

// createGcpProjectBinaryAuthorizationControl creates a new instance of this resource
func createGcpProjectBinaryAuthorizationControl(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBinaryAuthorizationControl{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.binaryAuthorizationControl", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBinaryAuthorizationControl) MqlName() string {
	return "gcp.project.binaryAuthorizationControl"
}

func (c *mqlGcpProjectBinaryAuthorizationControl) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBinaryAuthorizationControl) GetPolicy() *plugin.TValue[*mqlGcpProjectBinaryAuthorizationControlPolicy] {
	return &c.Policy
}

// mqlGcpProjectBinaryAuthorizationControlPolicy for the gcp.project.binaryAuthorizationControl.policy resource
type mqlGcpProjectBinaryAuthorizationControlPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBinaryAuthorizationControlPolicyInternal it will be used here
	Name plugin.TValue[string]
	GlobalPolicyEvaluationMode plugin.TValue[string]
	AdmissionWhitelistPatterns plugin.TValue[[]interface{}]
	ClusterAdmissionRules plugin.TValue[map[string]interface{}]
	KubernetesNamespaceAdmissionRules plugin.TValue[map[string]interface{}]
	KubernetesServiceAccountAdmissionRules plugin.TValue[map[string]interface{}]
	IstioServiceIdentityAdmissionRules plugin.TValue[map[string]interface{}]
	DefaultAdmissionRule plugin.TValue[*mqlGcpProjectBinaryAuthorizationControlAdmissionRule]
	Updated plugin.TValue[*time.Time]
}

// createGcpProjectBinaryAuthorizationControlPolicy creates a new instance of this resource
func createGcpProjectBinaryAuthorizationControlPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBinaryAuthorizationControlPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.binaryAuthorizationControl.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) MqlName() string {
	return "gcp.project.binaryAuthorizationControl.policy"
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetGlobalPolicyEvaluationMode() *plugin.TValue[string] {
	return &c.GlobalPolicyEvaluationMode
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetAdmissionWhitelistPatterns() *plugin.TValue[[]interface{}] {
	return &c.AdmissionWhitelistPatterns
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetClusterAdmissionRules() *plugin.TValue[map[string]interface{}] {
	return &c.ClusterAdmissionRules
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetKubernetesNamespaceAdmissionRules() *plugin.TValue[map[string]interface{}] {
	return &c.KubernetesNamespaceAdmissionRules
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetKubernetesServiceAccountAdmissionRules() *plugin.TValue[map[string]interface{}] {
	return &c.KubernetesServiceAccountAdmissionRules
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetIstioServiceIdentityAdmissionRules() *plugin.TValue[map[string]interface{}] {
	return &c.IstioServiceIdentityAdmissionRules
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetDefaultAdmissionRule() *plugin.TValue[*mqlGcpProjectBinaryAuthorizationControlAdmissionRule] {
	return &c.DefaultAdmissionRule
}

func (c *mqlGcpProjectBinaryAuthorizationControlPolicy) GetUpdated() *plugin.TValue[*time.Time] {
	return &c.Updated
}

// mqlGcpProjectBinaryAuthorizationControlAdmissionRule for the gcp.project.binaryAuthorizationControl.admissionRule resource
type mqlGcpProjectBinaryAuthorizationControlAdmissionRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectBinaryAuthorizationControlAdmissionRuleInternal it will be used here
	EvaluationMode plugin.TValue[string]
	EnforcementMode plugin.TValue[string]
	RequireAttestationsBy plugin.TValue[[]interface{}]
}

// createGcpProjectBinaryAuthorizationControlAdmissionRule creates a new instance of this resource
func createGcpProjectBinaryAuthorizationControlAdmissionRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectBinaryAuthorizationControlAdmissionRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.binaryAuthorizationControl.admissionRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectBinaryAuthorizationControlAdmissionRule) MqlName() string {
	return "gcp.project.binaryAuthorizationControl.admissionRule"
}

func (c *mqlGcpProjectBinaryAuthorizationControlAdmissionRule) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectBinaryAuthorizationControlAdmissionRule) GetEvaluationMode() *plugin.TValue[string] {
	return &c.EvaluationMode
}

func (c *mqlGcpProjectBinaryAuthorizationControlAdmissionRule) GetEnforcementMode() *plugin.TValue[string] {
	return &c.EnforcementMode
}

func (c *mqlGcpProjectBinaryAuthorizationControlAdmissionRule) GetRequireAttestationsBy() *plugin.TValue[[]interface{}] {
	return &c.RequireAttestationsBy
}
