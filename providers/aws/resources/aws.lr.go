// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"aws": {
			// to override args, implement: initAws(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAws,
		},
		"aws.account": {
			// to override args, implement: initAwsAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsAccount,
		},
		"aws.organization": {
			// to override args, implement: initAwsOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsOrganization,
		},
		"aws.vpc": {
			// to override args, implement: initAwsVpc(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsVpc,
		},
		"aws.vpc.routetable": {
			// to override args, implement: initAwsVpcRoutetable(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsVpcRoutetable,
		},
		"aws.vpc.flowlog": {
			// to override args, implement: initAwsVpcFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsVpcFlowlog,
		},
		"aws.accessAnalyzer": {
			// to override args, implement: initAwsAccessAnalyzer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsAccessAnalyzer,
		},
		"aws.accessanalyzer.analyzer": {
			// to override args, implement: initAwsAccessanalyzerAnalyzer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsAccessanalyzerAnalyzer,
		},
		"aws.efs": {
			// to override args, implement: initAwsEfs(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsEfs,
		},
		"aws.efs.filesystem": {
			// to override args, implement: initAwsEfsFilesystem(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsEfsFilesystem,
		},
		"aws.kms": {
			// to override args, implement: initAwsKms(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsKms,
		},
		"aws.kms.key": {
			Init: initAwsKmsKey,
			Create: createAwsKmsKey,
		},
		"aws.iam": {
			// to override args, implement: initAwsIam(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsIam,
		},
		"aws.iam.usercredentialreportentry": {
			// to override args, implement: initAwsIamUsercredentialreportentry(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsIamUsercredentialreportentry,
		},
		"aws.iam.user": {
			Init: initAwsIamUser,
			Create: createAwsIamUser,
		},
		"aws.iam.policy": {
			// to override args, implement: initAwsIamPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsIamPolicy,
		},
		"aws.iam.policyversion": {
			// to override args, implement: initAwsIamPolicyversion(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsIamPolicyversion,
		},
		"aws.iam.role": {
			Init: initAwsIamRole,
			Create: createAwsIamRole,
		},
		"aws.iam.group": {
			Init: initAwsIamGroup,
			Create: createAwsIamGroup,
		},
		"aws.iam.virtualmfadevice": {
			// to override args, implement: initAwsIamVirtualmfadevice(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsIamVirtualmfadevice,
		},
		"aws.sagemaker": {
			// to override args, implement: initAwsSagemaker(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSagemaker,
		},
		"aws.sagemaker.notebookinstance": {
			Init: initAwsSagemakerNotebookinstance,
			Create: createAwsSagemakerNotebookinstance,
		},
		"aws.sagemaker.notebookinstance.details": {
			// to override args, implement: initAwsSagemakerNotebookinstanceDetails(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSagemakerNotebookinstanceDetails,
		},
		"aws.sagemaker.endpoint": {
			// to override args, implement: initAwsSagemakerEndpoint(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSagemakerEndpoint,
		},
		"aws.sns": {
			// to override args, implement: initAwsSns(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSns,
		},
		"aws.sns.topic": {
			// to override args, implement: initAwsSnsTopic(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSnsTopic,
		},
		"aws.sns.subscription": {
			// to override args, implement: initAwsSnsSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAwsSnsSubscription,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"aws.vpcs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAws).GetVpcs()).ToDataRes(types.Array(types.Resource("aws.vpc")))
	},
	"aws.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAws).GetRegions()).ToDataRes(types.Array(types.String))
	},
	"aws.account.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccount).GetId()).ToDataRes(types.String)
	},
	"aws.account.aliases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccount).GetAliases()).ToDataRes(types.Array(types.String))
	},
	"aws.account.organization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccount).GetOrganization()).ToDataRes(types.Resource("aws.organization"))
	},
	"aws.organization.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsOrganization).GetArn()).ToDataRes(types.String)
	},
	"aws.organization.featureSet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsOrganization).GetFeatureSet()).ToDataRes(types.String)
	},
	"aws.organization.masterAccountId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsOrganization).GetMasterAccountId()).ToDataRes(types.String)
	},
	"aws.organization.masterAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsOrganization).GetMasterAccountEmail()).ToDataRes(types.String)
	},
	"aws.vpc.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetArn()).ToDataRes(types.String)
	},
	"aws.vpc.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetId()).ToDataRes(types.String)
	},
	"aws.vpc.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetState()).ToDataRes(types.String)
	},
	"aws.vpc.isDefault": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetIsDefault()).ToDataRes(types.Bool)
	},
	"aws.vpc.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetRegion()).ToDataRes(types.String)
	},
	"aws.vpc.flowLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetFlowLogs()).ToDataRes(types.Array(types.Resource("aws.vpc.flowlog")))
	},
	"aws.vpc.routeTables": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetRouteTables()).ToDataRes(types.Array(types.Resource("aws.vpc.routetable")))
	},
	"aws.vpc.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpc).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.vpc.routetable.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcRoutetable).GetId()).ToDataRes(types.String)
	},
	"aws.vpc.routetable.routes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcRoutetable).GetRoutes()).ToDataRes(types.Array(types.Dict))
	},
	"aws.vpc.flowlog.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcFlowlog).GetId()).ToDataRes(types.String)
	},
	"aws.vpc.flowlog.vpc": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcFlowlog).GetVpc()).ToDataRes(types.String)
	},
	"aws.vpc.flowlog.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcFlowlog).GetRegion()).ToDataRes(types.String)
	},
	"aws.vpc.flowlog.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcFlowlog).GetStatus()).ToDataRes(types.String)
	},
	"aws.vpc.flowlog.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsVpcFlowlog).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.accessAnalyzer.analyzers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessAnalyzer).GetAnalyzers()).ToDataRes(types.Array(types.Resource("aws.accessanalyzer.analyzer")))
	},
	"aws.accessanalyzer.analyzer.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessanalyzerAnalyzer).GetArn()).ToDataRes(types.String)
	},
	"aws.accessanalyzer.analyzer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessanalyzerAnalyzer).GetName()).ToDataRes(types.String)
	},
	"aws.accessanalyzer.analyzer.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessanalyzerAnalyzer).GetStatus()).ToDataRes(types.String)
	},
	"aws.accessanalyzer.analyzer.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessanalyzerAnalyzer).GetType()).ToDataRes(types.String)
	},
	"aws.accessanalyzer.analyzer.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsAccessanalyzerAnalyzer).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.efs.filesystems": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfs).GetFilesystems()).ToDataRes(types.Array(types.Resource("aws.efs.filesystem")))
	},
	"aws.efs.filesystem.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetName()).ToDataRes(types.String)
	},
	"aws.efs.filesystem.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetId()).ToDataRes(types.String)
	},
	"aws.efs.filesystem.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetArn()).ToDataRes(types.String)
	},
	"aws.efs.filesystem.encrypted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetEncrypted()).ToDataRes(types.Bool)
	},
	"aws.efs.filesystem.kmsKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetKmsKey()).ToDataRes(types.Resource("aws.kms.key"))
	},
	"aws.efs.filesystem.backupPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetBackupPolicy()).ToDataRes(types.Dict)
	},
	"aws.efs.filesystem.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetRegion()).ToDataRes(types.String)
	},
	"aws.efs.filesystem.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsEfsFilesystem).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.kms.keys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKms).GetKeys()).ToDataRes(types.Array(types.Resource("aws.kms.key")))
	},
	"aws.kms.key.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKmsKey).GetId()).ToDataRes(types.String)
	},
	"aws.kms.key.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKmsKey).GetArn()).ToDataRes(types.String)
	},
	"aws.kms.key.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKmsKey).GetRegion()).ToDataRes(types.String)
	},
	"aws.kms.key.keyRotationEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKmsKey).GetKeyRotationEnabled()).ToDataRes(types.Bool)
	},
	"aws.kms.key.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsKmsKey).GetMetadata()).ToDataRes(types.Dict)
	},
	"aws.iam.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetUsers()).ToDataRes(types.Array(types.Resource("aws.iam.user")))
	},
	"aws.iam.roles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetRoles()).ToDataRes(types.Array(types.Resource("aws.iam.role")))
	},
	"aws.iam.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetGroups()).ToDataRes(types.Array(types.Resource("aws.iam.group")))
	},
	"aws.iam.policies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetPolicies()).ToDataRes(types.Array(types.Resource("aws.iam.policy")))
	},
	"aws.iam.attachedPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetAttachedPolicies()).ToDataRes(types.Array(types.Resource("aws.iam.policy")))
	},
	"aws.iam.credentialReport": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetCredentialReport()).ToDataRes(types.Array(types.Resource("aws.iam.usercredentialreportentry")))
	},
	"aws.iam.accountPasswordPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetAccountPasswordPolicy()).ToDataRes(types.Dict)
	},
	"aws.iam.accountSummary": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetAccountSummary()).ToDataRes(types.Map(types.String, types.Int))
	},
	"aws.iam.virtualMfaDevices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetVirtualMfaDevices()).ToDataRes(types.Array(types.Resource("aws.iam.virtualmfadevice")))
	},
	"aws.iam.serverCertificates": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIam).GetServerCertificates()).ToDataRes(types.Array(types.Dict))
	},
	"aws.iam.usercredentialreportentry.properties": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetProperties()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.iam.usercredentialreportentry.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.usercredentialreportentry.accessKey1Active": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey1Active()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.accessKey1LastRotated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey1LastRotated()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey1LastUsedDate()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedRegion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey1LastUsedRegion()).ToDataRes(types.String)
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey1LastUsedService()).ToDataRes(types.String)
	},
	"aws.iam.usercredentialreportentry.accessKey2Active": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey2Active()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.accessKey2LastRotated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey2LastRotated()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey2LastUsedDate()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedRegion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey2LastUsedRegion()).ToDataRes(types.String)
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetAccessKey2LastUsedService()).ToDataRes(types.String)
	},
	"aws.iam.usercredentialreportentry.cert1Active": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetCert1Active()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.cert1LastRotated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetCert1LastRotated()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.cert2Active": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetCert2Active()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.cert2LastRotated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetCert2LastRotated()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.mfaActive": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetMfaActive()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.passwordEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetPasswordEnabled()).ToDataRes(types.Bool)
	},
	"aws.iam.usercredentialreportentry.passwordLastChanged": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetPasswordLastChanged()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.passwordLastUsed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetPasswordLastUsed()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.passwordNextRotation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetPasswordNextRotation()).ToDataRes(types.Time)
	},
	"aws.iam.usercredentialreportentry.user": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetUser()).ToDataRes(types.Resource("aws.iam.user"))
	},
	"aws.iam.usercredentialreportentry.userCreationTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUsercredentialreportentry).GetUserCreationTime()).ToDataRes(types.Time)
	},
	"aws.iam.user.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetId()).ToDataRes(types.String)
	},
	"aws.iam.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetName()).ToDataRes(types.String)
	},
	"aws.iam.user.createDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetCreateDate()).ToDataRes(types.Time)
	},
	"aws.iam.user.passwordLastUsed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetPasswordLastUsed()).ToDataRes(types.Time)
	},
	"aws.iam.user.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.iam.user.policies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetPolicies()).ToDataRes(types.Array(types.String))
	},
	"aws.iam.user.attachedPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetAttachedPolicies()).ToDataRes(types.Array(types.Resource("aws.iam.policy")))
	},
	"aws.iam.user.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetGroups()).ToDataRes(types.Array(types.String))
	},
	"aws.iam.user.accessKeys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamUser).GetAccessKeys()).ToDataRes(types.Array(types.Dict))
	},
	"aws.iam.policy.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.policy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetId()).ToDataRes(types.String)
	},
	"aws.iam.policy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetName()).ToDataRes(types.String)
	},
	"aws.iam.policy.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetDescription()).ToDataRes(types.String)
	},
	"aws.iam.policy.isAttachable": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetIsAttachable()).ToDataRes(types.Bool)
	},
	"aws.iam.policy.attachmentCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetAttachmentCount()).ToDataRes(types.Int)
	},
	"aws.iam.policy.createDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetCreateDate()).ToDataRes(types.Time)
	},
	"aws.iam.policy.updateDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetUpdateDate()).ToDataRes(types.Time)
	},
	"aws.iam.policy.scope": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetScope()).ToDataRes(types.String)
	},
	"aws.iam.policy.versions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetVersions()).ToDataRes(types.Array(types.Resource("aws.iam.policyversion")))
	},
	"aws.iam.policy.defaultVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetDefaultVersion()).ToDataRes(types.Resource("aws.iam.policyversion"))
	},
	"aws.iam.policy.attachedUsers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetAttachedUsers()).ToDataRes(types.Array(types.Resource("aws.iam.user")))
	},
	"aws.iam.policy.attachedRoles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetAttachedRoles()).ToDataRes(types.Array(types.Resource("aws.iam.role")))
	},
	"aws.iam.policy.attachedGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicy).GetAttachedGroups()).ToDataRes(types.Array(types.Resource("aws.iam.group")))
	},
	"aws.iam.policyversion.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicyversion).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.policyversion.versionId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicyversion).GetVersionId()).ToDataRes(types.String)
	},
	"aws.iam.policyversion.isDefaultVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicyversion).GetIsDefaultVersion()).ToDataRes(types.Bool)
	},
	"aws.iam.policyversion.document": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicyversion).GetDocument()).ToDataRes(types.Dict)
	},
	"aws.iam.policyversion.createDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamPolicyversion).GetCreateDate()).ToDataRes(types.Time)
	},
	"aws.iam.role.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.role.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetId()).ToDataRes(types.String)
	},
	"aws.iam.role.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetName()).ToDataRes(types.String)
	},
	"aws.iam.role.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetDescription()).ToDataRes(types.String)
	},
	"aws.iam.role.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.iam.role.createDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamRole).GetCreateDate()).ToDataRes(types.Time)
	},
	"aws.iam.group.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamGroup).GetArn()).ToDataRes(types.String)
	},
	"aws.iam.group.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamGroup).GetId()).ToDataRes(types.String)
	},
	"aws.iam.group.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamGroup).GetName()).ToDataRes(types.String)
	},
	"aws.iam.group.createDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamGroup).GetCreateDate()).ToDataRes(types.Time)
	},
	"aws.iam.group.usernames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamGroup).GetUsernames()).ToDataRes(types.Array(types.String))
	},
	"aws.iam.virtualmfadevice.serialNumber": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamVirtualmfadevice).GetSerialNumber()).ToDataRes(types.String)
	},
	"aws.iam.virtualmfadevice.enableDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamVirtualmfadevice).GetEnableDate()).ToDataRes(types.Time)
	},
	"aws.iam.virtualmfadevice.user": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsIamVirtualmfadevice).GetUser()).ToDataRes(types.Resource("aws.iam.user"))
	},
	"aws.sagemaker.endpoints": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemaker).GetEndpoints()).ToDataRes(types.Array(types.Resource("aws.sagemaker.endpoint")))
	},
	"aws.sagemaker.notebookInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemaker).GetNotebookInstances()).ToDataRes(types.Array(types.Resource("aws.sagemaker.notebookinstance")))
	},
	"aws.sagemaker.notebookinstance.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstance).GetArn()).ToDataRes(types.String)
	},
	"aws.sagemaker.notebookinstance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstance).GetName()).ToDataRes(types.String)
	},
	"aws.sagemaker.notebookinstance.details": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstance).GetDetails()).ToDataRes(types.Resource("aws.sagemaker.notebookinstance.details"))
	},
	"aws.sagemaker.notebookinstance.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstance).GetRegion()).ToDataRes(types.String)
	},
	"aws.sagemaker.notebookinstance.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstance).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.sagemaker.notebookinstance.details.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstanceDetails).GetArn()).ToDataRes(types.String)
	},
	"aws.sagemaker.notebookinstance.details.kmsKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstanceDetails).GetKmsKey()).ToDataRes(types.Resource("aws.kms.key"))
	},
	"aws.sagemaker.notebookinstance.details.directInternetAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerNotebookinstanceDetails).GetDirectInternetAccess()).ToDataRes(types.String)
	},
	"aws.sagemaker.endpoint.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerEndpoint).GetArn()).ToDataRes(types.String)
	},
	"aws.sagemaker.endpoint.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerEndpoint).GetName()).ToDataRes(types.String)
	},
	"aws.sagemaker.endpoint.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerEndpoint).GetConfig()).ToDataRes(types.Dict)
	},
	"aws.sagemaker.endpoint.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerEndpoint).GetRegion()).ToDataRes(types.String)
	},
	"aws.sagemaker.endpoint.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSagemakerEndpoint).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.sns.topics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSns).GetTopics()).ToDataRes(types.Array(types.Resource("aws.sns.topic")))
	},
	"aws.sns.topic.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsTopic).GetArn()).ToDataRes(types.String)
	},
	"aws.sns.topic.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsTopic).GetRegion()).ToDataRes(types.String)
	},
	"aws.sns.topic.subscriptions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsTopic).GetSubscriptions()).ToDataRes(types.Array(types.Resource("aws.sns.subscription")))
	},
	"aws.sns.topic.attributes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsTopic).GetAttributes()).ToDataRes(types.Dict)
	},
	"aws.sns.topic.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsTopic).GetTags()).ToDataRes(types.Map(types.String, types.String))
	},
	"aws.sns.subscription.arn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsSubscription).GetArn()).ToDataRes(types.String)
	},
	"aws.sns.subscription.protocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAwsSnsSubscription).GetProtocol()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"aws.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAws).__id, ok = v.Value.(string)
			return
		},
	"aws.vpcs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAws).Vpcs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAws).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.account.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsAccount).__id, ok = v.Value.(string)
			return
		},
	"aws.account.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccount).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.account.aliases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccount).Aliases, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.account.organization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccount).Organization, ok = plugin.RawToTValue[*mqlAwsOrganization](v.Value, v.Error)
		return
	},
	"aws.organization.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsOrganization).__id, ok = v.Value.(string)
			return
		},
	"aws.organization.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsOrganization).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.organization.featureSet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsOrganization).FeatureSet, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.organization.masterAccountId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsOrganization).MasterAccountId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.organization.masterAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsOrganization).MasterAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsVpc).__id, ok = v.Value.(string)
			return
		},
	"aws.vpc.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.isDefault": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).IsDefault, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.vpc.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.flowLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).FlowLogs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.vpc.routeTables": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).RouteTables, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.vpc.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpc).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.vpc.routetable.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsVpcRoutetable).__id, ok = v.Value.(string)
			return
		},
	"aws.vpc.routetable.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcRoutetable).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.routetable.routes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcRoutetable).Routes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.vpc.flowlog.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsVpcFlowlog).__id, ok = v.Value.(string)
			return
		},
	"aws.vpc.flowlog.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcFlowlog).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.flowlog.vpc": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcFlowlog).Vpc, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.flowlog.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcFlowlog).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.flowlog.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcFlowlog).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.vpc.flowlog.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsVpcFlowlog).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.accessAnalyzer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsAccessAnalyzer).__id, ok = v.Value.(string)
			return
		},
	"aws.accessAnalyzer.analyzers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessAnalyzer).Analyzers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.accessanalyzer.analyzer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsAccessanalyzerAnalyzer).__id, ok = v.Value.(string)
			return
		},
	"aws.accessanalyzer.analyzer.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessanalyzerAnalyzer).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.accessanalyzer.analyzer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessanalyzerAnalyzer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.accessanalyzer.analyzer.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessanalyzerAnalyzer).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.accessanalyzer.analyzer.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessanalyzerAnalyzer).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.accessanalyzer.analyzer.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsAccessanalyzerAnalyzer).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.efs.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsEfs).__id, ok = v.Value.(string)
			return
		},
	"aws.efs.filesystems": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfs).Filesystems, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsEfsFilesystem).__id, ok = v.Value.(string)
			return
		},
	"aws.efs.filesystem.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.encrypted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Encrypted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.kmsKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).KmsKey, ok = plugin.RawToTValue[*mqlAwsKmsKey](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.backupPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).BackupPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.efs.filesystem.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsEfsFilesystem).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.kms.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsKms).__id, ok = v.Value.(string)
			return
		},
	"aws.kms.keys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKms).Keys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.kms.key.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsKmsKey).__id, ok = v.Value.(string)
			return
		},
	"aws.kms.key.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKmsKey).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.kms.key.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKmsKey).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.kms.key.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKmsKey).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.kms.key.keyRotationEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKmsKey).KeyRotationEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.kms.key.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsKmsKey).Metadata, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIam).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.roles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).Roles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).Policies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.attachedPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).AttachedPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.credentialReport": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).CredentialReport, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.accountPasswordPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).AccountPasswordPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.accountSummary": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).AccountSummary, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.virtualMfaDevices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).VirtualMfaDevices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.serverCertificates": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIam).ServerCertificates, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamUsercredentialreportentry).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.usercredentialreportentry.properties": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Properties, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey1Active": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey1Active, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey1LastRotated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey1LastRotated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey1LastUsedDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedRegion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey1LastUsedRegion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey1LastUsedService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey1LastUsedService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey2Active": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey2Active, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey2LastRotated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey2LastRotated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey2LastUsedDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedRegion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey2LastUsedRegion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.accessKey2LastUsedService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).AccessKey2LastUsedService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.cert1Active": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Cert1Active, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.cert1LastRotated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Cert1LastRotated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.cert2Active": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Cert2Active, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.cert2LastRotated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).Cert2LastRotated, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.mfaActive": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).MfaActive, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.passwordEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).PasswordEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.passwordLastChanged": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).PasswordLastChanged, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.passwordLastUsed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).PasswordLastUsed, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.passwordNextRotation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).PasswordNextRotation, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.user": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).User, ok = plugin.RawToTValue[*mqlAwsIamUser](v.Value, v.Error)
		return
	},
	"aws.iam.usercredentialreportentry.userCreationTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUsercredentialreportentry).UserCreationTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamUser).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.user.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.user.createDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).CreateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.user.passwordLastUsed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).PasswordLastUsed, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.user.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.user.policies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Policies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.user.attachedPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).AttachedPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.user.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.user.accessKeys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamUser).AccessKeys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamPolicy).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.policy.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policy.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policy.isAttachable": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).IsAttachable, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.policy.attachmentCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).AttachmentCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"aws.iam.policy.createDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).CreateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.policy.updateDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).UpdateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.policy.scope": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Scope, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policy.versions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).Versions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policy.defaultVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).DefaultVersion, ok = plugin.RawToTValue[*mqlAwsIamPolicyversion](v.Value, v.Error)
		return
	},
	"aws.iam.policy.attachedUsers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).AttachedUsers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policy.attachedRoles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).AttachedRoles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policy.attachedGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicy).AttachedGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policyversion.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamPolicyversion).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.policyversion.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicyversion).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policyversion.versionId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicyversion).VersionId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.policyversion.isDefaultVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicyversion).IsDefaultVersion, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"aws.iam.policyversion.document": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicyversion).Document, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.policyversion.createDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamPolicyversion).CreateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.role.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamRole).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.role.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.role.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.role.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.role.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.role.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.role.createDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamRole).CreateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.group.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamGroup).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.group.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamGroup).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.group.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.group.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.group.createDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamGroup).CreateDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.group.usernames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamGroup).Usernames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.iam.virtualmfadevice.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsIamVirtualmfadevice).__id, ok = v.Value.(string)
			return
		},
	"aws.iam.virtualmfadevice.serialNumber": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamVirtualmfadevice).SerialNumber, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.iam.virtualmfadevice.enableDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamVirtualmfadevice).EnableDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"aws.iam.virtualmfadevice.user": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsIamVirtualmfadevice).User, ok = plugin.RawToTValue[*mqlAwsIamUser](v.Value, v.Error)
		return
	},
	"aws.sagemaker.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSagemaker).__id, ok = v.Value.(string)
			return
		},
	"aws.sagemaker.endpoints": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemaker).Endpoints, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemaker).NotebookInstances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSagemakerNotebookinstance).__id, ok = v.Value.(string)
			return
		},
	"aws.sagemaker.notebookinstance.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstance).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.details": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstance).Details, ok = plugin.RawToTValue[*mqlAwsSagemakerNotebookinstanceDetails](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstance).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstance).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.details.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSagemakerNotebookinstanceDetails).__id, ok = v.Value.(string)
			return
		},
	"aws.sagemaker.notebookinstance.details.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstanceDetails).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.details.kmsKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstanceDetails).KmsKey, ok = plugin.RawToTValue[*mqlAwsKmsKey](v.Value, v.Error)
		return
	},
	"aws.sagemaker.notebookinstance.details.directInternetAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerNotebookinstanceDetails).DirectInternetAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.endpoint.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSagemakerEndpoint).__id, ok = v.Value.(string)
			return
		},
	"aws.sagemaker.endpoint.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerEndpoint).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.endpoint.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerEndpoint).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.endpoint.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerEndpoint).Config, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.sagemaker.endpoint.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerEndpoint).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sagemaker.endpoint.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSagemakerEndpoint).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.sns.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSns).__id, ok = v.Value.(string)
			return
		},
	"aws.sns.topics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSns).Topics, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.sns.topic.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSnsTopic).__id, ok = v.Value.(string)
			return
		},
	"aws.sns.topic.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsTopic).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sns.topic.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsTopic).Region, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sns.topic.subscriptions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsTopic).Subscriptions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"aws.sns.topic.attributes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsTopic).Attributes, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"aws.sns.topic.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsTopic).Tags, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"aws.sns.subscription.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAwsSnsSubscription).__id, ok = v.Value.(string)
			return
		},
	"aws.sns.subscription.arn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsSubscription).Arn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"aws.sns.subscription.protocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAwsSnsSubscription).Protocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[aws] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[aws] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlAws for the aws resource
type mqlAws struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsInternal it will be used here
	Vpcs plugin.TValue[[]interface{}]
	Regions plugin.TValue[[]interface{}]
}

// createAws creates a new instance of this resource
func createAws(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAws{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAws) MqlName() string {
	return "aws"
}

func (c *mqlAws) MqlID() string {
	return c.__id
}

func (c *mqlAws) GetVpcs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vpcs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws", c.__id, "vpcs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vpcs()
	})
}

func (c *mqlAws) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		return c.regions()
	})
}

// mqlAwsAccount for the aws.account resource
type mqlAwsAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsAccountInternal it will be used here
	Id plugin.TValue[string]
	Aliases plugin.TValue[[]interface{}]
	Organization plugin.TValue[*mqlAwsOrganization]
}

// createAwsAccount creates a new instance of this resource
func createAwsAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.account", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsAccount) MqlName() string {
	return "aws.account"
}

func (c *mqlAwsAccount) MqlID() string {
	return c.__id
}

func (c *mqlAwsAccount) GetId() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Id, func() (string, error) {
		return c.id()
	})
}

func (c *mqlAwsAccount) GetAliases() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Aliases, func() ([]interface{}, error) {
		return c.aliases()
	})
}

func (c *mqlAwsAccount) GetOrganization() *plugin.TValue[*mqlAwsOrganization] {
	return plugin.GetOrCompute[*mqlAwsOrganization](&c.Organization, func() (*mqlAwsOrganization, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.account", c.__id, "organization")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsOrganization), nil
			}
		}

		return c.organization()
	})
}

// mqlAwsOrganization for the aws.organization resource
type mqlAwsOrganization struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsOrganizationInternal it will be used here
	Arn plugin.TValue[string]
	FeatureSet plugin.TValue[string]
	MasterAccountId plugin.TValue[string]
	MasterAccountEmail plugin.TValue[string]
}

// createAwsOrganization creates a new instance of this resource
func createAwsOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsOrganization{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.organization", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsOrganization) MqlName() string {
	return "aws.organization"
}

func (c *mqlAwsOrganization) MqlID() string {
	return c.__id
}

func (c *mqlAwsOrganization) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsOrganization) GetFeatureSet() *plugin.TValue[string] {
	return &c.FeatureSet
}

func (c *mqlAwsOrganization) GetMasterAccountId() *plugin.TValue[string] {
	return &c.MasterAccountId
}

func (c *mqlAwsOrganization) GetMasterAccountEmail() *plugin.TValue[string] {
	return &c.MasterAccountEmail
}

// mqlAwsVpc for the aws.vpc resource
type mqlAwsVpc struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsVpcInternal it will be used here
	Arn plugin.TValue[string]
	Id plugin.TValue[string]
	State plugin.TValue[string]
	IsDefault plugin.TValue[bool]
	Region plugin.TValue[string]
	FlowLogs plugin.TValue[[]interface{}]
	RouteTables plugin.TValue[[]interface{}]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsVpc creates a new instance of this resource
func createAwsVpc(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsVpc{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.vpc", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsVpc) MqlName() string {
	return "aws.vpc"
}

func (c *mqlAwsVpc) MqlID() string {
	return c.__id
}

func (c *mqlAwsVpc) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsVpc) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsVpc) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlAwsVpc) GetIsDefault() *plugin.TValue[bool] {
	return &c.IsDefault
}

func (c *mqlAwsVpc) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsVpc) GetFlowLogs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.FlowLogs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.vpc", c.__id, "flowLogs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.flowLogs()
	})
}

func (c *mqlAwsVpc) GetRouteTables() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.RouteTables, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.vpc", c.__id, "routeTables")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.routeTables()
	})
}

func (c *mqlAwsVpc) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsVpcRoutetable for the aws.vpc.routetable resource
type mqlAwsVpcRoutetable struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsVpcRoutetableInternal it will be used here
	Id plugin.TValue[string]
	Routes plugin.TValue[[]interface{}]
}

// createAwsVpcRoutetable creates a new instance of this resource
func createAwsVpcRoutetable(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsVpcRoutetable{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.vpc.routetable", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsVpcRoutetable) MqlName() string {
	return "aws.vpc.routetable"
}

func (c *mqlAwsVpcRoutetable) MqlID() string {
	return c.__id
}

func (c *mqlAwsVpcRoutetable) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsVpcRoutetable) GetRoutes() *plugin.TValue[[]interface{}] {
	return &c.Routes
}

// mqlAwsVpcFlowlog for the aws.vpc.flowlog resource
type mqlAwsVpcFlowlog struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsVpcFlowlogInternal it will be used here
	Id plugin.TValue[string]
	Vpc plugin.TValue[string]
	Region plugin.TValue[string]
	Status plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsVpcFlowlog creates a new instance of this resource
func createAwsVpcFlowlog(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsVpcFlowlog{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.vpc.flowlog", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsVpcFlowlog) MqlName() string {
	return "aws.vpc.flowlog"
}

func (c *mqlAwsVpcFlowlog) MqlID() string {
	return c.__id
}

func (c *mqlAwsVpcFlowlog) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsVpcFlowlog) GetVpc() *plugin.TValue[string] {
	return &c.Vpc
}

func (c *mqlAwsVpcFlowlog) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsVpcFlowlog) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAwsVpcFlowlog) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsAccessAnalyzer for the aws.accessAnalyzer resource
type mqlAwsAccessAnalyzer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsAccessAnalyzerInternal it will be used here
	Analyzers plugin.TValue[[]interface{}]
}

// createAwsAccessAnalyzer creates a new instance of this resource
func createAwsAccessAnalyzer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsAccessAnalyzer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.accessAnalyzer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsAccessAnalyzer) MqlName() string {
	return "aws.accessAnalyzer"
}

func (c *mqlAwsAccessAnalyzer) MqlID() string {
	return c.__id
}

func (c *mqlAwsAccessAnalyzer) GetAnalyzers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Analyzers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.accessAnalyzer", c.__id, "analyzers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.analyzers()
	})
}

// mqlAwsAccessanalyzerAnalyzer for the aws.accessanalyzer.analyzer resource
type mqlAwsAccessanalyzerAnalyzer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsAccessanalyzerAnalyzerInternal it will be used here
	Arn plugin.TValue[string]
	Name plugin.TValue[string]
	Status plugin.TValue[string]
	Type plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsAccessanalyzerAnalyzer creates a new instance of this resource
func createAwsAccessanalyzerAnalyzer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsAccessanalyzerAnalyzer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.accessanalyzer.analyzer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsAccessanalyzerAnalyzer) MqlName() string {
	return "aws.accessanalyzer.analyzer"
}

func (c *mqlAwsAccessanalyzerAnalyzer) MqlID() string {
	return c.__id
}

func (c *mqlAwsAccessanalyzerAnalyzer) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsAccessanalyzerAnalyzer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsAccessanalyzerAnalyzer) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlAwsAccessanalyzerAnalyzer) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlAwsAccessanalyzerAnalyzer) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsEfs for the aws.efs resource
type mqlAwsEfs struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsEfsInternal it will be used here
	Filesystems plugin.TValue[[]interface{}]
}

// createAwsEfs creates a new instance of this resource
func createAwsEfs(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsEfs{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.efs", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsEfs) MqlName() string {
	return "aws.efs"
}

func (c *mqlAwsEfs) MqlID() string {
	return c.__id
}

func (c *mqlAwsEfs) GetFilesystems() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Filesystems, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.efs", c.__id, "filesystems")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.filesystems()
	})
}

// mqlAwsEfsFilesystem for the aws.efs.filesystem resource
type mqlAwsEfsFilesystem struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsEfsFilesystemInternal it will be used here
	Name plugin.TValue[string]
	Id plugin.TValue[string]
	Arn plugin.TValue[string]
	Encrypted plugin.TValue[bool]
	KmsKey plugin.TValue[*mqlAwsKmsKey]
	BackupPolicy plugin.TValue[interface{}]
	Region plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsEfsFilesystem creates a new instance of this resource
func createAwsEfsFilesystem(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsEfsFilesystem{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.efs.filesystem", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsEfsFilesystem) MqlName() string {
	return "aws.efs.filesystem"
}

func (c *mqlAwsEfsFilesystem) MqlID() string {
	return c.__id
}

func (c *mqlAwsEfsFilesystem) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsEfsFilesystem) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsEfsFilesystem) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsEfsFilesystem) GetEncrypted() *plugin.TValue[bool] {
	return &c.Encrypted
}

func (c *mqlAwsEfsFilesystem) GetKmsKey() *plugin.TValue[*mqlAwsKmsKey] {
	return plugin.GetOrCompute[*mqlAwsKmsKey](&c.KmsKey, func() (*mqlAwsKmsKey, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.efs.filesystem", c.__id, "kmsKey")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsKmsKey), nil
			}
		}

		return c.kmsKey()
	})
}

func (c *mqlAwsEfsFilesystem) GetBackupPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.BackupPolicy, func() (interface{}, error) {
		return c.backupPolicy()
	})
}

func (c *mqlAwsEfsFilesystem) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsEfsFilesystem) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsKms for the aws.kms resource
type mqlAwsKms struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsKmsInternal it will be used here
	Keys plugin.TValue[[]interface{}]
}

// createAwsKms creates a new instance of this resource
func createAwsKms(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsKms{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.kms", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsKms) MqlName() string {
	return "aws.kms"
}

func (c *mqlAwsKms) MqlID() string {
	return c.__id
}

func (c *mqlAwsKms) GetKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.kms", c.__id, "keys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keys()
	})
}

// mqlAwsKmsKey for the aws.kms.key resource
type mqlAwsKmsKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsKmsKeyInternal it will be used here
	Id plugin.TValue[string]
	Arn plugin.TValue[string]
	Region plugin.TValue[string]
	KeyRotationEnabled plugin.TValue[bool]
	Metadata plugin.TValue[interface{}]
}

// createAwsKmsKey creates a new instance of this resource
func createAwsKmsKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsKmsKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.kms.key", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsKmsKey) MqlName() string {
	return "aws.kms.key"
}

func (c *mqlAwsKmsKey) MqlID() string {
	return c.__id
}

func (c *mqlAwsKmsKey) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsKmsKey) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsKmsKey) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsKmsKey) GetKeyRotationEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.KeyRotationEnabled, func() (bool, error) {
		return c.keyRotationEnabled()
	})
}

func (c *mqlAwsKmsKey) GetMetadata() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Metadata, func() (interface{}, error) {
		return c.metadata()
	})
}

// mqlAwsIam for the aws.iam resource
type mqlAwsIam struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamInternal it will be used here
	Users plugin.TValue[[]interface{}]
	Roles plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
	Policies plugin.TValue[[]interface{}]
	AttachedPolicies plugin.TValue[[]interface{}]
	CredentialReport plugin.TValue[[]interface{}]
	AccountPasswordPolicy plugin.TValue[interface{}]
	AccountSummary plugin.TValue[map[string]interface{}]
	VirtualMfaDevices plugin.TValue[[]interface{}]
	ServerCertificates plugin.TValue[[]interface{}]
}

// createAwsIam creates a new instance of this resource
func createAwsIam(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIam{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIam) MqlName() string {
	return "aws.iam"
}

func (c *mqlAwsIam) MqlID() string {
	return c.__id
}

func (c *mqlAwsIam) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlAwsIam) GetRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Roles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "roles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roles()
	})
}

func (c *mqlAwsIam) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

func (c *mqlAwsIam) GetPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Policies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "policies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.policies()
	})
}

func (c *mqlAwsIam) GetAttachedPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AttachedPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "attachedPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.attachedPolicies()
	})
}

func (c *mqlAwsIam) GetCredentialReport() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.CredentialReport, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "credentialReport")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.credentialReport()
	})
}

func (c *mqlAwsIam) GetAccountPasswordPolicy() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.AccountPasswordPolicy, func() (interface{}, error) {
		return c.accountPasswordPolicy()
	})
}

func (c *mqlAwsIam) GetAccountSummary() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.AccountSummary, func() (map[string]interface{}, error) {
		return c.accountSummary()
	})
}

func (c *mqlAwsIam) GetVirtualMfaDevices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VirtualMfaDevices, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam", c.__id, "virtualMfaDevices")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.virtualMfaDevices()
	})
}

func (c *mqlAwsIam) GetServerCertificates() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ServerCertificates, func() ([]interface{}, error) {
		return c.serverCertificates()
	})
}

// mqlAwsIamUsercredentialreportentry for the aws.iam.usercredentialreportentry resource
type mqlAwsIamUsercredentialreportentry struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamUsercredentialreportentryInternal it will be used here
	Properties plugin.TValue[map[string]interface{}]
	Arn plugin.TValue[string]
	AccessKey1Active plugin.TValue[bool]
	AccessKey1LastRotated plugin.TValue[*time.Time]
	AccessKey1LastUsedDate plugin.TValue[*time.Time]
	AccessKey1LastUsedRegion plugin.TValue[string]
	AccessKey1LastUsedService plugin.TValue[string]
	AccessKey2Active plugin.TValue[bool]
	AccessKey2LastRotated plugin.TValue[*time.Time]
	AccessKey2LastUsedDate plugin.TValue[*time.Time]
	AccessKey2LastUsedRegion plugin.TValue[string]
	AccessKey2LastUsedService plugin.TValue[string]
	Cert1Active plugin.TValue[bool]
	Cert1LastRotated plugin.TValue[*time.Time]
	Cert2Active plugin.TValue[bool]
	Cert2LastRotated plugin.TValue[*time.Time]
	MfaActive plugin.TValue[bool]
	PasswordEnabled plugin.TValue[bool]
	PasswordLastChanged plugin.TValue[*time.Time]
	PasswordLastUsed plugin.TValue[*time.Time]
	PasswordNextRotation plugin.TValue[*time.Time]
	User plugin.TValue[*mqlAwsIamUser]
	UserCreationTime plugin.TValue[*time.Time]
}

// createAwsIamUsercredentialreportentry creates a new instance of this resource
func createAwsIamUsercredentialreportentry(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamUsercredentialreportentry{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.usercredentialreportentry", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamUsercredentialreportentry) MqlName() string {
	return "aws.iam.usercredentialreportentry"
}

func (c *mqlAwsIamUsercredentialreportentry) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamUsercredentialreportentry) GetProperties() *plugin.TValue[map[string]interface{}] {
	return &c.Properties
}

func (c *mqlAwsIamUsercredentialreportentry) GetArn() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Arn, func() (string, error) {
		return c.arn()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey1Active() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.AccessKey1Active, func() (bool, error) {
		return c.accessKey1Active()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey1LastRotated() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.AccessKey1LastRotated, func() (*time.Time, error) {
		return c.accessKey1LastRotated()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey1LastUsedDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.AccessKey1LastUsedDate, func() (*time.Time, error) {
		return c.accessKey1LastUsedDate()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey1LastUsedRegion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AccessKey1LastUsedRegion, func() (string, error) {
		return c.accessKey1LastUsedRegion()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey1LastUsedService() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AccessKey1LastUsedService, func() (string, error) {
		return c.accessKey1LastUsedService()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey2Active() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.AccessKey2Active, func() (bool, error) {
		return c.accessKey2Active()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey2LastRotated() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.AccessKey2LastRotated, func() (*time.Time, error) {
		return c.accessKey2LastRotated()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey2LastUsedDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.AccessKey2LastUsedDate, func() (*time.Time, error) {
		return c.accessKey2LastUsedDate()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey2LastUsedRegion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AccessKey2LastUsedRegion, func() (string, error) {
		return c.accessKey2LastUsedRegion()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetAccessKey2LastUsedService() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AccessKey2LastUsedService, func() (string, error) {
		return c.accessKey2LastUsedService()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetCert1Active() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.Cert1Active, func() (bool, error) {
		return c.cert1Active()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetCert1LastRotated() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.Cert1LastRotated, func() (*time.Time, error) {
		return c.cert1LastRotated()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetCert2Active() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.Cert2Active, func() (bool, error) {
		return c.cert2Active()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetCert2LastRotated() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.Cert2LastRotated, func() (*time.Time, error) {
		return c.cert2LastRotated()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetMfaActive() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.MfaActive, func() (bool, error) {
		return c.mfaActive()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetPasswordEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.PasswordEnabled, func() (bool, error) {
		return c.passwordEnabled()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetPasswordLastChanged() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.PasswordLastChanged, func() (*time.Time, error) {
		return c.passwordLastChanged()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetPasswordLastUsed() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.PasswordLastUsed, func() (*time.Time, error) {
		return c.passwordLastUsed()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetPasswordNextRotation() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.PasswordNextRotation, func() (*time.Time, error) {
		return c.passwordNextRotation()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetUser() *plugin.TValue[*mqlAwsIamUser] {
	return plugin.GetOrCompute[*mqlAwsIamUser](&c.User, func() (*mqlAwsIamUser, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.usercredentialreportentry", c.__id, "user")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsIamUser), nil
			}
		}

		return c.user()
	})
}

func (c *mqlAwsIamUsercredentialreportentry) GetUserCreationTime() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.UserCreationTime, func() (*time.Time, error) {
		return c.userCreationTime()
	})
}

// mqlAwsIamUser for the aws.iam.user resource
type mqlAwsIamUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamUserInternal it will be used here
	Arn plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	CreateDate plugin.TValue[*time.Time]
	PasswordLastUsed plugin.TValue[*time.Time]
	Tags plugin.TValue[map[string]interface{}]
	Policies plugin.TValue[[]interface{}]
	AttachedPolicies plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
	AccessKeys plugin.TValue[[]interface{}]
}

// createAwsIamUser creates a new instance of this resource
func createAwsIamUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamUser) MqlName() string {
	return "aws.iam.user"
}

func (c *mqlAwsIamUser) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamUser) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsIamUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsIamUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsIamUser) GetCreateDate() *plugin.TValue[*time.Time] {
	return &c.CreateDate
}

func (c *mqlAwsIamUser) GetPasswordLastUsed() *plugin.TValue[*time.Time] {
	return &c.PasswordLastUsed
}

func (c *mqlAwsIamUser) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAwsIamUser) GetPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Policies, func() ([]interface{}, error) {
		return c.policies()
	})
}

func (c *mqlAwsIamUser) GetAttachedPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AttachedPolicies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.user", c.__id, "attachedPolicies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.attachedPolicies()
	})
}

func (c *mqlAwsIamUser) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		return c.groups()
	})
}

func (c *mqlAwsIamUser) GetAccessKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AccessKeys, func() ([]interface{}, error) {
		return c.accessKeys()
	})
}

// mqlAwsIamPolicy for the aws.iam.policy resource
type mqlAwsIamPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamPolicyInternal it will be used here
	Arn plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	IsAttachable plugin.TValue[bool]
	AttachmentCount plugin.TValue[int64]
	CreateDate plugin.TValue[*time.Time]
	UpdateDate plugin.TValue[*time.Time]
	Scope plugin.TValue[string]
	Versions plugin.TValue[[]interface{}]
	DefaultVersion plugin.TValue[*mqlAwsIamPolicyversion]
	AttachedUsers plugin.TValue[[]interface{}]
	AttachedRoles plugin.TValue[[]interface{}]
	AttachedGroups plugin.TValue[[]interface{}]
}

// createAwsIamPolicy creates a new instance of this resource
func createAwsIamPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamPolicy) MqlName() string {
	return "aws.iam.policy"
}

func (c *mqlAwsIamPolicy) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamPolicy) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsIamPolicy) GetId() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Id, func() (string, error) {
		return c.id()
	})
}

func (c *mqlAwsIamPolicy) GetName() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Name, func() (string, error) {
		return c.name()
	})
}

func (c *mqlAwsIamPolicy) GetDescription() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Description, func() (string, error) {
		return c.description()
	})
}

func (c *mqlAwsIamPolicy) GetIsAttachable() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.IsAttachable, func() (bool, error) {
		return c.isAttachable()
	})
}

func (c *mqlAwsIamPolicy) GetAttachmentCount() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.AttachmentCount, func() (int64, error) {
		return c.attachmentCount()
	})
}

func (c *mqlAwsIamPolicy) GetCreateDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.CreateDate, func() (*time.Time, error) {
		return c.createDate()
	})
}

func (c *mqlAwsIamPolicy) GetUpdateDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.UpdateDate, func() (*time.Time, error) {
		return c.updateDate()
	})
}

func (c *mqlAwsIamPolicy) GetScope() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Scope, func() (string, error) {
		return c.scope()
	})
}

func (c *mqlAwsIamPolicy) GetVersions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Versions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.policy", c.__id, "versions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.versions()
	})
}

func (c *mqlAwsIamPolicy) GetDefaultVersion() *plugin.TValue[*mqlAwsIamPolicyversion] {
	return plugin.GetOrCompute[*mqlAwsIamPolicyversion](&c.DefaultVersion, func() (*mqlAwsIamPolicyversion, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.policy", c.__id, "defaultVersion")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsIamPolicyversion), nil
			}
		}

		return c.defaultVersion()
	})
}

func (c *mqlAwsIamPolicy) GetAttachedUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AttachedUsers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.policy", c.__id, "attachedUsers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.attachedUsers()
	})
}

func (c *mqlAwsIamPolicy) GetAttachedRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AttachedRoles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.policy", c.__id, "attachedRoles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.attachedRoles()
	})
}

func (c *mqlAwsIamPolicy) GetAttachedGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AttachedGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.iam.policy", c.__id, "attachedGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.attachedGroups()
	})
}

// mqlAwsIamPolicyversion for the aws.iam.policyversion resource
type mqlAwsIamPolicyversion struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamPolicyversionInternal it will be used here
	Arn plugin.TValue[string]
	VersionId plugin.TValue[string]
	IsDefaultVersion plugin.TValue[bool]
	Document plugin.TValue[interface{}]
	CreateDate plugin.TValue[*time.Time]
}

// createAwsIamPolicyversion creates a new instance of this resource
func createAwsIamPolicyversion(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamPolicyversion{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.policyversion", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamPolicyversion) MqlName() string {
	return "aws.iam.policyversion"
}

func (c *mqlAwsIamPolicyversion) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamPolicyversion) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsIamPolicyversion) GetVersionId() *plugin.TValue[string] {
	return &c.VersionId
}

func (c *mqlAwsIamPolicyversion) GetIsDefaultVersion() *plugin.TValue[bool] {
	return &c.IsDefaultVersion
}

func (c *mqlAwsIamPolicyversion) GetDocument() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Document, func() (interface{}, error) {
		return c.document()
	})
}

func (c *mqlAwsIamPolicyversion) GetCreateDate() *plugin.TValue[*time.Time] {
	return &c.CreateDate
}

// mqlAwsIamRole for the aws.iam.role resource
type mqlAwsIamRole struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamRoleInternal it will be used here
	Arn plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
	CreateDate plugin.TValue[*time.Time]
}

// createAwsIamRole creates a new instance of this resource
func createAwsIamRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamRole{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.role", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamRole) MqlName() string {
	return "aws.iam.role"
}

func (c *mqlAwsIamRole) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamRole) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsIamRole) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsIamRole) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsIamRole) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAwsIamRole) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

func (c *mqlAwsIamRole) GetCreateDate() *plugin.TValue[*time.Time] {
	return &c.CreateDate
}

// mqlAwsIamGroup for the aws.iam.group resource
type mqlAwsIamGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamGroupInternal it will be used here
	Arn plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	CreateDate plugin.TValue[*time.Time]
	Usernames plugin.TValue[[]interface{}]
}

// createAwsIamGroup creates a new instance of this resource
func createAwsIamGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.group", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamGroup) MqlName() string {
	return "aws.iam.group"
}

func (c *mqlAwsIamGroup) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamGroup) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsIamGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAwsIamGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsIamGroup) GetCreateDate() *plugin.TValue[*time.Time] {
	return &c.CreateDate
}

func (c *mqlAwsIamGroup) GetUsernames() *plugin.TValue[[]interface{}] {
	return &c.Usernames
}

// mqlAwsIamVirtualmfadevice for the aws.iam.virtualmfadevice resource
type mqlAwsIamVirtualmfadevice struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsIamVirtualmfadeviceInternal it will be used here
	SerialNumber plugin.TValue[string]
	EnableDate plugin.TValue[*time.Time]
	User plugin.TValue[*mqlAwsIamUser]
}

// createAwsIamVirtualmfadevice creates a new instance of this resource
func createAwsIamVirtualmfadevice(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsIamVirtualmfadevice{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.iam.virtualmfadevice", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsIamVirtualmfadevice) MqlName() string {
	return "aws.iam.virtualmfadevice"
}

func (c *mqlAwsIamVirtualmfadevice) MqlID() string {
	return c.__id
}

func (c *mqlAwsIamVirtualmfadevice) GetSerialNumber() *plugin.TValue[string] {
	return &c.SerialNumber
}

func (c *mqlAwsIamVirtualmfadevice) GetEnableDate() *plugin.TValue[*time.Time] {
	return &c.EnableDate
}

func (c *mqlAwsIamVirtualmfadevice) GetUser() *plugin.TValue[*mqlAwsIamUser] {
	return &c.User
}

// mqlAwsSagemaker for the aws.sagemaker resource
type mqlAwsSagemaker struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSagemakerInternal it will be used here
	Endpoints plugin.TValue[[]interface{}]
	NotebookInstances plugin.TValue[[]interface{}]
}

// createAwsSagemaker creates a new instance of this resource
func createAwsSagemaker(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSagemaker{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sagemaker", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSagemaker) MqlName() string {
	return "aws.sagemaker"
}

func (c *mqlAwsSagemaker) MqlID() string {
	return c.__id
}

func (c *mqlAwsSagemaker) GetEndpoints() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Endpoints, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sagemaker", c.__id, "endpoints")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.endpoints()
	})
}

func (c *mqlAwsSagemaker) GetNotebookInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.NotebookInstances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sagemaker", c.__id, "notebookInstances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.notebookInstances()
	})
}

// mqlAwsSagemakerNotebookinstance for the aws.sagemaker.notebookinstance resource
type mqlAwsSagemakerNotebookinstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSagemakerNotebookinstanceInternal it will be used here
	Arn plugin.TValue[string]
	Name plugin.TValue[string]
	Details plugin.TValue[*mqlAwsSagemakerNotebookinstanceDetails]
	Region plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsSagemakerNotebookinstance creates a new instance of this resource
func createAwsSagemakerNotebookinstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSagemakerNotebookinstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sagemaker.notebookinstance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSagemakerNotebookinstance) MqlName() string {
	return "aws.sagemaker.notebookinstance"
}

func (c *mqlAwsSagemakerNotebookinstance) MqlID() string {
	return c.__id
}

func (c *mqlAwsSagemakerNotebookinstance) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsSagemakerNotebookinstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsSagemakerNotebookinstance) GetDetails() *plugin.TValue[*mqlAwsSagemakerNotebookinstanceDetails] {
	return plugin.GetOrCompute[*mqlAwsSagemakerNotebookinstanceDetails](&c.Details, func() (*mqlAwsSagemakerNotebookinstanceDetails, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sagemaker.notebookinstance", c.__id, "details")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsSagemakerNotebookinstanceDetails), nil
			}
		}

		return c.details()
	})
}

func (c *mqlAwsSagemakerNotebookinstance) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsSagemakerNotebookinstance) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsSagemakerNotebookinstanceDetails for the aws.sagemaker.notebookinstance.details resource
type mqlAwsSagemakerNotebookinstanceDetails struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSagemakerNotebookinstanceDetailsInternal it will be used here
	Arn plugin.TValue[string]
	KmsKey plugin.TValue[*mqlAwsKmsKey]
	DirectInternetAccess plugin.TValue[string]
}

// createAwsSagemakerNotebookinstanceDetails creates a new instance of this resource
func createAwsSagemakerNotebookinstanceDetails(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSagemakerNotebookinstanceDetails{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sagemaker.notebookinstance.details", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSagemakerNotebookinstanceDetails) MqlName() string {
	return "aws.sagemaker.notebookinstance.details"
}

func (c *mqlAwsSagemakerNotebookinstanceDetails) MqlID() string {
	return c.__id
}

func (c *mqlAwsSagemakerNotebookinstanceDetails) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsSagemakerNotebookinstanceDetails) GetKmsKey() *plugin.TValue[*mqlAwsKmsKey] {
	return plugin.GetOrCompute[*mqlAwsKmsKey](&c.KmsKey, func() (*mqlAwsKmsKey, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sagemaker.notebookinstance.details", c.__id, "kmsKey")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAwsKmsKey), nil
			}
		}

		return c.kmsKey()
	})
}

func (c *mqlAwsSagemakerNotebookinstanceDetails) GetDirectInternetAccess() *plugin.TValue[string] {
	return &c.DirectInternetAccess
}

// mqlAwsSagemakerEndpoint for the aws.sagemaker.endpoint resource
type mqlAwsSagemakerEndpoint struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSagemakerEndpointInternal it will be used here
	Arn plugin.TValue[string]
	Name plugin.TValue[string]
	Config plugin.TValue[interface{}]
	Region plugin.TValue[string]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsSagemakerEndpoint creates a new instance of this resource
func createAwsSagemakerEndpoint(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSagemakerEndpoint{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sagemaker.endpoint", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSagemakerEndpoint) MqlName() string {
	return "aws.sagemaker.endpoint"
}

func (c *mqlAwsSagemakerEndpoint) MqlID() string {
	return c.__id
}

func (c *mqlAwsSagemakerEndpoint) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsSagemakerEndpoint) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAwsSagemakerEndpoint) GetConfig() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Config, func() (interface{}, error) {
		return c.config()
	})
}

func (c *mqlAwsSagemakerEndpoint) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsSagemakerEndpoint) GetTags() *plugin.TValue[map[string]interface{}] {
	return &c.Tags
}

// mqlAwsSns for the aws.sns resource
type mqlAwsSns struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSnsInternal it will be used here
	Topics plugin.TValue[[]interface{}]
}

// createAwsSns creates a new instance of this resource
func createAwsSns(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSns{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sns", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSns) MqlName() string {
	return "aws.sns"
}

func (c *mqlAwsSns) MqlID() string {
	return c.__id
}

func (c *mqlAwsSns) GetTopics() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Topics, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sns", c.__id, "topics")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.topics()
	})
}

// mqlAwsSnsTopic for the aws.sns.topic resource
type mqlAwsSnsTopic struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSnsTopicInternal it will be used here
	Arn plugin.TValue[string]
	Region plugin.TValue[string]
	Subscriptions plugin.TValue[[]interface{}]
	Attributes plugin.TValue[interface{}]
	Tags plugin.TValue[map[string]interface{}]
}

// createAwsSnsTopic creates a new instance of this resource
func createAwsSnsTopic(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSnsTopic{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sns.topic", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSnsTopic) MqlName() string {
	return "aws.sns.topic"
}

func (c *mqlAwsSnsTopic) MqlID() string {
	return c.__id
}

func (c *mqlAwsSnsTopic) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsSnsTopic) GetRegion() *plugin.TValue[string] {
	return &c.Region
}

func (c *mqlAwsSnsTopic) GetSubscriptions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subscriptions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("aws.sns.topic", c.__id, "subscriptions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subscriptions()
	})
}

func (c *mqlAwsSnsTopic) GetAttributes() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Attributes, func() (interface{}, error) {
		return c.attributes()
	})
}

func (c *mqlAwsSnsTopic) GetTags() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Tags, func() (map[string]interface{}, error) {
		return c.tags()
	})
}

// mqlAwsSnsSubscription for the aws.sns.subscription resource
type mqlAwsSnsSubscription struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAwsSnsSubscriptionInternal it will be used here
	Arn plugin.TValue[string]
	Protocol plugin.TValue[string]
}

// createAwsSnsSubscription creates a new instance of this resource
func createAwsSnsSubscription(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAwsSnsSubscription{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("aws.sns.subscription", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAwsSnsSubscription) MqlName() string {
	return "aws.sns.subscription"
}

func (c *mqlAwsSnsSubscription) MqlID() string {
	return c.__id
}

func (c *mqlAwsSnsSubscription) GetArn() *plugin.TValue[string] {
	return &c.Arn
}

func (c *mqlAwsSnsSubscription) GetProtocol() *plugin.TValue[string] {
	return &c.Protocol
}
