// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

import "../../network/resources/network.lr"


option provider = "go.mondoo.com/cnquery/v9/providers/aws"
option go_package = "go.mondoo.com/cnquery/v11/providers/aws/resources"

// AWS resource
aws @defaults("account.id") {
  // List of `aws.vpc` objects representing all VPCs in the account across all enabled regions
  vpcs() []aws.vpc
  // List of all enabled regions in the account
  regions() []string
}

// AWS Account
aws.account @defaults("id") {
  // Account ID
  id string
  // Account aliases
  aliases() []string
  // Information about the associated organization, if any
  organization() aws.organization
}

// AWS Organization resource
aws.organization @defaults("arn masterAccountEmail") {
  // ARN of the organization
  arn string
  // Specifies the functionality available to org: ALL or CONSOLIDATED_BILLING
  featureSet string
  // ID of the organization's master account
  masterAccountId string
  // Email owner of the organization's master account
  masterAccountEmail string
}

// Amazon Virtual Private Cloud (VPC)
private aws.vpc @defaults("id isDefault cidrBlock region") {
  // ARN of the VPC
  arn string
  // ID of the VPC
  id string
  // IPv4 CIDR block of the VPC
  cidrBlock string
  // State of the VPC: pending or available
  state string
  // Whether the VPC is the default VPC
  isDefault bool
  // How instance hardware tenancy settings are enforced on instances launched in this VPC
  instanceTenancy string
  // Region in which the VPC exists
  region string
  // List of endpoints for the VPC
  endpoints() []aws.vpc.endpoint
  // List of flow logs for the VPC
  flowLogs() []aws.vpc.flowlog
  // List of route tables for the VPC
  routeTables() []aws.vpc.routetable
  // List of subnets for the VPC
  subnets() []aws.vpc.subnet
  // Tags on the VPC
  tags map[string]string
}

// Amazon Virtual Private Cloud (VPC) route table
private aws.vpc.routetable @defaults("id routes.length") {
  // Unique ID of the route table
  id string
  // A list of route descriptions
  routes []dict
  // Tags on the route table
  tags map[string]string
}

// Amazon Virtual Private Cloud (VPC) subnet
private aws.vpc.subnet @defaults("id cidrs region availabilityZone defaultForAvailabilityZone") {
  // ARN of the subnet
  arn string
  // Unique ID of the subnet
  id string
  // List of CIDR descriptions
  cidrs string
  // Whether instances launched in this subnet receive public IPv4 addresses
  mapPublicIpOnLaunch bool
  // The availability zone where this subnet is located
  availabilityZone string
  // Whether this is the default subnet for the availability zone
  defaultForAvailabilityZone bool
  // Whether a network interface created in this subnet (including a network interface created by RunInstances ) receives an IPv6 address
  assignIpv6AddressOnCreation bool
  // The state of the subnet: pending or available
  state string
  // Region in which the VPC subnet exists
  region string
}

// Amazon Virtual Private Cloud (VPC) endpoint
private aws.vpc.endpoint @defaults("id type region") {
  // Unique ID of the endpoint
  id string
  // Type of the endpoint
  type string
  // VPC in which the endpoint exists
  vpc string
  // Region in which the VPC endpoint exists
  region string
  // The name of the endpoint service
  serviceName string
  // The policy document associated with the endpoint, if applicable
  policyDocument string
  // The subnets for the (interface) endpoint
  subnets []string
  // Whether to associate a private hosted zone with the specified VPC
  privateDnsEnabled bool
  // VPC endpoint state
  state string
  // Creation timestamp
  createdAt time
}

// Amazon Virtual Private Cloud (VPC) flow log
private aws.vpc.flowlog @defaults("id region status") {
  // Unique ID of the flow log
  id string
  // VPC in which the flow log exists
  vpc string
  // Region in which the VPC flow log exists
  region string
  // Status of the flow log
  status string
  // Tags on the flow log
  tags map[string]string
  // Creation timestamp
  createdAt time
  // The destination for the flow log data
  destination string
  // The destination type for the flow log data
  destinationType string
   // The delivery log status for the flow log data
  deliverLogsStatus string
  // The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. The possible values are 60 seconds (1 minute) or 600 seconds (10 minutes).
  maxAggregationInterval int
  // The type of traffic to monitor. ACCEPT, ALL, and REJECT
  trafficType string
}

// Amazon WAF v2
aws.waf {
  // List of WAF ACLs
  acls() []aws.waf.acl
  // List of WAF rules
  ruleGroups() []aws.waf.rulegroup
  // List of WAF IP sets
  ipSets() []aws.waf.ipset
  // Scope either REGIONAL or CLOUDFRONT
  scope string
}

// Amazon WAF v2 ACL
private aws.waf.acl @defaults("name") {
  // ARN of the ACL
  arn string
  // ID of the ACL
  id string
  // Name of the ACL
  name string
  // Description of the ACL
  description string
  // Whether the ACL is managed by Firewall Manager
  managedByFirewallManager bool
  // List of WAF rules
  rules() []aws.waf.rule
  // Scope either REGIONAL or CLOUDFRONT
  scope string
}

// Amazon WAF v2 RuleGroup
private aws.waf.rulegroup @defaults("name") {
  // ARN of the rulegroup
  arn string
  // ID of the rulegroup
  id string
  // Name of the rulegroup
  name string
  // Description of the rulegroup
  description string
  // List of waf rules
  rules() []aws.waf.rule
  // Scope either REGIONAL or CLOUDFRONT
  scope string
}

// Amazon WAF rule
private aws.waf.rule @defaults("name") {
  // arn of the acl/ruleGroup + the name of the rule
  id string
  // Name of the rule
  name string
  // Priority from lowest to highest number
  priority int
  // Part of the rule that tells WAF how to inspect a web request
  statement aws.waf.rule.statement
  // Part of the rule that tells WAF what to do with a web request when it matches the criteria defined in the rule
  action aws.waf.rule.action
  // The ARN of either rule ACL or the RuleGroup that this rule belongs to
  belongsTo string
}

// Action that happens if a rule statement matches
private aws.waf.rule.action @defaults("action") {
  // Name of the rule this action belongs to
  ruleName string
  // One of Block, Allow, Count, Captcha
  action string
  // HTTP Response Code, only if the action is Block
  responseCode string
}

private aws.waf.rule.statement @defaults("kind") {
  // ID of the statement
  id string
  // Kind of statement, e.g., "sqliMatchStatement"
  kind string
  // Entire statement as JSON
  json dict
  // Statement that detects SQL injection attacks
  sqliMatchStatement aws.waf.rule.statement.sqlimatchstatement
  // Statement that detects XSS attacks
  xssMatchStatement aws.waf.rule.statement.xssmatchstatement
  // Statement that matches certain bytes
  byteMatchStatement aws.waf.rule.statement.bytematchstatement
  // Statement that matches a regex pattern
  regexMatchStatement aws.waf.rule.statement.regexmatchstatement
  // Statement that matches requests from certain countries
  geoMatchStatement aws.waf.rule.statement.geomatchstatement
  // Statement that matches requests from certain ips defined in an IPSet
  ipSetReferenceStatement aws.waf.rule.statement.ipsetreferencestatement
  // Statement that matches requests with certain labels
  labelMatchStatement aws.waf.rule.statement.labelmatchstatement
  // Statement managed by AWS
  managedRuleGroupStatement aws.waf.rule.statement.managedrulegroupstatement
  // Statement that matches if the conditions are not met
  notStatement aws.waf.rule.statement.notstatement
  // Statement that matches if one or many sub-statements match
  orStatement aws.waf.rule.statement.orstatement
  // Statement that matches if all sub-statements match
  andStatement aws.waf.rule.statement.andstatement
  // Statement that matches if a request comes in at a certain rate (rate limiting)
  rateBasedStatement aws.waf.rule.statement.ratebasedstatement
  // Statement that matches a regex pattern defined in a regex pattern set
  regexPatternSetReferenceStatement aws.waf.rule.statement.regexpatternsetreferencestatement
  // Statement that refers to the rules in a rule group
  ruleGroupReferenceStatement aws.waf.rule.statement.rulegroupreferencestatement
  // Statement that matches the size of the request
  sizeConstraintStatement aws.waf.rule.statement.sizeconstraintstatement
}

// Rule statement that checks for requests from certain countries
private aws.waf.rule.statement.geomatchstatement @defaults("countryCodes") {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Country codes
  countryCodes []string
}

// Rule statement that checks for requests from IP addresses defined in an IPSet
private aws.waf.rule.statement.ipsetreferencestatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // arn of the ipset
  arn string
  // ipSetForwardedIPConfig
  ipSetForwardedIPConfig aws.waf.rule.statement.ipsetreferencestatement.ipsetforwardedipconfig
}

private aws.waf.rule.statement.ipsetreferencestatement.ipsetforwardedipconfig {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Name of the header
  headerName string
  // Position
  position string
  // Fallback behavior
  fallbackBehavior string
}

private aws.waf.rule.statement.labelmatchstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Key
  key string
  // Scope
  scope string
}

// Rule statement that is managed by AWS
private aws.waf.rule.statement.managedrulegroupstatement @defaults("name") {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Name
  name string
  // Vendor name
  vendorName string
}

// Rule statement that matches if all of the rule statements inside it match
private aws.waf.rule.statement.andstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Sub-statements
  statements []aws.waf.rule.statement
}

// Rule statement that negates another rule statement
private aws.waf.rule.statement.notstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Sub-statement (will be negated)
  statement aws.waf.rule.statement
}

// Rule statement that matches if one of the rule statements inside it matches
private aws.waf.rule.statement.orstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Sub-statements
  statements []aws.waf.rule.statement
}

// Rule statement that matches at a certain rate of requests (rate limiting)
private aws.waf.rule.statement.ratebasedstatement {}

// Rule statement that checks for a regex pattern defined in a regex pattern set
private aws.waf.rule.statement.regexpatternsetreferencestatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // ARN of the regex pattern set
  arn string
  // Field that is matched
  fieldToMatch aws.waf.rule.fieldtomatch
}

// Rule statement that refers to a group of rules
private aws.waf.rule.statement.rulegroupreferencestatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // ARN of the rule group
  arn string
  // List of rules to exclude
  excludeRules []string
}

// Rule statement that checks the size of the specified field
private aws.waf.rule.statement.sizeconstraintstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // The size that triggers this statement
  size int
  // How to compare the size
  comparisonOperator string
  // Field to match
  fieldToMatch aws.waf.rule.fieldtomatch
}

// Rule statement that matches a specified regex pattern
private aws.waf.rule.statement.regexmatchstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Field to match
  fieldToMatch aws.waf.rule.fieldtomatch
  // Regex pattern to match
  regexString string
}

// Rule statement that matches a specified sequence of bytes
private aws.waf.rule.statement.bytematchstatement @defaults("searchString") {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Field to match
  fieldToMatch aws.waf.rule.fieldtomatch
  // String to search for
  searchString string
}

// Field to match
private aws.waf.rule.fieldtomatch @defaults("target") {
  target string
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Whether to match the HTTP method: GET or POST
  method bool
  // Whether to match the URI path
  uriPath bool
  // Whether to match the query string
  queryString bool
  // Whether to match all query arguments
  allQueryArguments bool
  // Whether to match the body (match if not null)
  body aws.waf.rule.fieldtomatch.body
  // Whether to match the cookie (match if not null)
  cookie aws.waf.rule.fieldtomatch.cookie
  // Whether to match the single header (match if not null)
  singleHeader aws.waf.rule.fieldtomatch.singleheader
  // Whether to match the header order (match if not null)
  headerOrder aws.waf.rule.fieldtomatch.headerorder
  // Whether to match the header (match if not null)
  headers aws.waf.rule.fieldtomatch.headers
  // Whether to match the JA3 fingerprint (match if not null)
  ja3Fingerprint aws.waf.rule.fieldtomatch.ja3fingerprint
  // Whether to match the JSON body (match if not null)
  jsonBody aws.waf.rule.fieldtomatch.jsonbody
  // Whether to match the single query argument of the field (match if not null)
  singleQueryArgument aws.waf.rule.fieldtomatch.singlequeryargument
}

// Body of the field to match
private aws.waf.rule.fieldtomatch.body {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // What to do if the body is over size
  overSizeHandling string
}

// Cookie of the field to match
private aws.waf.rule.fieldtomatch.cookie {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // What to do if the cookie is over size
  overSizeHandling string
}

// Order of headers of the field to match
private aws.waf.rule.fieldtomatch.headerorder {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // What to do if the order of headers is over size
  overSizeHandling string
}

// Single header of the field to match
private aws.waf.rule.fieldtomatch.singleheader {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Name of the header
  name string
}

// Single query argument
private aws.waf.rule.fieldtomatch.singlequeryargument {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Name of the query argument
  name string
}

// JA3 fingerprint
private aws.waf.rule.fieldtomatch.ja3fingerprint {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // FallbackBehavior
  fallbackBehavior string
}

// Request body as JSON
private aws.waf.rule.fieldtomatch.jsonbody {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // What to do if the body is over size
  overSizeHandling string
  // Match scope
  matchScope string
  // What to do if the body is not valid JSON
  invalidFallbackBehavior string
  // Match pattern
  matchPattern aws.waf.rule.fieldtomatch.jsonbody.matchpattern
}

// The pattern to match
private aws.waf.rule.fieldtomatch.jsonbody.matchpattern {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Whether to match all
  all bool
  // Paths to include
  includePaths []string
}

// Headers
private aws.waf.rule.fieldtomatch.headers {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Match scope
  matchScope string
  // What to do if the headers are over size
  overSizeHandling string
  // Match pattern
  matchPattern aws.waf.rule.fieldtomatch.headers.matchpattern
}

// The pattern to match
private aws.waf.rule.fieldtomatch.headers.matchpattern {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Whether to match all
  all bool
  // Headers to include
  includeHeaders []string
  // Headers to exclude
  excludeHeaders []string
}


// Statement that matches XSS attacks
private aws.waf.rule.statement.xssmatchstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Field to match
  fieldToMatch aws.waf.rule.fieldtomatch
}

// Statement that matches SQLI attacks
private aws.waf.rule.statement.sqlimatchstatement {
  // Name of the rule this statement belongs to
  ruleName string
  // ID of the statement
  statementID string
  // Field to match
  fieldToMatch aws.waf.rule.fieldtomatch
  // How aggressive the statement matches
  sensitivityLevel string
}


// Amazon WAF IP set (defining IP Ranges)
private aws.waf.ipset @defaults("name") {
  // ARN of the IP set
  arn string
  // ID of the IP set
  id string
  // Scope: REGIONAL or CLOUDFRONT
  scope string
  // Name of the IP set
  name string
  // Description of the IP set
  description string
  // Address type: ipv4 or ipv6
  addressType string
  // list of IP addresses
  addresses dict
}

// AWS IAM Access Analyzer resource (for assessing the configuration of AWS IAM Access Analyzer)
aws.accessAnalyzer @defaults("analyzers") {
  // List of `aws.accessanalyzer.analyzer` objects for all AWS IAM Access Analyzers configured within the account
  analyzers() []aws.accessanalyzer.analyzer
}

// AWS IAM Access Analyzer resource (provides an object representing an individual AWS IAM Access Analyzer configuration)
private aws.accessanalyzer.analyzer @defaults("name type status") {
  // ARN for the analyzer
  arn string
  // Name for the analyzer
  name string
  // Status of the analyzer: ACTIVE, CREATING, DISABLED, or FAILED
  status string
  // Type of analyzer: ACCOUNT or ORGANIZATION
  type string
  // Tags for the analyzer
  tags map[string]string
  // The name of the last resource that was analyzed
  lastResourceAnalyzed string
  // Last scan timestamp
  lastResourceAnalyzedAt time
  // Creation timestamp
  createdAt time
}

// AWS Elastic File System (EFS) service
aws.efs @defaults("filesystems") {
  // A list of file systems managed by the service
  filesystems() []aws.efs.filesystem
}

// AWS Elastic File System (EFS) file system
private aws.efs.filesystem @defaults("name id region") {
  // Name of the file system
  name string
  // ID of the file system
  id string
  // ARN of the file system
  arn string
  // Whether or not the file system is encrypted
  encrypted bool
  // KMS key used for encryption of the file system
  kmsKey() aws.kms.key
  // Backup policy for the file system
  backupPolicy() dict
  // Region in which the file system exists
  region string
  // Availability zone where the file system exists if a specific AZ is defined
  availabilityZone string
  // Tags for the file system
  tags map[string]string
  // Creation timestamp
  createdAt time
}

// AWS Key Management Service (KMS)
aws.kms @defaults("keys") {
  // A list of all customer master keys (CMKs) in the caller's AWS account (across all regions)
  keys() []aws.kms.key
}

// AWS Key Management Service (KMS) key
private aws.kms.key @defaults("id region metadata.Description") {
  // Unique identifier for the key
  id string
  // ARN of the key
  arn string
  // Region the key lives in
  region string
  // Bool that specifies whether key rotation is enabled
  keyRotationEnabled() bool
  // Metadata for the key
  metadata() dict
}


// AWS service to create and manage permissions for users and groups
aws.iam {
  // List of IAM users in the account
  users() []aws.iam.user
  // List of IAM roles in the account
  roles() []aws.iam.role
  // List of IAM groups in the account
  groups() []aws.iam.group
  // List of IAM policies in the account
  policies() []aws.iam.policy
  // List of IAM policies attached to a user, role, or group
  attachedPolicies() []aws.iam.policy
  // IAM credential report
  credentialReport() []aws.iam.usercredentialreportentry
  // IAM account password policy for the account
  accountPasswordPolicy() dict
  // IAM account summary
  accountSummary() map[string]int
  // List of virtual mfs devices associated with the account
  virtualMfaDevices() []aws.iam.virtualmfadevice
  // List of server certificates stored in IAM
  serverCertificates() []dict
}

// Entry in AWS IAM credential report
private aws.iam.usercredentialreportentry @defaults("arn") {
  init(properties map[string]string)
  // properties on the IAM user credential report
  properties map[string]string

  // ARN for the credential report
  arn() string

  // Denotes if the access key is active
  accessKey1Active() bool
  // Time when key was last rotated
  accessKey1LastRotated() time
  // Time when key was last used
  accessKey1LastUsedDate() time
  // Region in which the key was last used
  accessKey1LastUsedRegion() string
  // Service that last used the key
  accessKey1LastUsedService() string

  // Denotes if the access key is active
  accessKey2Active() bool
  // Time when key was last rotated
  accessKey2LastRotated() time
  // Time when key was last used
  accessKey2LastUsedDate() time
  // Region in which the key was last used
  accessKey2LastUsedRegion() string
  // Service that last used the key
  accessKey2LastUsedService() string

  // Denotes if the cert is active
  cert1Active() bool
  // Time when the cert was last rotated
  cert1LastRotated() time

  // Denotes if the cert is active
  cert2Active() bool
  // Time when the cert was last rotated
  cert2LastRotated() time

  // Denotes if mfa is active in the account
  mfaActive() bool
  // Whether passwords are enabled
  passwordEnabled() bool
  // Time when the password was last changed
  passwordLastChanged() time
  // Time when the password was last used
  passwordLastUsed() time
  // Next time when the password should rotate
  passwordNextRotation() time

  // IAM user
  user() aws.iam.user
  // Time when user was created
  userCreationTime() time
}

// AWS IAM user
private aws.iam.user @defaults("arn name") {
  // ARN of the IAM user
  arn string
  // ID of the IAM user
  id string
  // Name of the user
  name string
  // Time when user was created
  createDate time
  // Time when password was last used
  passwordLastUsed time
  // Tags for the IAM user
  tags map[string]string
  // List of inline policies attached to the user
  policies() []string
  // List of managed policies attached to the user
  attachedPolicies() []aws.iam.policy
  // List of group ARNs that the user belongs to
  groups() []string
  // List of access keys metadata associated with the user
  accessKeys() []dict
  // Login profile for the user
  loginProfile() aws.iam.loginProfile
}

// AWS IAM login profile for a user
private aws.iam.loginProfile @defaults("createdAt") {
  // Time when the login profile was created
  createdAt time
}

// AWS IAM policy
private aws.iam.policy @defaults("arn name") {
  // ARN of the policy
  arn string
  // ID of the policy
  id string
  // Name of the policy
  name() string
  // Description of the policy
  description() string
  // Denotes if the policy can be attached
  isAttachable() bool
  // The number of principal entities (users, groups, and roles) that the policy is attached to
  attachmentCount() int
  // Time when the policy was created
  createDate() time
  // Time when the policy was updated
  updateDate() time
  // Scope of the policy
  scope() string
  // List of versions for the policy
  versions() []aws.iam.policyversion
  // Default version of the policy
  defaultVersion() aws.iam.policyversion

  // List of users attached to the policy
  attachedUsers() []aws.iam.user
  // List of roles attached to the policy
  attachedRoles() []aws.iam.role
  // List of groups attached to the policy
  attachedGroups() []aws.iam.group
}

// AWS IAM policy version
private aws.iam.policyversion @defaults("arn isDefaultVersion") {
  // ARN of the policy version
  arn string
  // Version ID
  versionId string
  // Denotes if this version is the policy default version
  isDefaultVersion bool
  // JSON statements for this policy version
  document() dict
  // Time when this policy version was created
  createDate time
}

// AWS IAM role
private aws.iam.role @defaults("arn name") {
  // ARN of the role
  arn string
  // ID of the role
  id string
  // Name of the role
  name string
  // Description of the role
  description string
  // Tags associated with the role
  tags map[string]string
  // Time when the role was created
  createDate time
  // The policy document that grants an entity permission to assume the role
  assumeRolePolicyDocument dict
}

// AWS IAM group
private aws.iam.group @defaults("arn name") {
  // ARN of the group
  arn string
  // ID of the group
  id string
  // Name of the group
  name string
  // Time when the group was created
  createDate time
  // List of usernames that belong to the group
  usernames []string
}

// AWS IAM virtual MFA device
private aws.iam.virtualmfadevice @defaults("serialNumber") {
  // Serial number for the MFA device
  serialNumber string
  // Time when the MFA device was enabled
  enableDate time
  // User associated with the MFA device
  user aws.iam.user
}

// AWS SageMaker
aws.sagemaker {
  // List of SageMaker endpoints
  endpoints() []aws.sagemaker.endpoint
  // List of SageMaker notebook instances
  notebookInstances() []aws.sagemaker.notebookinstance
}

// AWS SageMaker notebook instance
private aws.sagemaker.notebookinstance @defaults("arn name") {
  // ARN for the notebook instance
  arn string
  // Name of the notebook instance
  name string
  // Details about the notebook
  details() aws.sagemaker.notebookinstance.details
  // Region where the notebook instance exists
  region string
  // Tags for the notebook instance
  tags map[string]string
}

// AWS SageMaker notebook instance details
private aws.sagemaker.notebookinstance.details @defaults("arn") {
  // ARN for the notebook instance
  arn string
  // KMS key used to encrypt data
  kmsKey() aws.kms.key
  // Whether SageMaker provides internet access to the instance
  directInternetAccess string
}

// AWS SageMaker endpoint
private aws.sagemaker.endpoint @defaults("arn name") {
  // ARN for the endpoint
  arn string
  // Name of the endpoint
  name string
  // Configuration information for the endpoint
  config() dict
  // Region where the endpoint exists
  region string
  // Tags for the endpoint
  tags map[string]string
}

// AWS Simple Notification Service (SNS)
aws.sns {
  // List of SNS topics
  topics() []aws.sns.topic
}

// AWS Simple Notification Service (SNS) topic
private aws.sns.topic @defaults("arn") {
  // SNS topic ARN
  arn string
  // Region where the SNS topic exists
  region string
  // List of subscriptions associated with the topic ARN
  subscriptions() []aws.sns.subscription
  // Attributes for the SNS topic, including KMS ID if any
  attributes() dict
  // Tags for the topic
  tags() map[string]string
}

// AWS Simple Notification Service (SNS) subscription
private aws.sns.subscription @defaults("arn") {
  // ARN of the subscription
  arn string
  // Protocol value for the subscription
  protocol string
}

// AWS Elasticsearch service
aws.es {
  // List of Elasticsearch domains
  domains() []aws.es.domain
}

// Amazon Elasticsearch service domain
private aws.es.domain @defaults("arn name") {
  // ARN for the Elasticsearch domain
  arn string
  // Whether encryption at rest is enabled
  encryptionAtRestEnabled bool
  // Denoted whether node to node encryption is enabled
  nodeToNodeEncryptionEnabled bool
  // Name of the Elasticsearch domain
  name string
  // Endpoint used to submit index and search requests
  endpoint string
  // Region where the domain exists
  region string
  // Tags for the domain
  tags map[string]string
  // The version of Elasticsearch running
  elasticsearchVersion string
  // The Elasticsearch domain ID
  domainId string
  // The Elasticsearch domain name
  domainName string
}

// AWS Certificate Manager resource (for assessing the configuration of AWS Certificate Manager)
aws.acm @defaults("certificates") {
  // List of `aws.acm.certificate` objects representing ACM certificates configured within the account
  certificates() []aws.acm.certificate
}

// AWS Certificate Manager Certificate resource (provides an object representing an individual ACM certificate)
private aws.acm.certificate @defaults("domainName issuer createdAt notAfter") {
  // ARN for the certificate
  arn string
  // Time before which the certificate is not valid
  notBefore time
  // Time after which the certificate is not valid
  notAfter time
  // Time when the cert was requested
  createdAt time
  // FQDN for the certificate
  domainName string
  // Status of the certificate: issued, expired, revoked, and so on
  status string
  // Name of the entity associated with the public key in the certificate
  subject string
  // Retrieves an Amazon-issued certificate and its certificate chain
  certificate() network.certificate
  // Tags associated with the certificate
  tags map[string]string
  // The algorithm that was used to generate the public-private key pair
  keyAlgorithm string
  // The serial number of the certificate
  serial string
  // The source of the certificate: AMAZON_ISSUED or IMPORTED
  source string
  // The name of the certificate authority that issued and signed the certificate
  issuer string
  // The time at which the certificate was issued (exists only when the certificate source is AMAZON_ISSUED)
  issuedAt time
  // The date and time when the certificate was imported (exists only when the certificate source is IMPORTED)
  importedAt time
}

// AWS Auto Scaling
aws.autoscaling @defaults("groups") {
  // List of autoscaling groups across the account
  groups() []aws.autoscaling.group
}

// AWS Auto Scaling group
private aws.autoscaling.group @defaults("name region minSize maxSize") {
  // ARN for the autoscaling group
  arn string
  // Name of the group
  name string
  // List of load balancer names associated with the group
  loadBalancerNames []string
  // Health check type used by the group: ELB or EC2
  healthCheckType string
  // Tags for the asg
  tags map[string]string
  // The region of the Auto Scaling group
  region string
  // The minimum number of instances to scale down to
  minSize int
  // The maximum number of instances to scale up to
  maxSize int
  // The time to wait after scaling up / down before the next scaling event is started
  defaultCooldown int
  // The name of the launch configuration
  launchConfigurationName string
  // The grace period in seconds before an instance with a failing health check will be replaced
  healthCheckGracePeriod int
  // Time when the autoscaling group was created
  createdAt time
  // The maximum amount of time, in seconds, that an instance can be in service
  maxInstanceLifetime int
  // The desired size of the group
  desiredCapacity int
  // List of availability zones associated with the group
  availabilityZones []string
  // Indicates whether Capacity Rebalancing is enabled
  capacityRebalance bool
  // The duration of the default instance warmup, in seconds
  defaultInstanceWarmup int
  // The EC2 instances associated with the group
  instances []aws.ec2.instance
}

// AWS Elastic Load Balancing
aws.elb {
  // List of classic load balancers
  classicLoadBalancers() []aws.elb.loadbalancer
  // List of application, gateway, and network load balancers (elbv2)
  loadBalancers() []aws.elb.loadbalancer
}

// AWS Elastic Load Balancing load balancer
private aws.elb.loadbalancer @defaults("name region elbType scheme vpcId dnsName") {
  // ARN for the load balancer
  arn string
  // DNS name for the load balancer
  dnsName string
  // List of listener configurations for the load balancer
  listenerDescriptions() []dict
  // User-specified name for the load balancer
  name string
  // Scheme for the load balancer: internet-facing or internal
  scheme string
  // A list of attributes for the load balancer
  attributes() []dict
  // Deprecated. Use vpc instead
  vpcId string
  // Date and time when the load balancer was created
  createdTime time
  // Availability zone where the load balancer runs
  availabilityZones []string
  // VPC security groups for the load balancer
  securityGroups []aws.ec2.securitygroup
  // The ID of the Amazon Route 53 hosted zone associated with the load balancer
  hostedZoneId string
  // Region where the load balancer exists
  region string
  // The type of ELB. Possible values are `network`, `application`, or `gateway`
  elbType string
  // VPC where the load balancer is located
  vpc aws.vpc
}

// AWS CodeBuild for building and testing code
aws.codebuild {
  // List of build projects
  projects() []aws.codebuild.project
}

// AWS CodeBuild project
private aws.codebuild.project @defaults("arn name") {
  // ARN for the project
  arn string
  // Description of the project
  description string
  // Name of the project
  name string
  // Build environment information about the project
  environment dict
  // Region where the project exists
  region string
  // Source used for the build project
  source dict
  // Tags for the project
  tags map[string]string
}

// Amazon GuardDuty for threat detection
aws.guardduty {
  // List of GuardDuty detectors
  detectors() []aws.guardduty.detector
}

// Amazon GuardDuty detector
private aws.guardduty.detector @defaults("id region") {
  // Unique ID for the detector
  id string
  // Region for the detector
  region string
  // Status of the detector: ENABLED or DISABLED
  status string
  // Publishing frequency for the detector
  findingPublishingFrequency string
  // List of unarchivedFindings found by the detector
  unarchivedFindings() []dict
}

// AWS Security Hub
aws.securityhub {
  // List of Security Hubs in the account
  hubs() []aws.securityhub.hub
}

// AWS Security Hub hub
private aws.securityhub.hub @defaults("arn") {
  // ARN for the Security Hub
  arn string
  // Date and time when the hub was enabled
  subscribedAt string
}

// AWS Secrets Manager
aws.secretsmanager {
  // List of secrets
  secrets() []aws.secretsmanager.secret
}

// AWS Secrets Manager secret
private aws.secretsmanager.secret @defaults("arn name") {
  // ARN for the secret
  arn string
  // Creation date of the secret
  createdAt time
  // Description of the secret
  description string
  // The last date the secret was changed
  lastChangedDate time
  // The last date the secret was automatically rotated
  lastRotatedDate time
  // Name of the secret
  name string
  // The date of the next secret rotation
  nextRotationDate time
  // The primary region of the secret
  primaryRegion string
  // Whether rotation is enabled for the secret
  rotationEnabled bool
  // Tags for the secret
  tags map[string]string
}


// Amazon Elastic Container Service (ECS)
aws.ecs {
  // List of AWS ECS Clusters
  clusters() []aws.ecs.cluster
  // List of AWS ECS Containers
  containers() []aws.ecs.container
  // List of AWS ECS Container Instances
  containerInstances() []aws.ecs.instance
}

// Amazon ECS cluster
private aws.ecs.cluster @defaults("name region status runningTasksCount pendingTasksCount") {
  // ARN of the ECS cluster
  arn string
  // Name of the ECS cluster
  name string
  // Tags of the ECS cluster
  tags map[string]string
  // Count of running tasks in the cluster
  runningTasksCount int
  // Count of pending tasks in the cluster
  pendingTasksCount int
  // Count of container instances registered to the cluster
  registeredContainerInstancesCount int
  // Configuration for the cluster
  configuration dict
  // Status of the cluster
  status string
  // List of AWS ECS task definitions
  tasks() []aws.ecs.task
  // List of AWS ECS container instances
  containerInstances() []aws.ecs.instance
  // The region where the cluster is located
  region string
}

// AWS ECS container instance
private aws.ecs.instance {
  // True if agent is connected to ECS
  agentConnected bool
  // ID for the container instance
  id string
  // ARN for the container instance
  arn string
  // Capacity provider associated with the container instance
  capacityProvider string
  // If container instance is EC2 instance, this is the EC2 instance resource
  ec2Instance() aws.ec2.instance
  // Region for the container instance
  region string
}

// Amazon ECS task
private aws.ecs.task {
  // ARN of the ECS task
  arn string
  // Cluster associated with the ECS task
  clusterName string
  // Connectivity status of the ECS task
  connectivity dict
  // Last reported status for the ECS task
  lastStatus string
  // Platform Family assigned to the ECS task
  platformFamily string
  // Platform Version assigned to the ECS task
  platformVersion string
  // User-defined tags associated with the ECS task
  tags map[string]string
  // List of AWS ECS containers
  containers []aws.ecs.container
}

// Amazon ECS container
private aws.ecs.container {
  // Name of the ECS container + IP for unique identification
  name string
  // ARN of the ECS container
  arn string
  // Public IP address of the ECS container
  publicIp string
  // Image used for the ECS container
  image string
  // Cluster associated with the ECS container
  clusterName string
  // ARN for the task definition associated with the ECS container
  taskDefinitionArn string
  // logDriver setting for the ECS container
  logDriver string
  // Platform family associated with the ECS container
  platformFamily string
  // Platform version assigned to the ECS container
  platformVersion string
  // Status of the ECS container
  status string
  // Region where the ECS Container is located
  region string
  // Command used to start the container
  command []string
  // ARN for the task used to create the container
  taskArn string
  // Runtime ID for the container
  runtimeId string
  // Name of the ECS container
  containerName string
}

// Amazon EMR
aws.emr {
  // List of EMR clusters
  clusters() []aws.emr.cluster
}

// Amazon EMR cluster
private aws.emr.cluster @defaults("arn") {
  // ARN for the cluster
  arn string
  // Name of the cluster
  name string
  // An approximation of the cost of the cluster, represented in m1.small/hours
  normalizedInstanceHours int
  // ARN of outpost where cluster is launched
  outpostArn string
  // Details about the current status of the cluster
  status dict
  // List of master instances for the cluster
  masterInstances() []dict
  // EMR cluster ID
  id string
  // Tags for the cluster
  tags map[string]string
}

// Amazon CloudWatch
aws.cloudwatch {
  // List of CloudWatch log groups
  logGroups() []aws.cloudwatch.loggroup
  // List of CloudWatch alarms
  alarms() []aws.cloudwatch.metricsalarm
  // List of CloudWatch metrics
  metrics() []aws.cloudwatch.metric
}

// Amazon CloudWatch metrics alarm
private aws.cloudwatch.metricsalarm @defaults("arn") {
  // ARN for the metric alarm
  arn string
  // Metric name associated with the alarm
  metricName string
  // Metric namespace associated with the alarm
  metricNamespace string
  // Region where the alarm exists
  region string
  // List of alarm actions (SNS topic ARNs) associated with the alarm
  actions []aws.sns.topic
  // State of the alarm
  state string
  // Description of the reason for the state
  stateReason string
  // List of SNS topic ARNs to trigger for insufficient data actions
  insufficientDataActions []aws.sns.topic
  // List of SNS topic ARNs to trigger for OK actions
  okActions []aws.sns.topic
  // Name of the alarm
  name string
}

// Amazon CloudWatch metric
private aws.cloudwatch.metric @defaults("name region") {
  // Name of the metric
  name string
  // Namespace for the metric
  namespace string
  // Region where the metric exists
  region string
  // List of CloudWatch metric alarms for the metric
  alarms() []aws.cloudwatch.metricsalarm
  // Dimensions that apply to the metric
  dimensions() []aws.cloudwatch.metricdimension
  // Statistics for the metric
  statistics() aws.cloudwatch.metricstatistics
}

// Amazon CloudWatch metric dimension
aws.cloudwatch.metricdimension @defaults("name value") {
  // Name of the dimension
  name string
  // Value of the dimension
  value string
}

// Amazon CloudWatch metric statistics
aws.cloudwatch.metricstatistics @defaults("name region") {
  init(namespace string, region string, name string)
  // Namespace for the metric
  namespace string
  // Name for the metric
  name string
  // Region for the metrics
  region string
  // Label for the statistics
  label string
  // Datapoints for the statistic over the last 24 hours in hour intervals
  datapoints []aws.cloudwatch.metric.datapoint
}

// Amazon CloudWatch metric datapoint
private aws.cloudwatch.metric.datapoint @defaults("id") {
  // Unique identifier for the datapoint
  id string
  // Timestamp of the metric datapoint
  timestamp time
  // Maximum value for the statistic
  maximum float
  // Minimum value for the statistic
  minimum float
  // Average value for the statistic
  average float
  // Sum value for the statistic
  sum float
  // Unit of the statistic
  unit string
}

// Amazon CloudWatch log group
private aws.cloudwatch.loggroup @defaults("arn") {
  // ARN of the log group
  arn string
  // Name of the log group
  name string
  // List of metric filters associated with the log group
  metricsFilters() []aws.cloudwatch.loggroup.metricsfilter
  // KMS key used for log encryption
  kmsKey() aws.kms.key
  // Region where the log group is stored
  region string
  // The number of days to retain the log events in the specified log group
  retentionInDays int
}

// Amazon CloudWatch log group metrics filter
private aws.cloudwatch.loggroup.metricsfilter @defaults("id") {
  // Unique ID for the metric
  id string
  // Filter name associated with the metric
  filterName string
  // Filter pattern associated with the metric
  filterPattern string
  // List of CloudWatch metrics
  metrics []aws.cloudwatch.metric
}

// Amazon CloudFront
aws.cloudfront @defaults("distributions functions") {
  // List of CloudFront distributions
  distributions() []aws.cloudfront.distribution
  // List of CloudFront functions
  functions() []aws.cloudfront.function
}

// Amazon CloudFront distribution
private aws.cloudfront.distribution @defaults("domainName status") {
  // ARN of the CloudFront distribution
  arn string
  // Status of the distribution
  status string
  // Domain Name of the distribution
  domainName string
  // Details on the origins of this distribution
  origins []aws.cloudfront.distribution.origin
  // Default cache behavior for the distribution
  defaultCacheBehavior dict
  // All cache behaviors for the distribution
  cacheBehaviors []dict
  // HTTP version of the distribution
  httpVersion string
  // Is the distribution IPV6 enabled
  isIPV6Enabled bool
  // Is the distribution enabled
  enabled bool
  // The price class of the distribution
  priceClass string
  // CNAMEs aliases if any for this distribution
  cnames []string
}

// Amazon CloudFront distribution origin
private aws.cloudfront.distribution.origin @defaults("id originPath") {
  // Domain name for the origin
  domainName string
  // Unique id for the origin
  id string
  // Number of times CloudFront attempts to connect
  connectionAttempts int
  // Number of seconds CloudFront waits when attempting a connection
  connectionTimeout int
  // Path that CloudFront appends to original domain
  originPath string
  // Account ID where the origin exists
  account string
}

// Amazon CloudFront function
private aws.cloudfront.function @defaults("name status") {
  // Name of the CloudFront function
  name string
  // Status of the CloudFront function
  status string
  // ARN of the CloudFront function
  arn string
  // Date and time when the function was last updated
  lastModifiedTime time
  // Date and time when the function was created
  createdTime time
  // Stage that the function is in
  stage string
  // Comment to describe the function
  comment string
  // Runtime environment for the function
  runtime string
}

// AWS CloudTrail
aws.cloudtrail @defaults("trails") {
  // List of CloudTrail trails associated with the account
  trails() []aws.cloudtrail.trail
}

// AWS CloudTrail trail
private aws.cloudtrail.trail @defaults("name region") {
  // ARN of the trail
  arn string
  // Name of the trail
  name string
  // KMS key used to encrypt the logs
  kmsKey() aws.kms.key
  // Whether the trail exists in multiple regions (false if single region)
  isMultiRegionTrail bool
  // Whether trail is an organization trail (logs events for management and member accounts of the organization)
  isOrganizationTrail bool
  // Whether log file validation is enabled
  logFileValidationEnabled bool
  // Whether API calls from global services are included
  includeGlobalServiceEvents bool
  // S3 bucket where trail files are delivered
  s3bucket() aws.s3.bucket
  // ARN of the SNS topic that the trail uses to send notifications
  snsTopicARN string
  // JSON list of information about the trail
  status() dict
  // Log group where trail files are delivered
  logGroup() aws.cloudwatch.loggroup
  // Role for logs endpoint to assume when writing to log group
  cloudWatchLogsRoleArn string
  // Group for logs endpoint to assume when writing to log group
  cloudWatchLogsLogGroupArn string
  // Settings for the trail's configured event selectors
  eventSelectors() []dict
  // Region in which the trail was created (home region)
  region string
}

// Amazon S3 bucket control
aws.s3control @defaults("accountPublicAccessBlock") {
  // Account level public access configuration for S3
  accountPublicAccessBlock() dict
}

// Amazon S3 cloud object storage
aws.s3 @defaults("buckets") {
  // List of S3 buckets across the account
  buckets() []aws.s3.bucket
}

// Amazon S3 bucket
private aws.s3.bucket @defaults("name location public") {
  // ARN of the bucket
  arn string
  // Name of the bucket
  name string
  // Policy associated with the bucket
  policy() aws.s3.bucket.policy
  // Tags for the bucket
  tags() map[string]string
  // List of access control grants associated with the bucket
  acl() []aws.s3.bucket.grant
  // Owner for the bucket
  owner() map[string]string
  // Whether the bucket is public
  public() bool
  // List of CORS information for the bucket
  cors() []aws.s3.bucket.corsrule
  // Location of the bucket
  location() string
  // Versioning state and MFA delete status of bucket
  versioning() map[string]string
  // Logging status and user permissions for bucket logging status
  logging() map[string]string
  // Website configuration for the bucket
  staticWebsiteHosting() map[string]string
  // Whether the bucket is locked by default
  defaultLock() string
  // Bucket cross-region replication configuration
  replication() dict
  // Bucket encryption configuration
  encryption() dict
  // Public access block configuration for the bucket
  publicAccessBlock() dict
  // Whether the bucket still exists (stale reference)
  exists bool
  // Date the bucket was created
  createdTime time
}

// Amazon S3 bucket grant
private aws.s3.bucket.grant @defaults("name permission") {
  // ID of the bucket grant
  id string
  // Name for the bucket grant
  name string
  // Permission associated with the grant
  permission string
  // Grantee associated with the grant
  grantee map[string]string
}

// Amazon S3 bucket CORS rule
private aws.s3.bucket.corsrule @defaults("name") {
  // Name of the rule
  name string
  // List of allowed headers
  allowedHeaders []string
  // List of allowed methods GET, POST, PUT, and so on
  allowedMethods []string
  // List of origins from which the bucket can be accessed
  allowedOrigins []string
  // List of exposed response headers
  exposeHeaders []string
  // Time in seconds that the browser caches preflight response
  maxAgeSeconds int
}

// Amazon S3 bucket policy
private aws.s3.bucket.policy @defaults("name version") {
  // Unique ID for the policy
  id string
  // Name for the policy
  name string
  // Document for the policy
  document string
  // Version of the policy
  version() string
  // List of statements for the policy
  statements() []dict
}


// AWS Application Auto Scaling
aws.applicationAutoscaling @defaults("namespace") {
  init(namespace string)
  // Service namespace to query for application auto scaling: comprehend, rds, sagemaker, appstream, elasticmapreduce, dynamodb, lambda, ecs, cassandra, ec2, neptune, kafka, custom-resource, or elasticache
  namespace string
  // List of scalable targets belonging to the service namespace
  scalableTargets() []aws.applicationautoscaling.target
}

// AWS Application Auto Scaling target
private aws.applicationautoscaling.target @defaults("arn") {
  // Namespace for the target
  namespace string
  // ARN of the auto scaling target
  arn string
  // Scalable dimension for the target
  scalableDimension string
  // Minimum capacity set for the auto scaling target
  minCapacity int
  // Maximum capacity set for the auto scaling target
  maxCapacity int
  // suspendedState for the auto scaling target
  suspendedState dict
}

// AWS Backup
aws.backup @defaults("vaults") {
  // List of vaults for the service
  vaults() []aws.backup.vault
}

// AWS Backup vault
private aws.backup.vault @defaults("name region") {
  // ARN of the vault
  arn string
  // Name of the vault
  name string
  // List of recovery points stored in the backup vault
  recoveryPoints() []aws.backup.vaultRecoveryPoint
  // The region of the vault
  region string
  // Date the backup vault was created
  createdAt time
  // Is the backup locked
  locked bool
  // The ARN of the encryption key
  encryptionKeyArn string
}

// AWS Backup vault recovery point
private aws.backup.vaultRecoveryPoint @defaults("resourceType completionDate status") {
  // ARN of the recovery point
  arn string
  // Resource type for the recovery point: EFS, DynamoDB, and so on
  resourceType string
  // Information about who created the recovery point
  createdBy dict
  // ARN of the IAM role used to create the recovery point
  iamRoleArn string
  // Status of the recovery point
  status string
  // Date the recovery point was created
  creationDate time
  // Date the recovery point completed
  completionDate time
  // ARN of the key used to encrypt the recovery point
  encryptionKeyArn string
  // Whether the recovery point is encrypted
  isEncrypted bool
}

// Amazon DynamoDB
aws.dynamodb {
  // List of backups for DynamoDB
  backups() []dict
  // List of global tables for DynamoDB
  globalTables() []aws.dynamodb.globaltable
  // List of tables for DynamoDB
  tables() []aws.dynamodb.table
  // List of DynamoDB settings across all regions
  limits() []aws.dynamodb.limit
}

// Amazon DynamoDB limits
private aws.dynamodb.limit @defaults("arn") {
  // ARN representing the account + region where the limit applies
  arn string
  // Region where the limits apply
  region string
  // Account max read limit
  accountMaxRead int
  // Account max write limit
  accountMaxWrite int
  // Table max read limit
  tableMaxRead int
  // Table max write limit
  tableMaxWrite int
}

// Amazon DynamoDB global table
private aws.dynamodb.globaltable @defaults("name") {
  // ARN for the global table
  arn string
  // Table name
  name string
  // List of replica settings for the table
  replicaSettings() []dict
}

// Amazon DynamoDB table
private aws.dynamodb.table @defaults("name region") {
  // ARN for the table
  arn string
  // Table name
  name string
  // Region where the table exists
  region string
  // Backups for the table
  backups() []dict
  // Description of server-side encryption for the table
  sseDescription dict
  // Provisioned throughput settings for the table
  provisionedThroughput dict
  // Continuous backups and point-in-time recovery settings for the table
  continuousBackups() dict
  // Tags for the table
  tags() map[string]string
  // The creation time of the table
  createdTime time
  // Is deletion protection enabled
  deletionProtectionEnabled bool
  // The global table version
  globalTableVersion string
  // The table ID
  id string
  // The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours.
  sizeBytes int
  // The current state of the table: CREATING, UPDATING, DELETING, ACTIVE, INACCESSIBLE_ENCRYPTION_CREDENTIALS, ARCHIVING, or ARCHIVED
  status string
}

// Amazon Relational Database Service (RDS)
aws.rds {
  // List of database instances
  dbInstances() []aws.rds.dbinstance
  // List of RDS database clusters
  dbClusters() []aws.rds.dbcluster
}

// Amazon RDS database cluster
private aws.rds.dbcluster @defaults("id region") {
  // ARN for the database cluster
  arn string
  // Region where the database cluster exists
  region string
  // Identifier for the database cluster
  id string
  // List of database instances that belong to the cluster
  members []aws.rds.dbinstance
  // List of snapshots for the cluster
  snapshots() []aws.rds.snapshot
  // Tags for the database cluster
  tags map[string]string
  // Whether the cluster is encrypted
  storageEncrypted bool
  // The amount of storage, in GiB, provisioned on the cluster
  storageAllocated int
  // The storage IOPS provisioned on the cluster
  storageIops int
  // The type of storage provisioned on the cluster
  storageType string
  // Current state of the cluster
  status string
  // The creation date of the RDS cluster
  createdTime time
  // Number of days for which automated snapshots are retained
  backupRetentionPeriod int
  // Whether minor version patches are applied automatically
  autoMinorVersionUpgrade bool
  // Name of the compute and memory capacity class of the Cluster DB instances
  clusterDbInstanceClass string
  // Name of the database engine for this DB cluster
  engine string
  // The version of the database engine for this DB cluster
  engineVersion string
  // Whether the cluster is publicly accessible
  publiclyAccessible bool
  // Whether the cluster is a Multi-AZ deployment
  multiAZ bool
  // Whether deletion protection is enabled
  deletionProtection bool
  // List of VPC security group elements that the DB cluster belongs to
  securityGroups []aws.ec2.securitygroup
  // List of Availability Zones (AZs) where instances in the DB cluster can be created
  availabilityZones []string
  // The port that the database engine is listening on
  port int
  // The connection endpoint for the primary instance of the DB cluster
  endpoint string
  // The cluster hosted zone ID
  hostedZoneId string
  // The master username for the DB instance
  masterUsername string
  // The latest time to which a database can be restored with point-in-time restore
  latestRestorableTime time
}

// Amazon RDS snapshot
private aws.rds.snapshot @defaults("id region type encrypted createdAt") {
  // ARN of the snapshot
  arn string
  // ID of the snapshot
  id string
  // Attribute values that describe permissions to restore the snapshot
  attributes() []dict
  // Type of snapshot: manual or automated
  type string
  // Whether the snapshot is encrypted
  encrypted bool
  // Region where the snapshot exists
  region string
  // Whether the snapshot is for a cluster
  isClusterSnapshot bool
  // Tags for the snapshot
  tags map[string]string
  // The snapshot DB engine
  engine string
  // The snapshot DB engine version
  engineVersion string
  // The snapshot status
  status string
  // The amount of storage allocated to the snapshot
  allocatedStorage int
  // The port that the DB instance or cluster listens on
  port int
  // The creation date of the snapshot
  createdAt time
}

// Amazon RDS database instance
private aws.rds.dbinstance @defaults("id region engine engineVersion") {
  // ARN for the database instance
  arn string
  // Name of the database instance
  name string
  // Number of days for which automated snapshots are retained
  backupRetentionPeriod int
  // List of snapshots for the database instance
  snapshots() []aws.rds.snapshot
  // Whether the instance is encrypted
  storageEncrypted bool
  // The amount of storage, in GiB, provisioned on the instance
  storageAllocated int
  // The storage IOPS provisioned on the instance
  storageIops int
  // The type of storage provisioned on the instance
  storageType string
  // Region where the instance exists
  region string
  // Availability zone where the instance exists
  availabilityZone string
  // Whether the instance is publicly accessible
  publiclyAccessible bool
  // List of log types the instance is configured to export to CloudWatch logs
  enabledCloudwatchLogsExports []string
  // Whether deletion protection is enabled
  deletionProtection bool
  // Whether the instance is a Multi-AZ deployment
  multiAZ bool
  // Identifier for the database instance
  id string
  // ARN of the CloudWatch log stream that receives the enhanced monitoring metrics data
  enhancedMonitoringResourceArn string
  // Tags for the database instance
  tags map[string]string
  // Name of the compute and memory capacity class of the DB instance
  dbInstanceClass string
  // User-supplied unique key that identifies a DB instance
  dbInstanceIdentifier string
  // Name of the database engine for this DB instance
  engine string
  // The version of the database engine for this DB instance
  engineVersion string
  // List of VPC security group elements that the DB instance belongs to
  securityGroups []aws.ec2.securitygroup
  // Current state of this database
  status string
  // Whether minor version patches are applied automatically
  autoMinorVersionUpgrade bool
  // The creation date of the RDS instance
  createdTime time
  // The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
  port int
  // The connection endpoint for the DB instance
  endpoint string
  // The master username for the DB instance
  masterUsername string
  // The latest time to which a database can be restored with point-in-time restore
  latestRestorableTime time
}

// Amazon ElastiCache
aws.elasticache @defaults("cacheClusters") {
    // Deprecated. Use `cacheClusters` instead.
  clusters() []dict
  // List of clusters
  cacheClusters() []aws.elasticache.cluster
}

// Amazon ElastiCache cluster
private aws.elasticache.cluster @defaults("cacheClusterId region nodeType engine") {
  // ARN for the cluster
  arn string
  // Whether the cluster has at rest encryption enabled
  atRestEncryptionEnabled bool
  // Whether Redis authentication tokens (or passwords) enable Redis to require a password before allowing clients to run commands
  authTokenEnabled bool
  // Date and time authentication token was last modified
  authTokenLastModifiedDate time
  // Whether the cluster is configured to auto-upgrade to the next minor version (Redis 6.0 or later)
  autoMinorVersionUpgrade bool
  // The date and time when the cluster was created
  cacheClusterCreateTime time
  // The user-supplied unique key that identifies the cluster
  cacheClusterId string
  // The current state of the cluster: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting
  cacheClusterStatus string
  // The name of the compute and memory capacity node type for the cluster
  cacheNodeType string
  // A list of cache nodes that are members of the cluster
  cacheNodes []string
  // A list of cache security group elements, composed of name and status sub-elements
  cacheSecurityGroups []string
  // The name of the cache subnet group associated with the cluster
  cacheSubnetGroupName string
  // The URL of the web page where you can download the latest ElastiCache client library
  clientDownloadLandingPage string
  // The node type for the nodes in the cluster
  nodeType string
  // The name of the cache engine used for this cluster: Memcached or Redis
  engine string
  // The version of the cache engine that is used in this cluster
  engineVersion string
  // The network type associated with the cluster: ipv4 or ipv6
  ipDiscovery string
  // The log delivery configurations being modified
  logDeliveryConfigurations []dict
  // The supported network connection type for the cluster: ipv4, ipv6, or dual_stack
  networkType string
  // Describes a notification topic and its status
  notificationConfiguration string
  // The number of cache nodes in the cluster
  numCacheNodes int
  // The name of the availability zone in which the cluster is located or "Multiple" if the cache nodes are located in different availability zones
  preferredAvailabilityZone string
  // Region where the cluster exists
  region string
  // A list of VPC security groups associated with the cluster
  securityGroups []aws.ec2.securitygroup
  // The number of days for which ElastiCache retains automatic cluster snapshots before deleting them
  snapshotRetentionLimit int
  // Whether in-transit encryption is enabled
  transitEncryptionEnabled bool
  // Whether migrating clients to use in-transit encryption (with no downtime) is allowed
  transitEncryptionMode string
}

// Amazon Redshift
aws.redshift @defaults("clusters") {
  // List of clusters
  clusters() []aws.redshift.cluster
}

// Amazon Redshift cluster
private aws.redshift.cluster @defaults("dbName clusterVersion clusterStatus region") {
  // Whether major upgrades are applied automatically
  allowVersionUpgrade bool
  // ARN for the cluster
  arn string
  // Number of days automatic cluster snapshots are retained
  automatedSnapshotRetentionPeriod int
  // Availability zone where the cluster exists
  availabilityZone string
  // List of cluster parameter group names
  clusterParameterGroupNames []string
  // Specific revision number of the database in the cluster
  clusterRevisionNumber string
  // Current state of this cluster: available, creating, deleting, rebooting, renaming, or resizing
  clusterStatus string
  // Name of the subnet group associated with the cluster
  clusterSubnetGroupName string
  // Version of the Redshift engine running on the cluster
  clusterVersion string
  // Cluster creation timestamp
  createdAt time
  // Name of the initial database that was created when the cluster was created
  dbName string
  // Whether the cluster is encrypted at rest
  encrypted bool
  // Whether enhanced VPC routing is enabled for the cluster traffic
  enhancedVpcRouting bool
  // Logging configuration for the cluster
  logging() dict
  // Master user name for the cluster.
  masterUsername string
  // Name of the initial database created when cluster was created
  name string
  // The next scheduled maintenance window
  nextMaintenanceWindowStartTime time
  // The node type for the nodes in the cluster
  nodeType string
  // The number of nodes in the cluster
  numberOfNodes int
  // Detailed list of parameters for each parameter group name
  parameters() []dict
  // Weekly time range for system maintenance (in UTC)
  preferredMaintenanceWindow string
  // Whether the cluster is publicly accessible
  publiclyAccessible bool
  // Region where the cluster exists
  region string
  // Tags for the cluster
  tags map[string]string
  // The ID of the VPC where the cluster is running
  vpcId string
}

// AWS Elastic Container Registry (ECR)
aws.ecr {
  // List of private repositories
  privateRepositories() []aws.ecr.repository
  // List of public repositories associated with the AWS account
  publicRepositories() []aws.ecr.repository
  // List of images
  images() []aws.ecr.image
}

// AWS Elastic Container Registry repository
private aws.ecr.repository @defaults("uri region") {
  // ARN of the repository
  arn string
  // Name of the repository
  name string
  // URI of the repository, used for push/pull operations
  uri string
  // AWS Account ID associated with public registry for this repository
  registryId string
  // Whether the repository is public
  public bool
  // List of images in the repository
  images() []aws.ecr.image
  // Region where the image is stored
  region string
  // Repository option to scan on image push
  imageScanOnPush bool
}

// AWS Elastic Container Registry image
private aws.ecr.image @defaults("uri region") {
  // SHA256 of the image manifest
  digest string
  // Type of image manifest
  mediaType string
  // List of tags associated with image
  tags []string
  // AWS account ID associated with public registry for this image
  registryId string
  // Name of the repository for the image
  repoName string
  // Region where the ECR image is located
  region string
  // ARN for the image
  arn string
  // uri for the image repository
  uri string
}

// AWS Database Migration Service (DMS)
aws.dms @defaults("replicationInstances") {
  // List of DMS replication instances
  replicationInstances() []dict
}

// Amazon API Gateway
aws.apigateway @defaults("restApis") {
  // List of `aws.apigateway.restapi` objects representing all rest APIs across all enabled regions in the account
  restApis() []aws.apigateway.restapi
}

// Amazon API Gateway REST API
private aws.apigateway.restapi @defaults("name id") {
  // ARN for the REST API
  arn string
  // Unique ID for the REST API
  id string
  // Name for the REST API
  name string
  // Time when the REST API was created
  createdDate time
  // Description for the REST API
  description string
  // Stages for the REST API
  stages() []aws.apigateway.stage
  // Region where the REST API exists
  region string
  // Tags for the REST API
  tags map[string]string
}

// Amazon API Gateway REST API stages
private aws.apigateway.stage @defaults("arn") {
  // ARN for the REST API stage
  arn string
  // Name for the stage
  name string
  // Bool that denotes if tracing is enabled for the stage
  tracingEnabled bool
  // Description for the stage
  description string
  // ID of the deployment the stage is attached to
  deploymentId string
  // Method settings for the stage
  methodSettings dict
}

// AWS Lambda
aws.lambda {
  // List of Lambda functions across all regions in the account
  functions() []aws.lambda.function
}

// AWS Lambda function
private aws.lambda.function @defaults("arn") {
  // ARN of the function
  arn string
  // Name of the function
  name string
  // Runtime environment for the function
  runtime string
  // Concurrency limit for the function
  concurrency() int
  // Target ARN of the dead-letter queue config
  dlqTargetArn string
  // Policy for the function
  policy() dict
  // VPC configuration for the Lambda function
  vpcConfig dict
  // Region where the function exists
  region string
  // Tags for the function
  tags map[string]string
}

// Amazon Systems Manager
aws.ssm @defaults("instances") {
  instances() []aws.ssm.instance
}

// Amazon SSM instance
private aws.ssm.instance @defaults("instanceId region platformName platformVersion ipAddress") {
  // Instance ID for the SSM Instance
  instanceId string
  // Ping status (such as online) for the SSM Instance
  pingStatus string
  // IP Address for the SSM instance
  ipAddress string
  // Platform name for the SSM Instance, as described by AWS
  platformName string
  // The type of for the SSM Instance, as described by AWS: Windows, Linux, and so on
  platformType string
  // Platform version for the SSM Instance, as described by AWS
  platformVersion string
  // Region where the SSM instance is located
  region string
  // ARN for the SSM instance
  arn string
  // Tags for the SSM instance
  tags() map[string]string
}

// Amazon EC2
aws.ec2 {
  // List of security groups available to the account
  securityGroups() []aws.ec2.securitygroup
  // List of instances across the AWS account (all regions)
  instances() []aws.ec2.instance
  // map[region]boolean used to denote if EBS encryption is on by default per region
  ebsEncryptionByDefault() map[string]bool
  // List of volumes across the AWS account
  volumes() []aws.ec2.volume
  // List of snapshots across the account
  snapshots() []aws.ec2.snapshot
  // List of internet gateways
  internetGateways() []aws.ec2.internetgateway
  // List of VPN connections
  vpnConnections() []aws.ec2.vpnconnection
  // List of network ACLs
  networkAcls() []aws.ec2.networkacl
  // List of keypairs for the account
  keypairs() []aws.ec2.keypair
}

// Amazon EC2 network ACL
private aws.ec2.networkacl @defaults("id region") {
  // ARN for the network ACL
  arn string
  // ID for the network ACL
  id string
  // Region for the network ACL
  region string
  // Entries for the network ACL
  entries() []aws.ec2.networkacl.entry
  // Whether the ACL is the default network ACL for the VPC
  isDefault bool
  // Tags for the network ACL
  tags map[string]string
  // Associations for the network ACL
  associations []aws.ec2.networkacl.association
}

private aws.ec2.networkacl.association {
  // ID for the association
  associationId string
  // Network ACL ID for the association
  networkAclId string
  // Subnet ID for the association
  subnetId string
}

// Amazon EC2 network ACL entry
private aws.ec2.networkacl.entry @defaults("id egress ruleAction cidrBlock portRange") {
  // Whether this is an entry for egress rules
  egress bool
  // Allow or deny
  ruleAction string
  // The rule number
  ruleNumber int
  // Port range for the ACL entry
  portRange() aws.ec2.networkacl.entry.portrange
  // CIDR block for the ACL entry
  cidrBlock string
  // IPv6 CIDR block for the ACL entry
  ipv6CidrBlock string
  // ID for the ACL entry rule
  id string
}

// Amazon EC2 network ACL entry port range
private aws.ec2.networkacl.entry.portrange @defaults("from to") {
  // Starting port for port range
  from int
  // Ending port for port range
  to int
  // ID for the entry port range
  id string
}

// Amazon EC2 VPN connection
private aws.ec2.vpnconnection @defaults("arn") {
  // ARN for the VPN connection
  arn string
  // List of telemetry data for the VPN
  vgwTelemetry []aws.ec2.vgwtelemetry
}

// Amazon EC2 VPN tunnel telemetry
private aws.ec2.vgwtelemetry {
  // Outside IP address
  outsideIpAddress string
  // VPN tunnel status
  status string
  // VPN tunnel status message
  statusMessage string
}

// Amazon EC2 internet gateway
private aws.ec2.internetgateway @defaults("arn") {
  // ARN for the gateway
  arn string
  // ID for the gateway
  id string
  // VPC attachments
  attachments []dict
}

// Amazon EC2 (EBS) snapshot
private aws.ec2.snapshot @defaults("id region volumeSize state") {
  // ARN for the snapshot
  arn string
  // ID for the snapshot
  id string
  // Region where the snapshot exists
  region string
  // Users/groups that have the permissions to create volumes from the snapshot
  createVolumePermission() []dict
  // ID of the volume used to create the snapshot
  volumeId string
  // Time when the snapshot was initiated
  startTime time
  // Tags for the snapshot
  tags map[string]string
  // State of the snapshot: pending, completed, error, recoverable, or recovering
  state string
  // The size of the volume, in GiB
  volumeSize int
  // The description of the snapshot
  description string
  // Whether the snapshot is encrypted
  encrypted bool
}

// Amazon EC2 (EBS) volume
private aws.ec2.volume @defaults("id region volumeType size encrypted state") {
  // ARN for the EC2 volume
  arn string
  // ID of the EC2 volume
  id string
  // Information about the volume attachments
  attachments []dict
  // Whether the volume is encrypted
  encrypted bool
  // State of the volume: creating, available, in-use, and so on
  state string
  // A map of tags associated with the EBS volume
  tags map[string]string
  // Availability Zone in which the volume was created
  availabilityZone string
  // EBS volume type: gp2, gp3, io1, io2, st1, sc1, or standard
  volumeType string
  // Time the volume was created
  createTime time
  // Region where the EC2 volume is stored
  region string
  // Whether Amazon EBS Multi-Attach is enabled.
  multiAttachEnabled bool
  // The throughput that the volume supports, in MiB/s.
  throughput int
  // The size of the volume, in GiBs.
  size int
  // The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
  iops int
}

// Amazon Inspector
aws.inspector {
  // List of coverage results for the AWS account
  coverages() []aws.inspector.coverage
}

// Amazon Inspector environment coverage
private aws.inspector.coverage {
  // Account ID for the coverage finding
  accountId string
  // Resource ID for the coverage finding
  resourceId string
  // Resource type, e.g. AWS_EC2_INSTANCE
  resourceType string
  // Time when the coverage finding was last scanned
  lastScannedAt time
  // Reason for the coverage finding status
  statusReason string
  // Code for the coverage finding status
  statusCode string
  // Type of coverage finding
  scanType string
  // Region where it was found
  region string
  // Details about the EC2 instance associated with the finding
  ec2Instance() aws.inspector.coverage.instance
  // Details about the ECR image associated with the finding
  ecrImage() aws.inspector.coverage.image
  // Details about the ECR repo associated with the finding
  ecrRepo() aws.inspector.coverage.repository
  // Details about the Lambda function associated with the finding
  lambda() aws.lambda.function
}

// Amazon Inspector instance coverage group
private aws.inspector.coverage.instance {
  // Platform for the EC2 instance
  platform string
  // Tags associated with the EC2 instance
  tags map[string]string
  // Image associated with the EC2 instance
  image aws.ec2.image
  // Region where the EC2 instance is found
  region string
}

// Amazon Inspector container image coverage group
private aws.inspector.coverage.image {
  // Time when the image was scanned
  imagePulledAt time
  // Tags associated with the image
  tags map[string]string
  // Region where the image is found
  region string
}

// Amazon Inspector container registry coverage group
private aws.inspector.coverage.repository {
  // Name of the ECR repository
  name string
  // Scan frequency of the ECR repo
  scanFrequency string
  // Region where the ECR repo is found
  region string
}

// Amazon EC2 instance
private aws.ec2.instance @defaults("instanceId region state instanceType architecture platformDetails") {
  // ARN for the instance
  arn string
  // Instance ID for the instance
  instanceId string
  // Whether detailed monitoring is enabled
  detailedMonitoring string
  // Region where the instance exists
  region string
  // Public IP for instance
  publicIp string
  // Amazon Systems Manager information for the instance
  ssm() dict
  // VPC associated with the instance
  vpc() aws.vpc
  // A value of "optional" denotes IMDSv1 server compatibility; "required" denotes IMDSv2
  httpTokens string
  // Status of the IMDS endpoint enabled on the instance
  httpEndpoint string
  // Patch state information about the instance
  patchState() dict
  // State of the instance: pending, running, stopping, stopped, rebooting, or terminated
  state string
  // List of devices attached to the instance (such as EBS volume)
  deviceMappings []aws.ec2.instance.device
  // List of security groups (IDs) associated with the instance
  securityGroups() []aws.ec2.securitygroup
  // Platform details
  platformDetails string
  // Public DNS name for the instance
  publicDnsName string
  // The status of the specified instance
  instanceStatus() dict
  // Reason for the most recent state transition
  stateReason dict
  // Reason for the most recent state transition
  stateTransitionReason string
  // Whether the instance has EBS optimization turned on
  ebsOptimized bool
  // Whether enhanced networking with ENA is enabled
  enaSupported bool
  // Instance type, such as t2.micro
  instanceType string
  // Tags on the instance
  tags map[string]string
  // Image that was used for the instance
  image() aws.ec2.image
  // Launch time of the instance
  launchTime time
  // Private IP address for the instance
  privateIp string
  // Private DNS name for the instance
  privateDnsName string
  // Key pair associated with the instance
  keypair() aws.ec2.keypair
  // Time when the last state transition occurred
  stateTransitionTime time
  // The ARN of the VPC associated with the instance
  vpcArn string
  // The hypervisor type of the instance: ovm or xen
  hypervisor string
  // Whether this is a Spot Instance or a Scheduled Instance: spot, scheduled, or capacity-block
  instanceLifecycle string
  // The root device type used by the AMI: ebs or instance-store
  rootDeviceType string
  // The device name of the root device volume, such as /dev/sda1
  rootDeviceName string
  // The architecture of the instance
  architecture string
}

// Amazon EC2 key pair
private aws.ec2.keypair @defaults("name type region") {
  // ARN of the key pair
  arn string
  // Fingerprint for the key pair
  fingerprint string
  // Name of the key pair
  name string
  // Type of key, such as RSA
  type string
  // Tags for the key pair
  tags map[string]string
  // Region where the key pair exists
  region string
  // Date the keypair was created
  createdAt time
}

// Amazon EC2 image (AMI)
private aws.ec2.image @defaults("arn") {
  // ARN for the AMI
  arn string
  // ID of the image
  id string
  // Name for the image
  name string
  // Architecture associated with the image
  architecture string
  // AWS account ID of the image owner
  ownerId string
  // Alias for the image owner
  ownerAlias string
}

// Amazon EC2 instance device
private aws.ec2.instance.device {
  // Boolean to denote whether volume should be deleted on instance termination
  deleteOnTermination bool
  // Status of the device
  status string
  // Volume ID for the device
  volumeId string
  // Name for the device
  deviceName string
}

// Amazon EC2 security group
private aws.ec2.securitygroup @defaults("id name region vpc.id") {
  // Security group ARN
  arn string
  // Security group ID
  id string
  // Name of the security group
  name string
  // Description of the security group
  description string
  // A map of tags associated with the security group
  tags map[string]string
  // VPC associated with the security group
  vpc aws.vpc
  // IP permissions (ingress) for the security group
  ipPermissions []aws.ec2.securitygroup.ippermission
  // IP permissions (egress) for the security group
  ipPermissionsEgress []aws.ec2.securitygroup.ippermission
  // Region associated with the security group
  region string
  // Whether the security group is attached to Amazon Elastic Compute Cloud
  isAttachedToNetworkInterface() bool
}

// Amazon EC2 security group IP permission
private aws.ec2.securitygroup.ippermission @defaults("id toPort fromPort ipProtocol ipRanges ipv6Ranges") {
  // Unique ID for the IP permission
  id string
  // Start of port range for TCP/UDP protocols
  fromPort int
  // End of port range for TCP/UDP protocols
  toPort int
  // IP protocol name
  ipProtocol string
  // IPv4 ranges
  ipRanges []string
  // IPv6 ranges
  ipv6Ranges []string
}

// AWS Config
aws.config {
  // List of configuration recorders for each region in the account
  recorders() []aws.config.recorder
  // List of AWS Config rules
  rules() []aws.config.rule
  // List of delivery channels for each region in the account
  deliveryChannels() []aws.config.deliverychannel
}

// AWS Config rule
private aws.config.rule @defaults("name id region state") {
  // ARN for the config rule
  arn string
  // State of the rule
  state string
  // Rule identifier that causes the function to evaluate resources
  source dict
  // The ID of the Config rule
  id string
  // The name that you assigned to the Config rule
  name string
  // The description that provided for the Config rule
  description string
  // Region for the Config rule
  region string
}

// AWS Config recorder
private aws.config.recorder @defaults("name region") {
  // Name of the recorder
  name string
  // ARN of the IAM role used to describe the AWS resources associated with the account
  roleArn string
  // Whether the recorder records config changes for every supported type of regional resource
  allSupported bool
  // Whether the recorder records all supported types of global resources
  includeGlobalResourceTypes bool
  // Whether the recorder is currently recording
  recording bool
  // Last (previous) status of the recorder
  lastStatus string
  // Region for the recorder
  region string
  // Whether the recorder records specific resource types
  resourceTypes []string
}

// AWS Config delivery channel
private aws.config.deliverychannel @defaults("name region") {
  // Name of the delivery channel
  name string
  // S3 bucket name where configuration snapshots are delivered
  s3BucketName string
  // Prefix for the S3 bucket where configuration snapshots are delivered
  s3KeyPrefix string
  // ARN of the SNS topic that AWS Config delivers notifications to
  snsTopicARN string
  // Region for the delivery channel
  region string
}

// Amazon Elastic Kubernetes Service (EKS)
aws.eks {
  // EKS clusters
  clusters() []aws.eks.cluster
}

// Amazon EKS cluster
private aws.eks.cluster @defaults("arn version status") {
  // Name of the cluster
  name string
  // ARN of the cluster
  arn string
  // Region for the cluster
  region string
  // A map of tags associated with the cluster
  tags map[string]string
  // The endpoint of Kubernetes API server
  endpoint string
  // Kubernetes server version
  version string
  // Amazon EKS cluster version
  platformVersion string
  // Cluster status
  status string
  // Encryption configuration for the cluster
  encryptionConfig []dict
  // Cluster logging configuration
  logging dict
  // Kubernetes network configuration
  networkConfig dict
  //  VPC configuration
  resourcesVpcConfig dict
  // Cluster creation timestamp
  createdAt time
}
