// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

option provider = "go.mondoo.com/cnquery/v9/providers/network"
option go_package = "go.mondoo.com/cnquery/v9/providers/network/resources"

// Socket
socket @defaults("protocol port address") {
  // Protocol for this socket
  protocol string
  // Port number
  port int
  // Target address
  address string
}

// HTTP endpoint
http {}

// HTTP GET requests
http.get @defaults("url statusCode") {
  init(rawUrl string)
  // URL for this request
  url url
  // Header returned from this request
  header() http.header
  // Status returned from this request
  statusCode() int
  // Version of the HTTP request, e.g. 1.1
  version() string
  // Body returned from this request
  body() string
}

// HTTP header
private http.header @defaults("length=params.length") {
  // Raw list of parameters for this header
  params map[string][]string
  // Strict-Transport-Security header
  sts() http.header.sts
  // X-Frame-Options header: DENY, SAMEORIGIN, or ALLOW-FROM origin (obsolete)
  xFrameOptions() string
  // X-XSS-Protection header
  xXssProtection() http.header.xssProtection
  // X-Content-Type-Options header: nosniff
  xContentTypeOptions() string
  // Referrer-Policy header
  referrerPolicy() string
  // Content-Type header
  contentType() http.header.contentType
  // Set-Cookie header
  setCookie() http.header.setCookie
  // Content-Security-Policy header
  csp() map[string]string
}

// HTTP header for Strict-Transport-Security
private http.header.sts @defaults("maxAge includeSubDomains preload") {
  // How long to cache HTTPS-only policy in seconds
  maxAge time
  // Whether caching applies to subdomains
  includeSubDomains bool
  // Non-standard directive for preloading STS
  preload bool
}

// HTTP header for X-XSS-Protection, which is now outdated (replaced by CSP)
// and may even cause security vulnerabilities
private http.header.xssProtection @defaults("enabled mode report") {
  // Enabled when the header value is set to 1. Disabled if set to 0
  enabled bool
  // Mode for XSS filtering.
  mode string
  // Report endpoint for violations (Chromium only).
  report string
}

// Content-type header
private http.header.contentType @defaults("type") {
  // MIME type for the content
  type string
  // Additional parameters for this content type
  params map[string]string
}

// Set-cookie header
private http.header.setCookie @defaults("name value") {
  // Name of the cookie to set
  name string
  // Value of the cookie to set
  value string
  // Additional parameters for setting this cookie
  params map[string]string
}

// URL resource, generally represented as:
// [scheme:][//[user[:password]@]host[:port]][/]path[?query][#fragment]
url @defaults("string") {
  init(raw string)
  // The full URL as a string
  string() string
  // Scheme, e.g. http, https, ssh
  scheme string
  // User component, may contain username or token (no password)
  user string
  // Password, an additional optional component of the user info
  password string
  // Host, either registered name or IP; e.g. mondoo.com
  host string
  // Port, optional decimal number; e.g. 80
  port int
  // Path, consisting of segments separated by '/'
  path string
  // Query, optional, attached to path via '?', parsed via '&' and ';' delimiters
  query map[string]string
  // Raw query, optional raw string attached to path after '?'
  rawQuery string
  // Fragment, optional raw string attached to path after '#'
  rawFragment string
}

// TLS
tls @defaults("socket domainName") {
  init(target string)
  // Socket of this connection
  socket socket
  // An optional domain name to test
  domainName string
  // List of all parameters for this TLS/SSL connection
  params(socket, domainName) dict
  // Version of TLS/SSL that is being used
  versions(params) []string
  // Ciphers supported by this TLS/SSL connection
  ciphers(params) []string
  // Extensions supported by this TLS/SSL connection
  extensions(params) []string
  // Certificates provided in this TLS/SSL connection
  certificates(params) []certificate
  // Certificates provided without server name indication (SNI)
  nonSniCertificates(params) []certificate
}

// x509 certificates resource
certificates {
  []certificate
  // PEM content
  pem string
}

// x509 certificate resource
certificate @defaults("serial subject.commonName subject.dn") {
  // PEM content
  pem string
  // Certificate fingerprints
  fingerprints() map[string]string
  // Serial number
  serial() string
  // Subject unique identifier
  subjectKeyID() string
  // Authority key identifier
  authorityKeyID() string
  // Subject
  subject() pkix.name
  // Issuer
  issuer() pkix.name
  // Version number
  version() int
  // Validity period validity period
  notBefore() time
  // Validity period not after
  notAfter() time
  // Expiration duration
  expiresIn() time
  // Signature
  signature() string
  // Signature algorithm ID
  signingAlgorithm() string
  // Flag if certificate authority
  isCA() bool
  // Key usage
  keyUsage() []string
  // Extended key usage
  extendedKeyUsage() []string
  // Extensions
  extensions() []pkix.extension
  // Policy identifier
  policyIdentifier() []string
  // CRL distribution points
  crlDistributionPoints() []string
  // OCSP
  ocspServer() []string
  // Issuing certificate URL
  issuingCertificateUrl() []string
  // Identifies if this certificate has been revoked
  isRevoked() bool
  // The time at which this certificate was revoked
  revokedAt() time
  // Indicates if the certificate is valid by checking its chain
  isVerified() bool
  // SAN extension value params
  sanExtension() pkix.sanExtension
}

// x509 certificate PKIX name
pkix.name @defaults("id dn commonName") {
  // ID
  id string
  // Distinguished name qualifier
  dn string
  // Serial number
  serialNumber string
  // Common name
  commonName string
  // Country
  country []string
  // Organization
  organization []string
  // Organizational unit
  organizationalUnit []string
  locality []string
  // State or province
  province []string
  // Street address
  streetAddress []string
  // Postal code
  postalCode []string
  names      map[string]string
  extraNames map[string]string
}

// x509 certificate PKIX extension
pkix.extension @defaults("id") {
  // ID
  id string
  // Extension identifier
  identifier string
  // Flag for critical extension
  critical bool
  // Extension value
  value string
}

// x509 certificate PKIX Subject Alternative Name extension
private pkix.sanExtension @defaults("dnsNames") {
	// x509 certificate PKIX extension
	extension pkix.extension
	// DNS names
	dnsNames []string
	// IP addresses
	ipAddresses []string
	// Email addresses
	emailAddresses []string
	// URIs
	uris []string
}

private openpgp.entities {
  []openpgp.entity(content)
  content string
}

// OpenPGP entity
private openpgp.entity {
  // primary public key, which must be a signing key
  primaryPublicKey openpgp.publicKey
  // Entity's identities
  identities() []openpgp.identity
}

// OpenPGP public key
private openpgp.publicKey {
  // Key ID
  id string
  // Key version
  version int
  // Key fingerprint
  fingerprint string
  // Key algorithm
  keyAlgorithm string
  // Key bit length
  bitLength int
  // Key creation time
  creationTime time
}

// OpenPGP identity
private openpgp.identity {
  // Primary key fingerprint
  fingerprint string
  // Full name in form of "Full Name (comment) <email@example.com>"
  id string
  // Name
  name string
  // Email
  email string
  // Comment
  comment string
  // Identity Signatures
  signatures() []openpgp.signature
}

// OpenPGP signature
private openpgp.signature {
  // Primary key fingerprint
  fingerprint string
  // Identity name
  identityName string
  // Signature hash
  hash string
  // Signature version
  version int
  // Signature type
  signatureType string
  // Hash algorithm
  keyAlgorithm string
  // Creation time
  creationTime time
  // Signature lifetime in seconds
  lifetimeSecs int
  // Expiration duration
  expiresIn time
  // Key lifetime in seconds
  keyLifetimeSecs int
  // Key expiration duration
  keyExpiresIn time
}

// Domain name
domainName @defaults("fqdn") {
  init(fqdn string)
  // Fully qualified domain name (FQDN)
  fqdn string
  // effectiveTLDPlusOne returns the effective top level domain plus one more label
  effectiveTLDPlusOne string
  // Top-level domain
  tld string
  // Flag indicates if the TLD is ICANN managed
  tldIcannManaged bool
  // Domain labels
  labels []string
}

// DNS resource
dns @defaults("fqdn") {
  init(fqdn string)
  // Fully qualified domain name (FQDN)
  fqdn string
  // Params is a list of all parameters for DNS FQDN
  params(fqdn) dict
  // Successful DNS records
  records(params) []dns.record
  // Successful DNS MX records
  mx(params) []dns.mxRecord
  // DKIM TXT records
  dkim(params) []dns.dkimRecord
}

// DNS record
dns.record @defaults("name type") {
  // DNS name
  name string
  // Time-To-Live (TTL) in seconds
  ttl int
  // DNS class
  class string
  // DNS type
  type string
  // Resource Data
  rdata []string
}

// DNS MX record
dns.mxRecord @defaults("domainName") {
  name string
  preference int
  domainName string
}

// DKIM public key representation as defined in RFC 6376
dns.dkimRecord @defaults("dnsTxt") {
  // DNS Text representation
  dnsTxt string
  // DKIM Selector domain
  domain string
  // Version
  version string
  // Acceptable hash algorithms
  hashAlgorithms []string
  // Key type
  keyType string
  // Notes
  notes string
  // Public key data base64-encoded
  publicKeyData string
  // Service types
  serviceTypes []string
  // Flags
  flags []string
  // Verifies if the DKIM entry and public key is valid
  valid() bool
}
