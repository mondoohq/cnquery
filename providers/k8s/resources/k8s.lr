// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

import "../../os/resources/os.lr"
import "../../network/resources/network.lr"

option provider = "go.mondoo.com/cnquery/v9/providers/k8s"
option go_package = "go.mondoo.com/cnquery/v11/providers/k8s/resources"

// Kubernetes cluster
k8s {
  // Cluster version
  serverVersion() dict
  // Available resource types
  apiResources() []k8s.apiresource
  // Cluster namespaces
  namespaces() []k8s.namespace
  // Cluster nodes
  nodes() []k8s.node
  // Cluster Pods
  pods() []k8s.pod
  // Cluster deployments
  deployments() []k8s.deployment
  // Cluster DaemonSets
  daemonsets() []k8s.daemonset
  // Cluster StatefulSets
  statefulsets() []k8s.statefulset
  // Cluster ReplicaSets
  replicasets() []k8s.replicaset
  // Cluster Jobs
  jobs() []k8s.job
  // Cluster CronJobs
  cronjobs() []k8s.cronjob
  // Cluster Secrets
  secrets() []k8s.secret
  // ConfigMaps
  configmaps() []k8s.configmap
  // Kubernetes Services
  services() []k8s.service
  // Kubernetes Ingresses
  ingresses() []k8s.ingress
  // Kubernetes service accounts
  serviceaccounts() []k8s.serviceaccount
  // Kubernetes RBAC ClusterRoles
  clusterroles() []k8s.rbac.clusterrole
  // Kubernetes RBAC ClusterRoleBindings
  clusterrolebindings() []k8s.rbac.clusterrolebinding
  // Kubernetes RBAC roles
  roles() []k8s.rbac.role
  // Kubernetes RBAC RoleBindings
  rolebindings() []k8s.rbac.rolebinding
  // Kubernetes PodSecurityPolicies
  // Deprecated: This was removed in Kubernetes v1.25
  podSecurityPolicies() []k8s.podsecuritypolicy
  // Kubernetes network policies
  networkPolicies() []k8s.networkpolicy
  // Kubernetes custom resources
  customresources() []k8s.customresource
}

// Kubernetes API resources
private k8s.apiresource @defaults("name kind") {
  // Plural name of the resource
  name string
  // Singular name of the resource
  singularName string
  // Whether a resource is namespaced
  namespaced bool
  // Preferred group of the resource
  group string
  // Preferred version of the resource
  version string
  // Kubernetes object type
  kind string
  // List of suggested short names of the resource
  shortNames []string
  // List of the grouped resources
  categories []string
}

// Kubernetes namespace
private k8s.namespace @defaults("name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes object name
  name string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Kubernetes object type
  kind string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
}

// Kubernetes node
private k8s.node @defaults("name labels['kubernetes.io/arch'] labels['kubernetes.io/os'] ") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes resource version
  resourceVersion string
  // Plural name of the resource
  name string
  // Kubernetes object type
  kind string
}

// Kubernetes Pod
private k8s.pod @defaults("namespace name created"){
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object version
  apiVersion string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Ephemeral containers
  ephemeralContainers() []k8s.ephemeralContainer
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
  // Node the pod runs on
  node() k8s.node
}

// Kubernetes Deployment
private k8s.deployment @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes DaemonSet
private k8s.daemonset @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes StatefulSet
private k8s.statefulset @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes ReplicaSet
private k8s.replicaset @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes Job
private k8s.job @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes CronJob
private k8s.cronjob @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Pod description
  podSpec() dict
  // Init containers
  initContainers() []k8s.initContainer
  // Contained containers
  containers() []k8s.container
}

// Kubernetes workload container
private k8s.container @defaults("name") {
  // Kubernetes object UID
  uid string
  // Name of the container
  name string
  // Container image name
  imageName string
  // Deprecated; use `imageName` instead
  image string
  // Container image
  containerImage() os.container.image
  // Entry point array
  command []string
  // Arguments to the entry point
  args []string
  // Compute resources required by this container
  resources dict
  // Pod volumes to mount into the container's file system
  volumeMounts []dict
  // List of block devices to be used by the container
  volumeDevices []dict
  // Periodic probe of container liveness
  livenessProbe dict
  // Periodic probe of container service readiness
  readinessProbe dict
  // Image pull policyL Always, Never, or IfNotPresent
  imagePullPolicy string
  // Security options the pod should run with
  securityContext dict
  // Container's working directory
  workingDir string
  // Whether this container should allocate a TTY for itself
  tty bool
  // env variables
  env dict
  // envFrom settings
  envFrom dict
}

// Kubernetes init container
private k8s.initContainer @defaults("name") {
  // Kubernetes object UID
  uid string
  // Name of the container
  name string
  // Container image name
  imageName string
  // Deprecated. Use `imageName` instead.
  image string
  // Container image
  containerImage() os.container.image
  // Entrypoint array
  command []string
  // Arguments to the entrypoint
  args []string
  // Compute resources required by this container
  resources dict
  // Pod volumes to mount into the container's file system
  volumeMounts []dict
  // List of block devices to be used by the container
  volumeDevices []dict
  // Image pull policy: Always, Never, or IfNotPresent
  imagePullPolicy string
  // Security options the pod should run with
  securityContext dict
  // Container's working directory
  workingDir string
  // Whether this container should allocate a TTY for itself
  tty bool
  // env variables
  env dict
  // envFrom settings
  envFrom dict
}

// Kubernetes ephemeral container
private k8s.ephemeralContainer @defaults("name") {
  // Kubernetes object UID
  uid string
  // Name of the container
  name string
  // Container image name
  imageName string
  // Deprecated; use `imageName` instead
  image string
  // Container image
  containerImage() os.container.image
  // Entry point array
  command []string
  // Arguments to the entry point
  args []string
  // Pod volumes to mount into the container's file system
  volumeMounts []dict
  // List of block devices to be used by the container
  volumeDevices []dict
  // Image pull policy: Always, Never, or IfNotPresent
  imagePullPolicy string
  // Security options the Pod should run with
  securityContext dict
  // Container's working directory
  workingDir string
  // Whether this container should allocate a TTY for itself
  tty bool
  // env variables
  env dict
  // envFrom settings
  envFrom dict
}

// Kubernetes Secret
private k8s.secret @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Secret type
  type string
  // Secret certificates
  certificates() []network.certificate
}

// Kubernetes ConfigMap
private k8s.configmap @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Configuration data
  data map[string]string
}

// Kubernetes Service
private k8s.service @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Service Spec
  spec() dict
}

// Kubernetes Ingress resource backend
private k8s.ingressresourceref @defaults("name kind") {
  // Mondoo ID for object
  id string
  // APIGroup specified as part of the resource reference
  apiGroup string
  // Kubernetes object type
  kind string
  // Kubernetes object name
  name string
}

// Kubernetes Ingress service backend
private k8s.ingressservicebackend @defaults("name") {
  // Mondoo ID for object
  id string
  // Kubernetes service name
  name string
  // Kubernetes service port name
  portName string
  // Kubernetes service port number
  portNumber int
}

// Kubernetes Ingress backend
private k8s.ingressbackend @defaults("id") {
  // Mondoo ID for object
  id string
  // Kubernetes service for Ingress backend
  service k8s.ingressservicebackend
  // Kubernetes resource reference for Ingress backend
  resourceRef k8s.ingressresourceref
}

// Kubernetes Ingress HTTP rule
private k8s.ingresshttprulepath {
  // Mondoo ID for object
  id string
  // HTTP path for Ingress rule
  path string
  // PathType for Ingress rule
  pathType string
  // Backend to forward matching Ingress traffic
  backend k8s.ingressbackend
}

// Kubernetes Ingress rule
private k8s.ingressrule {
  // Mondoo ID for object
  id string
  // Hostname to match for Ingress rule
  host string
  // HTTP paths to manage Ingress for
  httpPaths []k8s.ingresshttprulepath
}

// Kubernetes Ingress TLS
private k8s.ingresstls {
  // Mondoo ID for object
  id string
  // List of hosts associated with TLS certificate
  hosts []string
  // Certificates data from the TLS Secret
  certificates []network.certificate
}

// Kubernetes Ingress
private k8s.ingress @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Ingress rules
  rules []k8s.ingressrule
  // Ingress TLS data
  tls() []k8s.ingresstls
}

// Kubernetes service account
private k8s.serviceaccount @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // List of secrets that Pods running using this service account are allowed to use
  secrets []dict
  // List of references to secrets in the same namespace to use for pulling any images
  imagePullSecrets []dict
  // Whether pods running as this service account should have an API token automatically mounted
  automountServiceAccountToken bool
}

// Kubernetes ClusterRole
private k8s.rbac.clusterrole @defaults("name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // ClusterRole rules
  rules []dict
  // ClusterRole aggregation rule
  aggregationRule dict
}

// Kubernetes ClusterRoleBinding
private k8s.rbac.clusterrolebinding @defaults("name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // References to the objects the role applies to
  subjects []dict
  // ClusterRole in the global namespace
  roleRef dict
}

// Kubernetes Role
private k8s.rbac.role @defaults("name namespace") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Cluster Role Rules
  rules []dict
}

// Kubernetes RoleBinding
private k8s.rbac.rolebinding @defaults("name namespace created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Subjects holds references to the objects the role applies to
  subjects []dict
  // RoleRef can only reference a ClusterRole in the global namespace
  roleRef dict
}

// Kubernetes PodSecurityPolicy (deprecated as of Kubernetes v1.21)
// Deprecated: This was removed in Kubernetes v1.25
private k8s.podsecuritypolicy {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Policy Spec
  spec() dict
}

// Kubernetes Network Policy
private k8s.networkpolicy @defaults("namespace name created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
  // Network policy spec
  spec() dict
}

// Kubernetes CustomResource
private k8s.customresource @defaults("name namespace created") {
  // Mondoo ID for the Kubernetes object
  id string
  // Kubernetes object UID
  uid string
  // Kubernetes resource version
  resourceVersion string
  // Kubernetes labels
  labels() map[string]string
  // Kubernetes annotations
  annotations() map[string]string
  // Kubernetes object name
  name string
  // Kubernetes object namespace
  namespace string
  // Kubernetes object type
  kind string
  // Kubernetes object creation timestamp
  created time
  // Full resource manifest
  manifest() dict
}

// Kubernetes AdmissionReview
k8s.admissionreview {
  // The requested admission
  request() k8s.admissionrequest
}

// Kubernetes AdmissionRequest
private k8s.admissionrequest @defaults("name namespace")  {
  // The name of the object presented in the request
  name string
  // The namespace associated with the request (if any)
  namespace string
  // The operation being performed
  operation string
  // Information about the requesting user
  userInfo() k8s.userinfo
  // The incoming object from the request
  object dict
  // The existing object (only populated for UPDATE and DELETE requests)
  oldObject dict
}

// Kubernetes UserInfo
private k8s.userinfo @defaults("username") {
  // The username of the user
  username string
  // The UID of the user
  uid string
}
