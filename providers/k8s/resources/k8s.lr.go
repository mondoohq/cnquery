// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"k8s": {
			// to override args, implement: initK8s(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8s,
		},
		"k8s.apiresource": {
			// to override args, implement: initK8sApiresource(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sApiresource,
		},
		"k8s.namespace": {
			// to override args, implement: initK8sNamespace(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sNamespace,
		},
		"k8s.node": {
			Init: initK8sNode,
			Create: createK8sNode,
		},
		"k8s.pod": {
			// to override args, implement: initK8sPod(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sPod,
		},
		"k8s.deployment": {
			// to override args, implement: initK8sDeployment(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sDeployment,
		},
		"k8s.daemonset": {
			// to override args, implement: initK8sDaemonset(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sDaemonset,
		},
		"k8s.statefulset": {
			// to override args, implement: initK8sStatefulset(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sStatefulset,
		},
		"k8s.replicaset": {
			// to override args, implement: initK8sReplicaset(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sReplicaset,
		},
		"k8s.job": {
			// to override args, implement: initK8sJob(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sJob,
		},
		"k8s.cronjob": {
			// to override args, implement: initK8sCronjob(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sCronjob,
		},
		"k8s.container": {
			// to override args, implement: initK8sContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sContainer,
		},
		"k8s.initContainer": {
			// to override args, implement: initK8sInitContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sInitContainer,
		},
		"k8s.ephemeralContainer": {
			// to override args, implement: initK8sEphemeralContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sEphemeralContainer,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"k8s.apiResources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetApiResources()).ToDataRes(types.Array(types.Resource("k8s.apiresource")))
	},
	"k8s.namespaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetNamespaces()).ToDataRes(types.Array(types.Resource("k8s.namespace")))
	},
	"k8s.nodes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetNodes()).ToDataRes(types.Array(types.Resource("k8s.node")))
	},
	"k8s.pods": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetPods()).ToDataRes(types.Array(types.Resource("k8s.pod")))
	},
	"k8s.deployments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetDeployments()).ToDataRes(types.Array(types.Resource("k8s.deployment")))
	},
	"k8s.daemonsets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetDaemonsets()).ToDataRes(types.Array(types.Resource("k8s.daemonset")))
	},
	"k8s.statefulsets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetStatefulsets()).ToDataRes(types.Array(types.Resource("k8s.statefulset")))
	},
	"k8s.replicasets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetReplicasets()).ToDataRes(types.Array(types.Resource("k8s.replicaset")))
	},
	"k8s.jobs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetJobs()).ToDataRes(types.Array(types.Resource("k8s.job")))
	},
	"k8s.cronjobs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetCronjobs()).ToDataRes(types.Array(types.Resource("k8s.cronjob")))
	},
	"k8s.apiresource.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetName()).ToDataRes(types.String)
	},
	"k8s.apiresource.singularName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetSingularName()).ToDataRes(types.String)
	},
	"k8s.apiresource.namespaced": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetNamespaced()).ToDataRes(types.Bool)
	},
	"k8s.apiresource.group": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetGroup()).ToDataRes(types.String)
	},
	"k8s.apiresource.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetVersion()).ToDataRes(types.String)
	},
	"k8s.apiresource.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetKind()).ToDataRes(types.String)
	},
	"k8s.apiresource.shortNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetShortNames()).ToDataRes(types.Array(types.String))
	},
	"k8s.apiresource.categories": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sApiresource).GetCategories()).ToDataRes(types.Array(types.String))
	},
	"k8s.namespace.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNamespace).GetId()).ToDataRes(types.String)
	},
	"k8s.namespace.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNamespace).GetUid()).ToDataRes(types.String)
	},
	"k8s.namespace.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNamespace).GetName()).ToDataRes(types.String)
	},
	"k8s.namespace.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNamespace).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.namespace.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNamespace).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.node.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetId()).ToDataRes(types.String)
	},
	"k8s.node.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetUid()).ToDataRes(types.String)
	},
	"k8s.node.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.node.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.node.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.node.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetName()).ToDataRes(types.String)
	},
	"k8s.node.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetKind()).ToDataRes(types.String)
	},
	"k8s.pod.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetId()).ToDataRes(types.String)
	},
	"k8s.pod.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetUid()).ToDataRes(types.String)
	},
	"k8s.pod.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.pod.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.pod.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.pod.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetName()).ToDataRes(types.String)
	},
	"k8s.pod.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.pod.apiVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetApiVersion()).ToDataRes(types.String)
	},
	"k8s.pod.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetKind()).ToDataRes(types.String)
	},
	"k8s.pod.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.pod.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.pod.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.pod.ephemeralContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetEphemeralContainers()).ToDataRes(types.Array(types.Resource("k8s.ephemeralContainer")))
	},
	"k8s.pod.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.pod.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.pod.node": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sPod).GetNode()).ToDataRes(types.Resource("k8s.node"))
	},
	"k8s.deployment.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetId()).ToDataRes(types.String)
	},
	"k8s.deployment.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetUid()).ToDataRes(types.String)
	},
	"k8s.deployment.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.deployment.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.deployment.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.deployment.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetName()).ToDataRes(types.String)
	},
	"k8s.deployment.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.deployment.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetKind()).ToDataRes(types.String)
	},
	"k8s.deployment.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.deployment.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.deployment.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.deployment.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.deployment.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDeployment).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.daemonset.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetId()).ToDataRes(types.String)
	},
	"k8s.daemonset.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetUid()).ToDataRes(types.String)
	},
	"k8s.daemonset.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.daemonset.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.daemonset.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.daemonset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetName()).ToDataRes(types.String)
	},
	"k8s.daemonset.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.daemonset.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetKind()).ToDataRes(types.String)
	},
	"k8s.daemonset.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.daemonset.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.daemonset.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.daemonset.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.daemonset.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sDaemonset).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.statefulset.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetId()).ToDataRes(types.String)
	},
	"k8s.statefulset.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetUid()).ToDataRes(types.String)
	},
	"k8s.statefulset.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.statefulset.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.statefulset.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.statefulset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetName()).ToDataRes(types.String)
	},
	"k8s.statefulset.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.statefulset.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetKind()).ToDataRes(types.String)
	},
	"k8s.statefulset.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.statefulset.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.statefulset.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.statefulset.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.statefulset.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sStatefulset).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.replicaset.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetId()).ToDataRes(types.String)
	},
	"k8s.replicaset.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetUid()).ToDataRes(types.String)
	},
	"k8s.replicaset.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.replicaset.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.replicaset.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.replicaset.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetName()).ToDataRes(types.String)
	},
	"k8s.replicaset.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.replicaset.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetKind()).ToDataRes(types.String)
	},
	"k8s.replicaset.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.replicaset.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.replicaset.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.replicaset.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.replicaset.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sReplicaset).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.job.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetId()).ToDataRes(types.String)
	},
	"k8s.job.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetUid()).ToDataRes(types.String)
	},
	"k8s.job.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.job.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.job.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.job.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetName()).ToDataRes(types.String)
	},
	"k8s.job.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.job.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetKind()).ToDataRes(types.String)
	},
	"k8s.job.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.job.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.job.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.job.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.job.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sJob).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.cronjob.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetId()).ToDataRes(types.String)
	},
	"k8s.cronjob.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetUid()).ToDataRes(types.String)
	},
	"k8s.cronjob.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.cronjob.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.cronjob.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.cronjob.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetName()).ToDataRes(types.String)
	},
	"k8s.cronjob.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetNamespace()).ToDataRes(types.String)
	},
	"k8s.cronjob.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetKind()).ToDataRes(types.String)
	},
	"k8s.cronjob.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetCreated()).ToDataRes(types.Time)
	},
	"k8s.cronjob.manifest": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetManifest()).ToDataRes(types.Dict)
	},
	"k8s.cronjob.podSpec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetPodSpec()).ToDataRes(types.Dict)
	},
	"k8s.cronjob.initContainers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetInitContainers()).ToDataRes(types.Array(types.Resource("k8s.initContainer")))
	},
	"k8s.cronjob.containers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sCronjob).GetContainers()).ToDataRes(types.Array(types.Resource("k8s.container")))
	},
	"k8s.container.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetUid()).ToDataRes(types.String)
	},
	"k8s.container.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetName()).ToDataRes(types.String)
	},
	"k8s.container.imageName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetImageName()).ToDataRes(types.String)
	},
	"k8s.container.image": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetImage()).ToDataRes(types.String)
	},
	"k8s.container.containerImage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetContainerImage()).ToDataRes(types.Resource("container.image"))
	},
	"k8s.container.command": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetCommand()).ToDataRes(types.Array(types.String))
	},
	"k8s.container.args": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetArgs()).ToDataRes(types.Array(types.String))
	},
	"k8s.container.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetResources()).ToDataRes(types.Dict)
	},
	"k8s.container.volumeMounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetVolumeMounts()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.container.volumeDevices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetVolumeDevices()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.container.livenessProbe": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetLivenessProbe()).ToDataRes(types.Dict)
	},
	"k8s.container.readinessProbe": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetReadinessProbe()).ToDataRes(types.Dict)
	},
	"k8s.container.imagePullPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetImagePullPolicy()).ToDataRes(types.String)
	},
	"k8s.container.securityContext": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetSecurityContext()).ToDataRes(types.Dict)
	},
	"k8s.container.workingDir": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetWorkingDir()).ToDataRes(types.String)
	},
	"k8s.container.tty": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetTty()).ToDataRes(types.Bool)
	},
	"k8s.container.env": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetEnv()).ToDataRes(types.Dict)
	},
	"k8s.container.envFrom": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sContainer).GetEnvFrom()).ToDataRes(types.Dict)
	},
	"k8s.initContainer.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetUid()).ToDataRes(types.String)
	},
	"k8s.initContainer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetName()).ToDataRes(types.String)
	},
	"k8s.initContainer.imageName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetImageName()).ToDataRes(types.String)
	},
	"k8s.initContainer.image": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetImage()).ToDataRes(types.String)
	},
	"k8s.initContainer.containerImage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetContainerImage()).ToDataRes(types.Resource("container.image"))
	},
	"k8s.initContainer.command": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetCommand()).ToDataRes(types.Array(types.String))
	},
	"k8s.initContainer.args": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetArgs()).ToDataRes(types.Array(types.String))
	},
	"k8s.initContainer.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetResources()).ToDataRes(types.Dict)
	},
	"k8s.initContainer.volumeMounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetVolumeMounts()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.initContainer.volumeDevices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetVolumeDevices()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.initContainer.imagePullPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetImagePullPolicy()).ToDataRes(types.String)
	},
	"k8s.initContainer.securityContext": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetSecurityContext()).ToDataRes(types.Dict)
	},
	"k8s.initContainer.workingDir": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetWorkingDir()).ToDataRes(types.String)
	},
	"k8s.initContainer.tty": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetTty()).ToDataRes(types.Bool)
	},
	"k8s.initContainer.env": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetEnv()).ToDataRes(types.Dict)
	},
	"k8s.initContainer.envFrom": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sInitContainer).GetEnvFrom()).ToDataRes(types.Dict)
	},
	"k8s.ephemeralContainer.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetUid()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetName()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.imageName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetImageName()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.image": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetImage()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.containerImage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetContainerImage()).ToDataRes(types.Resource("container.image"))
	},
	"k8s.ephemeralContainer.command": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetCommand()).ToDataRes(types.Array(types.String))
	},
	"k8s.ephemeralContainer.args": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetArgs()).ToDataRes(types.Array(types.String))
	},
	"k8s.ephemeralContainer.volumeMounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetVolumeMounts()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.ephemeralContainer.volumeDevices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetVolumeDevices()).ToDataRes(types.Array(types.Dict))
	},
	"k8s.ephemeralContainer.imagePullPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetImagePullPolicy()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.securityContext": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetSecurityContext()).ToDataRes(types.Dict)
	},
	"k8s.ephemeralContainer.workingDir": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetWorkingDir()).ToDataRes(types.String)
	},
	"k8s.ephemeralContainer.tty": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetTty()).ToDataRes(types.Bool)
	},
	"k8s.ephemeralContainer.env": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetEnv()).ToDataRes(types.Dict)
	},
	"k8s.ephemeralContainer.envFrom": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sEphemeralContainer).GetEnvFrom()).ToDataRes(types.Dict)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"k8s.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8s).__id, ok = v.Value.(string)
			return
		},
	"k8s.apiResources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).ApiResources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.namespaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Namespaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.nodes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Nodes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pods": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Pods, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Deployments, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonsets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Daemonsets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulsets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Statefulsets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicasets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Replicasets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.jobs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Jobs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjobs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Cronjobs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.apiresource.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sApiresource).__id, ok = v.Value.(string)
			return
		},
	"k8s.apiresource.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.apiresource.singularName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).SingularName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.apiresource.namespaced": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Namespaced, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"k8s.apiresource.group": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Group, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.apiresource.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.apiresource.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.apiresource.shortNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).ShortNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.apiresource.categories": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sApiresource).Categories, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.namespace.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sNamespace).__id, ok = v.Value.(string)
			return
		},
	"k8s.namespace.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNamespace).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.namespace.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNamespace).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.namespace.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNamespace).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.namespace.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNamespace).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.namespace.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNamespace).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sNode).__id, ok = v.Value.(string)
			return
		},
	"k8s.node.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sPod).__id, ok = v.Value.(string)
			return
		},
	"k8s.pod.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.apiVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).ApiVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.pod.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.pod.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.ephemeralContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).EphemeralContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.pod.node": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sPod).Node, ok = plugin.RawToTValue[*mqlK8sNode](v.Value, v.Error)
		return
	},
	"k8s.deployment.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sDeployment).__id, ok = v.Value.(string)
			return
		},
	"k8s.deployment.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployment.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployment.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.deployment.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.deployment.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployment.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployment.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.deployment.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDeployment).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sDaemonset).__id, ok = v.Value.(string)
			return
		},
	"k8s.daemonset.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.daemonset.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.daemonset.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.daemonset.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sDaemonset).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sStatefulset).__id, ok = v.Value.(string)
			return
		},
	"k8s.statefulset.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.statefulset.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.statefulset.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.statefulset.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sStatefulset).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sReplicaset).__id, ok = v.Value.(string)
			return
		},
	"k8s.replicaset.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.replicaset.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.replicaset.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.replicaset.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sReplicaset).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sJob).__id, ok = v.Value.(string)
			return
		},
	"k8s.job.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.job.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.job.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.job.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sJob).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sCronjob).__id, ok = v.Value.(string)
			return
		},
	"k8s.cronjob.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.cronjob.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"k8s.cronjob.manifest": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Manifest, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.podSpec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).PodSpec, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.initContainers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).InitContainers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.cronjob.containers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sCronjob).Containers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sContainer).__id, ok = v.Value.(string)
			return
		},
	"k8s.container.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.imageName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).ImageName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.image": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Image, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.containerImage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).ContainerImage, ok = plugin.RawToTValue[plugin.Resource](v.Value, v.Error)
		return
	},
	"k8s.container.command": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Command, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.args": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Args, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Resources, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.volumeMounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).VolumeMounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.volumeDevices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).VolumeDevices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.livenessProbe": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).LivenessProbe, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.readinessProbe": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).ReadinessProbe, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.imagePullPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).ImagePullPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.securityContext": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).SecurityContext, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.workingDir": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).WorkingDir, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.container.tty": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Tty, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"k8s.container.env": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).Env, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.container.envFrom": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sContainer).EnvFrom, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sInitContainer).__id, ok = v.Value.(string)
			return
		},
	"k8s.initContainer.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.imageName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).ImageName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.image": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Image, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.containerImage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).ContainerImage, ok = plugin.RawToTValue[plugin.Resource](v.Value, v.Error)
		return
	},
	"k8s.initContainer.command": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Command, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.args": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Args, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Resources, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.volumeMounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).VolumeMounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.volumeDevices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).VolumeDevices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.imagePullPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).ImagePullPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.securityContext": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).SecurityContext, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.workingDir": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).WorkingDir, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.initContainer.tty": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Tty, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"k8s.initContainer.env": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).Env, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.initContainer.envFrom": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sInitContainer).EnvFrom, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sEphemeralContainer).__id, ok = v.Value.(string)
			return
		},
	"k8s.ephemeralContainer.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.imageName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).ImageName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.image": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Image, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.containerImage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).ContainerImage, ok = plugin.RawToTValue[plugin.Resource](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.command": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Command, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.args": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Args, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.volumeMounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).VolumeMounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.volumeDevices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).VolumeDevices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.imagePullPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).ImagePullPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.securityContext": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).SecurityContext, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.workingDir": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).WorkingDir, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.tty": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Tty, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.env": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).Env, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"k8s.ephemeralContainer.envFrom": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sEphemeralContainer).EnvFrom, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[k8s] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[k8s] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlK8s for the k8s resource
type mqlK8s struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sInternal
	ApiResources plugin.TValue[[]interface{}]
	Namespaces plugin.TValue[[]interface{}]
	Nodes plugin.TValue[[]interface{}]
	Pods plugin.TValue[[]interface{}]
	Deployments plugin.TValue[[]interface{}]
	Daemonsets plugin.TValue[[]interface{}]
	Statefulsets plugin.TValue[[]interface{}]
	Replicasets plugin.TValue[[]interface{}]
	Jobs plugin.TValue[[]interface{}]
	Cronjobs plugin.TValue[[]interface{}]
}

// createK8s creates a new instance of this resource
func createK8s(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8s{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8s) MqlName() string {
	return "k8s"
}

func (c *mqlK8s) MqlID() string {
	return c.__id
}

func (c *mqlK8s) GetApiResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApiResources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "apiResources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.apiResources()
	})
}

func (c *mqlK8s) GetNamespaces() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Namespaces, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "namespaces")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.namespaces()
	})
}

func (c *mqlK8s) GetNodes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Nodes, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "nodes")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.nodes()
	})
}

func (c *mqlK8s) GetPods() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Pods, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "pods")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.pods()
	})
}

func (c *mqlK8s) GetDeployments() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Deployments, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "deployments")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.deployments()
	})
}

func (c *mqlK8s) GetDaemonsets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Daemonsets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "daemonsets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.daemonsets()
	})
}

func (c *mqlK8s) GetStatefulsets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Statefulsets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "statefulsets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.statefulsets()
	})
}

func (c *mqlK8s) GetReplicasets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Replicasets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "replicasets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.replicasets()
	})
}

func (c *mqlK8s) GetJobs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Jobs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "jobs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.jobs()
	})
}

func (c *mqlK8s) GetCronjobs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Cronjobs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "cronjobs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.cronjobs()
	})
}

// mqlK8sApiresource for the k8s.apiresource resource
type mqlK8sApiresource struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sApiresourceInternal it will be used here
	Name plugin.TValue[string]
	SingularName plugin.TValue[string]
	Namespaced plugin.TValue[bool]
	Group plugin.TValue[string]
	Version plugin.TValue[string]
	Kind plugin.TValue[string]
	ShortNames plugin.TValue[[]interface{}]
	Categories plugin.TValue[[]interface{}]
}

// createK8sApiresource creates a new instance of this resource
func createK8sApiresource(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sApiresource{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.apiresource", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sApiresource) MqlName() string {
	return "k8s.apiresource"
}

func (c *mqlK8sApiresource) MqlID() string {
	return c.__id
}

func (c *mqlK8sApiresource) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sApiresource) GetSingularName() *plugin.TValue[string] {
	return &c.SingularName
}

func (c *mqlK8sApiresource) GetNamespaced() *plugin.TValue[bool] {
	return &c.Namespaced
}

func (c *mqlK8sApiresource) GetGroup() *plugin.TValue[string] {
	return &c.Group
}

func (c *mqlK8sApiresource) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlK8sApiresource) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sApiresource) GetShortNames() *plugin.TValue[[]interface{}] {
	return &c.ShortNames
}

func (c *mqlK8sApiresource) GetCategories() *plugin.TValue[[]interface{}] {
	return &c.Categories
}

// mqlK8sNamespace for the k8s.namespace resource
type mqlK8sNamespace struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sNamespaceInternal it will be used here
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
}

// createK8sNamespace creates a new instance of this resource
func createK8sNamespace(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sNamespace{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.namespace", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sNamespace) MqlName() string {
	return "k8s.namespace"
}

func (c *mqlK8sNamespace) MqlID() string {
	return c.__id
}

func (c *mqlK8sNamespace) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sNamespace) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sNamespace) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sNamespace) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sNamespace) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

// mqlK8sNode for the k8s.node resource
type mqlK8sNode struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sNodeInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	ResourceVersion plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
}

// createK8sNode creates a new instance of this resource
func createK8sNode(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sNode{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.node", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sNode) MqlName() string {
	return "k8s.node"
}

func (c *mqlK8sNode) MqlID() string {
	return c.__id
}

func (c *mqlK8sNode) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sNode) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sNode) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sNode) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sNode) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sNode) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sNode) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

// mqlK8sPod for the k8s.pod resource
type mqlK8sPod struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sPodInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	ApiVersion plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	EphemeralContainers plugin.TValue[[]interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
	Node plugin.TValue[*mqlK8sNode]
}

// createK8sPod creates a new instance of this resource
func createK8sPod(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sPod{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.pod", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sPod) MqlName() string {
	return "k8s.pod"
}

func (c *mqlK8sPod) MqlID() string {
	return c.__id
}

func (c *mqlK8sPod) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sPod) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sPod) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sPod) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sPod) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sPod) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sPod) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sPod) GetApiVersion() *plugin.TValue[string] {
	return &c.ApiVersion
}

func (c *mqlK8sPod) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sPod) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sPod) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sPod) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sPod) GetEphemeralContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.EphemeralContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.pod", c.__id, "ephemeralContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.ephemeralContainers()
	})
}

func (c *mqlK8sPod) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.pod", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sPod) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.pod", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

func (c *mqlK8sPod) GetNode() *plugin.TValue[*mqlK8sNode] {
	return plugin.GetOrCompute[*mqlK8sNode](&c.Node, func() (*mqlK8sNode, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.pod", c.__id, "node")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlK8sNode), nil
			}
		}

		return c.node()
	})
}

// mqlK8sDeployment for the k8s.deployment resource
type mqlK8sDeployment struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sDeploymentInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sDeployment creates a new instance of this resource
func createK8sDeployment(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sDeployment{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.deployment", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sDeployment) MqlName() string {
	return "k8s.deployment"
}

func (c *mqlK8sDeployment) MqlID() string {
	return c.__id
}

func (c *mqlK8sDeployment) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sDeployment) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sDeployment) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sDeployment) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sDeployment) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sDeployment) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sDeployment) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sDeployment) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sDeployment) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sDeployment) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sDeployment) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sDeployment) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.deployment", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sDeployment) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.deployment", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sDaemonset for the k8s.daemonset resource
type mqlK8sDaemonset struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sDaemonsetInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sDaemonset creates a new instance of this resource
func createK8sDaemonset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sDaemonset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.daemonset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sDaemonset) MqlName() string {
	return "k8s.daemonset"
}

func (c *mqlK8sDaemonset) MqlID() string {
	return c.__id
}

func (c *mqlK8sDaemonset) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sDaemonset) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sDaemonset) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sDaemonset) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sDaemonset) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sDaemonset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sDaemonset) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sDaemonset) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sDaemonset) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sDaemonset) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sDaemonset) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sDaemonset) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.daemonset", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sDaemonset) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.daemonset", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sStatefulset for the k8s.statefulset resource
type mqlK8sStatefulset struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sStatefulsetInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sStatefulset creates a new instance of this resource
func createK8sStatefulset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sStatefulset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.statefulset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sStatefulset) MqlName() string {
	return "k8s.statefulset"
}

func (c *mqlK8sStatefulset) MqlID() string {
	return c.__id
}

func (c *mqlK8sStatefulset) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sStatefulset) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sStatefulset) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sStatefulset) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sStatefulset) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sStatefulset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sStatefulset) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sStatefulset) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sStatefulset) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sStatefulset) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sStatefulset) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sStatefulset) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.statefulset", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sStatefulset) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.statefulset", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sReplicaset for the k8s.replicaset resource
type mqlK8sReplicaset struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sReplicasetInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sReplicaset creates a new instance of this resource
func createK8sReplicaset(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sReplicaset{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.replicaset", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sReplicaset) MqlName() string {
	return "k8s.replicaset"
}

func (c *mqlK8sReplicaset) MqlID() string {
	return c.__id
}

func (c *mqlK8sReplicaset) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sReplicaset) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sReplicaset) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sReplicaset) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sReplicaset) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sReplicaset) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sReplicaset) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sReplicaset) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sReplicaset) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sReplicaset) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sReplicaset) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sReplicaset) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.replicaset", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sReplicaset) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.replicaset", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sJob for the k8s.job resource
type mqlK8sJob struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sJobInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sJob creates a new instance of this resource
func createK8sJob(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sJob{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.job", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sJob) MqlName() string {
	return "k8s.job"
}

func (c *mqlK8sJob) MqlID() string {
	return c.__id
}

func (c *mqlK8sJob) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sJob) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sJob) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sJob) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sJob) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sJob) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sJob) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sJob) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sJob) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sJob) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sJob) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sJob) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.job", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sJob) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.job", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sCronjob for the k8s.cronjob resource
type mqlK8sCronjob struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlK8sCronjobInternal
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	ResourceVersion plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	Name plugin.TValue[string]
	Namespace plugin.TValue[string]
	Kind plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Manifest plugin.TValue[interface{}]
	PodSpec plugin.TValue[interface{}]
	InitContainers plugin.TValue[[]interface{}]
	Containers plugin.TValue[[]interface{}]
}

// createK8sCronjob creates a new instance of this resource
func createK8sCronjob(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sCronjob{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.cronjob", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sCronjob) MqlName() string {
	return "k8s.cronjob"
}

func (c *mqlK8sCronjob) MqlID() string {
	return c.__id
}

func (c *mqlK8sCronjob) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sCronjob) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sCronjob) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sCronjob) GetLabels() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Labels, func() (map[string]interface{}, error) {
		return c.labels()
	})
}

func (c *mqlK8sCronjob) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Annotations, func() (map[string]interface{}, error) {
		return c.annotations()
	})
}

func (c *mqlK8sCronjob) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sCronjob) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlK8sCronjob) GetKind() *plugin.TValue[string] {
	return &c.Kind
}

func (c *mqlK8sCronjob) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlK8sCronjob) GetManifest() *plugin.TValue[interface{}] {
	return &c.Manifest
}

func (c *mqlK8sCronjob) GetPodSpec() *plugin.TValue[interface{}] {
	return &c.PodSpec
}

func (c *mqlK8sCronjob) GetInitContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.InitContainers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.cronjob", c.__id, "initContainers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.initContainers()
	})
}

func (c *mqlK8sCronjob) GetContainers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Containers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.cronjob", c.__id, "containers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.containers()
	})
}

// mqlK8sContainer for the k8s.container resource
type mqlK8sContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sContainerInternal it will be used here
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	ImageName plugin.TValue[string]
	Image plugin.TValue[string]
	ContainerImage plugin.TValue[plugin.Resource]
	Command plugin.TValue[[]interface{}]
	Args plugin.TValue[[]interface{}]
	Resources plugin.TValue[interface{}]
	VolumeMounts plugin.TValue[[]interface{}]
	VolumeDevices plugin.TValue[[]interface{}]
	LivenessProbe plugin.TValue[interface{}]
	ReadinessProbe plugin.TValue[interface{}]
	ImagePullPolicy plugin.TValue[string]
	SecurityContext plugin.TValue[interface{}]
	WorkingDir plugin.TValue[string]
	Tty plugin.TValue[bool]
	Env plugin.TValue[interface{}]
	EnvFrom plugin.TValue[interface{}]
}

// createK8sContainer creates a new instance of this resource
func createK8sContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.container", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sContainer) MqlName() string {
	return "k8s.container"
}

func (c *mqlK8sContainer) MqlID() string {
	return c.__id
}

func (c *mqlK8sContainer) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sContainer) GetImageName() *plugin.TValue[string] {
	return &c.ImageName
}

func (c *mqlK8sContainer) GetImage() *plugin.TValue[string] {
	return &c.Image
}

func (c *mqlK8sContainer) GetContainerImage() *plugin.TValue[plugin.Resource] {
	return plugin.GetOrCompute[plugin.Resource](&c.ContainerImage, func() (plugin.Resource, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.container", c.__id, "containerImage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(plugin.Resource), nil
			}
		}

		return c.containerImage()
	})
}

func (c *mqlK8sContainer) GetCommand() *plugin.TValue[[]interface{}] {
	return &c.Command
}

func (c *mqlK8sContainer) GetArgs() *plugin.TValue[[]interface{}] {
	return &c.Args
}

func (c *mqlK8sContainer) GetResources() *plugin.TValue[interface{}] {
	return &c.Resources
}

func (c *mqlK8sContainer) GetVolumeMounts() *plugin.TValue[[]interface{}] {
	return &c.VolumeMounts
}

func (c *mqlK8sContainer) GetVolumeDevices() *plugin.TValue[[]interface{}] {
	return &c.VolumeDevices
}

func (c *mqlK8sContainer) GetLivenessProbe() *plugin.TValue[interface{}] {
	return &c.LivenessProbe
}

func (c *mqlK8sContainer) GetReadinessProbe() *plugin.TValue[interface{}] {
	return &c.ReadinessProbe
}

func (c *mqlK8sContainer) GetImagePullPolicy() *plugin.TValue[string] {
	return &c.ImagePullPolicy
}

func (c *mqlK8sContainer) GetSecurityContext() *plugin.TValue[interface{}] {
	return &c.SecurityContext
}

func (c *mqlK8sContainer) GetWorkingDir() *plugin.TValue[string] {
	return &c.WorkingDir
}

func (c *mqlK8sContainer) GetTty() *plugin.TValue[bool] {
	return &c.Tty
}

func (c *mqlK8sContainer) GetEnv() *plugin.TValue[interface{}] {
	return &c.Env
}

func (c *mqlK8sContainer) GetEnvFrom() *plugin.TValue[interface{}] {
	return &c.EnvFrom
}

// mqlK8sInitContainer for the k8s.initContainer resource
type mqlK8sInitContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sInitContainerInternal it will be used here
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	ImageName plugin.TValue[string]
	Image plugin.TValue[string]
	ContainerImage plugin.TValue[plugin.Resource]
	Command plugin.TValue[[]interface{}]
	Args plugin.TValue[[]interface{}]
	Resources plugin.TValue[interface{}]
	VolumeMounts plugin.TValue[[]interface{}]
	VolumeDevices plugin.TValue[[]interface{}]
	ImagePullPolicy plugin.TValue[string]
	SecurityContext plugin.TValue[interface{}]
	WorkingDir plugin.TValue[string]
	Tty plugin.TValue[bool]
	Env plugin.TValue[interface{}]
	EnvFrom plugin.TValue[interface{}]
}

// createK8sInitContainer creates a new instance of this resource
func createK8sInitContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sInitContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.initContainer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sInitContainer) MqlName() string {
	return "k8s.initContainer"
}

func (c *mqlK8sInitContainer) MqlID() string {
	return c.__id
}

func (c *mqlK8sInitContainer) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sInitContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sInitContainer) GetImageName() *plugin.TValue[string] {
	return &c.ImageName
}

func (c *mqlK8sInitContainer) GetImage() *plugin.TValue[string] {
	return &c.Image
}

func (c *mqlK8sInitContainer) GetContainerImage() *plugin.TValue[plugin.Resource] {
	return plugin.GetOrCompute[plugin.Resource](&c.ContainerImage, func() (plugin.Resource, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.initContainer", c.__id, "containerImage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(plugin.Resource), nil
			}
		}

		return c.containerImage()
	})
}

func (c *mqlK8sInitContainer) GetCommand() *plugin.TValue[[]interface{}] {
	return &c.Command
}

func (c *mqlK8sInitContainer) GetArgs() *plugin.TValue[[]interface{}] {
	return &c.Args
}

func (c *mqlK8sInitContainer) GetResources() *plugin.TValue[interface{}] {
	return &c.Resources
}

func (c *mqlK8sInitContainer) GetVolumeMounts() *plugin.TValue[[]interface{}] {
	return &c.VolumeMounts
}

func (c *mqlK8sInitContainer) GetVolumeDevices() *plugin.TValue[[]interface{}] {
	return &c.VolumeDevices
}

func (c *mqlK8sInitContainer) GetImagePullPolicy() *plugin.TValue[string] {
	return &c.ImagePullPolicy
}

func (c *mqlK8sInitContainer) GetSecurityContext() *plugin.TValue[interface{}] {
	return &c.SecurityContext
}

func (c *mqlK8sInitContainer) GetWorkingDir() *plugin.TValue[string] {
	return &c.WorkingDir
}

func (c *mqlK8sInitContainer) GetTty() *plugin.TValue[bool] {
	return &c.Tty
}

func (c *mqlK8sInitContainer) GetEnv() *plugin.TValue[interface{}] {
	return &c.Env
}

func (c *mqlK8sInitContainer) GetEnvFrom() *plugin.TValue[interface{}] {
	return &c.EnvFrom
}

// mqlK8sEphemeralContainer for the k8s.ephemeralContainer resource
type mqlK8sEphemeralContainer struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sEphemeralContainerInternal it will be used here
	Uid plugin.TValue[string]
	Name plugin.TValue[string]
	ImageName plugin.TValue[string]
	Image plugin.TValue[string]
	ContainerImage plugin.TValue[plugin.Resource]
	Command plugin.TValue[[]interface{}]
	Args plugin.TValue[[]interface{}]
	VolumeMounts plugin.TValue[[]interface{}]
	VolumeDevices plugin.TValue[[]interface{}]
	ImagePullPolicy plugin.TValue[string]
	SecurityContext plugin.TValue[interface{}]
	WorkingDir plugin.TValue[string]
	Tty plugin.TValue[bool]
	Env plugin.TValue[interface{}]
	EnvFrom plugin.TValue[interface{}]
}

// createK8sEphemeralContainer creates a new instance of this resource
func createK8sEphemeralContainer(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sEphemeralContainer{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.ephemeralContainer", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sEphemeralContainer) MqlName() string {
	return "k8s.ephemeralContainer"
}

func (c *mqlK8sEphemeralContainer) MqlID() string {
	return c.__id
}

func (c *mqlK8sEphemeralContainer) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sEphemeralContainer) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sEphemeralContainer) GetImageName() *plugin.TValue[string] {
	return &c.ImageName
}

func (c *mqlK8sEphemeralContainer) GetImage() *plugin.TValue[string] {
	return &c.Image
}

func (c *mqlK8sEphemeralContainer) GetContainerImage() *plugin.TValue[plugin.Resource] {
	return plugin.GetOrCompute[plugin.Resource](&c.ContainerImage, func() (plugin.Resource, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s.ephemeralContainer", c.__id, "containerImage")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(plugin.Resource), nil
			}
		}

		return c.containerImage()
	})
}

func (c *mqlK8sEphemeralContainer) GetCommand() *plugin.TValue[[]interface{}] {
	return &c.Command
}

func (c *mqlK8sEphemeralContainer) GetArgs() *plugin.TValue[[]interface{}] {
	return &c.Args
}

func (c *mqlK8sEphemeralContainer) GetVolumeMounts() *plugin.TValue[[]interface{}] {
	return &c.VolumeMounts
}

func (c *mqlK8sEphemeralContainer) GetVolumeDevices() *plugin.TValue[[]interface{}] {
	return &c.VolumeDevices
}

func (c *mqlK8sEphemeralContainer) GetImagePullPolicy() *plugin.TValue[string] {
	return &c.ImagePullPolicy
}

func (c *mqlK8sEphemeralContainer) GetSecurityContext() *plugin.TValue[interface{}] {
	return &c.SecurityContext
}

func (c *mqlK8sEphemeralContainer) GetWorkingDir() *plugin.TValue[string] {
	return &c.WorkingDir
}

func (c *mqlK8sEphemeralContainer) GetTty() *plugin.TValue[bool] {
	return &c.Tty
}

func (c *mqlK8sEphemeralContainer) GetEnv() *plugin.TValue[interface{}] {
	return &c.Env
}

func (c *mqlK8sEphemeralContainer) GetEnvFrom() *plugin.TValue[interface{}] {
	return &c.EnvFrom
}
