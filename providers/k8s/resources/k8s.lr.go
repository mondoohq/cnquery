// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"k8s": {
			// to override args, implement: initK8s(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8s,
		},
		"k8s.node": {
			// to override args, implement: initK8sNode(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createK8sNode,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"k8s.nodes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8s).GetNodes()).ToDataRes(types.Array(types.Resource("k8s.node")))
	},
	"k8s.node.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetId()).ToDataRes(types.String)
	},
	"k8s.node.uid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetUid()).ToDataRes(types.String)
	},
	"k8s.node.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.node.annotations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetAnnotations()).ToDataRes(types.Map(types.String, types.String))
	},
	"k8s.node.resourceVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetResourceVersion()).ToDataRes(types.String)
	},
	"k8s.node.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetName()).ToDataRes(types.String)
	},
	"k8s.node.kind": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlK8sNode).GetKind()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"k8s.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8s).__id, ok = v.Value.(string)
			return
		},
	"k8s.nodes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8s).Nodes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlK8sNode).__id, ok = v.Value.(string)
			return
		},
	"k8s.node.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.uid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Uid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.annotations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Annotations, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"k8s.node.resourceVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).ResourceVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"k8s.node.kind": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlK8sNode).Kind, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[k8s] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[k8s] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlK8s for the k8s resource
type mqlK8s struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sInternal it will be used here
	Nodes plugin.TValue[[]interface{}]
}

// createK8s creates a new instance of this resource
func createK8s(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8s{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8s) MqlName() string {
	return "k8s"
}

func (c *mqlK8s) MqlID() string {
	return c.__id
}

func (c *mqlK8s) GetNodes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Nodes, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("k8s", c.__id, "nodes")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.nodes()
	})
}

// mqlK8sNode for the k8s.node resource
type mqlK8sNode struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlK8sNodeInternal it will be used here
	Id plugin.TValue[string]
	Uid plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	Annotations plugin.TValue[map[string]interface{}]
	ResourceVersion plugin.TValue[string]
	Name plugin.TValue[string]
	Kind plugin.TValue[string]
}

// createK8sNode creates a new instance of this resource
func createK8sNode(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlK8sNode{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("k8s.node", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlK8sNode) MqlName() string {
	return "k8s.node"
}

func (c *mqlK8sNode) MqlID() string {
	return c.__id
}

func (c *mqlK8sNode) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlK8sNode) GetUid() *plugin.TValue[string] {
	return &c.Uid
}

func (c *mqlK8sNode) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlK8sNode) GetAnnotations() *plugin.TValue[map[string]interface{}] {
	return &c.Annotations
}

func (c *mqlK8sNode) GetResourceVersion() *plugin.TValue[string] {
	return &c.ResourceVersion
}

func (c *mqlK8sNode) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlK8sNode) GetKind() *plugin.TValue[string] {
	return &c.Kind
}
