// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v10/llx"
	"go.mondoo.com/cnquery/v10/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v10/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"oci": {
			// to override args, implement: initOci(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOci,
		},
		"oci.tenancy": {
			Init: initOciTenancy,
			Create: createOciTenancy,
		},
		"oci.region": {
			// to override args, implement: initOciRegion(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciRegion,
		},
		"oci.compartment": {
			// to override args, implement: initOciCompartment(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciCompartment,
		},
		"oci.identity": {
			// to override args, implement: initOciIdentity(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentity,
		},
		"oci.identity.user": {
			// to override args, implement: initOciIdentityUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityUser,
		},
		"oci.identity.apiKey": {
			// to override args, implement: initOciIdentityApiKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityApiKey,
		},
		"oci.identity.customerSecretKey": {
			// to override args, implement: initOciIdentityCustomerSecretKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityCustomerSecretKey,
		},
		"oci.identity.authToken": {
			// to override args, implement: initOciIdentityAuthToken(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityAuthToken,
		},
		"oci.identity.group": {
			// to override args, implement: initOciIdentityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityGroup,
		},
		"oci.identity.policy": {
			// to override args, implement: initOciIdentityPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciIdentityPolicy,
		},
		"oci.compute": {
			// to override args, implement: initOciCompute(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciCompute,
		},
		"oci.compute.instance": {
			// to override args, implement: initOciComputeInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciComputeInstance,
		},
		"oci.compute.image": {
			// to override args, implement: initOciComputeImage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciComputeImage,
		},
		"oci.network": {
			// to override args, implement: initOciNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciNetwork,
		},
		"oci.network.vcn": {
			// to override args, implement: initOciNetworkVcn(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciNetworkVcn,
		},
		"oci.network.securityList": {
			// to override args, implement: initOciNetworkSecurityList(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciNetworkSecurityList,
		},
		"oci.objectStorage": {
			// to override args, implement: initOciObjectStorage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciObjectStorage,
		},
		"oci.objectStorage.bucket": {
			// to override args, implement: initOciObjectStorageBucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createOciObjectStorageBucket,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"oci.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOci).GetRegions()).ToDataRes(types.Array(types.Resource("oci.region")))
	},
	"oci.compartments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOci).GetCompartments()).ToDataRes(types.Array(types.Resource("oci.compartment")))
	},
	"oci.tenancy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciTenancy).GetId()).ToDataRes(types.String)
	},
	"oci.tenancy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciTenancy).GetName()).ToDataRes(types.String)
	},
	"oci.tenancy.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciTenancy).GetDescription()).ToDataRes(types.String)
	},
	"oci.tenancy.retentionPeriod": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciTenancy).GetRetentionPeriod()).ToDataRes(types.Time)
	},
	"oci.region.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciRegion).GetId()).ToDataRes(types.String)
	},
	"oci.region.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciRegion).GetName()).ToDataRes(types.String)
	},
	"oci.region.isHomeRegion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciRegion).GetIsHomeRegion()).ToDataRes(types.Bool)
	},
	"oci.region.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciRegion).GetStatus()).ToDataRes(types.String)
	},
	"oci.compartment.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompartment).GetId()).ToDataRes(types.String)
	},
	"oci.compartment.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompartment).GetName()).ToDataRes(types.String)
	},
	"oci.compartment.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompartment).GetDescription()).ToDataRes(types.String)
	},
	"oci.compartment.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompartment).GetCreated()).ToDataRes(types.Time)
	},
	"oci.compartment.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompartment).GetState()).ToDataRes(types.String)
	},
	"oci.identity.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentity).GetUsers()).ToDataRes(types.Array(types.Resource("oci.identity.user")))
	},
	"oci.identity.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentity).GetGroups()).ToDataRes(types.Array(types.Resource("oci.identity.group")))
	},
	"oci.identity.policies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentity).GetPolicies()).ToDataRes(types.Array(types.Resource("oci.identity.policy")))
	},
	"oci.identity.user.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetId()).ToDataRes(types.String)
	},
	"oci.identity.user.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.identity.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetName()).ToDataRes(types.String)
	},
	"oci.identity.user.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetDescription()).ToDataRes(types.String)
	},
	"oci.identity.user.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.user.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetState()).ToDataRes(types.String)
	},
	"oci.identity.user.mfaActivated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetMfaActivated()).ToDataRes(types.Bool)
	},
	"oci.identity.user.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetEmail()).ToDataRes(types.String)
	},
	"oci.identity.user.emailVerified": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetEmailVerified()).ToDataRes(types.Bool)
	},
	"oci.identity.user.capabilities": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetCapabilities()).ToDataRes(types.Map(types.String, types.Bool))
	},
	"oci.identity.user.lastLogin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetLastLogin()).ToDataRes(types.Time)
	},
	"oci.identity.user.previousLogin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetPreviousLogin()).ToDataRes(types.Time)
	},
	"oci.identity.user.apiKeys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetApiKeys()).ToDataRes(types.Array(types.Resource("oci.identity.apiKey")))
	},
	"oci.identity.user.customerSecretKeys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetCustomerSecretKeys()).ToDataRes(types.Array(types.Resource("oci.identity.customerSecretKey")))
	},
	"oci.identity.user.authTokens": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetAuthTokens()).ToDataRes(types.Array(types.Resource("oci.identity.authToken")))
	},
	"oci.identity.user.groups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityUser).GetGroups()).ToDataRes(types.Array(types.Resource("oci.identity.group")))
	},
	"oci.identity.apiKey.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityApiKey).GetId()).ToDataRes(types.String)
	},
	"oci.identity.apiKey.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityApiKey).GetValue()).ToDataRes(types.String)
	},
	"oci.identity.apiKey.fingerprint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityApiKey).GetFingerprint()).ToDataRes(types.String)
	},
	"oci.identity.apiKey.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityApiKey).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.apiKey.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityApiKey).GetState()).ToDataRes(types.String)
	},
	"oci.identity.customerSecretKey.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityCustomerSecretKey).GetId()).ToDataRes(types.String)
	},
	"oci.identity.customerSecretKey.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityCustomerSecretKey).GetName()).ToDataRes(types.String)
	},
	"oci.identity.customerSecretKey.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityCustomerSecretKey).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.customerSecretKey.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityCustomerSecretKey).GetState()).ToDataRes(types.String)
	},
	"oci.identity.authToken.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityAuthToken).GetId()).ToDataRes(types.String)
	},
	"oci.identity.authToken.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityAuthToken).GetDescription()).ToDataRes(types.String)
	},
	"oci.identity.authToken.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityAuthToken).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.authToken.expires": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityAuthToken).GetExpires()).ToDataRes(types.Time)
	},
	"oci.identity.authToken.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityAuthToken).GetState()).ToDataRes(types.String)
	},
	"oci.identity.group.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetId()).ToDataRes(types.String)
	},
	"oci.identity.group.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.identity.group.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetName()).ToDataRes(types.String)
	},
	"oci.identity.group.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetDescription()).ToDataRes(types.String)
	},
	"oci.identity.group.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.group.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityGroup).GetState()).ToDataRes(types.String)
	},
	"oci.identity.policy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetId()).ToDataRes(types.String)
	},
	"oci.identity.policy.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.identity.policy.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetName()).ToDataRes(types.String)
	},
	"oci.identity.policy.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetDescription()).ToDataRes(types.String)
	},
	"oci.identity.policy.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetCreated()).ToDataRes(types.Time)
	},
	"oci.identity.policy.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetState()).ToDataRes(types.String)
	},
	"oci.identity.policy.statements": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciIdentityPolicy).GetStatements()).ToDataRes(types.Array(types.String))
	},
	"oci.compute.instances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompute).GetInstances()).ToDataRes(types.Array(types.Resource("oci.compute.instance")))
	},
	"oci.compute.images": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciCompute).GetImages()).ToDataRes(types.Array(types.Resource("oci.compute.image")))
	},
	"oci.compute.instance.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeInstance).GetId()).ToDataRes(types.String)
	},
	"oci.compute.instance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeInstance).GetName()).ToDataRes(types.String)
	},
	"oci.compute.instance.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeInstance).GetRegion()).ToDataRes(types.Resource("oci.region"))
	},
	"oci.compute.instance.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeInstance).GetCreated()).ToDataRes(types.Time)
	},
	"oci.compute.instance.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeInstance).GetState()).ToDataRes(types.String)
	},
	"oci.compute.image.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeImage).GetId()).ToDataRes(types.String)
	},
	"oci.compute.image.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeImage).GetName()).ToDataRes(types.String)
	},
	"oci.compute.image.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeImage).GetRegion()).ToDataRes(types.Resource("oci.region"))
	},
	"oci.compute.image.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeImage).GetCreated()).ToDataRes(types.Time)
	},
	"oci.compute.image.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciComputeImage).GetState()).ToDataRes(types.String)
	},
	"oci.network.vcns": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetwork).GetVcns()).ToDataRes(types.Array(types.Resource("oci.network.vcn")))
	},
	"oci.network.securityLists": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetwork).GetSecurityLists()).ToDataRes(types.Array(types.Resource("oci.network.securityList")))
	},
	"oci.network.vcn.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetId()).ToDataRes(types.String)
	},
	"oci.network.vcn.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.network.vcn.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetName()).ToDataRes(types.String)
	},
	"oci.network.vcn.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetCreated()).ToDataRes(types.Time)
	},
	"oci.network.vcn.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetState()).ToDataRes(types.String)
	},
	"oci.network.vcn.cidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetCidrBlock()).ToDataRes(types.String)
	},
	"oci.network.vcn.cidrBlocks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkVcn).GetCidrBlocks()).ToDataRes(types.Array(types.String))
	},
	"oci.network.securityList.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetId()).ToDataRes(types.String)
	},
	"oci.network.securityList.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.network.securityList.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetName()).ToDataRes(types.String)
	},
	"oci.network.securityList.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetCreated()).ToDataRes(types.Time)
	},
	"oci.network.securityList.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetState()).ToDataRes(types.String)
	},
	"oci.network.securityList.egressSecurityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetEgressSecurityRules()).ToDataRes(types.Array(types.Dict))
	},
	"oci.network.securityList.ingressSecurityRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciNetworkSecurityList).GetIngressSecurityRules()).ToDataRes(types.Array(types.Dict))
	},
	"oci.objectStorage.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorage).GetNamespace()).ToDataRes(types.String)
	},
	"oci.objectStorage.buckets": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorage).GetBuckets()).ToDataRes(types.Array(types.Resource("oci.objectStorage.bucket")))
	},
	"oci.objectStorage.bucket.namespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetNamespace()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetName()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.compartmentID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetCompartmentID()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetCreated()).ToDataRes(types.Time)
	},
	"oci.objectStorage.bucket.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetRegion()).ToDataRes(types.Resource("oci.region"))
	},
	"oci.objectStorage.bucket.publicAccessType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetPublicAccessType()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.storageTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetStorageTier()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.autoTiering": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetAutoTiering()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.versioning": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetVersioning()).ToDataRes(types.String)
	},
	"oci.objectStorage.bucket.objectEventsEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetObjectEventsEnabled()).ToDataRes(types.Bool)
	},
	"oci.objectStorage.bucket.replicationEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlOciObjectStorageBucket).GetReplicationEnabled()).ToDataRes(types.Bool)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"oci.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOci).__id, ok = v.Value.(string)
			return
		},
	"oci.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOci).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.compartments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOci).Compartments, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.tenancy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciTenancy).__id, ok = v.Value.(string)
			return
		},
	"oci.tenancy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciTenancy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.tenancy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciTenancy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.tenancy.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciTenancy).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.tenancy.retentionPeriod": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciTenancy).RetentionPeriod, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.region.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciRegion).__id, ok = v.Value.(string)
			return
		},
	"oci.region.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciRegion).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.region.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciRegion).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.region.isHomeRegion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciRegion).IsHomeRegion, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"oci.region.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciRegion).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compartment.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciCompartment).__id, ok = v.Value.(string)
			return
		},
	"oci.compartment.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompartment).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compartment.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompartment).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compartment.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompartment).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compartment.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompartment).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.compartment.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompartment).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentity).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentity).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentity).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.policies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentity).Policies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityUser).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.user.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.user.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.mfaActivated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).MfaActivated, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"oci.identity.user.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.user.emailVerified": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).EmailVerified, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"oci.identity.user.capabilities": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Capabilities, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.user.lastLogin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).LastLogin, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.user.previousLogin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).PreviousLogin, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.user.apiKeys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).ApiKeys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.user.customerSecretKeys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).CustomerSecretKeys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.user.authTokens": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).AuthTokens, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.user.groups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityUser).Groups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.identity.apiKey.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityApiKey).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.apiKey.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityApiKey).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.apiKey.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityApiKey).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.apiKey.fingerprint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityApiKey).Fingerprint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.apiKey.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityApiKey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.apiKey.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityApiKey).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.customerSecretKey.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityCustomerSecretKey).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.customerSecretKey.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityCustomerSecretKey).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.customerSecretKey.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityCustomerSecretKey).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.customerSecretKey.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityCustomerSecretKey).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.customerSecretKey.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityCustomerSecretKey).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.authToken.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityAuthToken).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.authToken.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityAuthToken).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.authToken.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityAuthToken).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.authToken.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityAuthToken).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.authToken.expires": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityAuthToken).Expires, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.authToken.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityAuthToken).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.group.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityGroup).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.group.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.group.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.group.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.group.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.group.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.group.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityGroup).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciIdentityPolicy).__id, ok = v.Value.(string)
			return
		},
	"oci.identity.policy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.identity.policy.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.identity.policy.statements": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciIdentityPolicy).Statements, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.compute.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciCompute).__id, ok = v.Value.(string)
			return
		},
	"oci.compute.instances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompute).Instances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.compute.images": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciCompute).Images, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.compute.instance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciComputeInstance).__id, ok = v.Value.(string)
			return
		},
	"oci.compute.instance.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeInstance).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compute.instance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeInstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compute.instance.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeInstance).Region, ok = plugin.RawToTValue[*mqlOciRegion](v.Value, v.Error)
		return
	},
	"oci.compute.instance.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeInstance).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.compute.instance.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeInstance).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compute.image.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciComputeImage).__id, ok = v.Value.(string)
			return
		},
	"oci.compute.image.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeImage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compute.image.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeImage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.compute.image.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeImage).Region, ok = plugin.RawToTValue[*mqlOciRegion](v.Value, v.Error)
		return
	},
	"oci.compute.image.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeImage).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.compute.image.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciComputeImage).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciNetwork).__id, ok = v.Value.(string)
			return
		},
	"oci.network.vcns": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetwork).Vcns, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.network.securityLists": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetwork).SecurityLists, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.network.vcn.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciNetworkVcn).__id, ok = v.Value.(string)
			return
		},
	"oci.network.vcn.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.vcn.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.vcn.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.vcn.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.network.vcn.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.vcn.cidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.vcn.cidrBlocks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkVcn).CidrBlocks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.network.securityList.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciNetworkSecurityList).__id, ok = v.Value.(string)
			return
		},
	"oci.network.securityList.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.securityList.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.securityList.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.securityList.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.network.securityList.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.network.securityList.egressSecurityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).EgressSecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.network.securityList.ingressSecurityRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciNetworkSecurityList).IngressSecurityRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.objectStorage.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciObjectStorage).__id, ok = v.Value.(string)
			return
		},
	"oci.objectStorage.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorage).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.buckets": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorage).Buckets, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlOciObjectStorageBucket).__id, ok = v.Value.(string)
			return
		},
	"oci.objectStorage.bucket.namespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).Namespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.compartmentID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).CompartmentID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).Region, ok = plugin.RawToTValue[*mqlOciRegion](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.publicAccessType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).PublicAccessType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.storageTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).StorageTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.autoTiering": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).AutoTiering, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.versioning": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).Versioning, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.objectEventsEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).ObjectEventsEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"oci.objectStorage.bucket.replicationEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlOciObjectStorageBucket).ReplicationEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[oci] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[oci] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlOci for the oci resource
type mqlOci struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciInternal it will be used here
	Regions plugin.TValue[[]interface{}]
	Compartments plugin.TValue[[]interface{}]
}

// createOci creates a new instance of this resource
func createOci(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOci{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOci) MqlName() string {
	return "oci"
}

func (c *mqlOci) MqlID() string {
	return c.__id
}

func (c *mqlOci) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci", c.__id, "regions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.regions()
	})
}

func (c *mqlOci) GetCompartments() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Compartments, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci", c.__id, "compartments")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.compartments()
	})
}

// mqlOciTenancy for the oci.tenancy resource
type mqlOciTenancy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciTenancyInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	RetentionPeriod plugin.TValue[*time.Time]
}

// createOciTenancy creates a new instance of this resource
func createOciTenancy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciTenancy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.tenancy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciTenancy) MqlName() string {
	return "oci.tenancy"
}

func (c *mqlOciTenancy) MqlID() string {
	return c.__id
}

func (c *mqlOciTenancy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciTenancy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciTenancy) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciTenancy) GetRetentionPeriod() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.RetentionPeriod, func() (*time.Time, error) {
		return c.retentionPeriod()
	})
}

// mqlOciRegion for the oci.region resource
type mqlOciRegion struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciRegionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	IsHomeRegion plugin.TValue[bool]
	Status plugin.TValue[string]
}

// createOciRegion creates a new instance of this resource
func createOciRegion(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciRegion{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.region", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciRegion) MqlName() string {
	return "oci.region"
}

func (c *mqlOciRegion) MqlID() string {
	return c.__id
}

func (c *mqlOciRegion) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciRegion) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciRegion) GetIsHomeRegion() *plugin.TValue[bool] {
	return &c.IsHomeRegion
}

func (c *mqlOciRegion) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlOciCompartment for the oci.compartment resource
type mqlOciCompartment struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciCompartmentInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciCompartment creates a new instance of this resource
func createOciCompartment(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciCompartment{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.compartment", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciCompartment) MqlName() string {
	return "oci.compartment"
}

func (c *mqlOciCompartment) MqlID() string {
	return c.__id
}

func (c *mqlOciCompartment) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciCompartment) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciCompartment) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciCompartment) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciCompartment) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciIdentity for the oci.identity resource
type mqlOciIdentity struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityInternal it will be used here
	Users plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
	Policies plugin.TValue[[]interface{}]
}

// createOciIdentity creates a new instance of this resource
func createOciIdentity(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentity{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentity) MqlName() string {
	return "oci.identity"
}

func (c *mqlOciIdentity) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentity) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlOciIdentity) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

func (c *mqlOciIdentity) GetPolicies() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Policies, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity", c.__id, "policies")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.policies()
	})
}

// mqlOciIdentityUser for the oci.identity.user resource
type mqlOciIdentityUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityUserInternal it will be used here
	Id plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
	MfaActivated plugin.TValue[bool]
	Email plugin.TValue[string]
	EmailVerified plugin.TValue[bool]
	Capabilities plugin.TValue[map[string]interface{}]
	LastLogin plugin.TValue[*time.Time]
	PreviousLogin plugin.TValue[*time.Time]
	ApiKeys plugin.TValue[[]interface{}]
	CustomerSecretKeys plugin.TValue[[]interface{}]
	AuthTokens plugin.TValue[[]interface{}]
	Groups plugin.TValue[[]interface{}]
}

// createOciIdentityUser creates a new instance of this resource
func createOciIdentityUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityUser) MqlName() string {
	return "oci.identity.user"
}

func (c *mqlOciIdentityUser) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityUser) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityUser) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciIdentityUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciIdentityUser) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciIdentityUser) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityUser) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlOciIdentityUser) GetMfaActivated() *plugin.TValue[bool] {
	return &c.MfaActivated
}

func (c *mqlOciIdentityUser) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlOciIdentityUser) GetEmailVerified() *plugin.TValue[bool] {
	return &c.EmailVerified
}

func (c *mqlOciIdentityUser) GetCapabilities() *plugin.TValue[map[string]interface{}] {
	return &c.Capabilities
}

func (c *mqlOciIdentityUser) GetLastLogin() *plugin.TValue[*time.Time] {
	return &c.LastLogin
}

func (c *mqlOciIdentityUser) GetPreviousLogin() *plugin.TValue[*time.Time] {
	return &c.PreviousLogin
}

func (c *mqlOciIdentityUser) GetApiKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ApiKeys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity.user", c.__id, "apiKeys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.apiKeys()
	})
}

func (c *mqlOciIdentityUser) GetCustomerSecretKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.CustomerSecretKeys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity.user", c.__id, "customerSecretKeys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.customerSecretKeys()
	})
}

func (c *mqlOciIdentityUser) GetAuthTokens() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.AuthTokens, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity.user", c.__id, "authTokens")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.authTokens()
	})
}

func (c *mqlOciIdentityUser) GetGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Groups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.identity.user", c.__id, "groups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.groups()
	})
}

// mqlOciIdentityApiKey for the oci.identity.apiKey resource
type mqlOciIdentityApiKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityApiKeyInternal it will be used here
	Id plugin.TValue[string]
	Value plugin.TValue[string]
	Fingerprint plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciIdentityApiKey creates a new instance of this resource
func createOciIdentityApiKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityApiKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.apiKey", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityApiKey) MqlName() string {
	return "oci.identity.apiKey"
}

func (c *mqlOciIdentityApiKey) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityApiKey) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityApiKey) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlOciIdentityApiKey) GetFingerprint() *plugin.TValue[string] {
	return &c.Fingerprint
}

func (c *mqlOciIdentityApiKey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityApiKey) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciIdentityCustomerSecretKey for the oci.identity.customerSecretKey resource
type mqlOciIdentityCustomerSecretKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityCustomerSecretKeyInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciIdentityCustomerSecretKey creates a new instance of this resource
func createOciIdentityCustomerSecretKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityCustomerSecretKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.customerSecretKey", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityCustomerSecretKey) MqlName() string {
	return "oci.identity.customerSecretKey"
}

func (c *mqlOciIdentityCustomerSecretKey) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityCustomerSecretKey) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityCustomerSecretKey) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciIdentityCustomerSecretKey) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityCustomerSecretKey) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciIdentityAuthToken for the oci.identity.authToken resource
type mqlOciIdentityAuthToken struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityAuthTokenInternal it will be used here
	Id plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Expires plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciIdentityAuthToken creates a new instance of this resource
func createOciIdentityAuthToken(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityAuthToken{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.authToken", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityAuthToken) MqlName() string {
	return "oci.identity.authToken"
}

func (c *mqlOciIdentityAuthToken) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityAuthToken) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityAuthToken) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciIdentityAuthToken) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityAuthToken) GetExpires() *plugin.TValue[*time.Time] {
	return &c.Expires
}

func (c *mqlOciIdentityAuthToken) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciIdentityGroup for the oci.identity.group resource
type mqlOciIdentityGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityGroupInternal it will be used here
	Id plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciIdentityGroup creates a new instance of this resource
func createOciIdentityGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.group", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityGroup) MqlName() string {
	return "oci.identity.group"
}

func (c *mqlOciIdentityGroup) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityGroup) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityGroup) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciIdentityGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciIdentityGroup) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciIdentityGroup) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityGroup) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciIdentityPolicy for the oci.identity.policy resource
type mqlOciIdentityPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciIdentityPolicyInternal it will be used here
	Id plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
	Statements plugin.TValue[[]interface{}]
}

// createOciIdentityPolicy creates a new instance of this resource
func createOciIdentityPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciIdentityPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.identity.policy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciIdentityPolicy) MqlName() string {
	return "oci.identity.policy"
}

func (c *mqlOciIdentityPolicy) MqlID() string {
	return c.__id
}

func (c *mqlOciIdentityPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciIdentityPolicy) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciIdentityPolicy) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciIdentityPolicy) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlOciIdentityPolicy) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciIdentityPolicy) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlOciIdentityPolicy) GetStatements() *plugin.TValue[[]interface{}] {
	return &c.Statements
}

// mqlOciCompute for the oci.compute resource
type mqlOciCompute struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciComputeInternal it will be used here
	Instances plugin.TValue[[]interface{}]
	Images plugin.TValue[[]interface{}]
}

// createOciCompute creates a new instance of this resource
func createOciCompute(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciCompute{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.compute", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciCompute) MqlName() string {
	return "oci.compute"
}

func (c *mqlOciCompute) MqlID() string {
	return c.__id
}

func (c *mqlOciCompute) GetInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Instances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.compute", c.__id, "instances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.instances()
	})
}

func (c *mqlOciCompute) GetImages() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Images, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.compute", c.__id, "images")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.images()
	})
}

// mqlOciComputeInstance for the oci.compute.instance resource
type mqlOciComputeInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciComputeInstanceInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Region plugin.TValue[*mqlOciRegion]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciComputeInstance creates a new instance of this resource
func createOciComputeInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciComputeInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.compute.instance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciComputeInstance) MqlName() string {
	return "oci.compute.instance"
}

func (c *mqlOciComputeInstance) MqlID() string {
	return c.__id
}

func (c *mqlOciComputeInstance) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciComputeInstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciComputeInstance) GetRegion() *plugin.TValue[*mqlOciRegion] {
	return &c.Region
}

func (c *mqlOciComputeInstance) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciComputeInstance) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciComputeImage for the oci.compute.image resource
type mqlOciComputeImage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciComputeImageInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Region plugin.TValue[*mqlOciRegion]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
}

// createOciComputeImage creates a new instance of this resource
func createOciComputeImage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciComputeImage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.compute.image", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciComputeImage) MqlName() string {
	return "oci.compute.image"
}

func (c *mqlOciComputeImage) MqlID() string {
	return c.__id
}

func (c *mqlOciComputeImage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciComputeImage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciComputeImage) GetRegion() *plugin.TValue[*mqlOciRegion] {
	return &c.Region
}

func (c *mqlOciComputeImage) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciComputeImage) GetState() *plugin.TValue[string] {
	return &c.State
}

// mqlOciNetwork for the oci.network resource
type mqlOciNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciNetworkInternal it will be used here
	Vcns plugin.TValue[[]interface{}]
	SecurityLists plugin.TValue[[]interface{}]
}

// createOciNetwork creates a new instance of this resource
func createOciNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.network", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciNetwork) MqlName() string {
	return "oci.network"
}

func (c *mqlOciNetwork) MqlID() string {
	return c.__id
}

func (c *mqlOciNetwork) GetVcns() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vcns, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.network", c.__id, "vcns")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vcns()
	})
}

func (c *mqlOciNetwork) GetSecurityLists() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.SecurityLists, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.network", c.__id, "securityLists")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.securityLists()
	})
}

// mqlOciNetworkVcn for the oci.network.vcn resource
type mqlOciNetworkVcn struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciNetworkVcnInternal it will be used here
	Id plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
	CidrBlock plugin.TValue[string]
	CidrBlocks plugin.TValue[[]interface{}]
}

// createOciNetworkVcn creates a new instance of this resource
func createOciNetworkVcn(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciNetworkVcn{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.network.vcn", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciNetworkVcn) MqlName() string {
	return "oci.network.vcn"
}

func (c *mqlOciNetworkVcn) MqlID() string {
	return c.__id
}

func (c *mqlOciNetworkVcn) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciNetworkVcn) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciNetworkVcn) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciNetworkVcn) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciNetworkVcn) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlOciNetworkVcn) GetCidrBlock() *plugin.TValue[string] {
	return &c.CidrBlock
}

func (c *mqlOciNetworkVcn) GetCidrBlocks() *plugin.TValue[[]interface{}] {
	return &c.CidrBlocks
}

// mqlOciNetworkSecurityList for the oci.network.securityList resource
type mqlOciNetworkSecurityList struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciNetworkSecurityListInternal it will be used here
	Id plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Name plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	State plugin.TValue[string]
	EgressSecurityRules plugin.TValue[[]interface{}]
	IngressSecurityRules plugin.TValue[[]interface{}]
}

// createOciNetworkSecurityList creates a new instance of this resource
func createOciNetworkSecurityList(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciNetworkSecurityList{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.network.securityList", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciNetworkSecurityList) MqlName() string {
	return "oci.network.securityList"
}

func (c *mqlOciNetworkSecurityList) MqlID() string {
	return c.__id
}

func (c *mqlOciNetworkSecurityList) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlOciNetworkSecurityList) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciNetworkSecurityList) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciNetworkSecurityList) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciNetworkSecurityList) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlOciNetworkSecurityList) GetEgressSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.EgressSecurityRules
}

func (c *mqlOciNetworkSecurityList) GetIngressSecurityRules() *plugin.TValue[[]interface{}] {
	return &c.IngressSecurityRules
}

// mqlOciObjectStorage for the oci.objectStorage resource
type mqlOciObjectStorage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlOciObjectStorageInternal it will be used here
	Namespace plugin.TValue[string]
	Buckets plugin.TValue[[]interface{}]
}

// createOciObjectStorage creates a new instance of this resource
func createOciObjectStorage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciObjectStorage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.objectStorage", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciObjectStorage) MqlName() string {
	return "oci.objectStorage"
}

func (c *mqlOciObjectStorage) MqlID() string {
	return c.__id
}

func (c *mqlOciObjectStorage) GetNamespace() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Namespace, func() (string, error) {
		return c.namespace()
	})
}

func (c *mqlOciObjectStorage) GetBuckets() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Buckets, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("oci.objectStorage", c.__id, "buckets")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.buckets()
	})
}

// mqlOciObjectStorageBucket for the oci.objectStorage.bucket resource
type mqlOciObjectStorageBucket struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlOciObjectStorageBucketInternal
	Namespace plugin.TValue[string]
	Name plugin.TValue[string]
	CompartmentID plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Region plugin.TValue[*mqlOciRegion]
	PublicAccessType plugin.TValue[string]
	StorageTier plugin.TValue[string]
	AutoTiering plugin.TValue[string]
	Versioning plugin.TValue[string]
	ObjectEventsEnabled plugin.TValue[bool]
	ReplicationEnabled plugin.TValue[bool]
}

// createOciObjectStorageBucket creates a new instance of this resource
func createOciObjectStorageBucket(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlOciObjectStorageBucket{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("oci.objectStorage.bucket", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlOciObjectStorageBucket) MqlName() string {
	return "oci.objectStorage.bucket"
}

func (c *mqlOciObjectStorageBucket) MqlID() string {
	return c.__id
}

func (c *mqlOciObjectStorageBucket) GetNamespace() *plugin.TValue[string] {
	return &c.Namespace
}

func (c *mqlOciObjectStorageBucket) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlOciObjectStorageBucket) GetCompartmentID() *plugin.TValue[string] {
	return &c.CompartmentID
}

func (c *mqlOciObjectStorageBucket) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlOciObjectStorageBucket) GetRegion() *plugin.TValue[*mqlOciRegion] {
	return &c.Region
}

func (c *mqlOciObjectStorageBucket) GetPublicAccessType() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.PublicAccessType, func() (string, error) {
		return c.publicAccessType()
	})
}

func (c *mqlOciObjectStorageBucket) GetStorageTier() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.StorageTier, func() (string, error) {
		return c.storageTier()
	})
}

func (c *mqlOciObjectStorageBucket) GetAutoTiering() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AutoTiering, func() (string, error) {
		return c.autoTiering()
	})
}

func (c *mqlOciObjectStorageBucket) GetVersioning() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Versioning, func() (string, error) {
		return c.versioning()
	})
}

func (c *mqlOciObjectStorageBucket) GetObjectEventsEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.ObjectEventsEnabled, func() (bool, error) {
		return c.objectEventsEnabled()
	})
}

func (c *mqlOciObjectStorageBucket) GetReplicationEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.ReplicationEnabled, func() (bool, error) {
		return c.replicationEnabled()
	})
}
