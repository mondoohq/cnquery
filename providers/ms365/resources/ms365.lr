// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

option provider = "go.mondoo.com/cnquery/v9/providers/ms365"
option go_package = "go.mondoo.com/cnquery/v11/providers/ms365/resources"

alias microsoft.organization = microsoft.tenant

// Microsoft
microsoft {
  // Deprecated: use `microsoft.tenant` instead
  organizations() []microsoft.tenant
  // List of users
  users() []microsoft.user
  // List of groups
  groups() []microsoft.group
  // List of domains
  domains() []microsoft.domain
  // List of applications
  applications() []microsoft.application
  // List of service principals
  serviceprincipals() []microsoft.serviceprincipal
  // List of enterprise applications
  enterpriseApplications() []microsoft.serviceprincipal
  // List of roles
  roles() []microsoft.rolemanagement.roledefinition
  // Microsoft 365 settings
  settings() dict
  // The connected tenant's default domain name
  tenantDomainName() string
}

//  Microsoft Entra tenant
microsoft.tenant @defaults("name") {
  // Organization ID
  id string
  // Service plans associated with the tenant
  assignedPlans []dict
  // Provisioned plan
  provisionedPlans []dict
  // Deprecated: use `createdAt` instead
  createdDateTime time
  // Deprecated: use `name` instead
  displayName string
  // Tenant display name
  name string
  // Organization verified domains
  verifiedDomains []dict
  // Whether password hash sync is enabled for hybrid deployments
  onPremisesSyncEnabled bool
  // Tenant creation date
  createdAt time
  // Tenant type
  type string
  // Commercial subscription
  subscriptions() []dict
}

// Microsoft Conditional Access Policies
microsoft.conditionalAccess {
  // IP named location
  namedLocations() []microsoft.conditionalAccess.ipNamedLocation
}

// Microsoft Conditional Access IP named location
microsoft.conditionalAccess.ipNamedLocation @defaults("name trusted") {
  // Named location name
  name string
  // Whether the location is marked as trusted
  trusted bool
}

// Microsoft Entra ID user
private microsoft.user @defaults("id displayName userPrincipalName") {
  // User Object ID
  id string
  // Whether the user account is enabled
  accountEnabled bool
  // User city
  city string
  // Deprecated: use job.companyName instead
  companyName string
  // Deprecated: use contact.country instead
  country string
  // User create time
  createdDateTime time
  // Deprecated: use job.department instead
  department string
  // User display name
  displayName string
  // Deprecated: use job.employeeId instead
  employeeId string
  // User given name
  givenName string
  // Deprecated: use job.title instead
  jobTitle string
  // Deprecated: use contact.email instead
  mail string
  // Deprecated: use contact.mobilePhone instead
  mobilePhone string
  // Deprecated: use contact.otherMails instead
  otherMails []string
  // Deprecated: use job.officeLocation instead
  officeLocation string
  // Deprecated: use contact.postalCode instead
  postalCode string
  // Deprecated: use contact.state instead
  state string
  // Deprecated: use contact.streetAddress instead
  streetAddress string
  // User surname
  surname string
  // User service principal name
  userPrincipalName string
  // User type
  userType string
  // User settings
  settings() dict
  // Job information
  job() dict
  // Contact information
  contact() dict
  // Authentication information
  authMethods() microsoft.user.authenticationMethods
}

// Microsoft Entra authentication methods
private microsoft.user.authenticationMethods @defaults("count") {
    // Count of authentication methods
    count int
    // Phone number and type registered to a user
    phoneMethods []dict
    // Email authentication method for self-service password reset (SSPR)
    emailMethods []dict
    // FIDO2 security key registered to a user
    fido2Methods []dict
    // Software OATH token registered to a user
    softwareMethods []dict
    // Microsoft Authenticator app registered to a user
    microsoftAuthenticator []dict
    // User password authentication method
    passwordMethods []dict
    // Temporary Access Pass registered to a user
    temporaryAccessPassMethods []dict
    // Windows Hello for Business authentication method registered to a user
    windowsHelloMethods []dict
}

// Microsoft group
private microsoft.group @defaults("id displayName") {
  // Group ID
  id string
  // Group display name
  displayName string
  // Whether group security is enabled
  securityEnabled bool
  // Whether group email is enabled status
  mailEnabled bool
  // Group email nickname
  mailNickname string
  // Group email
  mail string
  // Group visibility state
  visibility string
  // List of group members
  members() []microsoft.user
  // Group types indicating the membership and classification of the group
  groupTypes []string
  // Membership rule used for dynamic group membership
  membershipRule string
  // State of the processing for the dynamic membership rule
  membershipRuleProcessingState string
}

// Microsoft domain
private microsoft.domain @defaults("id") {
  // Domain ID
  id string
  // Domain authentication type
  authenticationType string
  // Domain availability status
  availabilityStatus string
  // Whether the domain is admin managed
  isAdminManaged bool
  // Whether the domain is the default domain
  isDefault bool
  // Whether the domain is the initial domain
  isInitial bool
  // Whether the domain is a root domain
  isRoot bool
  // Whether the domain is verified
  isVerified bool
  // Domain password notification window (days)
  passwordNotificationWindowInDays int
  // Domain password validity period (days)
  passwordValidityPeriodInDays int
  // List of supported services
  supportedServices []string
  // List of service configuration records
  serviceConfigurationRecords() []microsoft.domaindnsrecord
}

// Microsoft domain DNS record
private microsoft.domaindnsrecord @defaults("id label") {
  // Domain record ID
  id string
  // Whether the domain record is optional
  isOptional bool
  // Domain record label
  label string
  // Domain record type
  recordType string
  // Domain record supported service
  supportedService string
  // Domain record TTL
  ttl int
  // Deprecated; kept for backwards compatibility
  properties dict
}

// Microsoft Entra ID application registration
microsoft.application @defaults("id displayName hasExpiredCredentials") {
  init(name string)
  // Object ID
  id string
  // Application (client) ID
  appId string
  // Application display name
  name string
  // Deprecated: Use `name` instead
  displayName string
  // Description
  description string
  // Notes
  notes string
  // Tags
  tags []string
  // Application template ID
  applicationTemplateId string
  // Microsoft disabled status
  disabledByMicrosoftStatus string
  // Group membership claims
  groupMembershipClaims string
  // Application creation date
  createdAt time
  // Deprecated: Use `createdAt` instead
  createdDateTime time
  // Application identifier URIs
  identifierUris []string
  // Application publisher domain
  publisherDomain string
  // Application sign-in audience
  signInAudience string
  // Basic profile information
  info dict
  // Settings for an application that implements a web API
  api dict
  // Settings for a web application
  web dict
  // Settings for a single-page application
  spa dict
  // Client secrets
  secrets []microsoft.passwordCredential
  // Certificates
  certificates []microsoft.keyCredential
  // Whether the credentials have expired
  hasExpiredCredentials() bool
  // Application owner
  owners() []microsoft.user
  // Managed application in local directory
  servicePrincipal() microsoft.serviceprincipal
  // Whether the application supports device-only authentication
  isDeviceOnlyAuthSupported bool
  // Specifies the fallback application type as public client
  isFallbackPublicClient bool
  // Whether the application supports native authentication
  nativeAuthenticationApisEnabled string
  // Service management reference
  serviceManagementReference string
  // Token encryption key ID
  tokenEncryptionKeyId string
  // SAML metadata URL
  samlMetadataUrl string
  // Default redirect URI
  defaultRedirectUri string
  // Certification metadata
  certification dict
  // Optional claims
  optionalClaims dict
  // Service principal configuration
  servicePrincipalLockConfiguration dict
  // Signature verification
  requestSignatureVerification dict
  // Parental control settings
  parentalControlSettings dict
  // Public client configuration
  publicClient dict
  // Application roles
  appRoles []microsoft.application.role
}

// Microsoft Entra ID app roles are custom roles to assign permissions to users or apps
private microsoft.application.role @defaults("name value isEnabled"){
  // App role ID
  id string
  // Display name
  name string
  // Description
  description string
  // Value
  value string
  // Allowed member types
  allowedMemberTypes []string
  // App state
  isEnabled bool
}

// Microsoft Entra AD Application certificate
private microsoft.keyCredential @defaults("thumbprint description expires keyId") {
  // Certificate ID
  keyId string
  // Description
  description string
  // Certificate thumbprint
  thumbprint string
  // Certificate type
  type string
  // Certificate usage
  usage string
  // Certificate expiration date
  expires time
  // Whether the secret has expired
  expired bool
}

// Microsoft Entra AD Application secrets
private microsoft.passwordCredential @defaults("description expires keyId") {
  // Secret ID
  keyId string
  // Description
  description string
  // Secret hint
  hint string
  // Secret expiration date
  expires time
  // Whether the secret has expired
  expired bool
}

// Microsoft service principal (Enterprise application)
microsoft.serviceprincipal @defaults("name") {
  // Service principal Object ID
  id string
  // Service principal type
  type string
  // Service principal name
  name string
  // Application ID
  appId string
  // Application owner ID
  appOwnerOrganizationId string
  // Application description
  description string
  // Service principal tags
  tags []string
  // Whether users can sign into the service principal (application)
  enabled bool
  // Service principal homepage URL
  homepageUrl string
  // Service principal terms of service URL
  termsOfServiceUrl string
  // Service principal reply URLs
  replyUrls []string
  // Whether users or other apps must be assigned to this service principal before using it
  assignmentRequired bool
  // Whether the service principal is visible to users
  visibleToUsers bool
  // Service principal notes
  notes string
  // List of assignments (users and groups) this service principal has
  assignments []microsoft.serviceprincipal.assignment
  // Application template ID
  applicationTemplateId string
  // Application publisher
  verifiedPublisher dict
  // Login URL
  loginUrl string
  // Logout URL
  logoutUrl string
  // Service principal names
  servicePrincipalNames []string
  // Sign in audience
  signInAudience string
  // Preferred single sign-on mode
  preferredSingleSignOnMode string
  // Notification email addresses
  notificationEmailAddresses []string
  // App role assignment required
  appRoleAssignmentRequired bool
  // Deprecated: use `enabled` instead
  accountEnabled bool
  // Whether it is a first-party Microsoft application
  isFirstParty() bool
  // Application roles
  appRoles []microsoft.application.role
  // Permissions
  permissions() []microsoft.application.permission
}

// Microsoft Service Principal Assignment
private microsoft.serviceprincipal.assignment @defaults("id") {
  // Service Principal Assignment ID
  id string
  // Service Principal Assignment name
  displayName string
  // Service Principal Assignment type
  type string
}

// Microsoft Service Principal Permission
private microsoft.application.permission @defaults("appName name type status") {
  // Id of the API
  appId string
  // Name of the API
  appName string
  // Permission ID
  id  string
  // Permission name
  name string
  // Permission description
  description string
  // Type eg. `application` or `delegated`
  type string
  // Status
  status string
}

// Microsoft Security
microsoft.security {
  // List of security scores
  secureScores() []microsoft.security.securityscore
  // Latest security score
  latestSecureScores() microsoft.security.securityscore
  // List Microsoft Entra users who are at risk
  riskyUsers() []microsoft.security.riskyUser
}

// Microsoft Secure Score
private microsoft.security.securityscore @defaults("id azureTenantId") {
  // Secure Score ID
  id string
  // Secure Score active user count
  activeUserCount int
  // Secure Score average comparative score
  averageComparativeScores []dict
  // Secure Score tenant ID
  azureTenantId string
  // Secure Score control scores
  controlScores []dict
  // Secure Score creation time
  createdDateTime time
  // Secure Score current score
  currentScore float
  // Secure Score enabled services
  enabledServices []string
  // Secure Score licensed user count
  licensedUserCount int
  // Secure Score max score
  maxScore float
  // Secure Score vendor information
  vendorInformation dict
}

// Microsoft Entra users who are at risk
microsoft.security.riskyUser @defaults("principalName riskLevel riskState lastUpdatedAt"){
  // Risky user ID
  id string
  // User name
  name string
  // User principal
  principalName string
  // Entra User
  user() microsoft.user
  // Risk detail
  riskDetail string
  // Risk level
  riskLevel string
  // Risk state
  riskState string
  // Risk last updated
  lastUpdatedAt time
}

// Microsoft policies
microsoft.policies {
  // Authorization policy
  authorizationPolicy() dict
  // Identity security default enforcement policy
  identitySecurityDefaultsEnforcementPolicy() dict
  // Admin consent request policy
  adminConsentRequestPolicy() dict
  // Permission grant policies
  permissionGrantPolicies() []dict
}

// Deprecated: use `microsoft.roles` instead
microsoft.rolemanagement {
  // Deprecated: use `microsoft.roles` instead
  roleDefinitions() []microsoft.rolemanagement.roledefinition
}

// Microsoft role definition
private microsoft.rolemanagement.roledefinition @defaults("id displayName") {
  // Role definition ID
  id string
  // Role definition description
  description string
  // Role definition display name
  displayName string
  // Whether the role is built in
  isBuiltIn bool
  // Whether the role is enabled
  isEnabled bool
  // Role definition permissions
  rolePermissions []dict
  // Role definition template ID
  templateId string
  // Role definition version
  version string
  // List of role definition assignments
  assignments() []microsoft.rolemanagement.roleassignment
}

// Microsoft role assignment
private microsoft.rolemanagement.roleassignment @defaults("id principalId") {
  // Role assignment ID
  id string
  // Role definition ID
  roleDefinitionId string
  // Service principal ID
  principalId string
  // Service principal
  principal dict
}

// Microsoft device management
microsoft.devicemanagement {
  // List of device configurations
  deviceConfigurations() []microsoft.devicemanagement.deviceconfiguration
  // List of device compliance policies
  deviceCompliancePolicies() []microsoft.devicemanagement.devicecompliancepolicy
}

// Microsoft device configuration
private microsoft.devicemanagement.deviceconfiguration @defaults("id displayName") {
  // Device configuration ID
  id string
  // Device configuration last modify date
  lastModifiedDateTime time
  // Device configuration creation date
  createdDateTime time
  // Device configuration description
  description string
  // Device configuration display name
  displayName string
  // Device configuration version
  version int
  // Deprecated; kept for backwards compatibility
  properties dict
}

// Microsoft device compliance policy
private microsoft.devicemanagement.devicecompliancepolicy @defaults("id displayName") {
  // Device compliance policy ID
  id string
  // Device compliance policy creation date
  createdDateTime time
  // Device compliance policy description
  description string
  // Device compliance policy display name
  displayName string
  // Device compliance policy last modified date
  lastModifiedDateTime time
  // Device compliance policy version
  version int
  // Device compliance policy assignments
  assignments []dict
  // Deprecated; kept for backwards compatibility
  properties dict
}

// Microsoft 365 Exchange Online
ms365.exchangeonline {
  // List of malware filter policies
  malwareFilterPolicy() []dict
  // List of hosted outbound spam filter policies
  hostedOutboundSpamFilterPolicy() []dict
  // Transport rules
  transportRule() []dict
  // List of remote domains
  remoteDomain() []dict
  // List of safe links policies
  safeLinksPolicy() []dict
  // List of safe attachment policies
  safeAttachmentPolicy() []dict
  // Organization configurations
  organizationConfig() dict
  // List of authentication policies
  authenticationPolicy() []dict
  // List of anti-phishing policies
  antiPhishPolicy() []dict
  // List of dkim signing configurations
  dkimSigningConfig() []dict
  // List of OWA mailbox policies
  owaMailboxPolicy() []dict
  // Admin audit log configuration
  adminAuditLogConfig() dict
  // List of phishing filter policies
  phishFilterPolicy() []dict
  // List of mailboxes
  mailbox() []dict
  // List of APT policies for Office 365
  atpPolicyForO365() []dict
  // List of sharing policies
  sharingPolicy() []dict
  // List of role assignment policies
  roleAssignmentPolicy() []dict
  // List of external sender configurations
  externalInOutlook() []ms365.exchangeonline.externalSender
  // List of shared mailboxes
  sharedMailboxes() []ms365.exchangeonline.exoMailbox
  // List of Teams protection policies
  teamsProtectionPolicies() []ms365.exchangeonline.teamsProtectionPolicy
  // List of report submission policies
  reportSubmissionPolicies() []ms365.exchangeonline.reportSubmissionPolicy
}

// Teams Protection Policy configuration
private ms365.exchangeonline.teamsProtectionPolicy {
  // Whether Zero-hour Auto Purge (ZAP) is enabled
  zapEnabled bool
  // Whether the policy configuration is considered valid
  isValid bool
}

// Report Submission Policy configuration
private ms365.exchangeonline.reportSubmissionPolicy {
  // Whether to report junk to a customized address
  reportJunkToCustomizedAddress bool
  // Whether to report not junk to a customized address
  reportNotJunkToCustomizedAddress bool
  // Whether to report phish to a customized address
  reportPhishToCustomizedAddress bool
  // Addresses to report junk
  reportJunkAddresses []string
  // Addresses to report not junk
  reportNotJunkAddresses []string
  // Addresses to report phish
  reportPhishAddresses []string
  // Whether chat message reporting is enabled
  reportChatMessageEnabled bool
  // Whether to report chat messages to a customized address
  reportChatMessageToCustomizedAddressEnabled bool
}

// Microsoft 365 Exchange Online External Sender
private ms365.exchangeonline.externalSender {
  // The identity of the external sender
  identity string
  // The list of specified senders that do not receive the External icon in the area of subject line
  allowList []string
  // Whether the feature is enabled
  enabled bool
}

// Microsoft 365 Exchange Online Mailbox
private ms365.exchangeonline.exoMailbox {
  // The identity of the mailbox
  identity string
  // The user linked to this mailbox
  user() microsoft.user
  // The identity of the external object linked to this mailbox
  externalDirectoryObjectId string
}

// Microsoft 365 SharePoint Online
ms365.sharepointonline {
  // SharePoint Online tenant
  spoTenant() dict
  // SharePoint Online tenant sync client restriction
  spoTenantSyncClientRestriction() dict
  // SharePoint Online tenant sites
  spoSites() []ms365.sharepointonline.site
}

// Microsoft 365 SharePoint Site
private ms365.sharepointonline.site {
  // The site URL
  url string
  // Whether custom script execution on a particulate site allowed
  denyAddAndCustomizePages bool
}

// Microsoft 365 Teams
ms365.teams {
  // Teams client configuration
  csTeamsClientConfiguration() dict
  // Teams tenant federated configuration
  csTenantFederationConfiguration() ms365.teams.tenantFederationConfig
  // Teams meeting policy configuration
  csTeamsMeetingPolicy() ms365.teams.teamsMeetingPolicyConfig
  // Teams message policy configuration
  csTeamsMessagingPolicy() ms365.teams.teamsMessagingPolicyConfig
}

// Microsoft 365 Teams tenant federation configuration
private ms365.teams.tenantFederationConfig {
  // ID of the collection of tenant federation configuration settings
  identity string
  // Blocked domains
  blockedDomains dict
  // Whether federated users are allowed
  allowFederatedUsers bool
  // Whether public users are allowed
  allowPublicUsers bool
  // Whether to allow external Teams consumers 
  allowTeamsConsumer bool
  // Whether to allow inbound communication with external Teams consumers
  allowTeamsConsumerInbound bool
  // Whether to treat discovered partners as unverified
  treatDiscoveredPartnersAsUnverified bool
  // Whether shared SIP address space is enabled
  sharedSipAddressSpace bool
  // Whether to restrict Teams consumer to external user profiles
  restrictTeamsConsumerToExternalUserProfiles bool
}

// Microsoft 365 Teams meeting policy configuration
private ms365.teams.teamsMeetingPolicyConfig {
  // Whether anonymous users are allowed to join
  allowAnonymousUsersToJoinMeeting bool
  // Whether anonymous users are allowed to start the meeting
  allowAnonymousUsersToStartMeeting bool
  // Whether external meeting chat is allowed
  allowExternalNonTrustedMeetingChat bool
  // Who can bypass the lobby
  autoAdmittedUsers string
  // Whether public switched telephone network (PSTN) users can bypass the lobby
  allowPSTNUsersToBypassLobby bool
  // Whether meeting chat is enabled
  meetingChatEnabledType string
  // Designated presenter role mode
  designatedPresenterRoleMode string
  // Whether external participants can give or request control of the meeting
  allowExternalParticipantGiveRequestControl bool
  // Whether users can report security concerns
  allowSecurityEndUserReporting bool
}

// Teams meeting policy configuration
private ms365.teams.teamsMessagingPolicyConfig {
  // Whether users can report security concerns
  allowSecurityEndUserReporting bool
}