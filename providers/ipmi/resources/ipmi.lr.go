// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"ipmi": {
			// to override args, implement: initIpmi(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createIpmi,
		},
		"ipmi.chassis": {
			// to override args, implement: initIpmiChassis(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createIpmiChassis,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"ipmi.deviceID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlIpmi).GetDeviceID()).ToDataRes(types.Dict)
	},
	"ipmi.guid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlIpmi).GetGuid()).ToDataRes(types.String)
	},
	"ipmi.chassis.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlIpmiChassis).GetStatus()).ToDataRes(types.Dict)
	},
	"ipmi.chassis.systemBootOptions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlIpmiChassis).GetSystemBootOptions()).ToDataRes(types.Dict)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"ipmi.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlIpmi).__id, ok = v.Value.(string)
			return
		},
	"ipmi.deviceID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlIpmi).DeviceID, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"ipmi.guid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlIpmi).Guid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"ipmi.chassis.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlIpmiChassis).__id, ok = v.Value.(string)
			return
		},
	"ipmi.chassis.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlIpmiChassis).Status, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"ipmi.chassis.systemBootOptions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlIpmiChassis).SystemBootOptions, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[ipmi] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[ipmi] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlIpmi for the ipmi resource
type mqlIpmi struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlIpmiInternal it will be used here
	DeviceID plugin.TValue[interface{}]
	Guid plugin.TValue[string]
}

// createIpmi creates a new instance of this resource
func createIpmi(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlIpmi{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("ipmi", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlIpmi) MqlName() string {
	return "ipmi"
}

func (c *mqlIpmi) MqlID() string {
	return c.__id
}

func (c *mqlIpmi) GetDeviceID() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.DeviceID, func() (interface{}, error) {
		return c.deviceID()
	})
}

func (c *mqlIpmi) GetGuid() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Guid, func() (string, error) {
		return c.guid()
	})
}

// mqlIpmiChassis for the ipmi.chassis resource
type mqlIpmiChassis struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlIpmiChassisInternal it will be used here
	Status plugin.TValue[interface{}]
	SystemBootOptions plugin.TValue[interface{}]
}

// createIpmiChassis creates a new instance of this resource
func createIpmiChassis(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlIpmiChassis{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("ipmi.chassis", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlIpmiChassis) MqlName() string {
	return "ipmi.chassis"
}

func (c *mqlIpmiChassis) MqlID() string {
	return c.__id
}

func (c *mqlIpmiChassis) GetStatus() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Status, func() (interface{}, error) {
		return c.status()
	})
}

func (c *mqlIpmiChassis) GetSystemBootOptions() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.SystemBootOptions, func() (interface{}, error) {
		return c.systemBootOptions()
	})
}
