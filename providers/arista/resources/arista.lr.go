// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"arista.eos": {
			// to override args, implement: initAristaEos(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEos,
		},
		"arista.eos.runningConfig": {
			// to override args, implement: initAristaEosRunningConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosRunningConfig,
		},
		"arista.eos.runningConfig.section": {
			// to override args, implement: initAristaEosRunningConfigSection(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosRunningConfigSection,
		},
		"arista.eos.user": {
			// to override args, implement: initAristaEosUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosUser,
		},
		"arista.eos.role": {
			// to override args, implement: initAristaEosRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosRole,
		},
		"arista.eos.snmpSetting": {
			// to override args, implement: initAristaEosSnmpSetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosSnmpSetting,
		},
		"arista.eos.ntpSetting": {
			// to override args, implement: initAristaEosNtpSetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosNtpSetting,
		},
		"arista.eos.interface": {
			// to override args, implement: initAristaEosInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosInterface,
		},
		"arista.eos.ipInterface": {
			// to override args, implement: initAristaEosIpInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosIpInterface,
		},
		"arista.eos.stp": {
			// to override args, implement: initAristaEosStp(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosStp,
		},
		"arista.eos.stp.mst": {
			// to override args, implement: initAristaEosStpMst(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosStpMst,
		},
		"arista.eos.spt.mstInterface": {
			// to override args, implement: initAristaEosSptMstInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createAristaEosSptMstInterface,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"arista.eos.systemConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetSystemConfig()).ToDataRes(types.Map(types.String, types.String))
	},
	"arista.eos.ipInterfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetIpInterfaces()).ToDataRes(types.Array(types.Resource("arista.eos.ipInterface")))
	},
	"arista.eos.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetInterfaces()).ToDataRes(types.Array(types.Resource("arista.eos.interface")))
	},
	"arista.eos.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetVersion()).ToDataRes(types.Dict)
	},
	"arista.eos.hostname": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetHostname()).ToDataRes(types.String)
	},
	"arista.eos.fqdn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetFqdn()).ToDataRes(types.String)
	},
	"arista.eos.users": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetUsers()).ToDataRes(types.Array(types.Resource("arista.eos.user")))
	},
	"arista.eos.roles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetRoles()).ToDataRes(types.Array(types.Resource("arista.eos.role")))
	},
	"arista.eos.snmp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetSnmp()).ToDataRes(types.Resource("arista.eos.snmpSetting"))
	},
	"arista.eos.ntp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEos).GetNtp()).ToDataRes(types.Resource("arista.eos.ntpSetting"))
	},
	"arista.eos.runningConfig.content": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRunningConfig).GetContent()).ToDataRes(types.String)
	},
	"arista.eos.runningConfig.section.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRunningConfigSection).GetName()).ToDataRes(types.String)
	},
	"arista.eos.runningConfig.section.content": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRunningConfigSection).GetContent()).ToDataRes(types.String)
	},
	"arista.eos.user.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetName()).ToDataRes(types.String)
	},
	"arista.eos.user.privilege": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetPrivilege()).ToDataRes(types.String)
	},
	"arista.eos.user.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetRole()).ToDataRes(types.String)
	},
	"arista.eos.user.nopassword": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetNopassword()).ToDataRes(types.String)
	},
	"arista.eos.user.format": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetFormat()).ToDataRes(types.String)
	},
	"arista.eos.user.secret": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetSecret()).ToDataRes(types.String)
	},
	"arista.eos.user.sshkey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosUser).GetSshkey()).ToDataRes(types.String)
	},
	"arista.eos.role.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRole).GetName()).ToDataRes(types.String)
	},
	"arista.eos.role.default": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRole).GetDefault()).ToDataRes(types.Bool)
	},
	"arista.eos.role.rules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosRole).GetRules()).ToDataRes(types.Array(types.Dict))
	},
	"arista.eos.snmpSetting.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSnmpSetting).GetEnabled()).ToDataRes(types.Bool)
	},
	"arista.eos.snmpSetting.notifications": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSnmpSetting).GetNotifications()).ToDataRes(types.Array(types.Dict))
	},
	"arista.eos.ntpSetting.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosNtpSetting).GetStatus()).ToDataRes(types.String)
	},
	"arista.eos.interface.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetName()).ToDataRes(types.String)
	},
	"arista.eos.interface.bandwidth": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetBandwidth()).ToDataRes(types.Int)
	},
	"arista.eos.interface.burnedInAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetBurnedInAddress()).ToDataRes(types.String)
	},
	"arista.eos.interface.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetDescription()).ToDataRes(types.String)
	},
	"arista.eos.interface.forwardingModel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetForwardingModel()).ToDataRes(types.String)
	},
	"arista.eos.interface.hardware": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetHardware()).ToDataRes(types.String)
	},
	"arista.eos.interface.interfaceAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetInterfaceAddress()).ToDataRes(types.Array(types.Dict))
	},
	"arista.eos.interface.interfaceCounters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetInterfaceCounters()).ToDataRes(types.Dict)
	},
	"arista.eos.interface.interfaceMembership": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetInterfaceMembership()).ToDataRes(types.String)
	},
	"arista.eos.interface.interfaceStatistics": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetInterfaceStatistics()).ToDataRes(types.Dict)
	},
	"arista.eos.interface.interfaceStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetInterfaceStatus()).ToDataRes(types.String)
	},
	"arista.eos.interface.l2Mtu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetL2Mtu()).ToDataRes(types.Int)
	},
	"arista.eos.interface.lastStatusChangeTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetLastStatusChangeTimestamp()).ToDataRes(types.Int)
	},
	"arista.eos.interface.lineProtocolStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetLineProtocolStatus()).ToDataRes(types.String)
	},
	"arista.eos.interface.mtu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetMtu()).ToDataRes(types.Int)
	},
	"arista.eos.interface.physicalAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetPhysicalAddress()).ToDataRes(types.String)
	},
	"arista.eos.interface.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosInterface).GetStatus()).ToDataRes(types.Dict)
	},
	"arista.eos.ipInterface.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosIpInterface).GetName()).ToDataRes(types.String)
	},
	"arista.eos.ipInterface.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosIpInterface).GetAddress()).ToDataRes(types.String)
	},
	"arista.eos.ipInterface.mtu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosIpInterface).GetMtu()).ToDataRes(types.String)
	},
	"arista.eos.stp.mstInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStp).GetMstInstances()).ToDataRes(types.Array(types.Resource("arista.eos.stp.mst")))
	},
	"arista.eos.stp.mst.instanceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetInstanceId()).ToDataRes(types.String)
	},
	"arista.eos.stp.mst.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetName()).ToDataRes(types.String)
	},
	"arista.eos.stp.mst.protocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetProtocol()).ToDataRes(types.String)
	},
	"arista.eos.stp.mst.bridge": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetBridge()).ToDataRes(types.Dict)
	},
	"arista.eos.stp.mst.rootBridge": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetRootBridge()).ToDataRes(types.Dict)
	},
	"arista.eos.stp.mst.regionalRootBridge": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetRegionalRootBridge()).ToDataRes(types.Dict)
	},
	"arista.eos.stp.mst.interfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosStpMst).GetInterfaces()).ToDataRes(types.Array(types.Resource("arista.eos.spt.mstInterface")))
	},
	"arista.eos.spt.mstInterface.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetId()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.mstInstanceId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetMstInstanceId()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetName()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetPriority()).ToDataRes(types.Int)
	},
	"arista.eos.spt.mstInterface.linkType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetLinkType()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetState()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.cost": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetCost()).ToDataRes(types.Int)
	},
	"arista.eos.spt.mstInterface.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetRole()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.inconsistentFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetInconsistentFeatures()).ToDataRes(types.Dict)
	},
	"arista.eos.spt.mstInterface.portNumber": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetPortNumber()).ToDataRes(types.Int)
	},
	"arista.eos.spt.mstInterface.isEdgePort": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetIsEdgePort()).ToDataRes(types.Bool)
	},
	"arista.eos.spt.mstInterface.detail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetDetail()).ToDataRes(types.Dict)
	},
	"arista.eos.spt.mstInterface.boundaryType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetBoundaryType()).ToDataRes(types.String)
	},
	"arista.eos.spt.mstInterface.counters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetCounters()).ToDataRes(types.Dict)
	},
	"arista.eos.spt.mstInterface.features": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlAristaEosSptMstInterface).GetFeatures()).ToDataRes(types.Dict)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"arista.eos.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEos).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.systemConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).SystemConfig, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.ipInterfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).IpInterfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Version, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.hostname": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Hostname, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.fqdn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Fqdn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.users": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Users, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.roles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Roles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.snmp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Snmp, ok = plugin.RawToTValue[*mqlAristaEosSnmpSetting](v.Value, v.Error)
		return
	},
	"arista.eos.ntp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEos).Ntp, ok = plugin.RawToTValue[*mqlAristaEosNtpSetting](v.Value, v.Error)
		return
	},
	"arista.eos.runningConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosRunningConfig).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.runningConfig.content": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRunningConfig).Content, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.runningConfig.section.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosRunningConfigSection).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.runningConfig.section.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRunningConfigSection).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.runningConfig.section.content": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRunningConfigSection).Content, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosUser).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.user.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.privilege": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Privilege, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.nopassword": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Nopassword, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.format": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Format, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.secret": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Secret, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.user.sshkey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosUser).Sshkey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.role.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosRole).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.role.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRole).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.role.default": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRole).Default, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"arista.eos.role.rules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosRole).Rules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.snmpSetting.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosSnmpSetting).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.snmpSetting.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSnmpSetting).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"arista.eos.snmpSetting.notifications": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSnmpSetting).Notifications, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.ntpSetting.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosNtpSetting).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.ntpSetting.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosNtpSetting).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosInterface).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.interface.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.bandwidth": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Bandwidth, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.interface.burnedInAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).BurnedInAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.forwardingModel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).ForwardingModel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.hardware": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Hardware, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.interfaceAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).InterfaceAddress, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.interface.interfaceCounters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).InterfaceCounters, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.interface.interfaceMembership": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).InterfaceMembership, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.interfaceStatistics": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).InterfaceStatistics, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.interface.interfaceStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).InterfaceStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.l2Mtu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).L2Mtu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.interface.lastStatusChangeTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).LastStatusChangeTimestamp, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.interface.lineProtocolStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).LineProtocolStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.mtu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Mtu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.interface.physicalAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).PhysicalAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.interface.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosInterface).Status, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.ipInterface.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosIpInterface).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.ipInterface.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosIpInterface).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.ipInterface.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosIpInterface).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.ipInterface.mtu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosIpInterface).Mtu, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.stp.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosStp).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.stp.mstInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStp).MstInstances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosStpMst).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.stp.mst.instanceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).InstanceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.protocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).Protocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.bridge": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).Bridge, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.rootBridge": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).RootBridge, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.regionalRootBridge": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).RegionalRootBridge, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.stp.mst.interfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosStpMst).Interfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlAristaEosSptMstInterface).__id, ok = v.Value.(string)
			return
		},
	"arista.eos.spt.mstInterface.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.mstInstanceId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).MstInstanceId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Priority, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.linkType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).LinkType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.cost": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Cost, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.inconsistentFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).InconsistentFeatures, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.portNumber": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).PortNumber, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.isEdgePort": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).IsEdgePort, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.detail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Detail, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.boundaryType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).BoundaryType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.counters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Counters, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"arista.eos.spt.mstInterface.features": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlAristaEosSptMstInterface).Features, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[arista] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[arista] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlAristaEos for the arista.eos resource
type mqlAristaEos struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosInternal it will be used here
	SystemConfig plugin.TValue[map[string]interface{}]
	IpInterfaces plugin.TValue[[]interface{}]
	Interfaces plugin.TValue[[]interface{}]
	Version plugin.TValue[interface{}]
	Hostname plugin.TValue[string]
	Fqdn plugin.TValue[string]
	Users plugin.TValue[[]interface{}]
	Roles plugin.TValue[[]interface{}]
	Snmp plugin.TValue[*mqlAristaEosSnmpSetting]
	Ntp plugin.TValue[*mqlAristaEosNtpSetting]
}

// createAristaEos creates a new instance of this resource
func createAristaEos(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEos{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEos) MqlName() string {
	return "arista.eos"
}

func (c *mqlAristaEos) MqlID() string {
	return c.__id
}

func (c *mqlAristaEos) GetSystemConfig() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.SystemConfig, func() (map[string]interface{}, error) {
		return c.systemConfig()
	})
}

func (c *mqlAristaEos) GetIpInterfaces() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IpInterfaces, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "ipInterfaces")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.ipInterfaces()
	})
}

func (c *mqlAristaEos) GetInterfaces() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Interfaces, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "interfaces")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.interfaces()
	})
}

func (c *mqlAristaEos) GetVersion() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Version, func() (interface{}, error) {
		return c.version()
	})
}

func (c *mqlAristaEos) GetHostname() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Hostname, func() (string, error) {
		return c.hostname()
	})
}

func (c *mqlAristaEos) GetFqdn() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Fqdn, func() (string, error) {
		return c.fqdn()
	})
}

func (c *mqlAristaEos) GetUsers() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Users, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "users")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.users()
	})
}

func (c *mqlAristaEos) GetRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Roles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "roles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roles()
	})
}

func (c *mqlAristaEos) GetSnmp() *plugin.TValue[*mqlAristaEosSnmpSetting] {
	return plugin.GetOrCompute[*mqlAristaEosSnmpSetting](&c.Snmp, func() (*mqlAristaEosSnmpSetting, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "snmp")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAristaEosSnmpSetting), nil
			}
		}

		return c.snmp()
	})
}

func (c *mqlAristaEos) GetNtp() *plugin.TValue[*mqlAristaEosNtpSetting] {
	return plugin.GetOrCompute[*mqlAristaEosNtpSetting](&c.Ntp, func() (*mqlAristaEosNtpSetting, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos", c.__id, "ntp")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlAristaEosNtpSetting), nil
			}
		}

		return c.ntp()
	})
}

// mqlAristaEosRunningConfig for the arista.eos.runningConfig resource
type mqlAristaEosRunningConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosRunningConfigInternal it will be used here
	Content plugin.TValue[string]
}

// createAristaEosRunningConfig creates a new instance of this resource
func createAristaEosRunningConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosRunningConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.runningConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosRunningConfig) MqlName() string {
	return "arista.eos.runningConfig"
}

func (c *mqlAristaEosRunningConfig) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosRunningConfig) GetContent() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Content, func() (string, error) {
		return c.content()
	})
}

// mqlAristaEosRunningConfigSection for the arista.eos.runningConfig.section resource
type mqlAristaEosRunningConfigSection struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosRunningConfigSectionInternal it will be used here
	Name plugin.TValue[string]
	Content plugin.TValue[string]
}

// createAristaEosRunningConfigSection creates a new instance of this resource
func createAristaEosRunningConfigSection(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosRunningConfigSection{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.runningConfig.section", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosRunningConfigSection) MqlName() string {
	return "arista.eos.runningConfig.section"
}

func (c *mqlAristaEosRunningConfigSection) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosRunningConfigSection) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosRunningConfigSection) GetContent() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Content, func() (string, error) {
		return c.content()
	})
}

// mqlAristaEosUser for the arista.eos.user resource
type mqlAristaEosUser struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosUserInternal it will be used here
	Name plugin.TValue[string]
	Privilege plugin.TValue[string]
	Role plugin.TValue[string]
	Nopassword plugin.TValue[string]
	Format plugin.TValue[string]
	Secret plugin.TValue[string]
	Sshkey plugin.TValue[string]
}

// createAristaEosUser creates a new instance of this resource
func createAristaEosUser(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosUser{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.user", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosUser) MqlName() string {
	return "arista.eos.user"
}

func (c *mqlAristaEosUser) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosUser) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosUser) GetPrivilege() *plugin.TValue[string] {
	return &c.Privilege
}

func (c *mqlAristaEosUser) GetRole() *plugin.TValue[string] {
	return &c.Role
}

func (c *mqlAristaEosUser) GetNopassword() *plugin.TValue[string] {
	return &c.Nopassword
}

func (c *mqlAristaEosUser) GetFormat() *plugin.TValue[string] {
	return &c.Format
}

func (c *mqlAristaEosUser) GetSecret() *plugin.TValue[string] {
	return &c.Secret
}

func (c *mqlAristaEosUser) GetSshkey() *plugin.TValue[string] {
	return &c.Sshkey
}

// mqlAristaEosRole for the arista.eos.role resource
type mqlAristaEosRole struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosRoleInternal it will be used here
	Name plugin.TValue[string]
	Default plugin.TValue[bool]
	Rules plugin.TValue[[]interface{}]
}

// createAristaEosRole creates a new instance of this resource
func createAristaEosRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosRole{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.role", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosRole) MqlName() string {
	return "arista.eos.role"
}

func (c *mqlAristaEosRole) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosRole) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosRole) GetDefault() *plugin.TValue[bool] {
	return &c.Default
}

func (c *mqlAristaEosRole) GetRules() *plugin.TValue[[]interface{}] {
	return &c.Rules
}

// mqlAristaEosSnmpSetting for the arista.eos.snmpSetting resource
type mqlAristaEosSnmpSetting struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosSnmpSettingInternal it will be used here
	Enabled plugin.TValue[bool]
	Notifications plugin.TValue[[]interface{}]
}

// createAristaEosSnmpSetting creates a new instance of this resource
func createAristaEosSnmpSetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosSnmpSetting{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.snmpSetting", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosSnmpSetting) MqlName() string {
	return "arista.eos.snmpSetting"
}

func (c *mqlAristaEosSnmpSetting) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosSnmpSetting) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

func (c *mqlAristaEosSnmpSetting) GetNotifications() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Notifications, func() ([]interface{}, error) {
		return c.notifications()
	})
}

// mqlAristaEosNtpSetting for the arista.eos.ntpSetting resource
type mqlAristaEosNtpSetting struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosNtpSettingInternal it will be used here
	Status plugin.TValue[string]
}

// createAristaEosNtpSetting creates a new instance of this resource
func createAristaEosNtpSetting(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosNtpSetting{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.ntpSetting", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosNtpSetting) MqlName() string {
	return "arista.eos.ntpSetting"
}

func (c *mqlAristaEosNtpSetting) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosNtpSetting) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlAristaEosInterface for the arista.eos.interface resource
type mqlAristaEosInterface struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosInterfaceInternal it will be used here
	Name plugin.TValue[string]
	Bandwidth plugin.TValue[int64]
	BurnedInAddress plugin.TValue[string]
	Description plugin.TValue[string]
	ForwardingModel plugin.TValue[string]
	Hardware plugin.TValue[string]
	InterfaceAddress plugin.TValue[[]interface{}]
	InterfaceCounters plugin.TValue[interface{}]
	InterfaceMembership plugin.TValue[string]
	InterfaceStatistics plugin.TValue[interface{}]
	InterfaceStatus plugin.TValue[string]
	L2Mtu plugin.TValue[int64]
	LastStatusChangeTimestamp plugin.TValue[int64]
	LineProtocolStatus plugin.TValue[string]
	Mtu plugin.TValue[int64]
	PhysicalAddress plugin.TValue[string]
	Status plugin.TValue[interface{}]
}

// createAristaEosInterface creates a new instance of this resource
func createAristaEosInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosInterface{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.interface", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosInterface) MqlName() string {
	return "arista.eos.interface"
}

func (c *mqlAristaEosInterface) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosInterface) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosInterface) GetBandwidth() *plugin.TValue[int64] {
	return &c.Bandwidth
}

func (c *mqlAristaEosInterface) GetBurnedInAddress() *plugin.TValue[string] {
	return &c.BurnedInAddress
}

func (c *mqlAristaEosInterface) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlAristaEosInterface) GetForwardingModel() *plugin.TValue[string] {
	return &c.ForwardingModel
}

func (c *mqlAristaEosInterface) GetHardware() *plugin.TValue[string] {
	return &c.Hardware
}

func (c *mqlAristaEosInterface) GetInterfaceAddress() *plugin.TValue[[]interface{}] {
	return &c.InterfaceAddress
}

func (c *mqlAristaEosInterface) GetInterfaceCounters() *plugin.TValue[interface{}] {
	return &c.InterfaceCounters
}

func (c *mqlAristaEosInterface) GetInterfaceMembership() *plugin.TValue[string] {
	return &c.InterfaceMembership
}

func (c *mqlAristaEosInterface) GetInterfaceStatistics() *plugin.TValue[interface{}] {
	return &c.InterfaceStatistics
}

func (c *mqlAristaEosInterface) GetInterfaceStatus() *plugin.TValue[string] {
	return &c.InterfaceStatus
}

func (c *mqlAristaEosInterface) GetL2Mtu() *plugin.TValue[int64] {
	return &c.L2Mtu
}

func (c *mqlAristaEosInterface) GetLastStatusChangeTimestamp() *plugin.TValue[int64] {
	return &c.LastStatusChangeTimestamp
}

func (c *mqlAristaEosInterface) GetLineProtocolStatus() *plugin.TValue[string] {
	return &c.LineProtocolStatus
}

func (c *mqlAristaEosInterface) GetMtu() *plugin.TValue[int64] {
	return &c.Mtu
}

func (c *mqlAristaEosInterface) GetPhysicalAddress() *plugin.TValue[string] {
	return &c.PhysicalAddress
}

func (c *mqlAristaEosInterface) GetStatus() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Status, func() (interface{}, error) {
		return c.status()
	})
}

// mqlAristaEosIpInterface for the arista.eos.ipInterface resource
type mqlAristaEosIpInterface struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosIpInterfaceInternal it will be used here
	Name plugin.TValue[string]
	Address plugin.TValue[string]
	Mtu plugin.TValue[string]
}

// createAristaEosIpInterface creates a new instance of this resource
func createAristaEosIpInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosIpInterface{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.ipInterface", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosIpInterface) MqlName() string {
	return "arista.eos.ipInterface"
}

func (c *mqlAristaEosIpInterface) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosIpInterface) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosIpInterface) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlAristaEosIpInterface) GetMtu() *plugin.TValue[string] {
	return &c.Mtu
}

// mqlAristaEosStp for the arista.eos.stp resource
type mqlAristaEosStp struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosStpInternal it will be used here
	MstInstances plugin.TValue[[]interface{}]
}

// createAristaEosStp creates a new instance of this resource
func createAristaEosStp(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosStp{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.stp", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosStp) MqlName() string {
	return "arista.eos.stp"
}

func (c *mqlAristaEosStp) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosStp) GetMstInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.MstInstances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("arista.eos.stp", c.__id, "mstInstances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.mstInstances()
	})
}

// mqlAristaEosStpMst for the arista.eos.stp.mst resource
type mqlAristaEosStpMst struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosStpMstInternal it will be used here
	InstanceId plugin.TValue[string]
	Name plugin.TValue[string]
	Protocol plugin.TValue[string]
	Bridge plugin.TValue[interface{}]
	RootBridge plugin.TValue[interface{}]
	RegionalRootBridge plugin.TValue[interface{}]
	Interfaces plugin.TValue[[]interface{}]
}

// createAristaEosStpMst creates a new instance of this resource
func createAristaEosStpMst(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosStpMst{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.stp.mst", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosStpMst) MqlName() string {
	return "arista.eos.stp.mst"
}

func (c *mqlAristaEosStpMst) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosStpMst) GetInstanceId() *plugin.TValue[string] {
	return &c.InstanceId
}

func (c *mqlAristaEosStpMst) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosStpMst) GetProtocol() *plugin.TValue[string] {
	return &c.Protocol
}

func (c *mqlAristaEosStpMst) GetBridge() *plugin.TValue[interface{}] {
	return &c.Bridge
}

func (c *mqlAristaEosStpMst) GetRootBridge() *plugin.TValue[interface{}] {
	return &c.RootBridge
}

func (c *mqlAristaEosStpMst) GetRegionalRootBridge() *plugin.TValue[interface{}] {
	return &c.RegionalRootBridge
}

func (c *mqlAristaEosStpMst) GetInterfaces() *plugin.TValue[[]interface{}] {
	return &c.Interfaces
}

// mqlAristaEosSptMstInterface for the arista.eos.spt.mstInterface resource
type mqlAristaEosSptMstInterface struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlAristaEosSptMstInterfaceInternal it will be used here
	Id plugin.TValue[string]
	MstInstanceId plugin.TValue[string]
	Name plugin.TValue[string]
	Priority plugin.TValue[int64]
	LinkType plugin.TValue[string]
	State plugin.TValue[string]
	Cost plugin.TValue[int64]
	Role plugin.TValue[string]
	InconsistentFeatures plugin.TValue[interface{}]
	PortNumber plugin.TValue[int64]
	IsEdgePort plugin.TValue[bool]
	Detail plugin.TValue[interface{}]
	BoundaryType plugin.TValue[string]
	Counters plugin.TValue[interface{}]
	Features plugin.TValue[interface{}]
}

// createAristaEosSptMstInterface creates a new instance of this resource
func createAristaEosSptMstInterface(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlAristaEosSptMstInterface{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("arista.eos.spt.mstInterface", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlAristaEosSptMstInterface) MqlName() string {
	return "arista.eos.spt.mstInterface"
}

func (c *mqlAristaEosSptMstInterface) MqlID() string {
	return c.__id
}

func (c *mqlAristaEosSptMstInterface) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlAristaEosSptMstInterface) GetMstInstanceId() *plugin.TValue[string] {
	return &c.MstInstanceId
}

func (c *mqlAristaEosSptMstInterface) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlAristaEosSptMstInterface) GetPriority() *plugin.TValue[int64] {
	return &c.Priority
}

func (c *mqlAristaEosSptMstInterface) GetLinkType() *plugin.TValue[string] {
	return &c.LinkType
}

func (c *mqlAristaEosSptMstInterface) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlAristaEosSptMstInterface) GetCost() *plugin.TValue[int64] {
	return &c.Cost
}

func (c *mqlAristaEosSptMstInterface) GetRole() *plugin.TValue[string] {
	return &c.Role
}

func (c *mqlAristaEosSptMstInterface) GetInconsistentFeatures() *plugin.TValue[interface{}] {
	return &c.InconsistentFeatures
}

func (c *mqlAristaEosSptMstInterface) GetPortNumber() *plugin.TValue[int64] {
	return &c.PortNumber
}

func (c *mqlAristaEosSptMstInterface) GetIsEdgePort() *plugin.TValue[bool] {
	return &c.IsEdgePort
}

func (c *mqlAristaEosSptMstInterface) GetDetail() *plugin.TValue[interface{}] {
	return &c.Detail
}

func (c *mqlAristaEosSptMstInterface) GetBoundaryType() *plugin.TValue[string] {
	return &c.BoundaryType
}

func (c *mqlAristaEosSptMstInterface) GetCounters() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Counters, func() (interface{}, error) {
		return c.counters()
	})
}

func (c *mqlAristaEosSptMstInterface) GetFeatures() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Features, func() (interface{}, error) {
		return c.features()
	})
}
