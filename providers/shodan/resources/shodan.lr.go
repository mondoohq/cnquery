// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/v11/llx"
	"go.mondoo.com/cnquery/v11/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v11/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"shodan": {
			// to override args, implement: initShodan(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createShodan,
		},
		"shodan.host": {
			Init: initShodanHost,
			Create: createShodanHost,
		},
		"shodan.domain": {
			Init: initShodanDomain,
			Create: createShodanDomain,
		},
		"shodan.nsrecord": {
			// to override args, implement: initShodanNsrecord(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createShodanNsrecord,
		},
		"shodan.profile": {
			Init: initShodanProfile,
			Create: createShodanProfile,
		},
		"shodan.apiPlan": {
			Init: initShodanApiPlan,
			Create: createShodanApiPlan,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"shodan.host.ip": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetIp()).ToDataRes(types.String)
	},
	"shodan.host.os": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetOs()).ToDataRes(types.String)
	},
	"shodan.host.org": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetOrg()).ToDataRes(types.String)
	},
	"shodan.host.isp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetIsp()).ToDataRes(types.String)
	},
	"shodan.host.asn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetAsn()).ToDataRes(types.String)
	},
	"shodan.host.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetTags()).ToDataRes(types.Array(types.String))
	},
	"shodan.host.hostnames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetHostnames()).ToDataRes(types.Array(types.String))
	},
	"shodan.host.ports": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetPorts()).ToDataRes(types.Array(types.Int))
	},
	"shodan.host.vulnerabilities": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanHost).GetVulnerabilities()).ToDataRes(types.Array(types.String))
	},
	"shodan.domain.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanDomain).GetName()).ToDataRes(types.String)
	},
	"shodan.domain.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanDomain).GetTags()).ToDataRes(types.Array(types.String))
	},
	"shodan.domain.subdomains": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanDomain).GetSubdomains()).ToDataRes(types.Array(types.String))
	},
	"shodan.domain.nsrecords": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanDomain).GetNsrecords()).ToDataRes(types.Array(types.Resource("shodan.nsrecord")))
	},
	"shodan.nsrecord.domain": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanNsrecord).GetDomain()).ToDataRes(types.String)
	},
	"shodan.nsrecord.subdomain": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanNsrecord).GetSubdomain()).ToDataRes(types.String)
	},
	"shodan.nsrecord.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanNsrecord).GetType()).ToDataRes(types.String)
	},
	"shodan.nsrecord.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanNsrecord).GetValue()).ToDataRes(types.String)
	},
	"shodan.nsrecord.lastSeen": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanNsrecord).GetLastSeen()).ToDataRes(types.Time)
	},
	"shodan.profile.member": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanProfile).GetMember()).ToDataRes(types.Bool)
	},
	"shodan.profile.credits": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanProfile).GetCredits()).ToDataRes(types.Int)
	},
	"shodan.profile.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanProfile).GetDisplayName()).ToDataRes(types.String)
	},
	"shodan.profile.createdAt": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanProfile).GetCreatedAt()).ToDataRes(types.Time)
	},
	"shodan.apiPlan.scanCredits": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetScanCredits()).ToDataRes(types.Int)
	},
	"shodan.apiPlan.plan": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetPlan()).ToDataRes(types.String)
	},
	"shodan.apiPlan.unlocked": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetUnlocked()).ToDataRes(types.Bool)
	},
	"shodan.apiPlan.unlockedLeft": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetUnlockedLeft()).ToDataRes(types.Int)
	},
	"shodan.apiPlan.telnet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetTelnet()).ToDataRes(types.Bool)
	},
	"shodan.apiPlan.monitoredIps": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlShodanApiPlan).GetMonitoredIps()).ToDataRes(types.Int)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"shodan.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodan).__id, ok = v.Value.(string)
			return
		},
	"shodan.host.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodanHost).__id, ok = v.Value.(string)
			return
		},
	"shodan.host.ip": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Ip, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.host.os": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Os, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.host.org": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Org, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.host.isp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Isp, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.host.asn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Asn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.host.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.host.hostnames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Hostnames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.host.ports": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Ports, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.host.vulnerabilities": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanHost).Vulnerabilities, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.domain.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodanDomain).__id, ok = v.Value.(string)
			return
		},
	"shodan.domain.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanDomain).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.domain.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanDomain).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.domain.subdomains": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanDomain).Subdomains, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.domain.nsrecords": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanDomain).Nsrecords, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"shodan.nsrecord.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodanNsrecord).__id, ok = v.Value.(string)
			return
		},
	"shodan.nsrecord.domain": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanNsrecord).Domain, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.nsrecord.subdomain": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanNsrecord).Subdomain, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.nsrecord.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanNsrecord).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.nsrecord.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanNsrecord).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.nsrecord.lastSeen": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanNsrecord).LastSeen, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"shodan.profile.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodanProfile).__id, ok = v.Value.(string)
			return
		},
	"shodan.profile.member": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanProfile).Member, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"shodan.profile.credits": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanProfile).Credits, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"shodan.profile.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanProfile).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.profile.createdAt": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanProfile).CreatedAt, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlShodanApiPlan).__id, ok = v.Value.(string)
			return
		},
	"shodan.apiPlan.scanCredits": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).ScanCredits, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.plan": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).Plan, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.unlocked": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).Unlocked, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.unlockedLeft": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).UnlockedLeft, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.telnet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).Telnet, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"shodan.apiPlan.monitoredIps": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlShodanApiPlan).MonitoredIps, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[shodan] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[shodan] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlShodan for the shodan resource
type mqlShodan struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanInternal it will be used here
}

// createShodan creates a new instance of this resource
func createShodan(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodan{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodan) MqlName() string {
	return "shodan"
}

func (c *mqlShodan) MqlID() string {
	return c.__id
}

// mqlShodanHost for the shodan.host resource
type mqlShodanHost struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanHostInternal it will be used here
	Ip plugin.TValue[string]
	Os plugin.TValue[string]
	Org plugin.TValue[string]
	Isp plugin.TValue[string]
	Asn plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	Hostnames plugin.TValue[[]interface{}]
	Ports plugin.TValue[[]interface{}]
	Vulnerabilities plugin.TValue[[]interface{}]
}

// createShodanHost creates a new instance of this resource
func createShodanHost(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodanHost{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan.host", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodanHost) MqlName() string {
	return "shodan.host"
}

func (c *mqlShodanHost) MqlID() string {
	return c.__id
}

func (c *mqlShodanHost) GetIp() *plugin.TValue[string] {
	return &c.Ip
}

func (c *mqlShodanHost) GetOs() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Os, func() (string, error) {
		return c.os()
	})
}

func (c *mqlShodanHost) GetOrg() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Org, func() (string, error) {
		return c.org()
	})
}

func (c *mqlShodanHost) GetIsp() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Isp, func() (string, error) {
		return c.isp()
	})
}

func (c *mqlShodanHost) GetAsn() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Asn, func() (string, error) {
		return c.asn()
	})
}

func (c *mqlShodanHost) GetTags() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Tags, func() ([]interface{}, error) {
		return c.tags()
	})
}

func (c *mqlShodanHost) GetHostnames() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Hostnames, func() ([]interface{}, error) {
		return c.hostnames()
	})
}

func (c *mqlShodanHost) GetPorts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Ports, func() ([]interface{}, error) {
		return c.ports()
	})
}

func (c *mqlShodanHost) GetVulnerabilities() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vulnerabilities, func() ([]interface{}, error) {
		return c.vulnerabilities()
	})
}

// mqlShodanDomain for the shodan.domain resource
type mqlShodanDomain struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanDomainInternal it will be used here
	Name plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	Subdomains plugin.TValue[[]interface{}]
	Nsrecords plugin.TValue[[]interface{}]
}

// createShodanDomain creates a new instance of this resource
func createShodanDomain(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodanDomain{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan.domain", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodanDomain) MqlName() string {
	return "shodan.domain"
}

func (c *mqlShodanDomain) MqlID() string {
	return c.__id
}

func (c *mqlShodanDomain) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlShodanDomain) GetTags() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Tags, func() ([]interface{}, error) {
		return c.tags()
	})
}

func (c *mqlShodanDomain) GetSubdomains() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subdomains, func() ([]interface{}, error) {
		return c.subdomains()
	})
}

func (c *mqlShodanDomain) GetNsrecords() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Nsrecords, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("shodan.domain", c.__id, "nsrecords")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.nsrecords()
	})
}

// mqlShodanNsrecord for the shodan.nsrecord resource
type mqlShodanNsrecord struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanNsrecordInternal it will be used here
	Domain plugin.TValue[string]
	Subdomain plugin.TValue[string]
	Type plugin.TValue[string]
	Value plugin.TValue[string]
	LastSeen plugin.TValue[*time.Time]
}

// createShodanNsrecord creates a new instance of this resource
func createShodanNsrecord(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodanNsrecord{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan.nsrecord", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodanNsrecord) MqlName() string {
	return "shodan.nsrecord"
}

func (c *mqlShodanNsrecord) MqlID() string {
	return c.__id
}

func (c *mqlShodanNsrecord) GetDomain() *plugin.TValue[string] {
	return &c.Domain
}

func (c *mqlShodanNsrecord) GetSubdomain() *plugin.TValue[string] {
	return &c.Subdomain
}

func (c *mqlShodanNsrecord) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlShodanNsrecord) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlShodanNsrecord) GetLastSeen() *plugin.TValue[*time.Time] {
	return &c.LastSeen
}

// mqlShodanProfile for the shodan.profile resource
type mqlShodanProfile struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanProfileInternal it will be used here
	Member plugin.TValue[bool]
	Credits plugin.TValue[int64]
	DisplayName plugin.TValue[string]
	CreatedAt plugin.TValue[*time.Time]
}

// createShodanProfile creates a new instance of this resource
func createShodanProfile(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodanProfile{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan.profile", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodanProfile) MqlName() string {
	return "shodan.profile"
}

func (c *mqlShodanProfile) MqlID() string {
	return c.__id
}

func (c *mqlShodanProfile) GetMember() *plugin.TValue[bool] {
	return &c.Member
}

func (c *mqlShodanProfile) GetCredits() *plugin.TValue[int64] {
	return &c.Credits
}

func (c *mqlShodanProfile) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlShodanProfile) GetCreatedAt() *plugin.TValue[*time.Time] {
	return &c.CreatedAt
}

// mqlShodanApiPlan for the shodan.apiPlan resource
type mqlShodanApiPlan struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlShodanApiPlanInternal it will be used here
	ScanCredits plugin.TValue[int64]
	Plan plugin.TValue[string]
	Unlocked plugin.TValue[bool]
	UnlockedLeft plugin.TValue[int64]
	Telnet plugin.TValue[bool]
	MonitoredIps plugin.TValue[int64]
}

// createShodanApiPlan creates a new instance of this resource
func createShodanApiPlan(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlShodanApiPlan{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("shodan.apiPlan", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlShodanApiPlan) MqlName() string {
	return "shodan.apiPlan"
}

func (c *mqlShodanApiPlan) MqlID() string {
	return c.__id
}

func (c *mqlShodanApiPlan) GetScanCredits() *plugin.TValue[int64] {
	return &c.ScanCredits
}

func (c *mqlShodanApiPlan) GetPlan() *plugin.TValue[string] {
	return &c.Plan
}

func (c *mqlShodanApiPlan) GetUnlocked() *plugin.TValue[bool] {
	return &c.Unlocked
}

func (c *mqlShodanApiPlan) GetUnlockedLeft() *plugin.TValue[int64] {
	return &c.UnlockedLeft
}

func (c *mqlShodanApiPlan) GetTelnet() *plugin.TValue[bool] {
	return &c.Telnet
}

func (c *mqlShodanApiPlan) GetMonitoredIps() *plugin.TValue[int64] {
	return &c.MonitoredIps
}
