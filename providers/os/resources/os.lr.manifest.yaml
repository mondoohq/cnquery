# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

resources:
  asset:
    fields:
      vulnerabilityReport: {}
    min_mondoo_version: latest
  asset.eol:
    fields:
      date: {}
      docsUrl: {}
      productUrl: {}
    min_mondoo_version: latest
  audit.advisory:
    fields:
      description: {}
      id: {}
      modified: {}
      mrn: {}
      published: {}
      title: {}
      worstScore: {}
    is_private: true
    min_mondoo_version: 5.15.0
  audit.cve:
    fields:
      id: {}
      modified: {}
      mrn: {}
      published: {}
      state: {}
      summary: {}
      unscored: {}
      worstScore: {}
    is_private: true
    min_mondoo_version: 5.15.0
  audit.cvss:
    fields:
      score: {}
      vector: {}
    is_private: true
    min_mondoo_version: 5.15.0
  auditpol:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
    snippets:
    - query: auditpol { inclusionsetting exclusionsetting subcategory }
      title: List all audit policies
    - query: |
        auditpol.where(subcategory == 'Sensitive Privilege Use') {
          inclusionsetting == 'Success and Failure'
        }
      title: Check a specific auditpol configuration
  auditpol.entry:
    fields:
      exclusionsetting: {}
      inclusionsetting: {}
      machinename: {}
      policytarget: {}
      subcategory: {}
      subcategoryguid: {}
    min_mondoo_version: 5.15.0
  authorizedkeys:
    fields:
      content: {}
      file: {}
      list: {}
      path: {}
    min_mondoo_version: 5.15.0
  authorizedkeys.entry:
    fields:
      file: {}
      key: {}
      label: {}
      line: {}
      options: {}
      type: {}
    min_mondoo_version: latest
  command:
    fields:
      command: {}
      exitcode: {}
      stderr: {}
      stdout: {}
    min_mondoo_version: 5.15.0
  container.image:
    fields:
      identifier: {}
      identifierType: {}
      name: {}
      reference:
        min_mondoo_version: latest
      repository: {}
    min_mondoo_version: 5.31.0
  container.repository:
    fields:
      fullName: {}
      name: {}
      registry: {}
      scheme: {}
    min_mondoo_version: 5.31.0
  docker:
    fields:
      containers: {}
      images: {}
    min_mondoo_version: 5.15.0
  docker.container:
    fields:
      command: {}
      id: {}
      image: {}
      imageid: {}
      labels: {}
      names: {}
      os:
        min_mondoo_version: 6.19.0
      state: {}
      status: {}
    min_mondoo_version: 5.15.0
  docker.image:
    fields:
      id: {}
      labels: {}
      size: {}
      tags: {}
      virtualsize: {}
    min_mondoo_version: 5.15.0
  equinix.metal.device:
    fields:
      billingCycle: {}
      createdAt: {}
      description: {}
      hostname: {}
      id: {}
      locked: {}
      os: {}
      shortID: {}
      spotInstance: {}
      state: {}
      updatedAt: {}
      url: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.organization:
    fields:
      address: {}
      billingPhone: {}
      createdAt: {}
      creditAmount: {}
      description: {}
      id: {}
      mainPhone: {}
      name: {}
      taxId: {}
      twitter: {}
      updatedAt: {}
      url: {}
      website: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.project:
    fields:
      createdAt: {}
      devices: {}
      id: {}
      name: {}
      organization: {}
      paymentMethod: {}
      sshKeys: {}
      updatedAt: {}
      url: {}
      users: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.sshkey:
    fields:
      createdAt: {}
      fingerPrint: {}
      id: {}
      key: {}
      label: {}
      updatedAt: {}
      url: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  equinix.metal.user:
    fields:
      avatarUrl: {}
      createdAt: {}
      email: {}
      facebook: {}
      firstName: {}
      fullName: {}
      id: {}
      lastName: {}
      linkedin: {}
      phoneNumber: {}
      timezone: {}
      twitter: {}
      twoFactorAuth: {}
      updatedAt: {}
      url: {}
      vpn: {}
    maturity: experimental
    min_mondoo_version: 5.15.0
    platform:
      name:
      - equinix
  file:
    fields:
      basename: {}
      content: {}
      dirname: {}
      empty:
        min_mondoo_version: 5.18.0
      exists: {}
      group: {}
      path: {}
      permissions: {}
      size: {}
      user: {}
    min_mondoo_version: 5.0.0
    snippets:
    - query: |
        file('/etc') {
          exists
          permissions.isDirectory
        }
      title: Test if a directory exists
  file.permissions:
    fields:
      group_executable: {}
      group_readable: {}
      group_writeable: {}
      isDirectory: {}
      isFile: {}
      isSymlink: {}
      mode: {}
      other_executable: {}
      other_readable: {}
      other_writeable: {}
      sgid: {}
      sticky: {}
      string:
        min_mondoo_version: latest
      suid: {}
      user_executable: {}
      user_readable: {}
      user_writeable: {}
    is_private: true
    min_mondoo_version: 5.15.0
  files:
    fields: {}
    min_mondoo_version: latest
  files.find:
    fields:
      from: {}
      list:
        min_mondoo_version: latest
      name: {}
      permissions: {}
      regex: {}
      type: {}
      xdev: {}
    min_mondoo_version: 5.15.0
  group:
    fields:
      gid: {}
      members: {}
      name: {}
      sid: {}
    min_mondoo_version: 5.15.0
  groups:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
    snippets:
    - query: groups.where(name == 'wheel').list { members.all( name != 'username')}
      title: Ensure the user is not part of group
  ip6tables:
    fields:
      input: {}
      output: {}
    min_mondoo_version: 5.15.0
  iptables:
    fields:
      input: {}
      output: {}
    min_mondoo_version: 5.15.0
  iptables.entry:
    fields:
      bytes: {}
      chain: {}
      destination: {}
      in: {}
      lineNumber: {}
      opt: {}
      options: {}
      out: {}
      packets: {}
      protocol: {}
      source: {}
      target: {}
    min_mondoo_version: 5.15.0
  kernel:
    fields:
      info: {}
      installed: {}
      modules: {}
      parameters: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: kernel.modules { name loaded size }
      title: List all kernel modules
    - query: kernel.modules.where( loaded == true ) { name }
      title: List all loaded kernel modules
    - query: kernel { info }
      title: List all information from running kernel
    - query: kernel { info['version'] }
      title: List version from running kernel
  kernel.module:
    fields:
      loaded: {}
      name: {}
      size: {}
    min_mondoo_version: 5.15.0
  kubelet:
    fields:
      configFile: {}
      configuration: {}
      process: {}
    min_mondoo_version: latest
  logindefs:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  lsblk:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
  lsblk.entry:
    fields:
      fstype: {}
      label: {}
      mountpoints: {}
      name: {}
      uuid: {}
    min_mondoo_version: 5.15.0
  machine:
    fields: {}
    min_mondoo_version: 5.15.0
  machine.baseboard:
    fields:
      assetTag: {}
      manufacturer: {}
      product: {}
      serial: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.bios:
    fields:
      releaseDate: {}
      vendor: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.chassis:
    fields:
      assetTag: {}
      manufacturer: {}
      serial: {}
      version: {}
    min_mondoo_version: 5.15.0
  machine.system:
    fields:
      family: {}
      manufacturer: {}
      product: {}
      serial: {}
      sku: {}
      uuid: {}
      version: {}
    min_mondoo_version: 5.15.0
  macos:
    fields:
      globalAccountPolicies: {}
      userHostPreferences: {}
      userPreferences: {}
    min_mondoo_version: 5.15.0
  macos.alf:
    fields:
      allowDownloadSignedEnabled: {}
      allowSignedEnabled: {}
      applications: {}
      exceptions: {}
      explicitAuths: {}
      firewallUnload: {}
      globalState: {}
      loggingEnabled: {}
      loggingOption: {}
      stealthEnabled: {}
      version: {}
    min_mondoo_version: 5.15.0
  macos.security:
    fields:
      authorizationDB: {}
    min_mondoo_version: 5.15.0
  macos.systemsetup:
    fields:
      allowPowerButtonToSleepComputer: {}
      computerName: {}
      date: {}
      disableKeyboardWhenEnclosureLockIsEngaged: {}
      displaySleep: {}
      harddiskSleep: {}
      localSubnetName: {}
      networkTimeServer: {}
      remoteAppleEvents: {}
      remoteLogin: {}
      restartFreeze: {}
      restartPowerFailure: {}
      sleep: {}
      startupDisk: {}
      time: {}
      timeZone: {}
      usingNetworkTime: {}
      waitForStartupAfterPowerFailure: {}
      wakeOnModem: {}
      wakeOnNetworkAccess: {}
    min_mondoo_version: 5.15.0
  macos.timemachine:
    fields:
      preferences: {}
    min_mondoo_version: 5.15.0
  mondoo.eol:
    fields:
      date: {}
      product: {}
      version: {}
    is_private: true
    min_mondoo_version: latest
  mount:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
    snippets:
    - query: mount.list { path device fstype options }
      title: List all mount points
    - query: mount.one( path == "/" )
      title: Ensure the mountpoint exists
    - query: |
        mount.where( path == "/" ) {
          device == '/dev/mapper/vg00-lv_root'
          fstype == 'xfs'
          options['rw'] != null
          options['relatime'] != null
          options['seclabel'] != null
          options['attr2'] != null
          options['inode64'] != null
          options['noquota'] != null
        }
      title: Check mountpoint configuration
  mount.point:
    fields:
      device: {}
      fstype: {}
      mounted: {}
      options: {}
      path: {}
    min_mondoo_version: 5.15.0
  ntp.conf:
    fields:
      content: {}
      file: {}
      fudge: {}
      restrict: {}
      servers: {}
      settings: {}
    min_mondoo_version: 5.15.0
  os:
    fields:
      env: {}
      hostname: {}
      machineid: {}
      name: {}
      path: {}
      rebootpending: {}
      updates: {}
      uptime: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: os.env
      title: Show all environment variables
    - query: os.env['windir']
      title: Retrieve a single environment variable
  os.base:
    fields:
      env: {}
      groups: {}
      hostname: {}
      machine: {}
      name: {}
      path: {}
      rebootpending: {}
      updates: {}
      uptime: {}
      users: {}
    min_mondoo_version: 6.19.0
  os.linux:
    fields:
      ip6tables: {}
      iptables: {}
      unix: {}
    min_mondoo_version: 6.19.0
  os.rootCertificates:
    fields:
      content: {}
      files: {}
      list: {}
    min_mondoo_version: 5.15.0
  os.unix:
    fields:
      base: {}
    min_mondoo_version: 6.19.0
  os.update:
    fields:
      category: {}
      format: {}
      name: {}
      restart: {}
      severity: {}
    min_mondoo_version: 5.15.0
  package:
    fields:
      arch: {}
      available: {}
      description: {}
      epoch: {}
      format: {}
      installed: {}
      name: {}
      origin: {}
      outdated: {}
      status: {}
      version: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: package('git').installed
      title: Check if a package is installed
  packages:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
  pam.conf:
    fields:
      content: {}
      entries: {}
      files: {}
      services: {}
    min_mondoo_version: 5.15.0
  pam.conf.serviceEntry:
    fields:
      control: {}
      lineNumber: {}
      module: {}
      options: {}
      pamType: {}
      service: {}
    is_private: true
    min_mondoo_version: 5.15.0
  parse.certificates:
    fields:
      content: {}
      file: {}
      list:
        min_mondoo_version: latest
      path: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: parse.certificates('/etc/ssl/cert.pem').list { issuer.dn }
      title: Parse Certificates from target file system
    - query: 'parse.certificates(content: ''PEM CONTENT'').list { issuer.dn }'
      title: Parse Certificates from content
  parse.ini:
    fields:
      content: {}
      delimiter: {}
      file: {}
      params: {}
      sections: {}
    min_mondoo_version: 5.15.0
  parse.json:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: 'parse.json(content: ''{ "a": "b"  }'').params'
      title: Parse JSON from string content
    - query: parse.json("/path/to/test.json").params
      title: Parse JSON from file
  parse.openpgp:
    fields:
      content: {}
      file: {}
      list: {}
      path: {}
    min_mondoo_version: latest
  parse.plist:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  parse.yaml:
    fields:
      content: {}
      file: {}
      params: {}
    min_mondoo_version: 5.15.0
  platform.advisories:
    fields:
      cvss: {}
      list: {}
      stats: {}
    min_mondoo_version: 5.15.0
  platform.cves:
    fields:
      cvss: {}
      list: {}
      stats: {}
    min_mondoo_version: 5.15.0
  platform.eol:
    fields:
      date: {}
      docsUrl: {}
      productUrl: {}
    min_mondoo_version: 5.15.0
  port:
    fields:
      address: {}
      port: {}
      process: {}
      protocol: {}
      remoteAddress: {}
      remotePort: {}
      state: {}
      tls: {}
      user: {}
    min_mondoo_version: 5.15.0
  ports:
    fields:
      list: {}
      listening: {}
    min_mondoo_version: latest
  powershell:
    fields:
      exitcode: {}
      script: {}
      stderr: {}
      stdout: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        powershell('Get-WmiObject -Class Win32_volume -Filter "DriveType=3"| Select Label') {
          stdout == /PAGEFILE/
          stderr == ''
        }
      title: Run custom powershell command
    - query: |
        powershell('tzutil /g') {
          stdout.trim == 'GMT Standard Time'
          stderr == ''
        }
      title: Check the timezone
  privatekey:
    fields:
      encrypted: {}
      file: {}
      path: {}
      pem: {}
    min_mondoo_version: 5.15.0
  process:
    fields:
      command: {}
      executable: {}
      flags: {}
      pid: {}
      state: {}
    min_mondoo_version: 5.15.0
  processes:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
  python:
    fields:
      children: {}
      packages: {}
      path: {}
      toplevel: {}
    min_mondoo_version: latest
  python.package:
    fields:
      author: {}
      dependencies: {}
      file: {}
      id: {}
      licences: {}
      license: {}
      licenses: {}
      name: {}
      path: {}
      summary: {}
      version: {}
    min_mondoo_version: latest
  python.packages:
    fields:
      "": {}
      children: {}
      packages: {}
    min_mondoo_version: latest
  registrykey:
    fields:
      children: {}
      exists: {}
      items:
        min_mondoo_version: 8.19.0
      path: {}
      properties: {}
    min_mondoo_version: 5.15.0
  registrykey.property:
    fields:
      data:
        min_mondoo_version: 8.19.0
      exists: {}
      name: {}
      path: {}
      type:
        min_mondoo_version: 8.19.0
      value: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        registrykey.property(path: 'HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\EventLog\System', name: 'MaxSize') {
          value >= 32768
        }
      title: Verify a registry key property
  rsyslog.conf:
    fields:
      content: {}
      files: {}
      path:
        min_mondoo_version: latest
      settings: {}
    min_mondoo_version: 5.15.0
  secpol:
    fields:
      eventaudit: {}
      privilegerights: {}
      registryvalues: {}
      systemaccess: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: secpol.privilegerights['SeRemoteShutdownPrivilege'].contains( _ == 'S-1-5-32-544')
      title: Check that a specific SID is included in the privilege rights
  service:
    fields:
      description: {}
      enabled: {}
      installed: {}
      masked: {}
      name: {}
      running: {}
      type: {}
    min_mondoo_version: 5.15.0
  services:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
  shadow:
    fields:
      list:
        min_mondoo_version: latest
    min_mondoo_version: 5.15.0
  shadow.entry:
    fields:
      expirydates: {}
      inactivedays: {}
      lastchanged: {}
      maxdays: {}
      mindays: {}
      password: {}
      reserved: {}
      user: {}
      warndays: {}
    min_mondoo_version: 5.15.0
  sshd:
    fields: {}
    min_mondoo_version: 5.15.0
  sshd.config:
    fields:
      ciphers: {}
      content: {}
      file: {}
      files:
        min_mondoo_version: latest
      hostkeys: {}
      kexs: {}
      macs: {}
      params: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: sshd.config.params['Banner'] == '/etc/ssh/sshd-banner'
      title: Check that the SSH banner is sourced from /etc/ssh/sshd-banner
  user:
    fields:
      authorizedkeys: {}
      enabled: {}
      gid: {}
      group: {}
      home: {}
      name: {}
      shell: {}
      sid: {}
      sshkeys: {}
      uid: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        user(name: 'vagrant') { home uid }
      title: Display a specific user's home directory and UID
  users:
    fields:
      list: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: users.list { uid name }
      title: Display all users and their UID
    - query: users.one( name == 'root')
      title: Ensure user exists
    - query: users.none(name == 'vagrant')
      title: Ensure user does not exist
    - query: |
        users.where( sid == /S-1-5-21-\d+-\d+-\d+-501/ ).list {
          name != "Guest"
        }
      title: Search for a specific SID and check for its values
  windows:
    fields:
      computerInfo: {}
      features: {}
      hotfixes: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: windows.computerInfo['WindowsInstallationType'] == 'Server Core'
      title: Check the OS Edition
  windows.bitlocker:
    fields:
      volumes: {}
    min_mondoo_version: 5.35.0
  windows.bitlocker.volume:
    fields:
      conversionStatus: {}
      deviceID: {}
      driveLetter: {}
      encryptionMethod: {}
      lockStatus: {}
      persistentVolumeID: {}
      protectionStatus: {}
      version: {}
    min_mondoo_version: 5.35.0
  windows.feature:
    fields:
      description: {}
      displayName: {}
      installState: {}
      installed: {}
      name: {}
      path: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: windows.feature('SNMP-Service').installed
      title: Check that a Windows features is installed
    - query: windows.feature('Windows-Defender').installed == false
      title: Check that a specific feature is not installed
  windows.firewall:
    fields:
      profiles: {}
      rules: {}
      settings: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        windows.firewall.rules.where ( displayName == "File and Printer Sharing (Echo Request - ICMPv4-In)") {
          enabled == 1
        }
      title: Check a specific Windows Firewall rule
  windows.firewall.profile:
    fields:
      allowInboundRules: {}
      allowLocalFirewallRules: {}
      allowLocalIPsecRules: {}
      allowUnicastResponseToMulticast: {}
      allowUserApps: {}
      allowUserPorts: {}
      defaultInboundAction: {}
      defaultOutboundAction: {}
      enableStealthModeForIPsec: {}
      enabled: {}
      instanceID: {}
      logAllowed: {}
      logBlocked: {}
      logFileName: {}
      logIgnored: {}
      logMaxSizeKilobytes: {}
      name: {}
      notifyOnListen: {}
    min_mondoo_version: 5.15.0
  windows.firewall.rule:
    fields:
      action: {}
      description: {}
      direction: {}
      displayGroup: {}
      displayName: {}
      edgeTraversalPolicy: {}
      enabled: {}
      enforcementStatus: {}
      instanceID: {}
      localOnlyMapping: {}
      looseSourceMapping: {}
      name: {}
      policyStoreSource: {}
      policyStoreSourceType: {}
      primaryStatus: {}
      status: {}
    min_mondoo_version: 5.15.0
  windows.hotfix:
    fields:
      caption: {}
      description: {}
      hotfixId: {}
      installedBy: {}
      installedOn: {}
    min_mondoo_version: 5.15.0
  windows.security:
    fields:
      products: {}
    min_mondoo_version: 5.35.0
  windows.security.health:
    fields:
      antiSpyware: {}
      antiVirus: {}
      autoUpdate: {}
      firewall: {}
      internetSettings: {}
      securityCenterService: {}
      uac: {}
    min_mondoo_version: 5.35.0
  windows.security.product:
    fields:
      guid: {}
      name: {}
      productState: {}
      signatureState: {}
      state: {}
      timestamp: {}
      type: {}
    is_private: true
    min_mondoo_version: 5.35.0
  yaml.path:
    fields:
      filepath: {}
      jsonpath: {}
      result: {}
    min_mondoo_version: 5.15.0
  yum:
    fields:
      repos: {}
      vars: {}
    min_mondoo_version: 5.15.0
  yum.repo:
    fields:
      baseurl: {}
      enabled: {}
      expire: {}
      file:
        min_mondoo_version: 5.18.0
      filename: {}
      id: {}
      mirrors: {}
      name: {}
      pkgs: {}
      revision: {}
      size: {}
      status: {}
    min_mondoo_version: 5.15.0
    snippets:
    - query: |
        yum.repo('salt-latest') {
          enabled
        }
      title: Check if a yum repo is enabled
