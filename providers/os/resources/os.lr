option provider = "go.mondoo.com/cnquery/providers/os"
option go_package = "go.mondoo.com/cnquery/providers/os/resources"

alias os.base.command = command
alias os.base.user = user
alias os.base.group = group
alias os.base.file = file
alias os.base.packages = packages
alias os.base.service = service
alias os.base.services = services
alias os.unix.sshd = sshd

// Results of running a command on the system
command {
  init(command string)
  // Raw contents of the command
  command string
  // Standard output from running the command
  stdout(command) string
  // Standard error output from running the command
  stderr(command) string
  // Exit code the command returned
  exitcode(command) int
}

// File on the system
file @defaults("path size permissions.string") {
  init(path string)
  // Location of the file on the system
  path string
  // Filename without path prefix of this file
  basename(path) string
  // Path to the folder containing this file
  dirname(path) string
  // Contents of this file
  content(path, exists) string
  // Indicator if this file exists on the system
  exists(path) bool
  // Permissions for this file
  permissions(path) file.permissions
  // Size of this file on disk
  size(path) int
  // Ownership information about the user
  user() user
  // Ownership information about the group
  group() group
  // Denotes whether the path is empty
  empty(path) bool
}

// Access permissions for a given file
private file.permissions @defaults("string") {
  // Raw POSIX mode for the permissions
  mode int
  // Indicator if this file is readable by its owner
  user_readable bool
  // Indicator if this file is writeable by its owner
  user_writeable bool
  // Indicator if this file is executable by its owner
  user_executable bool
  // Indicator if this file is readable by members of the group
  group_readable bool
  // Indicator if this file is writeable by members of the group
  group_writeable bool
  // Indicator if this file is executable by members of the group
  group_executable bool
  // Indicator if this file is readable by others
  other_readable bool
  // Indicator if this file is writeable by others
  other_writeable bool
  // Indicator if this file is executable by others
  other_executable bool
  // SUID bit indicator
  suid bool
  // SGID bit indicator
  sgid bool
  // Sticky bit indicator
  sticky bool
  // Whether the file describes a directory
  isDirectory bool
  // Whether the file describes a regular file
  isFile bool
  // Whether the file is a symlink
  isSymlink bool
  // A simple printed string version of the permissions
  string() string
}

files {}

// Find files on the system
files.find {
  []file
  // From sets the starting point for the search operation
  from string
  // xdev indicates if other devices will be searched
  xdev bool
  // What types of files will be listed (directories, files, devices, etc)
  type string
  // A regular expression for the file search
  regex string
  // What permissions the file matches
  permissions int
  // Search name of the name
  name string
}

// Parse INI files
parse.ini {
  init(path string, delimiter string)
  // Symbol that is separating keys and values
  delimiter string
  // File that is being parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // A map of sections and key-value pairs
  sections(content, delimiter) map[string]map[string]string
  // A map of parameters that don't belong to sections
  params(sections) map[string]string
}

// Parse JSON files
parse.json {
  init(path string)
  // File that is being parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse plist files
parse.plist {
  init(path string)
  // File that is being parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse YAML files
parse.yaml {
  init(path string)
  // File that is being parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// User on this system
user @defaults("name uid gid") {
  // User ID
  uid int
  // User's Group ID
  gid int
  // User's Security Identifier (Windows)
  sid string
  // Name of the user
  name string
  // Home folder
  home string
  // Default shell configured
  shell string
  // Indicates if the user is enabled
  enabled bool
  // List of authorized keys
  authorizedkeys(home) authorizedkeys
  // List of SSH keys
  sshkeys() []privatekey
  // Group that user is a member of
  group(gid) group
}

// Private Key Resource
privatekey {
  // PEM data
  pem string
  // Key path on disk (deprecated, use file instead)
  path string
  // File on disk for this private key
  file file
  encrypted bool
}

// Users configured on this system
users {
  []user
}

// List of SSH Authorized Keys
authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  path string
  file file
  content(file) string
}

// SSH authorized keys entry
authorizedkeys.entry @defaults("key") {
  line int
  type string
  key string
  label string
  options []string
  file file
}

// Group on this system
group @defaults("name gid") {
  init(id string)
  // Group ID
  gid int
  // Group's Security Identifier (Windows)
  sid string
  // Name of this group
  name string
  // Users who are members of this group
  members() []user
}

// Groups configured on this system
groups {
  []group
}

// Package on the platform or OS
package @defaults("name version") {
  // May be initialized with the name only, in which case it will look up
  // the package with the given name on the system.
  init(name string)

  // Name of the package
  name string
  // Current version of the package
  version string
  // Architecture of this package
  arch string
  // Epoch of this package
  epoch string

  // Format of this package (e.g. rpm, deb)
  format string
  // Status of this package (e.g. if it is needed)
  status() string
  // Package description
  description string

  // Package origin (optional)
  origin() string

  // Available version
  available string
  // Indicates if this package is installed
  installed bool
  // Indicates if this package is outdated
  outdated() bool
}

// List of packages on this system
packages {
  []package
}

// PAM configuration (Pluggable Authentication Module)
pam.conf {
  init(path string)
  // List of files that make up the PAM configuration
  files() []file
  // The raw PAM configuration (across all files)
  content(files) string
  // Deprecated: A list of services that are configured via PAM
  services(files) map[string][]string
  // List of services with parsed entries that are configured via PAM
  entries(files) map[string][]pam.conf.serviceEntry
}

private pam.conf.serviceEntry @defaults("service module") {
  // Service file that entry is from
  service string
  // Line number in service file - used for ID
  lineNumber int
  // Type for pam entry, ie auth, password etc
  pamType string
  // Level of control, ie required, requisite, sufficient
  control string
  // PAM module used
  module string
  // Configuration options for pam service entry
  options []string
}

// SSH server resource
sshd {}

// SSH server configuration
sshd.config {
  init(path? string)
  // File of this SSH server configuration
  file() file
  // A list of lexically sorted files making up the SSH server configuration
  files(file) []file
  // Raw content of this SSH server config
  content(files) string
  // Configuration values of this SSH server
  params(content) map[string]string
  // Ciphers configured for this SSH server
  ciphers(params) []string
  // MACs configured for this SSH server
  macs(params) []string
  // Key Exchange Algorithms configured for this SSH server
  kexs(params) []string
  // Host Keys configured for this SSH server
  hostkeys(params) []string
}

// Service on this system
service @defaults("name running enabled type") {
  init(name string)
  // Name of this service
  name string
  // Service description
  description string
  // Is it installed?
  installed bool
  // Is it running?
  running bool
  // Is it enabled? (start at boot)
  enabled bool
  // Type information
  type string
  // Is it masked?
  masked bool
}

// Services configured on this system
services {
  []service
}
