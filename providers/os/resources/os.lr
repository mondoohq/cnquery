// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

import "../../core/resources/core.lr"
import "../../network/resources/network.lr"

option provider = "go.mondoo.com/cnquery/v9/providers/os"
option go_package = "go.mondoo.com/cnquery/v11/providers/os/resources"

alias os.base.command = command
alias os.base.user = user
alias os.base.group = group
alias os.base.file = file
alias os.base.packages = packages
alias os.base.service = service
alias os.base.services = services
alias os.unix.sshd = sshd

extend asset {
  // Common Platform Enumeration (CPE) for the asset
  cpes() []core.cpe
  // Advisory & vulnerability report
  // Deprecated; will be removed in version 12.0
  // use vulnmgmt instead
  vulnerabilityReport() dict
}

asset.eol @defaults("date") {
  // Documentation URL
  docsUrl string
  // Product URL
  productUrl string
  // End-of-Life date
  date time
}

// Platform end-of-life information
private mondoo.eol {
  // Product name
  product string
  // Product version
  version string
  // End-of-life date for the product
  date() time
}

// Deprecated; will be removed in version 12.0
// Use asset.eol instead.
platform.eol @defaults("date") {
  // Documentation URL
  docsUrl string
  // Product URL
  productUrl string
  // End-of-life date
  date time
}

platform {
  // Deprecated; will be removed in version 12.0
  // use vulnmgmt instead
  vulnerabilityReport() dict
}

// Vulnerability Information
vulnmgmt {
  // List of all CVEs affecting the asset
  cves() []vuln.cve
  // List of all Advisories affecting the asset
  advisories() []vuln.advisory
  // List of all packages affected by vulnerabilities
  packages() []vuln.package
  // Last time the vulnerability information was updated
  lastAssessment() time
  // Statistics about the vulnerabilities
  stats() audit.cvss
}

// CVE information
private vuln.cve @defaults("id") {
  // CVE ID
  id string
  // CVE state
  state     string
  // Summary description
  summary   string
  // Whether the CVE has a CVSS score
  unscored  bool
  // Publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS score of all assigned CVEs
  worstScore    audit.cvss
}

// Advisory information
private vuln.advisory @defaults("id") {
  // Advisory ID
  id string
  // Title of the advisory
  title string
  // Description of the advisory
  description string
  // Advisory publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS score of all assigned CVEs
  worstScore    audit.cvss
}

// Package information relevant for vulnerability management
private vuln.package @defaults("name version") {
  // Package name
  name string
  // Package version
  version string
  // Available package version
  available string
  // Architecture of this package
  arch string
}

// All platform/package advisories
platform.advisories {
  []audit.advisory
  // Worst CVSS score for all advisories
  cvss() audit.cvss
  // Statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// All platform/package CVEs
platform.cves {
  []audit.cve
  // Worst CVSS score for all CVEs
  cvss() audit.cvss
  // Statistical information: total, critical, high, medium, low, none, unknown
  stats() dict
}

// Common Vulnerability Scoring System (CVSS) score
private audit.cvss @defaults("score") {
  // CVSS score ranging from 0.0 to 10.0
  score   float
  // CVSS score represented as a vector string
  vector  string
}

// Platform/package advisory
private audit.advisory {
  // Advisory ID
  id          string
  // Mondoo advisory identifier
  mrn         string
  // Advisory title
  title       string
  // Advisory description
  description string
  // Advisory publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS score of all assigned CVEs
  worstScore    audit.cvss
}

// Common Vulnerabilities and Exposures (CVEs)
private audit.cve {
  // CVE ID
  id        string
  // Mondoo CVE identifier
  mrn       string
  // CVE state
  state     string
  // Summary description
  summary   string
  // Whether the CVE has a CVSS score
  unscored  bool
  // Publication date
  published   time
  // Last modification date
  modified    time
  // Worst CVSS score of all assigned CVEs
  worstScore    audit.cvss
}

machine {}

// SMBIOS BIOS information
machine.bios {
  // BIOS vendor
  vendor string
  // BIOS version
  version string
  // BIOS release date
  releaseDate string
}

// SMBIOS system information
machine.system {
  // Manufacturer
  manufacturer string
  // Product name
  product string
  // Version
  version string
  // Serial number
  serial string
  // UUID
  uuid string
  // SKU number
  sku string
  // Family
  family string
}

// SMBIOS baseboard (or module) information
machine.baseboard {
  // Manufacturer
  manufacturer string
  // Product
  product string
  // Version
  version string
  // Serial number
  serial string
  // Asset tag
  assetTag string
}

// SMBIOS system enclosure or chassis
machine.chassis {
  // Manufacturer
  manufacturer string
  // Version
  version string
  // Serial number
  serial string
  // Asset tag number
  assetTag string
}

// Operating system information
os {
  // Pretty hostname on macOS/Linux or device name on Windows
  name() string
  // ENV variable contents
  env() map[string]string
  // PATH variable contents
  path(env) []string
  // Current uptime
  uptime() time
  // List of available OS updates
  updates() []os.update
  // Whether a reboot is pending
  rebootpending() bool
  // Hostname for this OS
  hostname() string
  // Machine ID for this OS
  machineid() string
}

// Operating system update information
os.update @defaults("name")  {
  // Name of the update
  name string
  // Category of the update
  category string
  // Severity of the update
  severity string
  // Whether a restart is required
  restart bool
  // Package format for this update
  format string
}

os.base {
  embed machine

  // Pretty Hostname on macOS/Linux or device name on Windows
  name() string
  // ENV variable contents
  env() map[string]string
  // PATH variable contents
  path(env) []string
  // Current uptime
  uptime() time
  // List of available OS updates
  updates() []os.update
  // Whether a reboot is pending
  rebootpending() bool
  // Hostname for this OS
  hostname() string
  // User groups
  groups() groups
  // Users
  users() users
}

os.unix {
  embed os.base as base
}

os.linux {
  embed os.unix as unix

  // iptables firewall for IPv4
  iptables() iptables
  // iptables firewall for IPv6
  ip6tables() ip6tables
}

// Operating system root certificates
os.rootCertificates {
  []certificate(content)
  // List of files that define these certificates
  files []file
  content(files) []string
}

// Results of running a command on the system
command {
  init(command string)
  // Raw contents of the command
  command string
  // Standard output from running the command
  stdout(command) string
  // Standard error output from running the command
  stderr(command) string
  // Exit code the command returned
  exitcode(command) int
}

// Results of running a PowerShell script on the system
powershell {
  init(script string)
  // Raw contents of the script
  script string
  // Standard output from running the script
  stdout() string
  // Standard error output from running the script
  stderr() string
  // Exit code the script returned
  exitcode() int
}

// File on the system
file @defaults("path size permissions.string") {
  init(path string)
  // Location of the file on the system
  path string
  // Filename without path prefix of this file
  basename(path) string
  // Path to the folder containing this file
  dirname(path) string
  // Contents of this file
  content(path, exists) string
  // Whether this file exists on the system
  exists(path) bool
  // Permissions for this file
  permissions(path) file.permissions
  // Size of this file on disk
  size(path) int
  // Ownership information about the user
  user() user
  // Ownership information about the group
  group() group
  // Whether the path is empty
  empty(path) bool
}

// Access permissions for a given file
private file.permissions @defaults("string") {
  // Raw POSIX mode for the permissions
  mode int
  // Whether the file is readable by its owner
  user_readable bool
  // Whether the file is writeable by its owner
  user_writeable bool
  // Whether the file is executable by its owner
  user_executable bool
  // Whether the file is readable by members of the group
  group_readable bool
  // Whether the file is writeable by members of the group
  group_writeable bool
  // Whether the file is executable by members of the group
  group_executable bool
  // Whether the file is readable by others
  other_readable bool
  // Whether the file is writeable by others
  other_writeable bool
  // Whether the file is executable by others
  other_executable bool
  // SUID bit indicator
  suid bool
  // SGID bit indicator
  sgid bool
  // Sticky bit indicator
  sticky bool
  // Whether the file describes a directory
  isDirectory bool
  // Whether the file describes a regular file
  isFile bool
  // Whether the file is a symlink
  isSymlink bool
  // A simple printed string version of the permissions
  string() string
}

files {}

// Find files on the system
files.find {
  []file
  // Sets the starting point for the search operation
  from string
  // Whether other devices to search
  xdev bool
  // What types of files to list (directories, files, devices, etc)
  type string
  // A regular expression for the file search
  regex string
  // What permissions the file matches
  permissions int
  // Search name
  name string
}

// Parse INI files
parse.ini {
  init(path string, delimiter string)
  // Symbol that separates keys and values
  delimiter string
  // File that is parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // Map of sections and key-value pairs
  sections(content, delimiter) map[string]map[string]string
  // Map of parameters that don't belong to sections
  params(sections) map[string]string
}

// Parse JSON files
parse.json {
  init(path string)
  // File that is parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters defined in this file
  params(content) dict
}

// Parse plist files
parse.plist {
  init(path string)
  // File that is parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse YAML files
parse.yaml {
  init(path string)
  // File that is parsed
  file file
  // Raw content of the file that is parsed
  content(file) string
  // The parsed parameters that are defined in this file
  params(content) dict
}

// Parse certificates from files
parse.certificates {
  []network.certificate(content, path)
  init(path string)
  // Certificate file path
  path string
  // Certificate file
  file() file
  // Certificate file content
  content(file) string
}

// Parse OpenPGP from files
parse.openpgp {
  []network.openpgp.entity(content)
  init(path string)
  // Deprecated; use file.path instead
  path string
  // OpenPGP file
  file file
  // OpenPGP file content
  content(file) string
}

// User on this system
user @defaults("name uid gid") {
  // User ID
  uid int
  // User's group ID
  gid int
  // User's security identifier (Windows)
  sid string
  // Name of the user
  name string
  // Home folder
  home string
  // Default shell configured
  shell string
  // Whether the user is enabled
  enabled bool
  // List of authorized keys
  authorizedkeys(home) authorizedkeys
  // List of SSH keys
  sshkeys() []privatekey
  // Group of which user is a member
  group(gid) group
}

// Private key resource
privatekey {
  // PEM data
  pem string
  // Deprecated; use file instead
  path string
  // File on disk for this private key
  file file
  // Whether the file is encrypted
  encrypted bool
}

// Users configured on this system
users {
  []user
}

// List of SSH authorized keys
authorizedkeys {
  []authorizedkeys.entry(file, content)
  init(path string)
  // Path to the key file
  path string
  // Key file
  file file
  // Key file content
  content(file) string
}

// SSH authorized key
authorizedkeys.entry @defaults("key") {
  // Line of the key
  line int
  // Type of key
  type string
  // Key
  key string
  // Key label
  label string
  // Key options
  options []string
  // Key file
  file file
}

// Group on this system
group @defaults("name gid") {
  init(id string)
  // Group ID
  gid int
  // Group's security identifier (Windows)
  sid string
  // Name of this group
  name string
  // Users who are members of this group
  members() []user
}

// Groups configured on this system
groups {
  []group
}

// Package on the platform or OS
package @defaults("name version") {
  // May be initialized with the name only, in which case it will look up
  // the package with the given name on the system.
  init(name string)

  // Name of the package
  name string
  // Package description
  description string
  // Current version of the package
  version string
  // Architecture of this package
  arch string
  // Epoch of this package
  epoch string

  // Format of this package (e.g., rpm, deb)
  format string
  // Status of this package (e.g., if it is needed)
  status() string

  // Package URL
  purl string

  // Common Platform Enumeration (CPE) for the package
  cpes []core.cpe

  // Package origin, may include version if available (optional)
  origin() string

  // Available version
  available string
  // Whether the package is installed
  installed bool
  // Whether the package is outdated
  outdated() bool

  // Package files
  files() []pkgFileInfo

  // Package vendor
  vendor string
}

private pkgFileInfo @defaults("path") {
  // Path to the file
  path string
}

// List of packages on this system
packages {
  []package
}

// PAM configuration (pluggable authentication module)
pam.conf {
  init(path string)
  // List of files that make up the PAM configuration
  files() []file
  // The raw PAM configuration (across all files)
  content(files) string
  // Deprecated; list of services that are configured via PAM
  services(files) map[string][]string
  // List of services with parsed entries that are configured via PAM
  entries(files) map[string][]pam.conf.serviceEntry
}

private pam.conf.serviceEntry @defaults("service module") {
  // Service file that the entry is from
  service string
  // Line number in service file (used for ID)
  lineNumber int
  // Type for PAM entry, (i.e., auth, password, etc)
  pamType string
  // Level of control, (i.e., required, requisite, sufficient)
  control string
  // PAM module used
  module string
  // Configuration options for pam service entry
  options []string
}

// SSH server resource
sshd {}

// SSH server configuration
sshd.config {
  init(path? string)
  // File of this SSH server configuration
  file() file
  // A list of lexically sorted files making up the SSH server configuration
  files(file) []file
  // Deprecated: Please use `file.content` or `files{content}` instead. This field will be removed in v12.
  content(file) string
  // Configuration values of this SSH server
  params(file) map[string]string
  // Blocks with match conditions in this SSH server config
  blocks(file) []sshd.config.matchBlock
  // Ciphers configured for this SSH server
  ciphers(params) []string
  // MACs configured for this SSH server
  macs(params) []string
  // Key exchange algorithms configured for this SSH server
  kexs(params) []string
  // Host keys configured for this SSH server
  hostkeys(params) []string
  // PermitRootLogin setting in SSH server
  permitRootLogin(params) []string
}

private sshd.config.matchBlock @defaults("criteria") {
  // The match criteria for this block
  criteria string
  // Configuration values in this block
  params map[string]string
}

// Service on this system
service @defaults("name running enabled type") {
  init(name string)
  // Name of the service
  name string
  // Service description
  description string
  // Whether the service is installed
  installed bool
  // Whether the service is running
  running bool
  // Whether the service is enabled (start at boot)
  enabled bool
  // Type information
  type string
  // Whether the service is masked
  masked bool
}

// Services configured on this system
services {
  []service
}

// System kernel information
kernel @defaults("info") {
  // Active kernel information
  info() dict
  // Kernel parameters map
  parameters() map[string]string
  // List of kernel modules
  modules() []kernel.module
  // Installed versions
  installed() []dict
}

// System kernel module information
kernel.module @defaults("name loaded") {
  init(name string)

  // Name of the kernel module
  name string
  // Size of the kernel module
  size string
  // Whether the module is loaded
  loaded bool
}

// Docker host resource
docker {
  // List all Docker images
  images() []docker.image
  // List all Docker containers
  containers() []docker.container
}

// Dockerfile resource
docker.file @defaults("file.path instructions.length stages.length") {
  init(path string)
  // File information about this Dockerfile
  embed file
  // List of instructions in the order they appear
  instructions(file) dict
  // All stages included in this Dockerfile
  stages(file) []docker.file.stage
}

// Dockerfile stages
private docker.file.stage @defaults("from.name") {
  // The source of this stage, specified via `FROM` in Dockerfiles
  from docker.file.from
  // Contains the reference to the Dockerfile this stage belongs to
  file docker.file
  // Environment variables configured in the Dockerfile
  env map[string]string
  // LABEL instructions in the Dockerfile
  labels map[string]string
  // RUN instructions in this Dockerfile
  run []docker.file.run
  // CMD instructions in this Dockerfile
  cmd docker.file.run
  // USER instruction in this Dockerfile
  user docker.file.user
  // ENTRYPOINT instructions in this Dockerfile
  entrypoint docker.file.run
  // ADD instructions in this Dockerfile
  add []docker.file.add
  // COPY instructions in this Dockerfile
  copy []docker.file.copy
  // EXPOSE instructions in this Dockerfile
  expose []docker.file.expose
}

// Dockerfile USER instructions
private docker.file.user @defaults("user") {
  // Set the user name or UID
  user string
  // Set the user group or GID (optional)
  group string
}

// Dockerfile EXPOSE instruction
private docker.file.expose @defaults("port protocol") {
  // Port that is exposed
  port int
  // Protocol that is exposed (evaluates to `tcp` if not specified)
  protocol string
}

// Dockerfile FROM instructions
private docker.file.from @defaults("name image tag") {
  platform string
  image string
  tag string
  digest string
  name string
}

// Dockerfile RUN instructions
private docker.file.run @defaults("script") {
  script string
}

// Dockerfile ADD instructions
private docker.file.add @defaults("src dst") {
  src []string
  dst string
  chown string
  chmod string
}

// Dockerfile COPY instructions
private docker.file.copy @defaults("src dst") {
  // Optional source to copy file(s) from when not using the default build context
  src []string
  // The destination in the image for the file(s)
  dst string
  // Ownership of the file(s)
  chown string
  // Octal permissions of the file(s)
  chmod string
}

// Docker image
docker.image {
  // Image ID
  id string
  // Image size in kilobytes
  size int
  // Virtual image size in kilobytes
  virtualsize int
  // Tag key value pairs
  tags []string
  // Labels key value pairs
  labels map[string]string
}

// Docker container
docker.container {
  embed os.linux as os

  // Container ID
  id string
  // Container command
  command string
  // Container image
  image string
  // Image ID
  imageid string
  // Container names
  names []string
  // Container state
  state string
  // Status message
  status string
  // Label key value pairs
  labels map[string]string
}

// IPv4 tables
iptables {
  // IPv4 input chain stats
  input() []iptables.entry
  // IPv4 output chain stats
  output() []iptables.entry
}

// IPv6 tables
ip6tables {
  // IPv6 input chain stats
  input() []iptables.entry
  // IPv6 output chain stats
  output() []iptables.entry
}

iptables.entry {
  // Line number of statistic, which is used to create the ID
  lineNumber int
  // Packets from iptable
  packets int
  // How large the packet is in octets, including headers and everything.
  bytes int
  // What to do with the packet if it matches a rule
  target string
  // Protocol of the next level layer (e.g., TCP, UDP, ICMP, etc)
  protocol string
  // IP options
  opt string
  // Input
  in string
  // Output
  out string
  // Source address field that tells the receiver where the packet came from
  source string
  //The destination IP address of the traffic, subnet of the traffic, or anywhere
  destination string
  // Optional settings within the header such as internet timestamps, SACK, or record route options
  options string
  // Input or output, which is used to create the ID
  chain string
}

// Process on this system
process @defaults("executable pid state") {
  init(pid int)
  // PID (process ID)
  pid int
  // State of the process (i.e., sleeping, running, etc)
  state() string
  // Executable that is running this process
  executable() string
  // Full command used to run this process
  command() string
  // Map of additional flags
  flags() map[string]string
}

// Processes available on this system
processes {
  []process
}

// TCP/IP port on the system
port @defaults("port protocol address process.executable") {
  // Protocol of this port
  protocol string
  // Port number
  port int
  // Local address of this port
  address string
  // User configured for this port
  user user
  // Process that is connected to this port
  process() process
  // State of this open port
  state string
  // Remote address connected to this port
  remoteAddress string
  // Remote port connected to this port
  remotePort int
  // TLS on this port, if it is available
  tls(address, port, protocol) network.tls
}

// TCP/IP ports on the system
ports {
  []port
  // All listening ports
  listening() []port
}

// Windows audit policies
auditpol {
  []auditpol.entry
}

// Windows audit policy
auditpol.entry  @defaults("subcategory inclusionsetting exclusionsetting") {
  // Machine name
  machinename string
  // Policy target
  policytarget string
  // Subcategory
  subcategory string
  // Subcategory GUID
  subcategoryguid string
  // Inclusive setting
  inclusionsetting string
  // Exclusive settings
  exclusionsetting string
}

// Windows local security policy
secpol {
  // System access
  systemaccess() map[string]string
  // Event audit
  eventaudit() map[string]string
  // Registry values
  registryvalues() map[string]string
  // Privilege rights
  privilegerights() map[string][]string
}

// NTP service configuration
ntp.conf {
  init(path string)
  // File of the NTP service configuration
  file() file
  // Raw contents of the NTP service configuration
  content(file) string
  // List of settings for the NTP service
  settings(content) []string
  // List of servers for the NTP service
  servers(settings) []string
  // List of access control restrictions for the NTP service
  restrict(settings) []string
  // Additional information for clock drivers
  fudge(settings) []string
}

// rsyslog service configuration
rsyslog.conf {
  init(path string)
  // Path for the main rsyslog file and search
  path() string
  // Files that make up this rsyslog service configuration
  files(path) []file
  // Raw contents of this rsyslog service configuration
  content(files) string
  // List of settings for this rsyslog service
  settings(content) []string
}

// Shadow password suite configuration
logindefs {
  init(path string)
  // Current configuration file for resource
  file() file
  // Content of the configuration file
  content(file) string
  // Parsed logindef parameter
  params(content) map[string]string
}

// Unix list block devices
lsblk {
  []lsblk.entry
}

// Unix block device
lsblk.entry {
  // Device name
  name string
  // File system type
  fstype string
  // Label for the file system
  label string
  // UUID for the file system
  uuid string
  // Mount points for the device
  mountpoints  []string
}

// Unix mounted file system
mount {
  []mount.point
}

// Unix mount point
mount.point @defaults("device path fstype") {
  init(path string)
  // Device
  device string
  // Path
  path string
  // File system type
  fstype string
  // Mount options
  options map[string]string
  // Whether the mount point is mounted
  mounted bool
}

// Shadowed password file
shadow {
  []shadow.entry
}

// Shadowed password file entry
shadow.entry {
  // User
  user string
  // Password
  password string
  // Date of last password change
  lastchanged time
  // Minimum password age in days
  mindays int
  // Maximum password age in days
  maxdays int
  // Password warning period in days
  warndays int
  // Password inactivity period in days
  inactivedays int
  // Account expiration date
  expirydates string
  // Reserved field
  reserved string
}

// Yum package manager resource
yum {
  // Variables defined in Yum configuration files (/etc/yum.conf and all .repo files in the /etc/yum.repos.d/)
  vars() map[string]string
  // List of all configured Yum repositories
  repos() []yum.repo
}

// Yum repository resource
yum.repo {
  init(id string)
  // Repository ID
  id string
  // Human-readable repository name
  name string
  // Repository status
  status string
  // URL where the repodata directory of a repository is located
  baseurl []string
  // Indicator when the repository will expire
  expire string
  // Deprecated; use file.path
  filename string
  // Repository configuration file path
  file file
  // Repository revision
  revision string
  // Packages in repository
  pkgs string
  // File size of this repository
  size string
  // Mirrors for this repository
  mirrors string
  // Whether the repository is used as package source
  enabled() bool
}

// Windows registry key
registrykey @defaults("path") {
  init(path string)
  // Registry key path
  path string
  // Whether the property exists
  exists() bool
  // Deprecated; use `items` instead
  properties() map[string]string
  // Registry key items
  items() []registrykey.property
  // Registry key children
  children() []string
}

// Windows registry key property
registrykey.property @defaults("path name") {
  init(path string, name string)
  // Registry key path
  path string
  // Registry key name
  name string
  // Whether the property exists
  exists() bool
  // Deprecated; use `data` instead
  value() string
  // Registry key type
  type() string
  // Registry key data
  data() dict
}

// Container image
container.image @defaults("name") {
  // Image reference
  reference string
  // Fully-qualified reference name
  name string
  // Identifier of type-specific portion of the image reference
  identifier string
  // Identifier type: tag or digest
  identifierType string
  // Repository used for the container image
  repository() container.repository
}

// Container registry repository
container.repository {
  // Container registry repository name
  name string
  // URL scheme
  scheme string
  // Container registry repository URL
  fullName string
  // Container registry URL
  registry string
}

// Kubernetes kubelet configuration
kubelet {
  // Kubelet config file
  configFile file
  // Kubelet process
  process process
  // Combination of config file parameters and CLI parameters
  configuration() dict
}

// Python package details found on the operating system image
python {
  init(path? string)
  // Path to a specific site-packages location to exclusively scan (empty means scan default locations)
  path string

  // List of all discovered packages
  packages() []python.package

  // List of all packages that were specifically installed (i.e., not auto-installed as a dependency)
  toplevel() []python.package
}

// Python package information
python.package @defaults("name version") {
  init(path? string)
  // ID is the python.package unique identifier
  id string
  // Name of the package
  name() string
  // File containing the package metadata
  file file
  // Version of the package
  version() string
  // License of the package
  license() string
  // Author of the package
  author() string
  // Author email of the package
  authorEmail() string
  // Short package description
  summary() string
  // Package URL
  purl() string
  // Common Platform Enumeration (CPE) for the package
  cpes() []core.cpe
  // List of packages depended on
  dependencies() []python.package
}

// npm packages
npm.packages {
  []npm.package

  init(path? string)

  // optional path to search for packages
  path string

  // Root Package (may not exist)
  root() npm.package

  // List of direct dependencies
  directDependencies() []npm.package

  // Files used to determine the packages
  files() []pkgFileInfo
}

npm.package  @defaults("name version") {
  // ID is the npm.package unique identifier
  id string
  // Name of the package
  name() string
  // Version of the package
  version() string
  // Package URL
  purl() string
  // Common Platform Enumeration (CPE) for the package
  cpes() []core.cpe
  // Package files
  files() []pkgFileInfo
}

// macOS specific resources
macos {
  // macOS user defaults
  userPreferences() map[string]dict
  // macOS user defaults for current host
  userHostPreferences() map[string]dict
  // macOS global account policies
  globalAccountPolicies() dict
}

// macOS application layer firewall (ALF) service
macos.alf {
  // Whether the firewall service allows downloaded software to receive incoming connections
  allowDownloadSignedEnabled int
  // Whether the firewall service allows built-in software to receive incoming connections for signed software
  allowSignedEnabled int
  // Whether the firewall is unloaded
  firewallUnload int
  // Whether the firewall is enabled
  globalState int
  // Whether alf.log is used
  loggingEnabled int
  // Logging flags
  loggingOption int
  // Whether the firewall service is in stealth mode
  stealthEnabled int
  // ALF version
  version string
  // Service exceptions
  exceptions []dict
  // Services explicitly allowed to perform networking
  explicitAuths []string
  // Applications with exceptions for network blocking
  applications []dict
}

// macOS Time Machine
macos.timemachine {
  // macOS Time Machine preferences
  preferences() dict
}

// macOS machine settings
// Note: The resource requires at least admin privileges to run.
macos.systemsetup {
  // Current date
  date() string
  // Current time in 24-hour format
  time() string
  // Current time zone
  timeZone() string
  // Whether network time is on or off
  usingNetworkTime() string
  // Configured network time server
  networkTimeServer() string
  // Amount of idle time until the machine sleeps
  sleep() []string
  // Amount of idle time until the display sleeps
  displaySleep() string
  // Amount of idle time until the hard disk sleeps
  harddiskSleep() string
  // Whether wake on modem is on or off
  wakeOnModem() string
  // Whether wake on network access is on or off
  wakeOnNetworkAccess() string
  // Whether restart on power failure is on or off
  restartPowerFailure() string
  // Whether restart on freeze is on or off
  restartFreeze() string
  // Whether the power button can sleep the computer
  allowPowerButtonToSleepComputer() string
  // Whether remote login (SSH) is on or off
  remoteLogin() string
  // Whether remote Apple events are on or off
  remoteAppleEvents() string
  // Computer name
  computerName() string
  // Local subnet name
  localSubnetName() string
  // Current startup disk
  startupDisk() string
  // Number of seconds after which the computer will start up after a power failure
  waitForStartupAfterPowerFailure() string
  // Whether the keyboard is disabled when the X Serve enclosure lock is engaged
  disableKeyboardWhenEnclosureLockIsEngaged() string
}

// Windows-specific resource to get operating system details
windows {
  // A consolidated object of system and operating system properties
  // see https://docs.microsoft.com/en-us/dotnet/api/microsoft.powershell.commands.computerinfo?view=powershellsdk-1.1.0 for more information
  computerInfo() dict

  // Hotfixes installed on the computer
  hotfixes() []windows.hotfix

  // Deprecated. Use `windows.serverFeatures` instead
  features() []windows.feature

  // Information about Windows Server roles, role services, and features that are available for installation and installed on a specified server.
  serverFeatures() []windows.serverFeature

  // Information about optional features in a Windows image.
  optionalFeatures() []windows.optionalFeature
}

// Windows hotfix resource
windows.hotfix {
  init(hotfixId string)
  // Hotfix ID
  hotfixId string
  // Type of hotfix (e.g., Update or Security Update)
  description string
  // Reference to knowledge base
  caption string
  // Date when the hotfix was installed
  installedOn time
  // User that installed the hotfix
  installedBy string
}

// Deprecated. Use `windows.serverFeature` instead
// Windows feature resource
private windows.feature {
  init(name string)
  // Feature full path
  path string
  // Command IDs of role, role service, or feature
  name string
  // Feature name
  displayName string
  // Feature description
  description string
  // Whether the feature is installed
  installed bool
  // Feature installation state
  installState int
}

// Windows Server feature resource
private windows.serverFeature @defaults("name") {
  init(name string)
  // Feature full path
  path string
  // Command IDs of role, role service, or feature
  name string
  // Feature name
  displayName string
  // Feature description
  description string
  // Whether the feature is installed
  installed bool
  // Feature installation state
  installState int
}

// Windows optional feature resource (desktop-only)
private windows.optionalFeature @defaults("name") {
  init(name string)
  // Command ID of optional feature
  name string
  // Feature name
  displayName string
  // Feature description
  description string
  // Whether the feature is enabled
  enabled bool
  // Feature installation state
  state int
}

// Windows Firewall resource
windows.firewall {
  // Global firewall settings
  settings() dict
  // Settings that apply to the per-profile configurations of the Windows Firewall with Advanced Security
  profiles() []windows.firewall.profile
  // Firewall rules
  rules() []windows.firewall.rule
}

// Windows Firewall profile entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallprofile
windows.firewall.profile {
  instanceID string
  // Name of the profile
  name string
  // Whether the firewall is enabled on this profile
  enabled int
  // Default action for inbound traffic
  defaultInboundAction int
  // Default action for outbound traffic
  defaultOutboundAction int
  // Whether administrators can create firewall rules that allow unsolicited inbound traffic (if 0, such rules are ignored)
  allowInboundRules int
  // Whether local firewall rules should merge into the effective policy along with group policy settings
  allowLocalFirewallRules int
  // Whether local IPsec rules should merge into the effective policy along with rules from group policy
  allowLocalIPsecRules int
  // Whether to respect user allowed applications created in the legacy firewall
  allowUserApps int
  // Whether to respect globally opened ports created in the legacy firewall
  allowUserPorts int
  // Whether to allow unicast responses to multicast traffic
  allowUnicastResponseToMulticast int
  // Whether to notify users when an application listens on a port that is closed
  notifyOnListen int
  // Whether to use stealth mode for IPsec-protected traffic
  enableStealthModeForIPsec int
  // Maximum size the log file can reach before being rotated
  logMaxSizeKilobytes int
  // Whether to log allowed packets
  logAllowed int
  // Whether to log blocked traffic
  logBlocked int
  // Whether to log an event when rules are ignored
  logIgnored int
  // Filename in which to store the firewall log
  logFileName string
}

// Windows Firewall rule entry
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wfascimprov/msft-netfirewallrule
windows.firewall.rule {
  // A string that uniquely identifies this instance within the policy store
  instanceID string
  // Name of the rule
  name string
  // Localized name of this rule
  displayName string
  // Brief description of the rule
  description string
  // The group that this rule belongs to
  displayGroup string
  // Whether this rule is administratively enabled or disabled
  // Values: enabled (1), disabled (2)
  enabled int
  // Specifies which direction of traffic to match with this rule
  // Values: inbound (1), outbound (2)
  direction int
  // Specifies the action to take on traffic that matches this rule
  action int
  // Specifies how this firewall rule will handle edge traversal cases
  // Values: block (0), allow (1), defer to user (2), defer to app (3)
  edgeTraversalPolicy int
  // Whether to group UDP packets into conversations based on the local address, local port, and remote port
  looseSourceMapping bool
  // Whether to group UDP packets into conversations based only on the local address and port
  localOnlyMapping bool
  // PrimaryStatus provides a high level status value
  // Values: unknown (0), OK (1), degraded (2), error (3)
  primaryStatus int
  // Detailed status of the rule
  status string
  // Whether this object is retrieved from the ActiveStore
  enforcementStatus string
  // Contains the path to the policy store where this rule originally came from
  policyStoreSource string
  // Describes the type of policy store where this rule originally came from
  policyStoreSourceType int
}

// Windows BitLocker
windows.bitlocker {
  volumes() []windows.bitlocker.volume
}

// Windows BitLocker volume
windows.bitlocker.volume {
  // Unique identifier for the volume
  deviceID string
  // Drive letter of the volume
  driveLetter string
  // Status of the encryption or decryption on the volume
  conversionStatus dict
  // Encryption algorithm and key size used on the volume
  encryptionMethod dict
  // Whether the contents of the volume are accessible from Windows
  // 0 = Full contents of the volume are accessible
  // 1 = All or a portion of the contents of the volume are not accessible
  lockStatus int
  // Persistent identifier for the volume on this system
  persistentVolumeID string
  // Status of the volume, whether or not BitLocker is protecting the volume
  // 0 = Protection off
  // 1 = Protection on
  // 2 = Protection unknown
  protectionStatus dict
  // BitLocker Full Volume Encryption metadata version of the volume
  version dict
}

windows.security {
  products() []windows.security.product
}

// Private Windows security product
private windows.security.product {
  // Type of product
  type string
  // Product GUID
  guid string
  // Product name
  name string
  // Product state
  state int
  // Product state
  productState string
  // Signature state
  signatureState string
  // Time stamp
  timestamp time
}

// Health of the Windows security provider
windows.security.health {
  // Firewall information
  firewall dict
  // Automatic update information
  autoUpdate dict
  // Antivirus information
  antiVirus dict
  // Spyware information
  antiSpyware dict
  // Internet settings information
  internetSettings dict
  // User account control information
  uac dict
  // Security Center service information
  securityCenterService dict
}
