// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"

	"go.mondoo.com/cnquery/v9/llx"
	"go.mondoo.com/cnquery/v9/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v9/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"terraform": {
			// to override args, implement: initTerraform(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraform,
		},
		"terraform.file": {
			// to override args, implement: initTerraformFile(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformFile,
		},
		"terraform.fileposition": {
			// to override args, implement: initTerraformFileposition(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformFileposition,
		},
		"terraform.block": {
			// to override args, implement: initTerraformBlock(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformBlock,
		},
		"terraform.module": {
			// to override args, implement: initTerraformModule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformModule,
		},
		"terraform.settings": {
			Init: initTerraformSettings,
			Create: createTerraformSettings,
		},
		"terraform.state": {
			Init: initTerraformState,
			Create: createTerraformState,
		},
		"terraform.state.output": {
			Init: initTerraformStateOutput,
			Create: createTerraformStateOutput,
		},
		"terraform.state.module": {
			Init: initTerraformStateModule,
			Create: createTerraformStateModule,
		},
		"terraform.state.resource": {
			// to override args, implement: initTerraformStateResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformStateResource,
		},
		"terraform.plan": {
			Init: initTerraformPlan,
			Create: createTerraformPlan,
		},
		"terraform.plan.configuration": {
			// to override args, implement: initTerraformPlanConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformPlanConfiguration,
		},
		"terraform.plan.resourceChange": {
			// to override args, implement: initTerraformPlanResourceChange(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformPlanResourceChange,
		},
		"terraform.plan.proposedChange": {
			// to override args, implement: initTerraformPlanProposedChange(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createTerraformPlanProposedChange,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"terraform.files": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetFiles()).ToDataRes(types.Array(types.Resource("terraform.file")))
	},
	"terraform.tfvars": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetTfvars()).ToDataRes(types.Dict)
	},
	"terraform.modules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetModules()).ToDataRes(types.Array(types.Resource("terraform.module")))
	},
	"terraform.blocks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetBlocks()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.providers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetProviders()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.datasources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetDatasources()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetResources()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.variables": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetVariables()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.outputs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraform).GetOutputs()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.file.path": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFile).GetPath()).ToDataRes(types.String)
	},
	"terraform.file.blocks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFile).GetBlocks()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.fileposition.path": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFileposition).GetPath()).ToDataRes(types.String)
	},
	"terraform.fileposition.line": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFileposition).GetLine()).ToDataRes(types.Int)
	},
	"terraform.fileposition.column": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFileposition).GetColumn()).ToDataRes(types.Int)
	},
	"terraform.fileposition.byte": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformFileposition).GetByte()).ToDataRes(types.Int)
	},
	"terraform.block.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetType()).ToDataRes(types.String)
	},
	"terraform.block.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetLabels()).ToDataRes(types.Array(types.String))
	},
	"terraform.block.nameLabel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetNameLabel()).ToDataRes(types.String)
	},
	"terraform.block.start": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetStart()).ToDataRes(types.Resource("terraform.fileposition"))
	},
	"terraform.block.end": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetEnd()).ToDataRes(types.Resource("terraform.fileposition"))
	},
	"terraform.block.arguments": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetArguments()).ToDataRes(types.Dict)
	},
	"terraform.block.attributes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetAttributes()).ToDataRes(types.Dict)
	},
	"terraform.block.blocks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetBlocks()).ToDataRes(types.Array(types.Resource("terraform.block")))
	},
	"terraform.block.snippet": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformBlock).GetSnippet()).ToDataRes(types.String)
	},
	"terraform.module.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformModule).GetKey()).ToDataRes(types.String)
	},
	"terraform.module.source": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformModule).GetSource()).ToDataRes(types.String)
	},
	"terraform.module.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformModule).GetVersion()).ToDataRes(types.String)
	},
	"terraform.module.dir": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformModule).GetDir()).ToDataRes(types.String)
	},
	"terraform.module.block": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformModule).GetBlock()).ToDataRes(types.Resource("terraform.block"))
	},
	"terraform.settings.block": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformSettings).GetBlock()).ToDataRes(types.Resource("terraform.block"))
	},
	"terraform.settings.requiredProviders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformSettings).GetRequiredProviders()).ToDataRes(types.Dict)
	},
	"terraform.settings.backend": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformSettings).GetBackend()).ToDataRes(types.Dict)
	},
	"terraform.state.formatVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetFormatVersion()).ToDataRes(types.String)
	},
	"terraform.state.terraformVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetTerraformVersion()).ToDataRes(types.String)
	},
	"terraform.state.outputs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetOutputs()).ToDataRes(types.Array(types.Resource("terraform.state.output")))
	},
	"terraform.state.rootModule": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetRootModule()).ToDataRes(types.Resource("terraform.state.module"))
	},
	"terraform.state.modules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetModules()).ToDataRes(types.Array(types.Resource("terraform.state.module")))
	},
	"terraform.state.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformState).GetResources()).ToDataRes(types.Array(types.Resource("terraform.state.resource")))
	},
	"terraform.state.output.identifier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateOutput).GetIdentifier()).ToDataRes(types.String)
	},
	"terraform.state.output.sensitive": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateOutput).GetSensitive()).ToDataRes(types.Bool)
	},
	"terraform.state.output.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateOutput).GetValue()).ToDataRes(types.Dict)
	},
	"terraform.state.output.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateOutput).GetType()).ToDataRes(types.Dict)
	},
	"terraform.state.module.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateModule).GetAddress()).ToDataRes(types.String)
	},
	"terraform.state.module.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateModule).GetResources()).ToDataRes(types.Array(types.Resource("terraform.state.resource")))
	},
	"terraform.state.module.childModules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateModule).GetChildModules()).ToDataRes(types.Array(types.Resource("terraform.state.module")))
	},
	"terraform.state.resource.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetAddress()).ToDataRes(types.String)
	},
	"terraform.state.resource.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetMode()).ToDataRes(types.String)
	},
	"terraform.state.resource.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetType()).ToDataRes(types.String)
	},
	"terraform.state.resource.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetName()).ToDataRes(types.String)
	},
	"terraform.state.resource.providerName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetProviderName()).ToDataRes(types.String)
	},
	"terraform.state.resource.schemaVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetSchemaVersion()).ToDataRes(types.Int)
	},
	"terraform.state.resource.values": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetValues()).ToDataRes(types.Dict)
	},
	"terraform.state.resource.dependsOn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetDependsOn()).ToDataRes(types.Array(types.String))
	},
	"terraform.state.resource.tainted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetTainted()).ToDataRes(types.Bool)
	},
	"terraform.state.resource.deposedKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformStateResource).GetDeposedKey()).ToDataRes(types.String)
	},
	"terraform.plan.formatVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlan).GetFormatVersion()).ToDataRes(types.String)
	},
	"terraform.plan.terraformVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlan).GetTerraformVersion()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChanges": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlan).GetResourceChanges()).ToDataRes(types.Array(types.Resource("terraform.plan.resourceChange")))
	},
	"terraform.plan.configuration.providerConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanConfiguration).GetProviderConfig()).ToDataRes(types.Array(types.Dict))
	},
	"terraform.plan.configuration.resources": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanConfiguration).GetResources()).ToDataRes(types.Array(types.Dict))
	},
	"terraform.plan.resourceChange.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetAddress()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.previousAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetPreviousAddress()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.moduleAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetModuleAddress()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetMode()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetType()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetName()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.providerName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetProviderName()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.deposed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetDeposed()).ToDataRes(types.String)
	},
	"terraform.plan.resourceChange.change": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetChange()).ToDataRes(types.Resource("terraform.plan.proposedChange"))
	},
	"terraform.plan.resourceChange.actionReason": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanResourceChange).GetActionReason()).ToDataRes(types.String)
	},
	"terraform.plan.proposedChange.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetAddress()).ToDataRes(types.String)
	},
	"terraform.plan.proposedChange.actions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetActions()).ToDataRes(types.Array(types.String))
	},
	"terraform.plan.proposedChange.before": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetBefore()).ToDataRes(types.Dict)
	},
	"terraform.plan.proposedChange.after": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetAfter()).ToDataRes(types.Dict)
	},
	"terraform.plan.proposedChange.afterUnknown": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetAfterUnknown()).ToDataRes(types.Dict)
	},
	"terraform.plan.proposedChange.beforeSensitive": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetBeforeSensitive()).ToDataRes(types.Dict)
	},
	"terraform.plan.proposedChange.afterSensitive": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetAfterSensitive()).ToDataRes(types.Dict)
	},
	"terraform.plan.proposedChange.replacePaths": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlTerraformPlanProposedChange).GetReplacePaths()).ToDataRes(types.Dict)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"terraform.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraform).__id, ok = v.Value.(string)
			return
		},
	"terraform.files": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Files, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.tfvars": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Tfvars, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.modules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Modules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.blocks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Blocks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.providers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Providers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.datasources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Datasources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.variables": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Variables, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.outputs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraform).Outputs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.file.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformFile).__id, ok = v.Value.(string)
			return
		},
	"terraform.file.path": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFile).Path, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.file.blocks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFile).Blocks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.fileposition.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformFileposition).__id, ok = v.Value.(string)
			return
		},
	"terraform.fileposition.path": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFileposition).Path, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.fileposition.line": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFileposition).Line, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"terraform.fileposition.column": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFileposition).Column, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"terraform.fileposition.byte": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformFileposition).Byte, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"terraform.block.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformBlock).__id, ok = v.Value.(string)
			return
		},
	"terraform.block.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.block.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Labels, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.block.nameLabel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).NameLabel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.block.start": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Start, ok = plugin.RawToTValue[*mqlTerraformFileposition](v.Value, v.Error)
		return
	},
	"terraform.block.end": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).End, ok = plugin.RawToTValue[*mqlTerraformFileposition](v.Value, v.Error)
		return
	},
	"terraform.block.arguments": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Arguments, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.block.attributes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Attributes, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.block.blocks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Blocks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.block.snippet": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformBlock).Snippet, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.module.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformModule).__id, ok = v.Value.(string)
			return
		},
	"terraform.module.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformModule).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.module.source": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformModule).Source, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.module.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformModule).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.module.dir": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformModule).Dir, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.module.block": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformModule).Block, ok = plugin.RawToTValue[*mqlTerraformBlock](v.Value, v.Error)
		return
	},
	"terraform.settings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformSettings).__id, ok = v.Value.(string)
			return
		},
	"terraform.settings.block": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformSettings).Block, ok = plugin.RawToTValue[*mqlTerraformBlock](v.Value, v.Error)
		return
	},
	"terraform.settings.requiredProviders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformSettings).RequiredProviders, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.settings.backend": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformSettings).Backend, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformState).__id, ok = v.Value.(string)
			return
		},
	"terraform.state.formatVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).FormatVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.terraformVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).TerraformVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.outputs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).Outputs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.rootModule": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).RootModule, ok = plugin.RawToTValue[*mqlTerraformStateModule](v.Value, v.Error)
		return
	},
	"terraform.state.modules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).Modules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformState).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.output.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformStateOutput).__id, ok = v.Value.(string)
			return
		},
	"terraform.state.output.identifier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateOutput).Identifier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.output.sensitive": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateOutput).Sensitive, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"terraform.state.output.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateOutput).Value, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.output.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateOutput).Type, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.module.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformStateModule).__id, ok = v.Value.(string)
			return
		},
	"terraform.state.module.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateModule).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.module.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateModule).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.module.childModules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateModule).ChildModules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.resource.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformStateResource).__id, ok = v.Value.(string)
			return
		},
	"terraform.state.resource.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.resource.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.resource.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.resource.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.resource.providerName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).ProviderName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.state.resource.schemaVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).SchemaVersion, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"terraform.state.resource.values": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Values, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.resource.dependsOn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).DependsOn, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.state.resource.tainted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).Tainted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"terraform.state.resource.deposedKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformStateResource).DeposedKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformPlan).__id, ok = v.Value.(string)
			return
		},
	"terraform.plan.formatVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlan).FormatVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.terraformVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlan).TerraformVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChanges": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlan).ResourceChanges, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.configuration.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformPlanConfiguration).__id, ok = v.Value.(string)
			return
		},
	"terraform.plan.configuration.providerConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanConfiguration).ProviderConfig, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.configuration.resources": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanConfiguration).Resources, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformPlanResourceChange).__id, ok = v.Value.(string)
			return
		},
	"terraform.plan.resourceChange.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.previousAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).PreviousAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.moduleAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).ModuleAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.providerName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).ProviderName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.deposed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Deposed, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.change": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).Change, ok = plugin.RawToTValue[*mqlTerraformPlanProposedChange](v.Value, v.Error)
		return
	},
	"terraform.plan.resourceChange.actionReason": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanResourceChange).ActionReason, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlTerraformPlanProposedChange).__id, ok = v.Value.(string)
			return
		},
	"terraform.plan.proposedChange.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.actions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).Actions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.before": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).Before, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.after": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).After, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.afterUnknown": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).AfterUnknown, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.beforeSensitive": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).BeforeSensitive, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.afterSensitive": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).AfterSensitive, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"terraform.plan.proposedChange.replacePaths": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlTerraformPlanProposedChange).ReplacePaths, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[terraform] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[terraform] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlTerraform for the terraform resource
type mqlTerraform struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformInternal it will be used here
	Files plugin.TValue[[]interface{}]
	Tfvars plugin.TValue[interface{}]
	Modules plugin.TValue[[]interface{}]
	Blocks plugin.TValue[[]interface{}]
	Providers plugin.TValue[[]interface{}]
	Datasources plugin.TValue[[]interface{}]
	Resources plugin.TValue[[]interface{}]
	Variables plugin.TValue[[]interface{}]
	Outputs plugin.TValue[[]interface{}]
}

// createTerraform creates a new instance of this resource
func createTerraform(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraform{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraform) MqlName() string {
	return "terraform"
}

func (c *mqlTerraform) MqlID() string {
	return c.__id
}

func (c *mqlTerraform) GetFiles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Files, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "files")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.files()
	})
}

func (c *mqlTerraform) GetTfvars() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Tfvars, func() (interface{}, error) {
		return c.tfvars()
	})
}

func (c *mqlTerraform) GetModules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Modules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "modules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.modules()
	})
}

func (c *mqlTerraform) GetBlocks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Blocks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "blocks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.blocks()
	})
}

func (c *mqlTerraform) GetProviders() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Providers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "providers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.providers()
	})
}

func (c *mqlTerraform) GetDatasources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Datasources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "datasources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.datasources()
	})
}

func (c *mqlTerraform) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "resources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resources()
	})
}

func (c *mqlTerraform) GetVariables() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Variables, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "variables")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.variables()
	})
}

func (c *mqlTerraform) GetOutputs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Outputs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform", c.__id, "outputs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.outputs()
	})
}

// mqlTerraformFile for the terraform.file resource
type mqlTerraformFile struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformFileInternal it will be used here
	Path plugin.TValue[string]
	Blocks plugin.TValue[[]interface{}]
}

// createTerraformFile creates a new instance of this resource
func createTerraformFile(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformFile{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.file", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformFile) MqlName() string {
	return "terraform.file"
}

func (c *mqlTerraformFile) MqlID() string {
	return c.__id
}

func (c *mqlTerraformFile) GetPath() *plugin.TValue[string] {
	return &c.Path
}

func (c *mqlTerraformFile) GetBlocks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Blocks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.file", c.__id, "blocks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.blocks()
	})
}

// mqlTerraformFileposition for the terraform.fileposition resource
type mqlTerraformFileposition struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformFilepositionInternal it will be used here
	Path plugin.TValue[string]
	Line plugin.TValue[int64]
	Column plugin.TValue[int64]
	Byte plugin.TValue[int64]
}

// createTerraformFileposition creates a new instance of this resource
func createTerraformFileposition(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformFileposition{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.fileposition", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformFileposition) MqlName() string {
	return "terraform.fileposition"
}

func (c *mqlTerraformFileposition) MqlID() string {
	return c.__id
}

func (c *mqlTerraformFileposition) GetPath() *plugin.TValue[string] {
	return &c.Path
}

func (c *mqlTerraformFileposition) GetLine() *plugin.TValue[int64] {
	return &c.Line
}

func (c *mqlTerraformFileposition) GetColumn() *plugin.TValue[int64] {
	return &c.Column
}

func (c *mqlTerraformFileposition) GetByte() *plugin.TValue[int64] {
	return &c.Byte
}

// mqlTerraformBlock for the terraform.block resource
type mqlTerraformBlock struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlTerraformBlockInternal
	Type plugin.TValue[string]
	Labels plugin.TValue[[]interface{}]
	NameLabel plugin.TValue[string]
	Start plugin.TValue[*mqlTerraformFileposition]
	End plugin.TValue[*mqlTerraformFileposition]
	Arguments plugin.TValue[interface{}]
	Attributes plugin.TValue[interface{}]
	Blocks plugin.TValue[[]interface{}]
	Snippet plugin.TValue[string]
}

// createTerraformBlock creates a new instance of this resource
func createTerraformBlock(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformBlock{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.block", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformBlock) MqlName() string {
	return "terraform.block"
}

func (c *mqlTerraformBlock) MqlID() string {
	return c.__id
}

func (c *mqlTerraformBlock) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlTerraformBlock) GetLabels() *plugin.TValue[[]interface{}] {
	return &c.Labels
}

func (c *mqlTerraformBlock) GetNameLabel() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.NameLabel, func() (string, error) {
		return c.nameLabel()
	})
}

func (c *mqlTerraformBlock) GetStart() *plugin.TValue[*mqlTerraformFileposition] {
	return &c.Start
}

func (c *mqlTerraformBlock) GetEnd() *plugin.TValue[*mqlTerraformFileposition] {
	return &c.End
}

func (c *mqlTerraformBlock) GetArguments() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Arguments, func() (interface{}, error) {
		return c.arguments()
	})
}

func (c *mqlTerraformBlock) GetAttributes() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Attributes, func() (interface{}, error) {
		return c.attributes()
	})
}

func (c *mqlTerraformBlock) GetBlocks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Blocks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.block", c.__id, "blocks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.blocks()
	})
}

func (c *mqlTerraformBlock) GetSnippet() *plugin.TValue[string] {
	return &c.Snippet
}

// mqlTerraformModule for the terraform.module resource
type mqlTerraformModule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformModuleInternal it will be used here
	Key plugin.TValue[string]
	Source plugin.TValue[string]
	Version plugin.TValue[string]
	Dir plugin.TValue[string]
	Block plugin.TValue[*mqlTerraformBlock]
}

// createTerraformModule creates a new instance of this resource
func createTerraformModule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformModule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.module", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformModule) MqlName() string {
	return "terraform.module"
}

func (c *mqlTerraformModule) MqlID() string {
	return c.__id
}

func (c *mqlTerraformModule) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlTerraformModule) GetSource() *plugin.TValue[string] {
	return &c.Source
}

func (c *mqlTerraformModule) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlTerraformModule) GetDir() *plugin.TValue[string] {
	return &c.Dir
}

func (c *mqlTerraformModule) GetBlock() *plugin.TValue[*mqlTerraformBlock] {
	return plugin.GetOrCompute[*mqlTerraformBlock](&c.Block, func() (*mqlTerraformBlock, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.module", c.__id, "block")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlTerraformBlock), nil
			}
		}

		return c.block()
	})
}

// mqlTerraformSettings for the terraform.settings resource
type mqlTerraformSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformSettingsInternal it will be used here
	Block plugin.TValue[*mqlTerraformBlock]
	RequiredProviders plugin.TValue[interface{}]
	Backend plugin.TValue[interface{}]
}

// createTerraformSettings creates a new instance of this resource
func createTerraformSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.settings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformSettings) MqlName() string {
	return "terraform.settings"
}

func (c *mqlTerraformSettings) MqlID() string {
	return c.__id
}

func (c *mqlTerraformSettings) GetBlock() *plugin.TValue[*mqlTerraformBlock] {
	return &c.Block
}

func (c *mqlTerraformSettings) GetRequiredProviders() *plugin.TValue[interface{}] {
	return &c.RequiredProviders
}

func (c *mqlTerraformSettings) GetBackend() *plugin.TValue[interface{}] {
	return &c.Backend
}

// mqlTerraformState for the terraform.state resource
type mqlTerraformState struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformStateInternal it will be used here
	FormatVersion plugin.TValue[string]
	TerraformVersion plugin.TValue[string]
	Outputs plugin.TValue[[]interface{}]
	RootModule plugin.TValue[*mqlTerraformStateModule]
	Modules plugin.TValue[[]interface{}]
	Resources plugin.TValue[[]interface{}]
}

// createTerraformState creates a new instance of this resource
func createTerraformState(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformState{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.state", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformState) MqlName() string {
	return "terraform.state"
}

func (c *mqlTerraformState) MqlID() string {
	return c.__id
}

func (c *mqlTerraformState) GetFormatVersion() *plugin.TValue[string] {
	return &c.FormatVersion
}

func (c *mqlTerraformState) GetTerraformVersion() *plugin.TValue[string] {
	return &c.TerraformVersion
}

func (c *mqlTerraformState) GetOutputs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Outputs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state", c.__id, "outputs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.outputs()
	})
}

func (c *mqlTerraformState) GetRootModule() *plugin.TValue[*mqlTerraformStateModule] {
	return plugin.GetOrCompute[*mqlTerraformStateModule](&c.RootModule, func() (*mqlTerraformStateModule, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state", c.__id, "rootModule")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlTerraformStateModule), nil
			}
		}

		return c.rootModule()
	})
}

func (c *mqlTerraformState) GetModules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Modules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state", c.__id, "modules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.modules()
	})
}

func (c *mqlTerraformState) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state", c.__id, "resources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resources()
	})
}

// mqlTerraformStateOutput for the terraform.state.output resource
type mqlTerraformStateOutput struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlTerraformStateOutputInternal
	Identifier plugin.TValue[string]
	Sensitive plugin.TValue[bool]
	Value plugin.TValue[interface{}]
	Type plugin.TValue[interface{}]
}

// createTerraformStateOutput creates a new instance of this resource
func createTerraformStateOutput(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformStateOutput{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.state.output", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformStateOutput) MqlName() string {
	return "terraform.state.output"
}

func (c *mqlTerraformStateOutput) MqlID() string {
	return c.__id
}

func (c *mqlTerraformStateOutput) GetIdentifier() *plugin.TValue[string] {
	return &c.Identifier
}

func (c *mqlTerraformStateOutput) GetSensitive() *plugin.TValue[bool] {
	return &c.Sensitive
}

func (c *mqlTerraformStateOutput) GetValue() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Value, func() (interface{}, error) {
		return c.value()
	})
}

func (c *mqlTerraformStateOutput) GetType() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Type, func() (interface{}, error) {
		return c.compute_type()
	})
}

// mqlTerraformStateModule for the terraform.state.module resource
type mqlTerraformStateModule struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlTerraformStateModuleInternal
	Address plugin.TValue[string]
	Resources plugin.TValue[[]interface{}]
	ChildModules plugin.TValue[[]interface{}]
}

// createTerraformStateModule creates a new instance of this resource
func createTerraformStateModule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformStateModule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.state.module", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformStateModule) MqlName() string {
	return "terraform.state.module"
}

func (c *mqlTerraformStateModule) MqlID() string {
	return c.__id
}

func (c *mqlTerraformStateModule) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlTerraformStateModule) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state.module", c.__id, "resources")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resources()
	})
}

func (c *mqlTerraformStateModule) GetChildModules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ChildModules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.state.module", c.__id, "childModules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.childModules()
	})
}

// mqlTerraformStateResource for the terraform.state.resource resource
type mqlTerraformStateResource struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformStateResourceInternal it will be used here
	Address plugin.TValue[string]
	Mode plugin.TValue[string]
	Type plugin.TValue[string]
	Name plugin.TValue[string]
	ProviderName plugin.TValue[string]
	SchemaVersion plugin.TValue[int64]
	Values plugin.TValue[interface{}]
	DependsOn plugin.TValue[[]interface{}]
	Tainted plugin.TValue[bool]
	DeposedKey plugin.TValue[string]
}

// createTerraformStateResource creates a new instance of this resource
func createTerraformStateResource(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformStateResource{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.state.resource", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformStateResource) MqlName() string {
	return "terraform.state.resource"
}

func (c *mqlTerraformStateResource) MqlID() string {
	return c.__id
}

func (c *mqlTerraformStateResource) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlTerraformStateResource) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlTerraformStateResource) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlTerraformStateResource) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlTerraformStateResource) GetProviderName() *plugin.TValue[string] {
	return &c.ProviderName
}

func (c *mqlTerraformStateResource) GetSchemaVersion() *plugin.TValue[int64] {
	return &c.SchemaVersion
}

func (c *mqlTerraformStateResource) GetValues() *plugin.TValue[interface{}] {
	return &c.Values
}

func (c *mqlTerraformStateResource) GetDependsOn() *plugin.TValue[[]interface{}] {
	return &c.DependsOn
}

func (c *mqlTerraformStateResource) GetTainted() *plugin.TValue[bool] {
	return &c.Tainted
}

func (c *mqlTerraformStateResource) GetDeposedKey() *plugin.TValue[string] {
	return &c.DeposedKey
}

// mqlTerraformPlan for the terraform.plan resource
type mqlTerraformPlan struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformPlanInternal it will be used here
	FormatVersion plugin.TValue[string]
	TerraformVersion plugin.TValue[string]
	ResourceChanges plugin.TValue[[]interface{}]
}

// createTerraformPlan creates a new instance of this resource
func createTerraformPlan(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformPlan{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.plan", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformPlan) MqlName() string {
	return "terraform.plan"
}

func (c *mqlTerraformPlan) MqlID() string {
	return c.__id
}

func (c *mqlTerraformPlan) GetFormatVersion() *plugin.TValue[string] {
	return &c.FormatVersion
}

func (c *mqlTerraformPlan) GetTerraformVersion() *plugin.TValue[string] {
	return &c.TerraformVersion
}

func (c *mqlTerraformPlan) GetResourceChanges() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ResourceChanges, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("terraform.plan", c.__id, "resourceChanges")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.resourceChanges()
	})
}

// mqlTerraformPlanConfiguration for the terraform.plan.configuration resource
type mqlTerraformPlanConfiguration struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformPlanConfigurationInternal it will be used here
	ProviderConfig plugin.TValue[[]interface{}]
	Resources plugin.TValue[[]interface{}]
}

// createTerraformPlanConfiguration creates a new instance of this resource
func createTerraformPlanConfiguration(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformPlanConfiguration{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.plan.configuration", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformPlanConfiguration) MqlName() string {
	return "terraform.plan.configuration"
}

func (c *mqlTerraformPlanConfiguration) MqlID() string {
	return c.__id
}

func (c *mqlTerraformPlanConfiguration) GetProviderConfig() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ProviderConfig, func() ([]interface{}, error) {
		return c.providerConfig()
	})
}

func (c *mqlTerraformPlanConfiguration) GetResources() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Resources, func() ([]interface{}, error) {
		return c.resources()
	})
}

// mqlTerraformPlanResourceChange for the terraform.plan.resourceChange resource
type mqlTerraformPlanResourceChange struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformPlanResourceChangeInternal it will be used here
	Address plugin.TValue[string]
	PreviousAddress plugin.TValue[string]
	ModuleAddress plugin.TValue[string]
	Mode plugin.TValue[string]
	Type plugin.TValue[string]
	Name plugin.TValue[string]
	ProviderName plugin.TValue[string]
	Deposed plugin.TValue[string]
	Change plugin.TValue[*mqlTerraformPlanProposedChange]
	ActionReason plugin.TValue[string]
}

// createTerraformPlanResourceChange creates a new instance of this resource
func createTerraformPlanResourceChange(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformPlanResourceChange{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.plan.resourceChange", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformPlanResourceChange) MqlName() string {
	return "terraform.plan.resourceChange"
}

func (c *mqlTerraformPlanResourceChange) MqlID() string {
	return c.__id
}

func (c *mqlTerraformPlanResourceChange) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlTerraformPlanResourceChange) GetPreviousAddress() *plugin.TValue[string] {
	return &c.PreviousAddress
}

func (c *mqlTerraformPlanResourceChange) GetModuleAddress() *plugin.TValue[string] {
	return &c.ModuleAddress
}

func (c *mqlTerraformPlanResourceChange) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlTerraformPlanResourceChange) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlTerraformPlanResourceChange) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlTerraformPlanResourceChange) GetProviderName() *plugin.TValue[string] {
	return &c.ProviderName
}

func (c *mqlTerraformPlanResourceChange) GetDeposed() *plugin.TValue[string] {
	return &c.Deposed
}

func (c *mqlTerraformPlanResourceChange) GetChange() *plugin.TValue[*mqlTerraformPlanProposedChange] {
	return &c.Change
}

func (c *mqlTerraformPlanResourceChange) GetActionReason() *plugin.TValue[string] {
	return &c.ActionReason
}

// mqlTerraformPlanProposedChange for the terraform.plan.proposedChange resource
type mqlTerraformPlanProposedChange struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlTerraformPlanProposedChangeInternal it will be used here
	Address plugin.TValue[string]
	Actions plugin.TValue[[]interface{}]
	Before plugin.TValue[interface{}]
	After plugin.TValue[interface{}]
	AfterUnknown plugin.TValue[interface{}]
	BeforeSensitive plugin.TValue[interface{}]
	AfterSensitive plugin.TValue[interface{}]
	ReplacePaths plugin.TValue[interface{}]
}

// createTerraformPlanProposedChange creates a new instance of this resource
func createTerraformPlanProposedChange(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlTerraformPlanProposedChange{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("terraform.plan.proposedChange", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlTerraformPlanProposedChange) MqlName() string {
	return "terraform.plan.proposedChange"
}

func (c *mqlTerraformPlanProposedChange) MqlID() string {
	return c.__id
}

func (c *mqlTerraformPlanProposedChange) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlTerraformPlanProposedChange) GetActions() *plugin.TValue[[]interface{}] {
	return &c.Actions
}

func (c *mqlTerraformPlanProposedChange) GetBefore() *plugin.TValue[interface{}] {
	return &c.Before
}

func (c *mqlTerraformPlanProposedChange) GetAfter() *plugin.TValue[interface{}] {
	return &c.After
}

func (c *mqlTerraformPlanProposedChange) GetAfterUnknown() *plugin.TValue[interface{}] {
	return &c.AfterUnknown
}

func (c *mqlTerraformPlanProposedChange) GetBeforeSensitive() *plugin.TValue[interface{}] {
	return &c.BeforeSensitive
}

func (c *mqlTerraformPlanProposedChange) GetAfterSensitive() *plugin.TValue[interface{}] {
	return &c.AfterSensitive
}

func (c *mqlTerraformPlanProposedChange) GetReplacePaths() *plugin.TValue[interface{}] {
	return &c.ReplacePaths
}
