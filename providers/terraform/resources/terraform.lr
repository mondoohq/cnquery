// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

option provider = "go.mondoo.com/cnquery/v9/providers/terraform"
option go_package = "go.mondoo.com/cnquery/v9/providers/terraform/resources"

// Terraform Configuration Files
terraform {
  // Access to individual files including .tf and .tf.json files
  files() []terraform.file
  // The attributes defined in .tfvars and .tfvars.json
  tfvars() dict
  // List all referenced terraform modules
  modules() []terraform.module
  // Raw HCL blocks
  blocks() []terraform.block
  // Provider blocks
  providers() []terraform.block
  // Data sources blocks
  datasources() []terraform.block
  // All blocks with type resource
  resources() []terraform.block
  // Variable blocks
  variables() []terraform.block
  // Output blocks
  outputs() []terraform.block
}

// Terraform Configuration File represents a .tf or .tf.json file
terraform.file {
  // tf or tf.json file
  path string
  // All blocks within the file
  blocks() []terraform.block
}

// Position of the Terraform configuration block in file
terraform.fileposition {
  // File path to Terraform configuration file
  path string
  // Line of the block
  line int
  // Column of the Block
  column int
  byte int
}

// Terraform Resource Block
terraform.block @defaults("type labels") {
  // Block type
  type string
  // Block Labels
  labels []string
  // Block Name Label
  nameLabel() string
  // Block Start Position
  start terraform.fileposition
  // Block End Position
  end terraform.fileposition
  // Block Arguments
  arguments() dict
  // Raw Block Attributes
  attributes() dict
  // Child Blocks
  blocks() []terraform.block
  // Related blocks
  related() []terraform.block
  // Block Snippet
  snippet string
}

// Terraform Module Block
terraform.module @defaults("key") {
  // Unique identifier for this particular module
  key string
  // Source indicates where the modules was loaded from
  source string
  // Module Version
  version string
  //  Path to the directory where the module is stored
  dir string

  // returns the block including the configuration
  block() terraform.block
}

// Terraform Settings
terraform.settings {
  // Settings Block
  block terraform.block
  // Provider Requirements
  requiredProviders dict
  // Backend configuration
  backend dict
}

// Terraform State
terraform.state {
  // Terraform state format version
  formatVersion string
  // Generated by Terraform version
  terraformVersion string
  // Output values
  outputs() []terraform.state.output
  // Root module which consists resources defined in .tf files
  rootModule() terraform.state.module
  // flat list of all modules
  modules() []terraform.state.module
  // A flat list of all resources across all modules
  resources() []terraform.state.resource
}

// Terraform State Output Values
terraform.state.output {
  init(identifier string)
  // Output identifier
  identifier string
  // Flag that indicates if the output is sensitive
  sensitive bool
  // Output value
  value() dict
  // Output value type
  type() dict
}

// Terraform State Module
terraform.state.module @defaults("address") {
  init(identifier string)
  // Module identifier address
  address string
  // Resources that describe infrastructure objects
  resources() []terraform.state.resource
  // Child Modules that are being called from this module
  childModules() []terraform.state.module
}

// Terraform State Resource
terraform.state.resource @defaults("name") {
  // Address is the absolute resource address
  address string
  // Mode can be "managed" or "data"
  mode string
  // Resource type
  type string
  // Resource name
  name string
  // Terraform provider
  providerName string
  // SchemaVersion indicates which version of the resource type schema the "values" property conforms to.
  schemaVersion int
  // Attribute values
  values dict
  // DependsOn contains a list of the resource's dependencies.
  dependsOn []string
  // Tainted is true if the resource is tainted in terraform state.
  tainted bool
  // Deposed is set if the resource is deposed in terraform state.
  deposedKey string
}

// Terraform Plan
terraform.plan {
  // Terraform plan format version
  formatVersion string
  // Generated by Terraform version
  terraformVersion string
  // Resource changes
  resourceChanges() []terraform.plan.resourceChange
}

// Terraform plan configuration
terraform.plan.configuration {
  // Provider configuration
  providerConfig() []dict
  // Root module resource configuration
  resources() []dict
}

// Terraform Plan Resource Change
terraform.plan.resourceChange @defaults("type name") {
  // Resource address
  address string
  // Resource previous address
  previousAddress string
  // Resource module address
  moduleAddress string
  // Resource mode
  mode string
  // Resource type
  type string
  // Resource name
  name string
  // Provider name
  providerName string
  // Indicates that this action applies to a "deposed" object
  deposed string
  // Change that will be made to this object
  change terraform.plan.proposedChange
  // Resource action reason
  actionReason string
}

// Terraform Plan Proposed Change
terraform.plan.proposedChange @defaults("actions after") {
  // Resource address
  address string
  // Actions that wil be taken for on the object
  actions []string
  // Resource before values
  before dict
  // Resource after values
  after dict

  afterUnknown dict
  beforeSensitive dict
  afterSensitive dict
  replacePaths dict
}
