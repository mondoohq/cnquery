// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"
	"time"

	"github.com/rs/zerolog/log"
	"go.mondoo.com/cnquery/v12/llx"
	"go.mondoo.com/cnquery/v12/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v12/types"
)

// The MQL type names exposed as public consts for ease of reference.
const (
	ResourceVirustotal       string = "virustotal"
	ResourceVirustotalDomain string = "virustotal.domain"
	ResourceVirustotalIp     string = "virustotal.ip"
	ResourceVirustotalFile   string = "virustotal.file"
	ResourceVirustotalHash   string = "virustotal.hash"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory{
		"virustotal": {
			// to override args, implement: initVirustotal(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVirustotal,
		},
		"virustotal.domain": {
			Init:   initVirustotalDomain,
			Create: createVirustotalDomain,
		},
		"virustotal.ip": {
			Init:   initVirustotalIp,
			Create: createVirustotalIp,
		},
		"virustotal.file": {
			Init:   initVirustotalFile,
			Create: createVirustotalFile,
		},
		"virustotal.hash": {
			Init:   initVirustotalHash,
			Create: createVirustotalHash,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			mqlId := res.MqlID()
			if mqlId == "" {
				log.Debug().Msgf("resource %s has no MQL ID defined, this is usually an issue with the resource, please open a GitHub issue at https://github.com/mondoohq/cnquery/issues", name)
			}
			id := name + "\x00" + mqlId
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	mqlId := res.MqlID()
	if mqlId == "" {
		log.Debug().Msgf("resource %s has no MQL ID defined, this is usually an issue with the resource, please open a GitHub issue at https://github.com/mondoohq/cnquery/issues", name)
	}
	id := name + "\x00" + mqlId
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	mqlId := res.MqlID()
	if mqlId == "" {
		log.Debug().Msgf("resource %s has no MQL ID defined, this is usually an issue with the resource, please open a GitHub issue at https://github.com/mondoohq/cnquery/issues", name)
	}
	id := name + "\x00" + mqlId
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"virustotal.domain.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalDomain).GetName()).ToDataRes(types.String)
	},
	"virustotal.domain.reputation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalDomain).GetReputation()).ToDataRes(types.Int)
	},
	"virustotal.domain.categories": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalDomain).GetCategories()).ToDataRes(types.Map(types.String, types.String))
	},
	"virustotal.domain.lastAnalysisStats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalDomain).GetLastAnalysisStats()).ToDataRes(types.Map(types.String, types.Int))
	},
	"virustotal.domain.lastAnalysisDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalDomain).GetLastAnalysisDate()).ToDataRes(types.Time)
	},
	"virustotal.ip.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetAddress()).ToDataRes(types.String)
	},
	"virustotal.ip.reputation": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetReputation()).ToDataRes(types.Int)
	},
	"virustotal.ip.country": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetCountry()).ToDataRes(types.String)
	},
	"virustotal.ip.asOwner": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetAsOwner()).ToDataRes(types.String)
	},
	"virustotal.ip.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetNetwork()).ToDataRes(types.String)
	},
	"virustotal.ip.lastAnalysisStats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetLastAnalysisStats()).ToDataRes(types.Map(types.String, types.Int))
	},
	"virustotal.ip.lastAnalysisDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalIp).GetLastAnalysisDate()).ToDataRes(types.Time)
	},
	"virustotal.file.path": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalFile).GetPath()).ToDataRes(types.String)
	},
	"virustotal.file.hash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalFile).GetHash()).ToDataRes(types.String)
	},
	"virustotal.file.detections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalFile).GetDetections()).ToDataRes(types.Int)
	},
	"virustotal.file.lastAnalysisStats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalFile).GetLastAnalysisStats()).ToDataRes(types.Map(types.String, types.Int))
	},
	"virustotal.file.lastAnalysisDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalFile).GetLastAnalysisDate()).ToDataRes(types.Time)
	},
	"virustotal.hash.hash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalHash).GetHash()).ToDataRes(types.String)
	},
	"virustotal.hash.detections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalHash).GetDetections()).ToDataRes(types.Int)
	},
	"virustotal.hash.lastAnalysisStats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalHash).GetLastAnalysisStats()).ToDataRes(types.Map(types.String, types.Int))
	},
	"virustotal.hash.lastAnalysisDate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVirustotalHash).GetLastAnalysisDate()).ToDataRes(types.Time)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool{
	"virustotal.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotal).__id, ok = v.Value.(string)
		return
	},
	"virustotal.domain.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).__id, ok = v.Value.(string)
		return
	},
	"virustotal.domain.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.domain.reputation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).Reputation, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"virustotal.domain.categories": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).Categories, ok = plugin.RawToTValue[map[string]any](v.Value, v.Error)
		return
	},
	"virustotal.domain.lastAnalysisStats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).LastAnalysisStats, ok = plugin.RawToTValue[map[string]any](v.Value, v.Error)
		return
	},
	"virustotal.domain.lastAnalysisDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalDomain).LastAnalysisDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"virustotal.ip.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).__id, ok = v.Value.(string)
		return
	},
	"virustotal.ip.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.ip.reputation": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).Reputation, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"virustotal.ip.country": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).Country, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.ip.asOwner": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).AsOwner, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.ip.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).Network, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.ip.lastAnalysisStats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).LastAnalysisStats, ok = plugin.RawToTValue[map[string]any](v.Value, v.Error)
		return
	},
	"virustotal.ip.lastAnalysisDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalIp).LastAnalysisDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"virustotal.file.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).__id, ok = v.Value.(string)
		return
	},
	"virustotal.file.path": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).Path, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.file.hash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).Hash, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.file.detections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).Detections, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"virustotal.file.lastAnalysisStats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).LastAnalysisStats, ok = plugin.RawToTValue[map[string]any](v.Value, v.Error)
		return
	},
	"virustotal.file.lastAnalysisDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalFile).LastAnalysisDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"virustotal.hash.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalHash).__id, ok = v.Value.(string)
		return
	},
	"virustotal.hash.hash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalHash).Hash, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"virustotal.hash.detections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalHash).Detections, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"virustotal.hash.lastAnalysisStats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalHash).LastAnalysisStats, ok = plugin.RawToTValue[map[string]any](v.Value, v.Error)
		return
	},
	"virustotal.hash.lastAnalysisDate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVirustotalHash).LastAnalysisDate, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName()+"."+field]
	if !ok {
		return errors.New("[virustotal] cannot set '" + field + "' in resource '" + resource.MqlName() + "', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[virustotal] cannot set '" + field + "' in resource '" + resource.MqlName() + "', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlVirustotal for the virustotal resource
type mqlVirustotal struct {
	MqlRuntime *plugin.Runtime
	__id       string
	// optional: if you define mqlVirustotalInternal it will be used here
}

// createVirustotal creates a new instance of this resource
func createVirustotal(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVirustotal{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
		res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("virustotal", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVirustotal) MqlName() string {
	return "virustotal"
}

func (c *mqlVirustotal) MqlID() string {
	return c.__id
}

// mqlVirustotalDomain for the virustotal.domain resource
type mqlVirustotalDomain struct {
	MqlRuntime *plugin.Runtime
	__id       string
	// optional: if you define mqlVirustotalDomainInternal it will be used here
	Name              plugin.TValue[string]
	Reputation        plugin.TValue[int64]
	Categories        plugin.TValue[map[string]any]
	LastAnalysisStats plugin.TValue[map[string]any]
	LastAnalysisDate  plugin.TValue[*time.Time]
}

// createVirustotalDomain creates a new instance of this resource
func createVirustotalDomain(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVirustotalDomain{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
		res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("virustotal.domain", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVirustotalDomain) MqlName() string {
	return "virustotal.domain"
}

func (c *mqlVirustotalDomain) MqlID() string {
	return c.__id
}

func (c *mqlVirustotalDomain) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVirustotalDomain) GetReputation() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.Reputation, func() (int64, error) {
		return c.reputation()
	})
}

func (c *mqlVirustotalDomain) GetCategories() *plugin.TValue[map[string]any] {
	return plugin.GetOrCompute[map[string]any](&c.Categories, func() (map[string]any, error) {
		return c.categories()
	})
}

func (c *mqlVirustotalDomain) GetLastAnalysisStats() *plugin.TValue[map[string]any] {
	return plugin.GetOrCompute[map[string]any](&c.LastAnalysisStats, func() (map[string]any, error) {
		return c.lastAnalysisStats()
	})
}

func (c *mqlVirustotalDomain) GetLastAnalysisDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.LastAnalysisDate, func() (*time.Time, error) {
		return c.lastAnalysisDate()
	})
}

// mqlVirustotalIp for the virustotal.ip resource
type mqlVirustotalIp struct {
	MqlRuntime *plugin.Runtime
	__id       string
	// optional: if you define mqlVirustotalIpInternal it will be used here
	Address           plugin.TValue[string]
	Reputation        plugin.TValue[int64]
	Country           plugin.TValue[string]
	AsOwner           plugin.TValue[string]
	Network           plugin.TValue[string]
	LastAnalysisStats plugin.TValue[map[string]any]
	LastAnalysisDate  plugin.TValue[*time.Time]
}

// createVirustotalIp creates a new instance of this resource
func createVirustotalIp(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVirustotalIp{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
		res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("virustotal.ip", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVirustotalIp) MqlName() string {
	return "virustotal.ip"
}

func (c *mqlVirustotalIp) MqlID() string {
	return c.__id
}

func (c *mqlVirustotalIp) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlVirustotalIp) GetReputation() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.Reputation, func() (int64, error) {
		return c.reputation()
	})
}

func (c *mqlVirustotalIp) GetCountry() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Country, func() (string, error) {
		return c.country()
	})
}

func (c *mqlVirustotalIp) GetAsOwner() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.AsOwner, func() (string, error) {
		return c.asOwner()
	})
}

func (c *mqlVirustotalIp) GetNetwork() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Network, func() (string, error) {
		return c.network()
	})
}

func (c *mqlVirustotalIp) GetLastAnalysisStats() *plugin.TValue[map[string]any] {
	return plugin.GetOrCompute[map[string]any](&c.LastAnalysisStats, func() (map[string]any, error) {
		return c.lastAnalysisStats()
	})
}

func (c *mqlVirustotalIp) GetLastAnalysisDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.LastAnalysisDate, func() (*time.Time, error) {
		return c.lastAnalysisDate()
	})
}

// mqlVirustotalFile for the virustotal.file resource
type mqlVirustotalFile struct {
	MqlRuntime *plugin.Runtime
	__id       string
	// optional: if you define mqlVirustotalFileInternal it will be used here
	Path              plugin.TValue[string]
	Hash              plugin.TValue[string]
	Detections        plugin.TValue[int64]
	LastAnalysisStats plugin.TValue[map[string]any]
	LastAnalysisDate  plugin.TValue[*time.Time]
}

// createVirustotalFile creates a new instance of this resource
func createVirustotalFile(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVirustotalFile{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
		res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("virustotal.file", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVirustotalFile) MqlName() string {
	return "virustotal.file"
}

func (c *mqlVirustotalFile) MqlID() string {
	return c.__id
}

func (c *mqlVirustotalFile) GetPath() *plugin.TValue[string] {
	return &c.Path
}

func (c *mqlVirustotalFile) GetHash() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Hash, func() (string, error) {
		return c.hash()
	})
}

func (c *mqlVirustotalFile) GetDetections() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.Detections, func() (int64, error) {
		return c.detections()
	})
}

func (c *mqlVirustotalFile) GetLastAnalysisStats() *plugin.TValue[map[string]any] {
	return plugin.GetOrCompute[map[string]any](&c.LastAnalysisStats, func() (map[string]any, error) {
		return c.lastAnalysisStats()
	})
}

func (c *mqlVirustotalFile) GetLastAnalysisDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.LastAnalysisDate, func() (*time.Time, error) {
		return c.lastAnalysisDate()
	})
}

// mqlVirustotalHash for the virustotal.hash resource
type mqlVirustotalHash struct {
	MqlRuntime *plugin.Runtime
	__id       string
	// optional: if you define mqlVirustotalHashInternal it will be used here
	Hash              plugin.TValue[string]
	Detections        plugin.TValue[int64]
	LastAnalysisStats plugin.TValue[map[string]any]
	LastAnalysisDate  plugin.TValue[*time.Time]
}

// createVirustotalHash creates a new instance of this resource
func createVirustotalHash(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVirustotalHash{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
		res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("virustotal.hash", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVirustotalHash) MqlName() string {
	return "virustotal.hash"
}

func (c *mqlVirustotalHash) MqlID() string {
	return c.__id
}

func (c *mqlVirustotalHash) GetHash() *plugin.TValue[string] {
	return &c.Hash
}

func (c *mqlVirustotalHash) GetDetections() *plugin.TValue[int64] {
	return plugin.GetOrCompute[int64](&c.Detections, func() (int64, error) {
		return c.detections()
	})
}

func (c *mqlVirustotalHash) GetLastAnalysisStats() *plugin.TValue[map[string]any] {
	return plugin.GetOrCompute[map[string]any](&c.LastAnalysisStats, func() (map[string]any, error) {
		return c.lastAnalysisStats()
	})
}

func (c *mqlVirustotalHash) GetLastAnalysisDate() *plugin.TValue[*time.Time] {
	return plugin.GetOrCompute[*time.Time](&c.LastAnalysisDate, func() (*time.Time, error) {
		return c.lastAnalysisDate()
	})
}
