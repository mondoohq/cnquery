// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by resources. DO NOT EDIT.

package resources

import (
	"errors"

	"go.mondoo.com/cnquery/v10/llx"
	"go.mondoo.com/cnquery/v10/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/v10/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"vcd": {
			// to override args, implement: initVcd(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcd,
		},
		"vcd.organization": {
			// to override args, implement: initVcdOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdOrganization,
		},
		"vcd.organization.ldapSettings": {
			// to override args, implement: initVcdOrganizationLdapSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdOrganizationLdapSettings,
		},
		"vcd.vdcProvider": {
			// to override args, implement: initVcdVdcProvider(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdVdcProvider,
		},
		"vcd.networkPool": {
			// to override args, implement: initVcdNetworkPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdNetworkPool,
		},
		"vcd.externalNetwork": {
			// to override args, implement: initVcdExternalNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdExternalNetwork,
		},
		"vcd.vm": {
			// to override args, implement: initVcdVm(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdVm,
		},
		"vcd.serverInstance": {
			// to override args, implement: initVcdServerInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdServerInstance,
		},
		"vcd.right": {
			// to override args, implement: initVcdRight(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdRight,
		},
		"vcd.role": {
			// to override args, implement: initVcdRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdRole,
		},
		"vcd.vdc": {
			// to override args, implement: initVcdVdc(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdVdc,
		},
		"vcd.vdcGroup": {
			// to override args, implement: initVcdVdcGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createVcdVdcGroup,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources.Get(id); ok {
				return x, nil
			}
			runtime.Resources.Set(id, res)
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources.Get(id); ok {
		return x, nil
	}

	runtime.Resources.Set(id, res)
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"vcd.organizations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcd).GetOrganizations()).ToDataRes(types.Array(types.Resource("vcd.organization")))
	},
	"vcd.providerVDCs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcd).GetProviderVDCs()).ToDataRes(types.Array(types.Resource("vcd.vdcProvider")))
	},
	"vcd.networkPools": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcd).GetNetworkPools()).ToDataRes(types.Array(types.Resource("vcd.networkPool")))
	},
	"vcd.externalNetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcd).GetExternalNetworks()).ToDataRes(types.Array(types.Resource("vcd.externalNetwork")))
	},
	"vcd.serverInstances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcd).GetServerInstances()).ToDataRes(types.Array(types.Resource("vcd.serverInstance")))
	},
	"vcd.organization.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetId()).ToDataRes(types.String)
	},
	"vcd.organization.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetName()).ToDataRes(types.String)
	},
	"vcd.organization.fullName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetFullName()).ToDataRes(types.String)
	},
	"vcd.organization.isEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetIsEnabled()).ToDataRes(types.Bool)
	},
	"vcd.organization.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetDescription()).ToDataRes(types.String)
	},
	"vcd.organization.vms": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetVms()).ToDataRes(types.Array(types.Resource("vcd.vm")))
	},
	"vcd.organization.rights": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetRights()).ToDataRes(types.Array(types.Resource("vcd.right")))
	},
	"vcd.organization.vdcs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetVdcs()).ToDataRes(types.Array(types.Resource("vcd.vdc")))
	},
	"vcd.organization.vdcGroups": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetVdcGroups()).ToDataRes(types.Array(types.Resource("vcd.vdcGroup")))
	},
	"vcd.organization.roles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetRoles()).ToDataRes(types.Array(types.Resource("vcd.role")))
	},
	"vcd.organization.settings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetSettings()).ToDataRes(types.Dict)
	},
	"vcd.organization.ldapConfiguration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganization).GetLdapConfiguration()).ToDataRes(types.Resource("vcd.organization.ldapSettings"))
	},
	"vcd.organization.ldapSettings.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetId()).ToDataRes(types.String)
	},
	"vcd.organization.ldapSettings.customUsersOu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetCustomUsersOu()).ToDataRes(types.String)
	},
	"vcd.organization.ldapSettings.orgLdapMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetOrgLdapMode()).ToDataRes(types.String)
	},
	"vcd.organization.ldapSettings.hostname": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetHostname()).ToDataRes(types.String)
	},
	"vcd.organization.ldapSettings.username": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetUsername()).ToDataRes(types.String)
	},
	"vcd.organization.ldapSettings.realm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdOrganizationLdapSettings).GetRealm()).ToDataRes(types.String)
	},
	"vcd.vdcProvider.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetName()).ToDataRes(types.String)
	},
	"vcd.vdcProvider.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetStatus()).ToDataRes(types.String)
	},
	"vcd.vdcProvider.isBusy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetIsBusy()).ToDataRes(types.Bool)
	},
	"vcd.vdcProvider.isDeleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetIsDeleted()).ToDataRes(types.Bool)
	},
	"vcd.vdcProvider.isEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetIsEnabled()).ToDataRes(types.Bool)
	},
	"vcd.vdcProvider.cpuAllocationMhz": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetCpuAllocationMhz()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.cpuLimitMhz": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetCpuLimitMhz()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.cpuUsedMhz": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetCpuUsedMhz()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.numberOfDatastores": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetNumberOfDatastores()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.numberOfStorageProfiles": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetNumberOfStorageProfiles()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.numberOfVdcs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetNumberOfVdcs()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.memoryAllocationMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetMemoryAllocationMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.memoryLimitMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetMemoryLimitMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.memoryUsedMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetMemoryUsedMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.storageAllocationMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetStorageAllocationMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.storageLimitMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetStorageLimitMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.storageUsedMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetStorageUsedMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.cpuOverheadMhz": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetCpuOverheadMhz()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.storageOverheadMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetStorageOverheadMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.memoryOverheadMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetMemoryOverheadMB()).ToDataRes(types.Int)
	},
	"vcd.vdcProvider.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcProvider).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"vcd.networkPool.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdNetworkPool).GetName()).ToDataRes(types.String)
	},
	"vcd.networkPool.isBusy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdNetworkPool).GetIsBusy()).ToDataRes(types.Bool)
	},
	"vcd.networkPool.networkPoolType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdNetworkPool).GetNetworkPoolType()).ToDataRes(types.Int)
	},
	"vcd.externalNetwork.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdExternalNetwork).GetId()).ToDataRes(types.String)
	},
	"vcd.externalNetwork.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdExternalNetwork).GetName()).ToDataRes(types.String)
	},
	"vcd.externalNetwork.urn": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdExternalNetwork).GetUrn()).ToDataRes(types.String)
	},
	"vcd.externalNetwork.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdExternalNetwork).GetDescription()).ToDataRes(types.String)
	},
	"vcd.externalNetwork.configuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdExternalNetwork).GetConfiguration()).ToDataRes(types.Dict)
	},
	"vcd.vm.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetId()).ToDataRes(types.String)
	},
	"vcd.vm.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetName()).ToDataRes(types.String)
	},
	"vcd.vm.containerName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetContainerName()).ToDataRes(types.String)
	},
	"vcd.vm.containerID": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetContainerID()).ToDataRes(types.String)
	},
	"vcd.vm.ownerId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetOwnerId()).ToDataRes(types.String)
	},
	"vcd.vm.ownerName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetOwnerName()).ToDataRes(types.String)
	},
	"vcd.vm.isDeleted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsDeleted()).ToDataRes(types.Bool)
	},
	"vcd.vm.guestOs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetGuestOs()).ToDataRes(types.String)
	},
	"vcd.vm.numberOfCpus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetNumberOfCpus()).ToDataRes(types.Int)
	},
	"vcd.vm.memoryMB": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetMemoryMB()).ToDataRes(types.Int)
	},
	"vcd.vm.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetStatus()).ToDataRes(types.String)
	},
	"vcd.vm.networkName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetNetworkName()).ToDataRes(types.String)
	},
	"vcd.vm.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIpAddress()).ToDataRes(types.String)
	},
	"vcd.vm.isBusy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsBusy()).ToDataRes(types.Bool)
	},
	"vcd.vm.isDeployed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsDeployed()).ToDataRes(types.Bool)
	},
	"vcd.vm.isPublished": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsPublished()).ToDataRes(types.Bool)
	},
	"vcd.vm.catalogName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetCatalogName()).ToDataRes(types.String)
	},
	"vcd.vm.hardwareVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetHardwareVersion()).ToDataRes(types.Int)
	},
	"vcd.vm.vmToolsStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetVmToolsStatus()).ToDataRes(types.String)
	},
	"vcd.vm.isInMaintenanceMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsInMaintenanceMode()).ToDataRes(types.Bool)
	},
	"vcd.vm.isAutoNature": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsAutoNature()).ToDataRes(types.Bool)
	},
	"vcd.vm.storageProfileName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetStorageProfileName()).ToDataRes(types.String)
	},
	"vcd.vm.gcStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetGcStatus()).ToDataRes(types.String)
	},
	"vcd.vm.isComputePolicyCompliant": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsComputePolicyCompliant()).ToDataRes(types.Bool)
	},
	"vcd.vm.encrypted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetEncrypted()).ToDataRes(types.Bool)
	},
	"vcd.vm.totalStorageAllocatedMb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetTotalStorageAllocatedMb()).ToDataRes(types.Int)
	},
	"vcd.vm.isExpired": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetIsExpired()).ToDataRes(types.Bool)
	},
	"vcd.vm.hostName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVm).GetHostName()).ToDataRes(types.String)
	},
	"vcd.serverInstance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetName()).ToDataRes(types.String)
	},
	"vcd.serverInstance.isBusy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetIsBusy()).ToDataRes(types.Bool)
	},
	"vcd.serverInstance.isEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetIsEnabled()).ToDataRes(types.Bool)
	},
	"vcd.serverInstance.isSupported": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetIsSupported()).ToDataRes(types.Bool)
	},
	"vcd.serverInstance.listenerState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetListenerState()).ToDataRes(types.String)
	},
	"vcd.serverInstance.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetStatus()).ToDataRes(types.String)
	},
	"vcd.serverInstance.userName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetUserName()).ToDataRes(types.String)
	},
	"vcd.serverInstance.vcVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetVcVersion()).ToDataRes(types.String)
	},
	"vcd.serverInstance.uuid": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetUuid()).ToDataRes(types.String)
	},
	"vcd.serverInstance.vsmIP": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdServerInstance).GetVsmIP()).ToDataRes(types.String)
	},
	"vcd.right.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetId()).ToDataRes(types.String)
	},
	"vcd.right.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetName()).ToDataRes(types.String)
	},
	"vcd.right.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetDescription()).ToDataRes(types.String)
	},
	"vcd.right.bundleKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetBundleKey()).ToDataRes(types.String)
	},
	"vcd.right.category": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetCategory()).ToDataRes(types.String)
	},
	"vcd.right.serviceNamespace": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetServiceNamespace()).ToDataRes(types.String)
	},
	"vcd.right.rightType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRight).GetRightType()).ToDataRes(types.String)
	},
	"vcd.role.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRole).GetId()).ToDataRes(types.String)
	},
	"vcd.role.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRole).GetName()).ToDataRes(types.String)
	},
	"vcd.role.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdRole).GetDescription()).ToDataRes(types.String)
	},
	"vcd.vdc.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetId()).ToDataRes(types.String)
	},
	"vcd.vdc.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetName()).ToDataRes(types.String)
	},
	"vcd.vdc.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetStatus()).ToDataRes(types.Int)
	},
	"vcd.vdc.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetDescription()).ToDataRes(types.String)
	},
	"vcd.vdc.allocationModel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetAllocationModel()).ToDataRes(types.String)
	},
	"vcd.vdc.nicQuota": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetNicQuota()).ToDataRes(types.Int)
	},
	"vcd.vdc.networkQuota": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetNetworkQuota()).ToDataRes(types.Int)
	},
	"vcd.vdc.usedNetworkCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetUsedNetworkCount()).ToDataRes(types.Int)
	},
	"vcd.vdc.vmQuota": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetVmQuota()).ToDataRes(types.Int)
	},
	"vcd.vdc.isEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdc).GetIsEnabled()).ToDataRes(types.Bool)
	},
	"vcd.vdcGroup.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetName()).ToDataRes(types.String)
	},
	"vcd.vdcGroup.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetDescription()).ToDataRes(types.String)
	},
	"vcd.vdcGroup.localEgress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetLocalEgress()).ToDataRes(types.Bool)
	},
	"vcd.vdcGroup.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetStatus()).ToDataRes(types.String)
	},
	"vcd.vdcGroup.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetType()).ToDataRes(types.String)
	},
	"vcd.vdcGroup.universalNetworkingEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetUniversalNetworkingEnabled()).ToDataRes(types.Bool)
	},
	"vcd.vdcGroup.dfwEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlVcdVdcGroup).GetDfwEnabled()).ToDataRes(types.Bool)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"vcd.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcd).__id, ok = v.Value.(string)
			return
		},
	"vcd.organizations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcd).Organizations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.providerVDCs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcd).ProviderVDCs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.networkPools": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcd).NetworkPools, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.externalNetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcd).ExternalNetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.serverInstances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcd).ServerInstances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdOrganization).__id, ok = v.Value.(string)
			return
		},
	"vcd.organization.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.fullName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).FullName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.isEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).IsEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.organization.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.vms": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Vms, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.rights": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Rights, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.vdcs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Vdcs, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.vdcGroups": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).VdcGroups, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.roles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Roles, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.settings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).Settings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapConfiguration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganization).LdapConfiguration, ok = plugin.RawToTValue[*mqlVcdOrganizationLdapSettings](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdOrganizationLdapSettings).__id, ok = v.Value.(string)
			return
		},
	"vcd.organization.ldapSettings.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.customUsersOu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).CustomUsersOu, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.orgLdapMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).OrgLdapMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.hostname": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).Hostname, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.username": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).Username, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.organization.ldapSettings.realm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdOrganizationLdapSettings).Realm, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdVdcProvider).__id, ok = v.Value.(string)
			return
		},
	"vcd.vdcProvider.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.isBusy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).IsBusy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.isDeleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).IsDeleted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.isEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).IsEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.cpuAllocationMhz": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).CpuAllocationMhz, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.cpuLimitMhz": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).CpuLimitMhz, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.cpuUsedMhz": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).CpuUsedMhz, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.numberOfDatastores": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).NumberOfDatastores, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.numberOfStorageProfiles": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).NumberOfStorageProfiles, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.numberOfVdcs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).NumberOfVdcs, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.memoryAllocationMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).MemoryAllocationMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.memoryLimitMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).MemoryLimitMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.memoryUsedMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).MemoryUsedMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.storageAllocationMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).StorageAllocationMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.storageLimitMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).StorageLimitMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.storageUsedMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).StorageUsedMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.cpuOverheadMhz": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).CpuOverheadMhz, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.storageOverheadMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).StorageOverheadMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.memoryOverheadMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).MemoryOverheadMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdcProvider.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcProvider).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"vcd.networkPool.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdNetworkPool).__id, ok = v.Value.(string)
			return
		},
	"vcd.networkPool.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdNetworkPool).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.networkPool.isBusy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdNetworkPool).IsBusy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.networkPool.networkPoolType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdNetworkPool).NetworkPoolType, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.externalNetwork.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdExternalNetwork).__id, ok = v.Value.(string)
			return
		},
	"vcd.externalNetwork.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdExternalNetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.externalNetwork.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdExternalNetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.externalNetwork.urn": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdExternalNetwork).Urn, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.externalNetwork.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdExternalNetwork).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.externalNetwork.configuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdExternalNetwork).Configuration, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"vcd.vm.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdVm).__id, ok = v.Value.(string)
			return
		},
	"vcd.vm.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.containerName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).ContainerName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.containerID": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).ContainerID, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.ownerId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).OwnerId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.ownerName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).OwnerName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.isDeleted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsDeleted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.guestOs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).GuestOs, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.numberOfCpus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).NumberOfCpus, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vm.memoryMB": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).MemoryMB, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vm.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.networkName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).NetworkName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.isBusy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsBusy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.isDeployed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsDeployed, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.isPublished": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsPublished, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.catalogName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).CatalogName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.hardwareVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).HardwareVersion, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vm.vmToolsStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).VmToolsStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.isInMaintenanceMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsInMaintenanceMode, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.isAutoNature": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsAutoNature, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.storageProfileName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).StorageProfileName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.gcStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).GcStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vm.isComputePolicyCompliant": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsComputePolicyCompliant, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.encrypted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).Encrypted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.totalStorageAllocatedMb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).TotalStorageAllocatedMb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vm.isExpired": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).IsExpired, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vm.hostName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVm).HostName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdServerInstance).__id, ok = v.Value.(string)
			return
		},
	"vcd.serverInstance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.isBusy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).IsBusy, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.isEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).IsEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.isSupported": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).IsSupported, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.listenerState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).ListenerState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.userName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).UserName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.vcVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).VcVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.uuid": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).Uuid, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.serverInstance.vsmIP": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdServerInstance).VsmIP, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdRight).__id, ok = v.Value.(string)
			return
		},
	"vcd.right.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.bundleKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).BundleKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.category": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).Category, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.serviceNamespace": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).ServiceNamespace, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.right.rightType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRight).RightType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.role.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdRole).__id, ok = v.Value.(string)
			return
		},
	"vcd.role.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRole).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.role.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRole).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.role.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdRole).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdc.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdVdc).__id, ok = v.Value.(string)
			return
		},
	"vcd.vdc.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdc.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdc.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).Status, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdc.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdc.allocationModel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).AllocationModel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdc.nicQuota": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).NicQuota, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdc.networkQuota": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).NetworkQuota, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdc.usedNetworkCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).UsedNetworkCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdc.vmQuota": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).VmQuota, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"vcd.vdc.isEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdc).IsEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlVcdVdcGroup).__id, ok = v.Value.(string)
			return
		},
	"vcd.vdcGroup.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.localEgress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).LocalEgress, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.universalNetworkingEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).UniversalNetworkingEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"vcd.vdcGroup.dfwEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlVcdVdcGroup).DfwEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[vcd] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[vcd] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlVcd for the vcd resource
type mqlVcd struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdInternal it will be used here
	Organizations plugin.TValue[[]interface{}]
	ProviderVDCs plugin.TValue[[]interface{}]
	NetworkPools plugin.TValue[[]interface{}]
	ExternalNetworks plugin.TValue[[]interface{}]
	ServerInstances plugin.TValue[[]interface{}]
}

// createVcd creates a new instance of this resource
func createVcd(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcd{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcd) MqlName() string {
	return "vcd"
}

func (c *mqlVcd) MqlID() string {
	return c.__id
}

func (c *mqlVcd) GetOrganizations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Organizations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd", c.__id, "organizations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.organizations()
	})
}

func (c *mqlVcd) GetProviderVDCs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ProviderVDCs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd", c.__id, "providerVDCs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.providerVDCs()
	})
}

func (c *mqlVcd) GetNetworkPools() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.NetworkPools, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd", c.__id, "networkPools")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.networkPools()
	})
}

func (c *mqlVcd) GetExternalNetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ExternalNetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd", c.__id, "externalNetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.externalNetworks()
	})
}

func (c *mqlVcd) GetServerInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ServerInstances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd", c.__id, "serverInstances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.serverInstances()
	})
}

// mqlVcdOrganization for the vcd.organization resource
type mqlVcdOrganization struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdOrganizationInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	FullName plugin.TValue[string]
	IsEnabled plugin.TValue[bool]
	Description plugin.TValue[string]
	Vms plugin.TValue[[]interface{}]
	Rights plugin.TValue[[]interface{}]
	Vdcs plugin.TValue[[]interface{}]
	VdcGroups plugin.TValue[[]interface{}]
	Roles plugin.TValue[[]interface{}]
	Settings plugin.TValue[interface{}]
	LdapConfiguration plugin.TValue[*mqlVcdOrganizationLdapSettings]
}

// createVcdOrganization creates a new instance of this resource
func createVcdOrganization(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdOrganization{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.organization", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdOrganization) MqlName() string {
	return "vcd.organization"
}

func (c *mqlVcdOrganization) MqlID() string {
	return c.__id
}

func (c *mqlVcdOrganization) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdOrganization) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdOrganization) GetFullName() *plugin.TValue[string] {
	return &c.FullName
}

func (c *mqlVcdOrganization) GetIsEnabled() *plugin.TValue[bool] {
	return &c.IsEnabled
}

func (c *mqlVcdOrganization) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlVcdOrganization) GetVms() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vms, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "vms")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vms()
	})
}

func (c *mqlVcdOrganization) GetRights() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Rights, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "rights")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.rights()
	})
}

func (c *mqlVcdOrganization) GetVdcs() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Vdcs, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "vdcs")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vdcs()
	})
}

func (c *mqlVcdOrganization) GetVdcGroups() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.VdcGroups, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "vdcGroups")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.vdcGroups()
	})
}

func (c *mqlVcdOrganization) GetRoles() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Roles, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "roles")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.roles()
	})
}

func (c *mqlVcdOrganization) GetSettings() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Settings, func() (interface{}, error) {
		return c.settings()
	})
}

func (c *mqlVcdOrganization) GetLdapConfiguration() *plugin.TValue[*mqlVcdOrganizationLdapSettings] {
	return plugin.GetOrCompute[*mqlVcdOrganizationLdapSettings](&c.LdapConfiguration, func() (*mqlVcdOrganizationLdapSettings, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("vcd.organization", c.__id, "ldapConfiguration")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlVcdOrganizationLdapSettings), nil
			}
		}

		return c.ldapConfiguration()
	})
}

// mqlVcdOrganizationLdapSettings for the vcd.organization.ldapSettings resource
type mqlVcdOrganizationLdapSettings struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdOrganizationLdapSettingsInternal it will be used here
	Id plugin.TValue[string]
	CustomUsersOu plugin.TValue[string]
	OrgLdapMode plugin.TValue[string]
	Hostname plugin.TValue[string]
	Username plugin.TValue[string]
	Realm plugin.TValue[string]
}

// createVcdOrganizationLdapSettings creates a new instance of this resource
func createVcdOrganizationLdapSettings(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdOrganizationLdapSettings{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.organization.ldapSettings", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdOrganizationLdapSettings) MqlName() string {
	return "vcd.organization.ldapSettings"
}

func (c *mqlVcdOrganizationLdapSettings) MqlID() string {
	return c.__id
}

func (c *mqlVcdOrganizationLdapSettings) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdOrganizationLdapSettings) GetCustomUsersOu() *plugin.TValue[string] {
	return &c.CustomUsersOu
}

func (c *mqlVcdOrganizationLdapSettings) GetOrgLdapMode() *plugin.TValue[string] {
	return &c.OrgLdapMode
}

func (c *mqlVcdOrganizationLdapSettings) GetHostname() *plugin.TValue[string] {
	return &c.Hostname
}

func (c *mqlVcdOrganizationLdapSettings) GetUsername() *plugin.TValue[string] {
	return &c.Username
}

func (c *mqlVcdOrganizationLdapSettings) GetRealm() *plugin.TValue[string] {
	return &c.Realm
}

// mqlVcdVdcProvider for the vcd.vdcProvider resource
type mqlVcdVdcProvider struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdVdcProviderInternal it will be used here
	Name plugin.TValue[string]
	Status plugin.TValue[string]
	IsBusy plugin.TValue[bool]
	IsDeleted plugin.TValue[bool]
	IsEnabled plugin.TValue[bool]
	CpuAllocationMhz plugin.TValue[int64]
	CpuLimitMhz plugin.TValue[int64]
	CpuUsedMhz plugin.TValue[int64]
	NumberOfDatastores plugin.TValue[int64]
	NumberOfStorageProfiles plugin.TValue[int64]
	NumberOfVdcs plugin.TValue[int64]
	MemoryAllocationMB plugin.TValue[int64]
	MemoryLimitMB plugin.TValue[int64]
	MemoryUsedMB plugin.TValue[int64]
	StorageAllocationMB plugin.TValue[int64]
	StorageLimitMB plugin.TValue[int64]
	StorageUsedMB plugin.TValue[int64]
	CpuOverheadMhz plugin.TValue[int64]
	StorageOverheadMB plugin.TValue[int64]
	MemoryOverheadMB plugin.TValue[int64]
	Metadata plugin.TValue[map[string]interface{}]
}

// createVcdVdcProvider creates a new instance of this resource
func createVcdVdcProvider(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdVdcProvider{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.vdcProvider", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdVdcProvider) MqlName() string {
	return "vcd.vdcProvider"
}

func (c *mqlVcdVdcProvider) MqlID() string {
	return c.__id
}

func (c *mqlVcdVdcProvider) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdVdcProvider) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlVcdVdcProvider) GetIsBusy() *plugin.TValue[bool] {
	return &c.IsBusy
}

func (c *mqlVcdVdcProvider) GetIsDeleted() *plugin.TValue[bool] {
	return &c.IsDeleted
}

func (c *mqlVcdVdcProvider) GetIsEnabled() *plugin.TValue[bool] {
	return &c.IsEnabled
}

func (c *mqlVcdVdcProvider) GetCpuAllocationMhz() *plugin.TValue[int64] {
	return &c.CpuAllocationMhz
}

func (c *mqlVcdVdcProvider) GetCpuLimitMhz() *plugin.TValue[int64] {
	return &c.CpuLimitMhz
}

func (c *mqlVcdVdcProvider) GetCpuUsedMhz() *plugin.TValue[int64] {
	return &c.CpuUsedMhz
}

func (c *mqlVcdVdcProvider) GetNumberOfDatastores() *plugin.TValue[int64] {
	return &c.NumberOfDatastores
}

func (c *mqlVcdVdcProvider) GetNumberOfStorageProfiles() *plugin.TValue[int64] {
	return &c.NumberOfStorageProfiles
}

func (c *mqlVcdVdcProvider) GetNumberOfVdcs() *plugin.TValue[int64] {
	return &c.NumberOfVdcs
}

func (c *mqlVcdVdcProvider) GetMemoryAllocationMB() *plugin.TValue[int64] {
	return &c.MemoryAllocationMB
}

func (c *mqlVcdVdcProvider) GetMemoryLimitMB() *plugin.TValue[int64] {
	return &c.MemoryLimitMB
}

func (c *mqlVcdVdcProvider) GetMemoryUsedMB() *plugin.TValue[int64] {
	return &c.MemoryUsedMB
}

func (c *mqlVcdVdcProvider) GetStorageAllocationMB() *plugin.TValue[int64] {
	return &c.StorageAllocationMB
}

func (c *mqlVcdVdcProvider) GetStorageLimitMB() *plugin.TValue[int64] {
	return &c.StorageLimitMB
}

func (c *mqlVcdVdcProvider) GetStorageUsedMB() *plugin.TValue[int64] {
	return &c.StorageUsedMB
}

func (c *mqlVcdVdcProvider) GetCpuOverheadMhz() *plugin.TValue[int64] {
	return &c.CpuOverheadMhz
}

func (c *mqlVcdVdcProvider) GetStorageOverheadMB() *plugin.TValue[int64] {
	return &c.StorageOverheadMB
}

func (c *mqlVcdVdcProvider) GetMemoryOverheadMB() *plugin.TValue[int64] {
	return &c.MemoryOverheadMB
}

func (c *mqlVcdVdcProvider) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return plugin.GetOrCompute[map[string]interface{}](&c.Metadata, func() (map[string]interface{}, error) {
		return c.metadata()
	})
}

// mqlVcdNetworkPool for the vcd.networkPool resource
type mqlVcdNetworkPool struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdNetworkPoolInternal it will be used here
	Name plugin.TValue[string]
	IsBusy plugin.TValue[bool]
	NetworkPoolType plugin.TValue[int64]
}

// createVcdNetworkPool creates a new instance of this resource
func createVcdNetworkPool(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdNetworkPool{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.networkPool", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdNetworkPool) MqlName() string {
	return "vcd.networkPool"
}

func (c *mqlVcdNetworkPool) MqlID() string {
	return c.__id
}

func (c *mqlVcdNetworkPool) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdNetworkPool) GetIsBusy() *plugin.TValue[bool] {
	return &c.IsBusy
}

func (c *mqlVcdNetworkPool) GetNetworkPoolType() *plugin.TValue[int64] {
	return &c.NetworkPoolType
}

// mqlVcdExternalNetwork for the vcd.externalNetwork resource
type mqlVcdExternalNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlVcdExternalNetworkInternal
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Urn plugin.TValue[string]
	Description plugin.TValue[string]
	Configuration plugin.TValue[interface{}]
}

// createVcdExternalNetwork creates a new instance of this resource
func createVcdExternalNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdExternalNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.externalNetwork", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdExternalNetwork) MqlName() string {
	return "vcd.externalNetwork"
}

func (c *mqlVcdExternalNetwork) MqlID() string {
	return c.__id
}

func (c *mqlVcdExternalNetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdExternalNetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdExternalNetwork) GetUrn() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Urn, func() (string, error) {
		return c.urn()
	})
}

func (c *mqlVcdExternalNetwork) GetDescription() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Description, func() (string, error) {
		return c.description()
	})
}

func (c *mqlVcdExternalNetwork) GetConfiguration() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.Configuration, func() (interface{}, error) {
		return c.configuration()
	})
}

// mqlVcdVm for the vcd.vm resource
type mqlVcdVm struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdVmInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ContainerName plugin.TValue[string]
	ContainerID plugin.TValue[string]
	OwnerId plugin.TValue[string]
	OwnerName plugin.TValue[string]
	IsDeleted plugin.TValue[bool]
	GuestOs plugin.TValue[string]
	NumberOfCpus plugin.TValue[int64]
	MemoryMB plugin.TValue[int64]
	Status plugin.TValue[string]
	NetworkName plugin.TValue[string]
	IpAddress plugin.TValue[string]
	IsBusy plugin.TValue[bool]
	IsDeployed plugin.TValue[bool]
	IsPublished plugin.TValue[bool]
	CatalogName plugin.TValue[string]
	HardwareVersion plugin.TValue[int64]
	VmToolsStatus plugin.TValue[string]
	IsInMaintenanceMode plugin.TValue[bool]
	IsAutoNature plugin.TValue[bool]
	StorageProfileName plugin.TValue[string]
	GcStatus plugin.TValue[string]
	IsComputePolicyCompliant plugin.TValue[bool]
	Encrypted plugin.TValue[bool]
	TotalStorageAllocatedMb plugin.TValue[int64]
	IsExpired plugin.TValue[bool]
	HostName plugin.TValue[string]
}

// createVcdVm creates a new instance of this resource
func createVcdVm(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdVm{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.vm", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdVm) MqlName() string {
	return "vcd.vm"
}

func (c *mqlVcdVm) MqlID() string {
	return c.__id
}

func (c *mqlVcdVm) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdVm) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdVm) GetContainerName() *plugin.TValue[string] {
	return &c.ContainerName
}

func (c *mqlVcdVm) GetContainerID() *plugin.TValue[string] {
	return &c.ContainerID
}

func (c *mqlVcdVm) GetOwnerId() *plugin.TValue[string] {
	return &c.OwnerId
}

func (c *mqlVcdVm) GetOwnerName() *plugin.TValue[string] {
	return &c.OwnerName
}

func (c *mqlVcdVm) GetIsDeleted() *plugin.TValue[bool] {
	return &c.IsDeleted
}

func (c *mqlVcdVm) GetGuestOs() *plugin.TValue[string] {
	return &c.GuestOs
}

func (c *mqlVcdVm) GetNumberOfCpus() *plugin.TValue[int64] {
	return &c.NumberOfCpus
}

func (c *mqlVcdVm) GetMemoryMB() *plugin.TValue[int64] {
	return &c.MemoryMB
}

func (c *mqlVcdVm) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlVcdVm) GetNetworkName() *plugin.TValue[string] {
	return &c.NetworkName
}

func (c *mqlVcdVm) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlVcdVm) GetIsBusy() *plugin.TValue[bool] {
	return &c.IsBusy
}

func (c *mqlVcdVm) GetIsDeployed() *plugin.TValue[bool] {
	return &c.IsDeployed
}

func (c *mqlVcdVm) GetIsPublished() *plugin.TValue[bool] {
	return &c.IsPublished
}

func (c *mqlVcdVm) GetCatalogName() *plugin.TValue[string] {
	return &c.CatalogName
}

func (c *mqlVcdVm) GetHardwareVersion() *plugin.TValue[int64] {
	return &c.HardwareVersion
}

func (c *mqlVcdVm) GetVmToolsStatus() *plugin.TValue[string] {
	return &c.VmToolsStatus
}

func (c *mqlVcdVm) GetIsInMaintenanceMode() *plugin.TValue[bool] {
	return &c.IsInMaintenanceMode
}

func (c *mqlVcdVm) GetIsAutoNature() *plugin.TValue[bool] {
	return &c.IsAutoNature
}

func (c *mqlVcdVm) GetStorageProfileName() *plugin.TValue[string] {
	return &c.StorageProfileName
}

func (c *mqlVcdVm) GetGcStatus() *plugin.TValue[string] {
	return &c.GcStatus
}

func (c *mqlVcdVm) GetIsComputePolicyCompliant() *plugin.TValue[bool] {
	return &c.IsComputePolicyCompliant
}

func (c *mqlVcdVm) GetEncrypted() *plugin.TValue[bool] {
	return &c.Encrypted
}

func (c *mqlVcdVm) GetTotalStorageAllocatedMb() *plugin.TValue[int64] {
	return &c.TotalStorageAllocatedMb
}

func (c *mqlVcdVm) GetIsExpired() *plugin.TValue[bool] {
	return &c.IsExpired
}

func (c *mqlVcdVm) GetHostName() *plugin.TValue[string] {
	return &c.HostName
}

// mqlVcdServerInstance for the vcd.serverInstance resource
type mqlVcdServerInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdServerInstanceInternal it will be used here
	Name plugin.TValue[string]
	IsBusy plugin.TValue[bool]
	IsEnabled plugin.TValue[bool]
	IsSupported plugin.TValue[bool]
	ListenerState plugin.TValue[string]
	Status plugin.TValue[string]
	UserName plugin.TValue[string]
	VcVersion plugin.TValue[string]
	Uuid plugin.TValue[string]
	VsmIP plugin.TValue[string]
}

// createVcdServerInstance creates a new instance of this resource
func createVcdServerInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdServerInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.serverInstance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdServerInstance) MqlName() string {
	return "vcd.serverInstance"
}

func (c *mqlVcdServerInstance) MqlID() string {
	return c.__id
}

func (c *mqlVcdServerInstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdServerInstance) GetIsBusy() *plugin.TValue[bool] {
	return &c.IsBusy
}

func (c *mqlVcdServerInstance) GetIsEnabled() *plugin.TValue[bool] {
	return &c.IsEnabled
}

func (c *mqlVcdServerInstance) GetIsSupported() *plugin.TValue[bool] {
	return &c.IsSupported
}

func (c *mqlVcdServerInstance) GetListenerState() *plugin.TValue[string] {
	return &c.ListenerState
}

func (c *mqlVcdServerInstance) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlVcdServerInstance) GetUserName() *plugin.TValue[string] {
	return &c.UserName
}

func (c *mqlVcdServerInstance) GetVcVersion() *plugin.TValue[string] {
	return &c.VcVersion
}

func (c *mqlVcdServerInstance) GetUuid() *plugin.TValue[string] {
	return &c.Uuid
}

func (c *mqlVcdServerInstance) GetVsmIP() *plugin.TValue[string] {
	return &c.VsmIP
}

// mqlVcdRight for the vcd.right resource
type mqlVcdRight struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdRightInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	BundleKey plugin.TValue[string]
	Category plugin.TValue[string]
	ServiceNamespace plugin.TValue[string]
	RightType plugin.TValue[string]
}

// createVcdRight creates a new instance of this resource
func createVcdRight(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdRight{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.right", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdRight) MqlName() string {
	return "vcd.right"
}

func (c *mqlVcdRight) MqlID() string {
	return c.__id
}

func (c *mqlVcdRight) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdRight) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdRight) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlVcdRight) GetBundleKey() *plugin.TValue[string] {
	return &c.BundleKey
}

func (c *mqlVcdRight) GetCategory() *plugin.TValue[string] {
	return &c.Category
}

func (c *mqlVcdRight) GetServiceNamespace() *plugin.TValue[string] {
	return &c.ServiceNamespace
}

func (c *mqlVcdRight) GetRightType() *plugin.TValue[string] {
	return &c.RightType
}

// mqlVcdRole for the vcd.role resource
type mqlVcdRole struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdRoleInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
}

// createVcdRole creates a new instance of this resource
func createVcdRole(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdRole{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.role", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdRole) MqlName() string {
	return "vcd.role"
}

func (c *mqlVcdRole) MqlID() string {
	return c.__id
}

func (c *mqlVcdRole) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdRole) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdRole) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

// mqlVcdVdc for the vcd.vdc resource
type mqlVcdVdc struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlVcdVdcInternal
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Status plugin.TValue[int64]
	Description plugin.TValue[string]
	AllocationModel plugin.TValue[string]
	NicQuota plugin.TValue[int64]
	NetworkQuota plugin.TValue[int64]
	UsedNetworkCount plugin.TValue[int64]
	VmQuota plugin.TValue[int64]
	IsEnabled plugin.TValue[bool]
}

// createVcdVdc creates a new instance of this resource
func createVcdVdc(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdVdc{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.vdc", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdVdc) MqlName() string {
	return "vcd.vdc"
}

func (c *mqlVcdVdc) MqlID() string {
	return c.__id
}

func (c *mqlVcdVdc) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlVcdVdc) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdVdc) GetStatus() *plugin.TValue[int64] {
	return &c.Status
}

func (c *mqlVcdVdc) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlVcdVdc) GetAllocationModel() *plugin.TValue[string] {
	return &c.AllocationModel
}

func (c *mqlVcdVdc) GetNicQuota() *plugin.TValue[int64] {
	return &c.NicQuota
}

func (c *mqlVcdVdc) GetNetworkQuota() *plugin.TValue[int64] {
	return &c.NetworkQuota
}

func (c *mqlVcdVdc) GetUsedNetworkCount() *plugin.TValue[int64] {
	return &c.UsedNetworkCount
}

func (c *mqlVcdVdc) GetVmQuota() *plugin.TValue[int64] {
	return &c.VmQuota
}

func (c *mqlVcdVdc) GetIsEnabled() *plugin.TValue[bool] {
	return &c.IsEnabled
}

// mqlVcdVdcGroup for the vcd.vdcGroup resource
type mqlVcdVdcGroup struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlVcdVdcGroupInternal it will be used here
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	LocalEgress plugin.TValue[bool]
	Status plugin.TValue[string]
	Type plugin.TValue[string]
	UniversalNetworkingEnabled plugin.TValue[bool]
	DfwEnabled plugin.TValue[bool]
}

// createVcdVdcGroup creates a new instance of this resource
func createVcdVdcGroup(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlVcdVdcGroup{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("vcd.vdcGroup", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlVcdVdcGroup) MqlName() string {
	return "vcd.vdcGroup"
}

func (c *mqlVcdVdcGroup) MqlID() string {
	return c.__id
}

func (c *mqlVcdVdcGroup) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlVcdVdcGroup) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlVcdVdcGroup) GetLocalEgress() *plugin.TValue[bool] {
	return &c.LocalEgress
}

func (c *mqlVcdVdcGroup) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlVcdVdcGroup) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlVcdVdcGroup) GetUniversalNetworkingEnabled() *plugin.TValue[bool] {
	return &c.UniversalNetworkingEnabled
}

func (c *mqlVcdVdcGroup) GetDfwEnabled() *plugin.TValue[bool] {
	return &c.DfwEnabled
}
